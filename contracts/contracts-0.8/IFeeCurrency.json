{
  "contractName": "IFeeCurrency",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "debitGasFees",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "refundRecipient",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tipRecipient",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_gatewayFeeRecipient",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "baseFeeRecipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "refundAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "tipAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_gatewayFeeAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "baseFeeAmount",
          "type": "uint256"
        }
      ],
      "name": "creditGasFees",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"refundRecipient\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tipRecipient\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_gatewayFeeRecipient\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"baseFeeRecipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"refundAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tipAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_gatewayFeeAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"baseFeeAmount\",\"type\":\"uint256\"}],\"name\":\"creditGasFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"debitGasFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the amount of tokens owned by `account`.\"},\"creditGasFees(address,address,address,address,uint256,uint256,uint256,uint256)\":{\"params\":{\"_gatewayFeeAmount\":\"The amount of the gateway fee. Unused.\",\"_gatewayFeeRecipient\":\"The recipient of the gateway fee. Unused.\",\"baseFeeAmount\":\"The amount of the base fee.\",\"baseFeeRecipient\":\"The recipient of the base fee.\",\"refundAmount\":\"The amount to refund.\",\"refundRecipient\":\"The recipient of the refund.\",\"tipAmount\":\"The amount to tip.\",\"tipRecipient\":\"The recipient of the tip.\"}},\"totalSupply()\":{\"details\":\"Returns the amount of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"creditGasFees(address,address,address,address,uint256,uint256,uint256,uint256)\":{\"notice\":\"Called after transaction execution to refund the unused gas and credit the spent fees to the correct recipients.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"project:/contracts-0.8/stability/interfaces/IFeeCurrency.sol\":\"IFeeCurrency\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts8/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"project:/contracts-0.8/stability/interfaces/IFeeCurrency.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity ^0.8.13;\\n\\nimport \\\"@openzeppelin/contracts8/token/ERC20/IERC20.sol\\\";\\n\\ninterface IFeeCurrency is IERC20 {\\n  /*\\n       This interface should be implemented for tokens which are supposed to\\n       act as fee currencies on the Celo blockchain, meaning that they can be\\n       used to pay gas fees for CIP-64 transactions (and some older tx types).\\n       See https://github.com/celo-org/celo-proposals/blob/master/CIPs/cip-0064.md\\n\\n       Before executing a tx with non-empty feeCurrency field, the fee\\n       currency's `debitGasFees` function is called to reserve the maximum\\n       amount that tx can spend on gas. After the tx has been executed, the\\n       `creditGasFees` function is called to refund the unused gas and credit\\n       the spent fees to the correct recipients. Events which are raised inside\\n       these functions will show up for every transaction using the token as a\\n       fee currency.\\n\\n       Requirements:\\n       - The functions will be called by the blockchain client with `msg.sender\\n         == address(0)`. If this condition is not met, the functions must\\n         revert to prevent malicious users from crediting their accounts directly.\\n       - `creditGasFees` must credit all specified amounts. If it impossible to\\n         credit one of the recipients for some reason, add the amount to the\\n         value credited to the first valid recipient. This is important to keep\\n         the debited and credited amounts consistent.\\n    */\\n\\n  // Called before transaction execution to reserve the maximum amount of gas\\n  // that can be used by the transaction.\\n  // - The implementation must reduce `from`'s balance by `value`.\\n  // - Must revert if `msg.sender` is not the zero address.\\n  function debitGasFees(address from, uint256 value) external;\\n\\n  /**\\n   * Called after transaction execution to refund the unused gas and credit the\\n   * spent fees to the correct recipients.\\n   * @param refundRecipient The recipient of the refund.\\n   * @param tipRecipient The recipient of the tip.\\n   * @param _gatewayFeeRecipient The recipient of the gateway fee. Unused.\\n   * @param baseFeeRecipient The recipient of the base fee.\\n   * @param refundAmount The amount to refund.\\n   * @param tipAmount The amount to tip.\\n   * @param _gatewayFeeAmount The amount of the gateway fee. Unused.\\n   * @param baseFeeAmount The amount of the base fee.\\n   */\\n  function creditGasFees(\\n    address refundRecipient,\\n    address tipRecipient,\\n    address _gatewayFeeRecipient,\\n    address baseFeeRecipient,\\n    uint256 refundAmount,\\n    uint256 tipAmount,\\n    uint256 _gatewayFeeAmount,\\n    uint256 baseFeeAmount\\n  ) external;\\n}\\n\",\"keccak256\":\"0xd135815cf6178f7c59a196330c93a14e9eefcbdcc7e7544cc82b71bebc0d4df3\",\"license\":\"LGPL-3.0-only\"}},\"version\":1}",
  "bytecode": "0x",
  "deployedBytecode": "0x",
  "immutableReferences": {},
  "generatedSources": [],
  "deployedGeneratedSources": [],
  "sourceMap": "",
  "deployedSourceMap": "",
  "source": "// SPDX-License-Identifier: LGPL-3.0-only\npragma solidity ^0.8.13;\n\nimport \"@openzeppelin/contracts8/token/ERC20/IERC20.sol\";\n\ninterface IFeeCurrency is IERC20 {\n  /*\n       This interface should be implemented for tokens which are supposed to\n       act as fee currencies on the Celo blockchain, meaning that they can be\n       used to pay gas fees for CIP-64 transactions (and some older tx types).\n       See https://github.com/celo-org/celo-proposals/blob/master/CIPs/cip-0064.md\n\n       Before executing a tx with non-empty feeCurrency field, the fee\n       currency's `debitGasFees` function is called to reserve the maximum\n       amount that tx can spend on gas. After the tx has been executed, the\n       `creditGasFees` function is called to refund the unused gas and credit\n       the spent fees to the correct recipients. Events which are raised inside\n       these functions will show up for every transaction using the token as a\n       fee currency.\n\n       Requirements:\n       - The functions will be called by the blockchain client with `msg.sender\n         == address(0)`. If this condition is not met, the functions must\n         revert to prevent malicious users from crediting their accounts directly.\n       - `creditGasFees` must credit all specified amounts. If it impossible to\n         credit one of the recipients for some reason, add the amount to the\n         value credited to the first valid recipient. This is important to keep\n         the debited and credited amounts consistent.\n    */\n\n  // Called before transaction execution to reserve the maximum amount of gas\n  // that can be used by the transaction.\n  // - The implementation must reduce `from`'s balance by `value`.\n  // - Must revert if `msg.sender` is not the zero address.\n  function debitGasFees(address from, uint256 value) external;\n\n  /**\n   * Called after transaction execution to refund the unused gas and credit the\n   * spent fees to the correct recipients.\n   * @param refundRecipient The recipient of the refund.\n   * @param tipRecipient The recipient of the tip.\n   * @param _gatewayFeeRecipient The recipient of the gateway fee. Unused.\n   * @param baseFeeRecipient The recipient of the base fee.\n   * @param refundAmount The amount to refund.\n   * @param tipAmount The amount to tip.\n   * @param _gatewayFeeAmount The amount of the gateway fee. Unused.\n   * @param baseFeeAmount The amount of the base fee.\n   */\n  function creditGasFees(\n    address refundRecipient,\n    address tipRecipient,\n    address _gatewayFeeRecipient,\n    address baseFeeRecipient,\n    uint256 refundAmount,\n    uint256 tipAmount,\n    uint256 _gatewayFeeAmount,\n    uint256 baseFeeAmount\n  ) external;\n}\n",
  "sourcePath": "/Users/beaver/Development/temp/celo-monorepo/packages/protocol/contracts-0.8/stability/interfaces/IFeeCurrency.sol",
  "ast": {
    "absolutePath": "project:/contracts-0.8/stability/interfaces/IFeeCurrency.sol",
    "exportedSymbols": {
      "IERC20": [
        190
      ],
      "IFeeCurrency": [
        15797
      ]
    },
    "id": 15798,
    "license": "LGPL-3.0-only",
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 15766,
        "literals": [
          "solidity",
          "^",
          "0.8",
          ".13"
        ],
        "nodeType": "PragmaDirective",
        "src": "42:24:53"
      },
      {
        "absolutePath": "@openzeppelin/contracts8/token/ERC20/IERC20.sol",
        "file": "@openzeppelin/contracts8/token/ERC20/IERC20.sol",
        "id": 15767,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 15798,
        "sourceUnit": 191,
        "src": "68:57:53",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "abstract": false,
        "baseContracts": [
          {
            "baseName": {
              "id": 15768,
              "name": "IERC20",
              "nameLocations": [
                "153:6:53"
              ],
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 190,
              "src": "153:6:53"
            },
            "id": 15769,
            "nodeType": "InheritanceSpecifier",
            "src": "153:6:53"
          }
        ],
        "canonicalName": "IFeeCurrency",
        "contractDependencies": [],
        "contractKind": "interface",
        "fullyImplemented": false,
        "id": 15797,
        "linearizedBaseContracts": [
          15797,
          190
        ],
        "name": "IFeeCurrency",
        "nameLocation": "137:12:53",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "functionSelector": "58cf9672",
            "id": 15776,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "debitGasFees",
            "nameLocation": "1781:12:53",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 15774,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 15771,
                  "mutability": "mutable",
                  "name": "from",
                  "nameLocation": "1802:4:53",
                  "nodeType": "VariableDeclaration",
                  "scope": 15776,
                  "src": "1794:12:53",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 15770,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1794:7:53",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 15773,
                  "mutability": "mutable",
                  "name": "value",
                  "nameLocation": "1816:5:53",
                  "nodeType": "VariableDeclaration",
                  "scope": 15776,
                  "src": "1808:13:53",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 15772,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "1808:7:53",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1793:29:53"
            },
            "returnParameters": {
              "id": 15775,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1831:0:53"
            },
            "scope": 15797,
            "src": "1772:60:53",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "documentation": {
              "id": 15777,
              "nodeType": "StructuredDocumentation",
              "src": "1836:586:53",
              "text": " Called after transaction execution to refund the unused gas and credit the\n spent fees to the correct recipients.\n @param refundRecipient The recipient of the refund.\n @param tipRecipient The recipient of the tip.\n @param _gatewayFeeRecipient The recipient of the gateway fee. Unused.\n @param baseFeeRecipient The recipient of the base fee.\n @param refundAmount The amount to refund.\n @param tipAmount The amount to tip.\n @param _gatewayFeeAmount The amount of the gateway fee. Unused.\n @param baseFeeAmount The amount of the base fee."
            },
            "functionSelector": "6a30b253",
            "id": 15796,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "creditGasFees",
            "nameLocation": "2434:13:53",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 15794,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 15779,
                  "mutability": "mutable",
                  "name": "refundRecipient",
                  "nameLocation": "2461:15:53",
                  "nodeType": "VariableDeclaration",
                  "scope": 15796,
                  "src": "2453:23:53",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 15778,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "2453:7:53",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 15781,
                  "mutability": "mutable",
                  "name": "tipRecipient",
                  "nameLocation": "2490:12:53",
                  "nodeType": "VariableDeclaration",
                  "scope": 15796,
                  "src": "2482:20:53",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 15780,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "2482:7:53",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 15783,
                  "mutability": "mutable",
                  "name": "_gatewayFeeRecipient",
                  "nameLocation": "2516:20:53",
                  "nodeType": "VariableDeclaration",
                  "scope": 15796,
                  "src": "2508:28:53",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 15782,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "2508:7:53",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 15785,
                  "mutability": "mutable",
                  "name": "baseFeeRecipient",
                  "nameLocation": "2550:16:53",
                  "nodeType": "VariableDeclaration",
                  "scope": 15796,
                  "src": "2542:24:53",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 15784,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "2542:7:53",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 15787,
                  "mutability": "mutable",
                  "name": "refundAmount",
                  "nameLocation": "2580:12:53",
                  "nodeType": "VariableDeclaration",
                  "scope": 15796,
                  "src": "2572:20:53",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 15786,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "2572:7:53",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 15789,
                  "mutability": "mutable",
                  "name": "tipAmount",
                  "nameLocation": "2606:9:53",
                  "nodeType": "VariableDeclaration",
                  "scope": 15796,
                  "src": "2598:17:53",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 15788,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "2598:7:53",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 15791,
                  "mutability": "mutable",
                  "name": "_gatewayFeeAmount",
                  "nameLocation": "2629:17:53",
                  "nodeType": "VariableDeclaration",
                  "scope": 15796,
                  "src": "2621:25:53",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 15790,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "2621:7:53",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 15793,
                  "mutability": "mutable",
                  "name": "baseFeeAmount",
                  "nameLocation": "2660:13:53",
                  "nodeType": "VariableDeclaration",
                  "scope": 15796,
                  "src": "2652:21:53",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 15792,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "2652:7:53",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2447:230:53"
            },
            "returnParameters": {
              "id": 15795,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "2686:0:53"
            },
            "scope": 15797,
            "src": "2425:262:53",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          }
        ],
        "scope": 15798,
        "src": "127:2562:53",
        "usedErrors": []
      }
    ],
    "src": "42:2648:53"
  },
  "compiler": {
    "name": "solc",
    "version": "0.8.19+commit.7dd6d404.Emscripten.clang"
  },
  "networks": {},
  "schemaVersion": "3.4.13",
  "updatedAt": "2025-05-05T17:49:34.223Z",
  "devdoc": {
    "events": {
      "Approval(address,address,uint256)": {
        "details": "Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."
      },
      "Transfer(address,address,uint256)": {
        "details": "Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."
      }
    },
    "kind": "dev",
    "methods": {
      "allowance(address,address)": {
        "details": "Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."
      },
      "approve(address,uint256)": {
        "details": "Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event."
      },
      "balanceOf(address)": {
        "details": "Returns the amount of tokens owned by `account`."
      },
      "creditGasFees(address,address,address,address,uint256,uint256,uint256,uint256)": {
        "params": {
          "_gatewayFeeAmount": "The amount of the gateway fee. Unused.",
          "_gatewayFeeRecipient": "The recipient of the gateway fee. Unused.",
          "baseFeeAmount": "The amount of the base fee.",
          "baseFeeRecipient": "The recipient of the base fee.",
          "refundAmount": "The amount to refund.",
          "refundRecipient": "The recipient of the refund.",
          "tipAmount": "The amount to tip.",
          "tipRecipient": "The recipient of the tip."
        }
      },
      "totalSupply()": {
        "details": "Returns the amount of tokens in existence."
      },
      "transfer(address,uint256)": {
        "details": "Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
      },
      "transferFrom(address,address,uint256)": {
        "details": "Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "creditGasFees(address,address,address,address,uint256,uint256,uint256,uint256)": {
        "notice": "Called after transaction execution to refund the unused gas and credit the spent fees to the correct recipients."
      }
    },
    "version": 1
  }
}