{
  "contractName": "MockOracle",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "getExchangeRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_numerator",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_denominator",
          "type": "uint256"
        }
      ],
      "name": "setExchangeRate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"getExchangeRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_numerator\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_denominator\",\"type\":\"uint256\"}],\"name\":\"setExchangeRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"project:/contracts-0.8/common/mocks/MockOracle.sol\":\"MockOracle\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts8/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts8/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"project:/contracts-0.8/common/FeeCurrencyDirectory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../contracts/common/Initializable.sol\\\";\\nimport \\\"./interfaces/IOracle.sol\\\";\\nimport \\\"./interfaces/IFeeCurrencyDirectory.sol\\\";\\nimport \\\"./interfaces/IFeeCurrencyDirectoryInitializer.sol\\\";\\nimport \\\"@openzeppelin/contracts8/access/Ownable.sol\\\";\\n\\ncontract FeeCurrencyDirectory is\\n  IFeeCurrencyDirectory,\\n  IFeeCurrencyDirectoryInitializer,\\n  Initializable,\\n  Ownable\\n{\\n  mapping(address => CurrencyConfig) public currencies;\\n  address[] private currencyList;\\n\\n  /**\\n   * @notice Emitted when currency config is set.\\n   * @param token Address of the added currency token.\\n   * @param oracle Address of the currency token oracle.\\n   * @param intrinsicGas The intrinsic gas value for transactions.\\n   */\\n  event CurrencyConfigSet(address indexed token, address indexed oracle, uint256 intrinsicGas);\\n\\n  /**\\n   * @notice Emitted when currency is removed.\\n   * @param token Address of the removed currency token.\\n   */\\n  event CurrencyRemoved(address indexed token);\\n\\n  constructor(bool test) Initializable(test) {}\\n\\n  /**\\n   * @notice Initializes the contract with the owner set.\\n   */\\n  function initialize() public initializer {\\n    _transferOwnership(msg.sender);\\n  }\\n\\n  /**\\n   * @notice Sets the currency configuration for a token.\\n   * @dev This action can only be performed by the contract owner.\\n   * @param token The token address.\\n   * @param oracle The oracle address for price fetching.\\n   * @param intrinsicGas The intrinsic gas value for transactions.\\n   */\\n  function setCurrencyConfig(\\n    address token,\\n    address oracle,\\n    uint256 intrinsicGas\\n  ) external onlyOwner {\\n    require(oracle != address(0), \\\"Oracle address cannot be zero\\\");\\n    require(intrinsicGas > 0, \\\"Intrinsic gas cannot be zero\\\");\\n    require(currencies[token].oracle == address(0), \\\"Currency already in the directory\\\");\\n\\n    currencies[token] = CurrencyConfig({ oracle: oracle, intrinsicGas: intrinsicGas });\\n    currencyList.push(token);\\n    emit CurrencyConfigSet(token, oracle, intrinsicGas);\\n  }\\n\\n  /**\\n   * @notice Removes a token from the directory.\\n   * @dev This action can only be performed by the contract owner.\\n   * @param token The token address to remove.\\n   * @param index The index in the list of directory currencies.\\n   */\\n  function removeCurrencies(address token, uint256 index) external onlyOwner {\\n    require(index < currencyList.length, \\\"Index out of bounds\\\");\\n    require(currencyList[index] == token, \\\"Index does not match token\\\");\\n\\n    delete currencies[token];\\n    currencyList[index] = currencyList[currencyList.length - 1];\\n    currencyList.pop();\\n    emit CurrencyRemoved(token);\\n  }\\n\\n  /**\\n   * @notice Returns the storage, major, minor, and patch version of the contract.\\n   * @return Storage version of the contract.\\n   * @return Major version of the contract.\\n   * @return Minor version of the contract.\\n   * @return Patch version of the contract.\\n   */\\n  function getVersionNumber() external pure returns (uint256, uint256, uint256, uint256) {\\n    return (1, 1, 0, 0);\\n  }\\n\\n  /**\\n   * @notice Returns the list of all currency addresses.\\n   * @return An array of addresses.\\n   */\\n  function getCurrencies() public view returns (address[] memory) {\\n    return currencyList;\\n  }\\n\\n  /**\\n   * @notice Returns the configuration for a currency.\\n   * @param token The address of the token.\\n   * @return Currency configuration of the token.\\n   */\\n  function getCurrencyConfig(address token) public view returns (CurrencyConfig memory) {\\n    return currencies[token];\\n  }\\n\\n  /**\\n   * @notice Retrieves exchange rate between token and CELO.\\n   * @param token The token address whose price is to be fetched.\\n   * @return numerator The exchange rate numerator.\\n   * @return denominator The exchange rate denominator.\\n   */\\n  function getExchangeRate(\\n    address token\\n  ) public view returns (uint256 numerator, uint256 denominator) {\\n    require(currencies[token].oracle != address(0), \\\"Currency not in the directory\\\");\\n    (numerator, denominator) = IOracle(currencies[token].oracle).getExchangeRate(token);\\n  }\\n}\\n\",\"keccak256\":\"0x4fe06751c788365571db148c7baebef37dd841e1e137ba236847d7ee7a910dad\",\"license\":\"MIT\"},\"project:/contracts-0.8/common/interfaces/IFeeCurrencyDirectory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IFeeCurrencyDirectory {\\n  struct CurrencyConfig {\\n    address oracle;\\n    uint256 intrinsicGas;\\n  }\\n\\n  /**\\n   * @notice Sets the currency configuration for a token.\\n   * @dev This action can only be performed by the contract owner.\\n   * @param token The token address.\\n   * @param oracle The oracle address for price fetching.\\n   * @param intrinsicGas The intrinsic gas value for transactions.\\n   */\\n  function setCurrencyConfig(address token, address oracle, uint256 intrinsicGas) external;\\n\\n  /**\\n   * @notice Returns the list of all currency addresses.\\n   * @return An array of addresses.\\n   */\\n  function getCurrencies() external view returns (address[] memory);\\n  /**\\n   * @notice Returns the configuration for a currency.\\n   * @param token The address of the token.\\n   * @return Currency configuration of the token.\\n   */\\n  function getCurrencyConfig(address token) external view returns (CurrencyConfig memory);\\n\\n  /**\\n   * @notice Retrieves exchange rate between token and CELO.\\n   * @param token The token address whose price is to be fetched.\\n   * @return numerator The exchange rate numerator.\\n   * @return denominator The exchange rate denominator.\\n   */\\n  function getExchangeRate(\\n    address token\\n  ) external view returns (uint256 numerator, uint256 denominator);\\n}\\n\",\"keccak256\":\"0x67de62a4cd2baace51d893a35c8b7f2b47c15f67082258a6e688764d54740a56\",\"license\":\"MIT\"},\"project:/contracts-0.8/common/interfaces/IFeeCurrencyDirectoryInitializer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IFeeCurrencyDirectoryInitializer {\\n  function initialize() external;\\n}\\n\",\"keccak256\":\"0xcbfc1db1553f658cabe98a6751db700265ae90170e30f169ad40fc9a76d825b4\",\"license\":\"MIT\"},\"project:/contracts-0.8/common/interfaces/IOracle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.5.13 <0.9.0;\\n\\n/// Possibly not final version\\ninterface IOracle {\\n  function getExchangeRate(\\n    address token\\n  ) external view returns (uint256 numerator, uint256 denominator);\\n}\\n\",\"keccak256\":\"0xabf489c01ce86008d0aff7b1f8d31da44acd585c8dd44b8cd2895b633149cbe9\",\"license\":\"MIT\"},\"project:/contracts-0.8/common/mocks/MockOracle.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.8.7 <0.8.20;\\n\\nimport \\\"../../../contracts-0.8/common/FeeCurrencyDirectory.sol\\\";\\n\\ncontract MockOracle is IOracle {\\n  uint256 numerator;\\n  uint256 denominator;\\n  uint256 lastUpdateTimestamp;\\n  address token;\\n\\n  function getExchangeRate(address _token) external view returns (uint256, uint256) {\\n    require(token == _token, \\\"Token not supported\\\");\\n    return (numerator, denominator);\\n  }\\n\\n  function setExchangeRate(address _token, uint256 _numerator, uint256 _denominator) public {\\n    numerator = _numerator;\\n    denominator = _denominator;\\n    lastUpdateTimestamp = block.timestamp;\\n    token = _token;\\n  }\\n}\\n\",\"keccak256\":\"0x7f05a02d838c65b32fb2ad6a7352fffc66b00c73ca00957b2bfa7c66e6c42525\",\"license\":\"UNLICENSED\"},\"project:/contracts/common/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.5.13 <0.9.0;\\n\\n/**\\n * @title Used with proxied contracts that have an `initialize` function.\\n * @notice Ensures the `initialize` function:\\n *         - gets called only once\\n *         - cannot be called on the logic contract.\\n */\\ncontract Initializable {\\n  bool public initialized;\\n\\n  /**\\n   * @notice Ensures the initializer function cannot be called more than once.\\n   */\\n  modifier initializer() {\\n    require(!initialized, \\\"contract already initialized\\\");\\n    initialized = true;\\n    _;\\n  }\\n\\n  /**\\n   * @notice By default, ensures that the `initialize` function cannot be called\\n   * on the logic contract.\\n   * @param testingDeployment When set to true, allows the `initialize` function\\n   * to be called, which is useful in testing when not setting up with a Proxy.\\n   */\\n  constructor(bool testingDeployment) public {\\n    if (!testingDeployment) {\\n      initialized = true;\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x8de2ab8706668982998c5a995bdc3d8ff20a1ec8519bf49cec9e464f62c57bb9\",\"license\":\"LGPL-3.0-only\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506101b8806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c806358a5514f1461003b578063efb7601d1461007a575b600080fd5b61007861004936600461012d565b60009190915560015542600255600380546001600160a01b0319166001600160a01b0392909216919091179055565b005b61008d610088366004610160565b6100a6565b6040805192835260208301919091520160405180910390f35b60035460009081906001600160a01b038481169116146101025760405162461bcd60e51b8152602060048201526013602482015272151bdad95b881b9bdd081cdd5c1c1bdc9d1959606a1b604482015260640160405180910390fd5b60005460015491509150915091565b80356001600160a01b038116811461012857600080fd5b919050565b60008060006060848603121561014257600080fd5b61014b84610111565b95602085013595506040909401359392505050565b60006020828403121561017257600080fd5b61017b82610111565b939250505056fea2646970667358221220dbeaad06e9b44559baa8813c72e1ca6307379e5809916ffd143f9c321b4b970c64736f6c63430008130033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100365760003560e01c806358a5514f1461003b578063efb7601d1461007a575b600080fd5b61007861004936600461012d565b60009190915560015542600255600380546001600160a01b0319166001600160a01b0392909216919091179055565b005b61008d610088366004610160565b6100a6565b6040805192835260208301919091520160405180910390f35b60035460009081906001600160a01b038481169116146101025760405162461bcd60e51b8152602060048201526013602482015272151bdad95b881b9bdd081cdd5c1c1bdc9d1959606a1b604482015260640160405180910390fd5b60005460015491509150915091565b80356001600160a01b038116811461012857600080fd5b919050565b60008060006060848603121561014257600080fd5b61014b84610111565b95602085013595506040909401359392505050565b60006020828403121561017257600080fd5b61017b82610111565b939250505056fea2646970667358221220dbeaad06e9b44559baa8813c72e1ca6307379e5809916ffd143f9c321b4b970c64736f6c63430008130033",
  "immutableReferences": {},
  "generatedSources": [],
  "deployedGeneratedSources": [
    {
      "ast": {
        "nodeType": "YulBlock",
        "src": "0:1308:85",
        "statements": [
          {
            "nodeType": "YulBlock",
            "src": "6:3:85",
            "statements": []
          },
          {
            "body": {
              "nodeType": "YulBlock",
              "src": "63:124:85",
              "statements": [
                {
                  "nodeType": "YulAssignment",
                  "src": "73:29:85",
                  "value": {
                    "arguments": [
                      {
                        "name": "offset",
                        "nodeType": "YulIdentifier",
                        "src": "95:6:85"
                      }
                    ],
                    "functionName": {
                      "name": "calldataload",
                      "nodeType": "YulIdentifier",
                      "src": "82:12:85"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "82:20:85"
                  },
                  "variableNames": [
                    {
                      "name": "value",
                      "nodeType": "YulIdentifier",
                      "src": "73:5:85"
                    }
                  ]
                },
                {
                  "body": {
                    "nodeType": "YulBlock",
                    "src": "165:16:85",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "kind": "number",
                              "nodeType": "YulLiteral",
                              "src": "174:1:85",
                              "type": "",
                              "value": "0"
                            },
                            {
                              "kind": "number",
                              "nodeType": "YulLiteral",
                              "src": "177:1:85",
                              "type": "",
                              "value": "0"
                            }
                          ],
                          "functionName": {
                            "name": "revert",
                            "nodeType": "YulIdentifier",
                            "src": "167:6:85"
                          },
                          "nodeType": "YulFunctionCall",
                          "src": "167:12:85"
                        },
                        "nodeType": "YulExpressionStatement",
                        "src": "167:12:85"
                      }
                    ]
                  },
                  "condition": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "name": "value",
                            "nodeType": "YulIdentifier",
                            "src": "124:5:85"
                          },
                          {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "135:5:85"
                              },
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "150:3:85",
                                        "type": "",
                                        "value": "160"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "155:1:85",
                                        "type": "",
                                        "value": "1"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "shl",
                                      "nodeType": "YulIdentifier",
                                      "src": "146:3:85"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "146:11:85"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "159:1:85",
                                    "type": "",
                                    "value": "1"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "142:3:85"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "142:19:85"
                              }
                            ],
                            "functionName": {
                              "name": "and",
                              "nodeType": "YulIdentifier",
                              "src": "131:3:85"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "131:31:85"
                          }
                        ],
                        "functionName": {
                          "name": "eq",
                          "nodeType": "YulIdentifier",
                          "src": "121:2:85"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "121:42:85"
                      }
                    ],
                    "functionName": {
                      "name": "iszero",
                      "nodeType": "YulIdentifier",
                      "src": "114:6:85"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "114:50:85"
                  },
                  "nodeType": "YulIf",
                  "src": "111:70:85"
                }
              ]
            },
            "name": "abi_decode_address",
            "nodeType": "YulFunctionDefinition",
            "parameters": [
              {
                "name": "offset",
                "nodeType": "YulTypedName",
                "src": "42:6:85",
                "type": ""
              }
            ],
            "returnVariables": [
              {
                "name": "value",
                "nodeType": "YulTypedName",
                "src": "53:5:85",
                "type": ""
              }
            ],
            "src": "14:173:85"
          },
          {
            "body": {
              "nodeType": "YulBlock",
              "src": "296:218:85",
              "statements": [
                {
                  "body": {
                    "nodeType": "YulBlock",
                    "src": "342:16:85",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "kind": "number",
                              "nodeType": "YulLiteral",
                              "src": "351:1:85",
                              "type": "",
                              "value": "0"
                            },
                            {
                              "kind": "number",
                              "nodeType": "YulLiteral",
                              "src": "354:1:85",
                              "type": "",
                              "value": "0"
                            }
                          ],
                          "functionName": {
                            "name": "revert",
                            "nodeType": "YulIdentifier",
                            "src": "344:6:85"
                          },
                          "nodeType": "YulFunctionCall",
                          "src": "344:12:85"
                        },
                        "nodeType": "YulExpressionStatement",
                        "src": "344:12:85"
                      }
                    ]
                  },
                  "condition": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "name": "dataEnd",
                            "nodeType": "YulIdentifier",
                            "src": "317:7:85"
                          },
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "326:9:85"
                          }
                        ],
                        "functionName": {
                          "name": "sub",
                          "nodeType": "YulIdentifier",
                          "src": "313:3:85"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "313:23:85"
                      },
                      {
                        "kind": "number",
                        "nodeType": "YulLiteral",
                        "src": "338:2:85",
                        "type": "",
                        "value": "96"
                      }
                    ],
                    "functionName": {
                      "name": "slt",
                      "nodeType": "YulIdentifier",
                      "src": "309:3:85"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "309:32:85"
                  },
                  "nodeType": "YulIf",
                  "src": "306:52:85"
                },
                {
                  "nodeType": "YulAssignment",
                  "src": "367:39:85",
                  "value": {
                    "arguments": [
                      {
                        "name": "headStart",
                        "nodeType": "YulIdentifier",
                        "src": "396:9:85"
                      }
                    ],
                    "functionName": {
                      "name": "abi_decode_address",
                      "nodeType": "YulIdentifier",
                      "src": "377:18:85"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "377:29:85"
                  },
                  "variableNames": [
                    {
                      "name": "value0",
                      "nodeType": "YulIdentifier",
                      "src": "367:6:85"
                    }
                  ]
                },
                {
                  "nodeType": "YulAssignment",
                  "src": "415:42:85",
                  "value": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "442:9:85"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "453:2:85",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "438:3:85"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "438:18:85"
                      }
                    ],
                    "functionName": {
                      "name": "calldataload",
                      "nodeType": "YulIdentifier",
                      "src": "425:12:85"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "425:32:85"
                  },
                  "variableNames": [
                    {
                      "name": "value1",
                      "nodeType": "YulIdentifier",
                      "src": "415:6:85"
                    }
                  ]
                },
                {
                  "nodeType": "YulAssignment",
                  "src": "466:42:85",
                  "value": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "493:9:85"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "504:2:85",
                            "type": "",
                            "value": "64"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "489:3:85"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "489:18:85"
                      }
                    ],
                    "functionName": {
                      "name": "calldataload",
                      "nodeType": "YulIdentifier",
                      "src": "476:12:85"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "476:32:85"
                  },
                  "variableNames": [
                    {
                      "name": "value2",
                      "nodeType": "YulIdentifier",
                      "src": "466:6:85"
                    }
                  ]
                }
              ]
            },
            "name": "abi_decode_tuple_t_addresst_uint256t_uint256",
            "nodeType": "YulFunctionDefinition",
            "parameters": [
              {
                "name": "headStart",
                "nodeType": "YulTypedName",
                "src": "246:9:85",
                "type": ""
              },
              {
                "name": "dataEnd",
                "nodeType": "YulTypedName",
                "src": "257:7:85",
                "type": ""
              }
            ],
            "returnVariables": [
              {
                "name": "value0",
                "nodeType": "YulTypedName",
                "src": "269:6:85",
                "type": ""
              },
              {
                "name": "value1",
                "nodeType": "YulTypedName",
                "src": "277:6:85",
                "type": ""
              },
              {
                "name": "value2",
                "nodeType": "YulTypedName",
                "src": "285:6:85",
                "type": ""
              }
            ],
            "src": "192:322:85"
          },
          {
            "body": {
              "nodeType": "YulBlock",
              "src": "589:116:85",
              "statements": [
                {
                  "body": {
                    "nodeType": "YulBlock",
                    "src": "635:16:85",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "kind": "number",
                              "nodeType": "YulLiteral",
                              "src": "644:1:85",
                              "type": "",
                              "value": "0"
                            },
                            {
                              "kind": "number",
                              "nodeType": "YulLiteral",
                              "src": "647:1:85",
                              "type": "",
                              "value": "0"
                            }
                          ],
                          "functionName": {
                            "name": "revert",
                            "nodeType": "YulIdentifier",
                            "src": "637:6:85"
                          },
                          "nodeType": "YulFunctionCall",
                          "src": "637:12:85"
                        },
                        "nodeType": "YulExpressionStatement",
                        "src": "637:12:85"
                      }
                    ]
                  },
                  "condition": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "name": "dataEnd",
                            "nodeType": "YulIdentifier",
                            "src": "610:7:85"
                          },
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "619:9:85"
                          }
                        ],
                        "functionName": {
                          "name": "sub",
                          "nodeType": "YulIdentifier",
                          "src": "606:3:85"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "606:23:85"
                      },
                      {
                        "kind": "number",
                        "nodeType": "YulLiteral",
                        "src": "631:2:85",
                        "type": "",
                        "value": "32"
                      }
                    ],
                    "functionName": {
                      "name": "slt",
                      "nodeType": "YulIdentifier",
                      "src": "602:3:85"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "602:32:85"
                  },
                  "nodeType": "YulIf",
                  "src": "599:52:85"
                },
                {
                  "nodeType": "YulAssignment",
                  "src": "660:39:85",
                  "value": {
                    "arguments": [
                      {
                        "name": "headStart",
                        "nodeType": "YulIdentifier",
                        "src": "689:9:85"
                      }
                    ],
                    "functionName": {
                      "name": "abi_decode_address",
                      "nodeType": "YulIdentifier",
                      "src": "670:18:85"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "670:29:85"
                  },
                  "variableNames": [
                    {
                      "name": "value0",
                      "nodeType": "YulIdentifier",
                      "src": "660:6:85"
                    }
                  ]
                }
              ]
            },
            "name": "abi_decode_tuple_t_address",
            "nodeType": "YulFunctionDefinition",
            "parameters": [
              {
                "name": "headStart",
                "nodeType": "YulTypedName",
                "src": "555:9:85",
                "type": ""
              },
              {
                "name": "dataEnd",
                "nodeType": "YulTypedName",
                "src": "566:7:85",
                "type": ""
              }
            ],
            "returnVariables": [
              {
                "name": "value0",
                "nodeType": "YulTypedName",
                "src": "578:6:85",
                "type": ""
              }
            ],
            "src": "519:186:85"
          },
          {
            "body": {
              "nodeType": "YulBlock",
              "src": "839:119:85",
              "statements": [
                {
                  "nodeType": "YulAssignment",
                  "src": "849:26:85",
                  "value": {
                    "arguments": [
                      {
                        "name": "headStart",
                        "nodeType": "YulIdentifier",
                        "src": "861:9:85"
                      },
                      {
                        "kind": "number",
                        "nodeType": "YulLiteral",
                        "src": "872:2:85",
                        "type": "",
                        "value": "64"
                      }
                    ],
                    "functionName": {
                      "name": "add",
                      "nodeType": "YulIdentifier",
                      "src": "857:3:85"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "857:18:85"
                  },
                  "variableNames": [
                    {
                      "name": "tail",
                      "nodeType": "YulIdentifier",
                      "src": "849:4:85"
                    }
                  ]
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "name": "headStart",
                        "nodeType": "YulIdentifier",
                        "src": "891:9:85"
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulIdentifier",
                        "src": "902:6:85"
                      }
                    ],
                    "functionName": {
                      "name": "mstore",
                      "nodeType": "YulIdentifier",
                      "src": "884:6:85"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "884:25:85"
                  },
                  "nodeType": "YulExpressionStatement",
                  "src": "884:25:85"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "929:9:85"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "940:2:85",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "925:3:85"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "925:18:85"
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulIdentifier",
                        "src": "945:6:85"
                      }
                    ],
                    "functionName": {
                      "name": "mstore",
                      "nodeType": "YulIdentifier",
                      "src": "918:6:85"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "918:34:85"
                  },
                  "nodeType": "YulExpressionStatement",
                  "src": "918:34:85"
                }
              ]
            },
            "name": "abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack_reversed",
            "nodeType": "YulFunctionDefinition",
            "parameters": [
              {
                "name": "headStart",
                "nodeType": "YulTypedName",
                "src": "800:9:85",
                "type": ""
              },
              {
                "name": "value1",
                "nodeType": "YulTypedName",
                "src": "811:6:85",
                "type": ""
              },
              {
                "name": "value0",
                "nodeType": "YulTypedName",
                "src": "819:6:85",
                "type": ""
              }
            ],
            "returnVariables": [
              {
                "name": "tail",
                "nodeType": "YulTypedName",
                "src": "830:4:85",
                "type": ""
              }
            ],
            "src": "710:248:85"
          },
          {
            "body": {
              "nodeType": "YulBlock",
              "src": "1137:169:85",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "name": "headStart",
                        "nodeType": "YulIdentifier",
                        "src": "1154:9:85"
                      },
                      {
                        "kind": "number",
                        "nodeType": "YulLiteral",
                        "src": "1165:2:85",
                        "type": "",
                        "value": "32"
                      }
                    ],
                    "functionName": {
                      "name": "mstore",
                      "nodeType": "YulIdentifier",
                      "src": "1147:6:85"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "1147:21:85"
                  },
                  "nodeType": "YulExpressionStatement",
                  "src": "1147:21:85"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "1188:9:85"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "1199:2:85",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "1184:3:85"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "1184:18:85"
                      },
                      {
                        "kind": "number",
                        "nodeType": "YulLiteral",
                        "src": "1204:2:85",
                        "type": "",
                        "value": "19"
                      }
                    ],
                    "functionName": {
                      "name": "mstore",
                      "nodeType": "YulIdentifier",
                      "src": "1177:6:85"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "1177:30:85"
                  },
                  "nodeType": "YulExpressionStatement",
                  "src": "1177:30:85"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "1227:9:85"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "1238:2:85",
                            "type": "",
                            "value": "64"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "1223:3:85"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "1223:18:85"
                      },
                      {
                        "hexValue": "546f6b656e206e6f7420737570706f72746564",
                        "kind": "string",
                        "nodeType": "YulLiteral",
                        "src": "1243:21:85",
                        "type": "",
                        "value": "Token not supported"
                      }
                    ],
                    "functionName": {
                      "name": "mstore",
                      "nodeType": "YulIdentifier",
                      "src": "1216:6:85"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "1216:49:85"
                  },
                  "nodeType": "YulExpressionStatement",
                  "src": "1216:49:85"
                },
                {
                  "nodeType": "YulAssignment",
                  "src": "1274:26:85",
                  "value": {
                    "arguments": [
                      {
                        "name": "headStart",
                        "nodeType": "YulIdentifier",
                        "src": "1286:9:85"
                      },
                      {
                        "kind": "number",
                        "nodeType": "YulLiteral",
                        "src": "1297:2:85",
                        "type": "",
                        "value": "96"
                      }
                    ],
                    "functionName": {
                      "name": "add",
                      "nodeType": "YulIdentifier",
                      "src": "1282:3:85"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "1282:18:85"
                  },
                  "variableNames": [
                    {
                      "name": "tail",
                      "nodeType": "YulIdentifier",
                      "src": "1274:4:85"
                    }
                  ]
                }
              ]
            },
            "name": "abi_encode_tuple_t_stringliteral_9dc80ce98899b7488130d2124178aae95623791186565493838ce8be492da047__to_t_string_memory_ptr__fromStack_reversed",
            "nodeType": "YulFunctionDefinition",
            "parameters": [
              {
                "name": "headStart",
                "nodeType": "YulTypedName",
                "src": "1114:9:85",
                "type": ""
              }
            ],
            "returnVariables": [
              {
                "name": "tail",
                "nodeType": "YulTypedName",
                "src": "1128:4:85",
                "type": ""
              }
            ],
            "src": "963:343:85"
          }
        ]
      },
      "contents": "{\n    { }\n    function abi_decode_address(offset) -> value\n    {\n        value := calldataload(offset)\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_addresst_uint256t_uint256(headStart, dataEnd) -> value0, value1, value2\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := calldataload(add(headStart, 32))\n        value2 := calldataload(add(headStart, 64))\n    }\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n    }\n    function abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), value1)\n    }\n    function abi_encode_tuple_t_stringliteral_9dc80ce98899b7488130d2124178aae95623791186565493838ce8be492da047__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 19)\n        mstore(add(headStart, 64), \"Token not supported\")\n        tail := add(headStart, 96)\n    }\n}",
      "id": 85,
      "language": "Yul",
      "name": "#utility.yul"
    }
  ],
  "sourceMap": "139:529:41:-:0;;;;;;;;;;;;;;;;;;;",
  "deployedSourceMap": "139:529:41:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;448:218;;;;;;:::i;:::-;544:9;:22;;;;572:11;:26;626:15;604:19;:37;647:5;:14;;-1:-1:-1;;;;;;647:14:41;-1:-1:-1;;;;;647:14:41;;;;;;;;;;448:218;;;267:177;;;;;;:::i;:::-;;:::i;:::-;;;;884:25:85;;;940:2;925:18;;918:34;;;;857:18;267:177:41;;;;;;;;363:5;;331:7;;;;-1:-1:-1;;;;;363:15:41;;;:5;;:15;355:47;;;;-1:-1:-1;;;355:47:41;;1165:2:85;355:47:41;;;1147:21:85;1204:2;1184:18;;;1177:30;-1:-1:-1;;;1223:18:85;;;1216:49;1282:18;;355:47:41;;;;;;;;416:9;;427:11;;408:31;;;;267:177;;;:::o;14:173:85:-;82:20;;-1:-1:-1;;;;;131:31:85;;121:42;;111:70;;177:1;174;167:12;111:70;14:173;;;:::o;192:322::-;269:6;277;285;338:2;326:9;317:7;313:23;309:32;306:52;;;354:1;351;344:12;306:52;377:29;396:9;377:29;:::i;:::-;367:39;453:2;438:18;;425:32;;-1:-1:-1;504:2:85;489:18;;;476:32;;192:322;-1:-1:-1;;;192:322:85:o;519:186::-;578:6;631:2;619:9;610:7;606:23;602:32;599:52;;;647:1;644;637:12;599:52;670:29;689:9;670:29;:::i;:::-;660:39;519:186;-1:-1:-1;;;519:186:85:o",
  "source": "// SPDX-License-Identifier: UNLICENSED\npragma solidity >=0.8.7 <0.8.20;\n\nimport \"../../../contracts-0.8/common/FeeCurrencyDirectory.sol\";\n\ncontract MockOracle is IOracle {\n  uint256 numerator;\n  uint256 denominator;\n  uint256 lastUpdateTimestamp;\n  address token;\n\n  function getExchangeRate(address _token) external view returns (uint256, uint256) {\n    require(token == _token, \"Token not supported\");\n    return (numerator, denominator);\n  }\n\n  function setExchangeRate(address _token, uint256 _numerator, uint256 _denominator) public {\n    numerator = _numerator;\n    denominator = _denominator;\n    lastUpdateTimestamp = block.timestamp;\n    token = _token;\n  }\n}\n",
  "sourcePath": "/Users/beaver/Development/temp/celo-monorepo/packages/protocol/contracts-0.8/common/mocks/MockOracle.sol",
  "ast": {
    "absolutePath": "project:/contracts-0.8/common/mocks/MockOracle.sol",
    "exportedSymbols": {
      "Context": [
        212
      ],
      "FeeCurrencyDirectory": [
        4046
      ],
      "IFeeCurrencyDirectory": [
        7344
      ],
      "IFeeCurrencyDirectoryInitializer": [
        7350
      ],
      "IOracle": [
        7398
      ],
      "Initializable": [
        16991
      ],
      "MockOracle": [
        10192
      ],
      "Ownable": [
        112
      ]
    },
    "id": 10193,
    "license": "UNLICENSED",
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 10132,
        "literals": [
          "solidity",
          ">=",
          "0.8",
          ".7",
          "<",
          "0.8",
          ".20"
        ],
        "nodeType": "PragmaDirective",
        "src": "39:32:41"
      },
      {
        "absolutePath": "project:/contracts-0.8/common/FeeCurrencyDirectory.sol",
        "file": "../../../contracts-0.8/common/FeeCurrencyDirectory.sol",
        "id": 10133,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 10193,
        "sourceUnit": 4047,
        "src": "73:64:41",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "abstract": false,
        "baseContracts": [
          {
            "baseName": {
              "id": 10134,
              "name": "IOracle",
              "nameLocations": [
                "162:7:41"
              ],
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 7398,
              "src": "162:7:41"
            },
            "id": 10135,
            "nodeType": "InheritanceSpecifier",
            "src": "162:7:41"
          }
        ],
        "canonicalName": "MockOracle",
        "contractDependencies": [],
        "contractKind": "contract",
        "fullyImplemented": true,
        "id": 10192,
        "linearizedBaseContracts": [
          10192,
          7398
        ],
        "name": "MockOracle",
        "nameLocation": "148:10:41",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "constant": false,
            "id": 10137,
            "mutability": "mutable",
            "name": "numerator",
            "nameLocation": "182:9:41",
            "nodeType": "VariableDeclaration",
            "scope": 10192,
            "src": "174:17:41",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_uint256",
              "typeString": "uint256"
            },
            "typeName": {
              "id": 10136,
              "name": "uint256",
              "nodeType": "ElementaryTypeName",
              "src": "174:7:41",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            },
            "visibility": "internal"
          },
          {
            "constant": false,
            "id": 10139,
            "mutability": "mutable",
            "name": "denominator",
            "nameLocation": "203:11:41",
            "nodeType": "VariableDeclaration",
            "scope": 10192,
            "src": "195:19:41",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_uint256",
              "typeString": "uint256"
            },
            "typeName": {
              "id": 10138,
              "name": "uint256",
              "nodeType": "ElementaryTypeName",
              "src": "195:7:41",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            },
            "visibility": "internal"
          },
          {
            "constant": false,
            "id": 10141,
            "mutability": "mutable",
            "name": "lastUpdateTimestamp",
            "nameLocation": "226:19:41",
            "nodeType": "VariableDeclaration",
            "scope": 10192,
            "src": "218:27:41",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_uint256",
              "typeString": "uint256"
            },
            "typeName": {
              "id": 10140,
              "name": "uint256",
              "nodeType": "ElementaryTypeName",
              "src": "218:7:41",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            },
            "visibility": "internal"
          },
          {
            "constant": false,
            "id": 10143,
            "mutability": "mutable",
            "name": "token",
            "nameLocation": "257:5:41",
            "nodeType": "VariableDeclaration",
            "scope": 10192,
            "src": "249:13:41",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_address",
              "typeString": "address"
            },
            "typeName": {
              "id": 10142,
              "name": "address",
              "nodeType": "ElementaryTypeName",
              "src": "249:7:41",
              "stateMutability": "nonpayable",
              "typeDescriptions": {
                "typeIdentifier": "t_address",
                "typeString": "address"
              }
            },
            "visibility": "internal"
          },
          {
            "baseFunctions": [
              7397
            ],
            "body": {
              "id": 10163,
              "nodeType": "Block",
              "src": "349:95:41",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "id": 10155,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "id": 10153,
                          "name": "token",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 10143,
                          "src": "363:5:41",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "==",
                        "rightExpression": {
                          "id": 10154,
                          "name": "_token",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 10145,
                          "src": "372:6:41",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "src": "363:15:41",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "546f6b656e206e6f7420737570706f72746564",
                        "id": 10156,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "380:21:41",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_9dc80ce98899b7488130d2124178aae95623791186565493838ce8be492da047",
                          "typeString": "literal_string \"Token not supported\""
                        },
                        "value": "Token not supported"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_9dc80ce98899b7488130d2124178aae95623791186565493838ce8be492da047",
                          "typeString": "literal_string \"Token not supported\""
                        }
                      ],
                      "id": 10152,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        4294967278,
                        4294967278
                      ],
                      "referencedDeclaration": 4294967278,
                      "src": "355:7:41",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 10157,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "355:47:41",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 10158,
                  "nodeType": "ExpressionStatement",
                  "src": "355:47:41"
                },
                {
                  "expression": {
                    "components": [
                      {
                        "id": 10159,
                        "name": "numerator",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 10137,
                        "src": "416:9:41",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "id": 10160,
                        "name": "denominator",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 10139,
                        "src": "427:11:41",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "id": 10161,
                    "isConstant": false,
                    "isInlineArray": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "TupleExpression",
                    "src": "415:24:41",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$_t_uint256_$_t_uint256_$",
                      "typeString": "tuple(uint256,uint256)"
                    }
                  },
                  "functionReturnParameters": 10151,
                  "id": 10162,
                  "nodeType": "Return",
                  "src": "408:31:41"
                }
              ]
            },
            "functionSelector": "efb7601d",
            "id": 10164,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "getExchangeRate",
            "nameLocation": "276:15:41",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 10146,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 10145,
                  "mutability": "mutable",
                  "name": "_token",
                  "nameLocation": "300:6:41",
                  "nodeType": "VariableDeclaration",
                  "scope": 10164,
                  "src": "292:14:41",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 10144,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "292:7:41",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "291:16:41"
            },
            "returnParameters": {
              "id": 10151,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 10148,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 10164,
                  "src": "331:7:41",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 10147,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "331:7:41",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 10150,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 10164,
                  "src": "340:7:41",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 10149,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "340:7:41",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "330:18:41"
            },
            "scope": 10192,
            "src": "267:177:41",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "body": {
              "id": 10190,
              "nodeType": "Block",
              "src": "538:128:41",
              "statements": [
                {
                  "expression": {
                    "id": 10175,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 10173,
                      "name": "numerator",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 10137,
                      "src": "544:9:41",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "id": 10174,
                      "name": "_numerator",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 10168,
                      "src": "556:10:41",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "544:22:41",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 10176,
                  "nodeType": "ExpressionStatement",
                  "src": "544:22:41"
                },
                {
                  "expression": {
                    "id": 10179,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 10177,
                      "name": "denominator",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 10139,
                      "src": "572:11:41",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "id": 10178,
                      "name": "_denominator",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 10170,
                      "src": "586:12:41",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "572:26:41",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 10180,
                  "nodeType": "ExpressionStatement",
                  "src": "572:26:41"
                },
                {
                  "expression": {
                    "id": 10184,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 10181,
                      "name": "lastUpdateTimestamp",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 10141,
                      "src": "604:19:41",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "expression": {
                        "id": 10182,
                        "name": "block",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 4294967292,
                        "src": "626:5:41",
                        "typeDescriptions": {
                          "typeIdentifier": "t_magic_block",
                          "typeString": "block"
                        }
                      },
                      "id": 10183,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberLocation": "632:9:41",
                      "memberName": "timestamp",
                      "nodeType": "MemberAccess",
                      "src": "626:15:41",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "604:37:41",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 10185,
                  "nodeType": "ExpressionStatement",
                  "src": "604:37:41"
                },
                {
                  "expression": {
                    "id": 10188,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 10186,
                      "name": "token",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 10143,
                      "src": "647:5:41",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "id": 10187,
                      "name": "_token",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 10166,
                      "src": "655:6:41",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "src": "647:14:41",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "id": 10189,
                  "nodeType": "ExpressionStatement",
                  "src": "647:14:41"
                }
              ]
            },
            "functionSelector": "58a5514f",
            "id": 10191,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "setExchangeRate",
            "nameLocation": "457:15:41",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 10171,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 10166,
                  "mutability": "mutable",
                  "name": "_token",
                  "nameLocation": "481:6:41",
                  "nodeType": "VariableDeclaration",
                  "scope": 10191,
                  "src": "473:14:41",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 10165,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "473:7:41",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 10168,
                  "mutability": "mutable",
                  "name": "_numerator",
                  "nameLocation": "497:10:41",
                  "nodeType": "VariableDeclaration",
                  "scope": 10191,
                  "src": "489:18:41",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 10167,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "489:7:41",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 10170,
                  "mutability": "mutable",
                  "name": "_denominator",
                  "nameLocation": "517:12:41",
                  "nodeType": "VariableDeclaration",
                  "scope": 10191,
                  "src": "509:20:41",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 10169,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "509:7:41",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "472:58:41"
            },
            "returnParameters": {
              "id": 10172,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "538:0:41"
            },
            "scope": 10192,
            "src": "448:218:41",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          }
        ],
        "scope": 10193,
        "src": "139:529:41",
        "usedErrors": []
      }
    ],
    "src": "39:630:41"
  },
  "compiler": {
    "name": "solc",
    "version": "0.8.19+commit.7dd6d404.Emscripten.clang"
  },
  "networks": {},
  "schemaVersion": "3.4.13",
  "updatedAt": "2025-05-05T17:49:34.184Z",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  }
}