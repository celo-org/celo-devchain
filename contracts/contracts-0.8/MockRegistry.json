{
  "contractName": "MockRegistry",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "test",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "identifier",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "identifierHash",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "RegistryUpdated",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "initialized",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "registry",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "identifier",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "setAddressFor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "identifierHash",
          "type": "bytes32"
        }
      ],
      "name": "getAddressForOrDie",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "identifierHash",
          "type": "bytes32"
        }
      ],
      "name": "getAddressFor",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "identifier",
          "type": "string"
        }
      ],
      "name": "getAddressForStringOrDie",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "identifier",
          "type": "string"
        }
      ],
      "name": "getAddressForString",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32[]",
          "name": "identifierHashes",
          "type": "bytes32[]"
        },
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "isOneOf",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"test\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"identifier\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"identifierHash\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"RegistryUpdated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"identifierHash\",\"type\":\"bytes32\"}],\"name\":\"getAddressFor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"identifierHash\",\"type\":\"bytes32\"}],\"name\":\"getAddressForOrDie\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"identifier\",\"type\":\"string\"}],\"name\":\"getAddressForString\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"identifier\",\"type\":\"string\"}],\"name\":\"getAddressForStringOrDie\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"identifierHashes\",\"type\":\"bytes32[]\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"isOneOf\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"registry\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"identifier\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setAddressFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"constructor\":{\"params\":{\"test\":\"Set to true to skip implementation initialization\"}},\"getAddressFor(bytes32)\":{\"params\":{\"identifierHash\":\"Identifier hash of contract whose address we want to look up.\"}},\"getAddressForOrDie(bytes32)\":{\"details\":\"Throws if address not set.\",\"params\":{\"identifierHash\":\"Identifier hash of contract whose address we want to look up.\"}},\"getAddressForString(string)\":{\"params\":{\"identifier\":\"Identifier of contract whose address we want to look up.\"}},\"getAddressForStringOrDie(string)\":{\"details\":\"Throws if address not set.\",\"params\":{\"identifier\":\"Identifier of contract whose address we want to look up.\"}},\"isOneOf(bytes32[],address)\":{\"params\":{\"identifierHashes\":\"Array of hashes of approved identifiers.\",\"sender\":\"Address in question to verify membership.\"},\"returns\":{\"_0\":\"True if `sender` corresponds to the address of any of `identifiers`         registry entries.\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"setAddressFor(string,address)\":{\"params\":{\"addr\":\"Address of contract.\",\"identifier\":\"Identifier of contract whose address we want to set.\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"title\":\"Routes identifiers to addresses.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"constructor\":{\"notice\":\"Sets initialized == true on implementation contracts\"},\"getAddressFor(bytes32)\":{\"notice\":\"Gets address associated with the given identifierHash.\"},\"getAddressForOrDie(bytes32)\":{\"notice\":\"Gets address associated with the given identifierHash.\"},\"getAddressForString(string)\":{\"notice\":\"Gets address associated with the given identifier.\"},\"getAddressForStringOrDie(string)\":{\"notice\":\"Gets address associated with the given identifier.\"},\"initialize()\":{\"notice\":\"Used in place of the constructor to allow the contract to be upgradable via proxy.\"},\"isOneOf(bytes32[],address)\":{\"notice\":\"Iterates over provided array of identifiers, getting the address for each.         Returns true if `sender` matches the address of one of the provided identifiers.\"},\"setAddressFor(string,address)\":{\"notice\":\"Associates the given address with the given identifier.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"project:/contracts-0.8/common/test/MockRegistry.sol\":\"MockRegistry\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts8/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts8/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts8/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x58b21219689909c4f8339af00813760337f7e2e7f169a97fe49e2896dcfb3b9a\",\"license\":\"MIT\"},\"project:/contracts-0.8/common/test/MockRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.8.7 <0.8.20;\\n\\nimport \\\"@openzeppelin/contracts8/utils/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts8/access/Ownable.sol\\\";\\n\\nimport \\\"../../../contracts/common/interfaces/IRegistry.sol\\\";\\nimport \\\"../../../contracts/common/interfaces/IRegistryInitializer.sol\\\";\\nimport \\\"../../../contracts/common/Initializable.sol\\\";\\n\\n/**\\n * @title Routes identifiers to addresses.\\n */\\ncontract MockRegistry is IRegistry, IRegistryInitializer, Ownable, Initializable {\\n  using SafeMath for uint256;\\n\\n  mapping(bytes32 => address) public registry;\\n\\n  event RegistryUpdated(string identifier, bytes32 indexed identifierHash, address indexed addr);\\n\\n  /**\\n   * @notice Sets initialized == true on implementation contracts\\n   * @param test Set to true to skip implementation initialization\\n   */\\n  constructor(bool test) Initializable(test) {}\\n\\n  /**\\n   * @notice Used in place of the constructor to allow the contract to be upgradable via proxy.\\n   */\\n  function initialize() external initializer {\\n    _transferOwnership(msg.sender);\\n  }\\n\\n  /**\\n   * @notice Associates the given address with the given identifier.\\n   * @param identifier Identifier of contract whose address we want to set.\\n   * @param addr Address of contract.\\n   */\\n  function setAddressFor(string calldata identifier, address addr) external onlyOwner {\\n    bytes32 identifierHash = keccak256(abi.encodePacked(identifier));\\n    registry[identifierHash] = addr;\\n    emit RegistryUpdated(identifier, identifierHash, addr);\\n  }\\n\\n  /**\\n   * @notice Gets address associated with the given identifierHash.\\n   * @param identifierHash Identifier hash of contract whose address we want to look up.\\n   * @dev Throws if address not set.\\n   */\\n  function getAddressForOrDie(bytes32 identifierHash) external view returns (address) {\\n    require(registry[identifierHash] != address(0), \\\"identifier has no registry entry\\\");\\n    return registry[identifierHash];\\n  }\\n\\n  /**\\n   * @notice Gets address associated with the given identifierHash.\\n   * @param identifierHash Identifier hash of contract whose address we want to look up.\\n   */\\n  function getAddressFor(bytes32 identifierHash) external view returns (address) {\\n    return registry[identifierHash];\\n  }\\n\\n  /**\\n   * @notice Gets address associated with the given identifier.\\n   * @param identifier Identifier of contract whose address we want to look up.\\n   * @dev Throws if address not set.\\n   */\\n  function getAddressForStringOrDie(string calldata identifier) external view returns (address) {\\n    bytes32 identifierHash = keccak256(abi.encodePacked(identifier));\\n    require(registry[identifierHash] != address(0), \\\"identifier has no registry entry\\\");\\n    return registry[identifierHash];\\n  }\\n\\n  /**\\n   * @notice Gets address associated with the given identifier.\\n   * @param identifier Identifier of contract whose address we want to look up.\\n   */\\n  function getAddressForString(string calldata identifier) external view returns (address) {\\n    bytes32 identifierHash = keccak256(abi.encodePacked(identifier));\\n    return registry[identifierHash];\\n  }\\n\\n  /**\\n   * @notice Iterates over provided array of identifiers, getting the address for each.\\n   *         Returns true if `sender` matches the address of one of the provided identifiers.\\n   * @param identifierHashes Array of hashes of approved identifiers.\\n   * @param sender Address in question to verify membership.\\n   * @return True if `sender` corresponds to the address of any of `identifiers`\\n   *         registry entries.\\n   */\\n  function isOneOf(\\n    bytes32[] calldata identifierHashes,\\n    address sender\\n  ) external view returns (bool) {\\n    for (uint256 i = 0; i < identifierHashes.length; i = i.add(1)) {\\n      if (registry[identifierHashes[i]] == sender) {\\n        return true;\\n      }\\n    }\\n    return false;\\n  }\\n}\\n\",\"keccak256\":\"0xf8b7c80bd8d52ea4e524b10d5f7a6e16be051fd121f0efbdbc9c416ba55b7f02\",\"license\":\"LGPL-3.0-only\"},\"project:/contracts/common/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.5.13 <0.9.0;\\n\\n/**\\n * @title Used with proxied contracts that have an `initialize` function.\\n * @notice Ensures the `initialize` function:\\n *         - gets called only once\\n *         - cannot be called on the logic contract.\\n */\\ncontract Initializable {\\n  bool public initialized;\\n\\n  /**\\n   * @notice Ensures the initializer function cannot be called more than once.\\n   */\\n  modifier initializer() {\\n    require(!initialized, \\\"contract already initialized\\\");\\n    initialized = true;\\n    _;\\n  }\\n\\n  /**\\n   * @notice By default, ensures that the `initialize` function cannot be called\\n   * on the logic contract.\\n   * @param testingDeployment When set to true, allows the `initialize` function\\n   * to be called, which is useful in testing when not setting up with a Proxy.\\n   */\\n  constructor(bool testingDeployment) public {\\n    if (!testingDeployment) {\\n      initialized = true;\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x8de2ab8706668982998c5a995bdc3d8ff20a1ec8519bf49cec9e464f62c57bb9\",\"license\":\"LGPL-3.0-only\"},\"project:/contracts/common/interfaces/IRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.5.13 <0.9.0;\\n\\ninterface IRegistry {\\n  function setAddressFor(string calldata, address) external;\\n  function getAddressForOrDie(bytes32) external view returns (address);\\n  function getAddressFor(bytes32) external view returns (address);\\n  function getAddressForStringOrDie(string calldata identifier) external view returns (address);\\n  function getAddressForString(string calldata identifier) external view returns (address);\\n  function isOneOf(bytes32[] calldata, address) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x7737cbda6f3519bf6a4108e07b2c991a655e8731a4c040a3681e9629cfc4b52d\",\"license\":\"LGPL-3.0-only\"},\"project:/contracts/common/interfaces/IRegistryInitializer.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.5.13 <0.9.0;\\n\\ninterface IRegistryInitializer {\\n  function initialize() external;\\n}\\n\",\"keccak256\":\"0xdd90b1e86fa3f8280428584459c6014449c9b0092554be1c385c1d87388dcf18\",\"license\":\"LGPL-3.0-only\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5060405161097438038061097483398101604081905261002f916100a9565b8061003933610059565b80610052576000805460ff60a01b1916600160a01b1790555b50506100d2565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000602082840312156100bb57600080fd5b815180151581146100cb57600080fd5b9392505050565b610893806100e16000396000f3fe608060405234801561001057600080fd5b50600436106100b45760003560e01c80638932cbf4116100715780638932cbf41461015b5780638da5cb5b1461016e578063c58657931461017f578063dcf0aaed14610192578063dd927233146101a5578063f2fde38b146101ce57600080fd5b8063158ef93e146100b957806317c50818146100e2578063715018a6146100f55780637ef50298146100ff5780638129fc1c14610140578063853db32314610148575b600080fd5b6000546100cd90600160a01b900460ff1681565b60405190151581526020015b60405180910390f35b6100cd6100f0366004610659565b6101e1565b6100fd61025e565b005b61012861010d3660046106dd565b6001602052600090815260409020546001600160a01b031681565b6040516001600160a01b0390911681526020016100d9565b6100fd610272565b61012861015636600461073f565b6102ed565b61012861016936600461073f565b61033b565b6000546001600160a01b0316610128565b6100fd61018d366004610781565b6103ed565b6101286101a03660046106dd565b61048e565b6101286101b33660046106dd565b6000908152600160205260409020546001600160a01b031690565b6100fd6101dc3660046107cc565b61050e565b6000805b8381101561025157826001600160a01b03166001600087878581811061020d5761020d6107e7565b60209081029290920135835250810191909152604001600020546001600160a01b03160361023f576001915050610257565b61024a816001610587565b90506101e5565b50600090505b9392505050565b610266610593565b61027060006105ed565b565b600054600160a01b900460ff16156102d15760405162461bcd60e51b815260206004820152601c60248201527f636f6e747261637420616c726561647920696e697469616c697a65640000000060448201526064015b60405180910390fd5b6000805460ff60a01b1916600160a01b179055610270336105ed565b60008083836040516020016103039291906107fd565b60408051601f198184030181529181528151602092830120600090815260019092529020546001600160a01b03169150505b92915050565b60008083836040516020016103519291906107fd565b60408051601f198184030181529181528151602092830120600081815260019093529120549091506001600160a01b03166103ce5760405162461bcd60e51b815260206004820181905260248201527f6964656e74696669657220686173206e6f20726567697374727920656e74727960448201526064016102c8565b6000908152600160205260409020546001600160a01b03169392505050565b6103f5610593565b6000838360405160200161040a9291906107fd565b60408051808303601f1901815282825280516020918201206000818152600190925291902080546001600160a01b0319166001600160a01b0386169081179091559092509082907f4166d073a7a5e704ce0db7113320f88da2457f872d46dc020c805c562c1582a090610480908890889061080d565b60405180910390a350505050565b6000818152600160205260408120546001600160a01b03166104f25760405162461bcd60e51b815260206004820181905260248201527f6964656e74696669657220686173206e6f20726567697374727920656e74727960448201526064016102c8565b506000908152600160205260409020546001600160a01b031690565b610516610593565b6001600160a01b03811661057b5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016102c8565b610584816105ed565b50565b6000610257828461083c565b6000546001600160a01b031633146102705760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016102c8565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b80356001600160a01b038116811461065457600080fd5b919050565b60008060006040848603121561066e57600080fd5b833567ffffffffffffffff8082111561068657600080fd5b818601915086601f83011261069a57600080fd5b8135818111156106a957600080fd5b8760208260051b85010111156106be57600080fd5b6020928301955093506106d4918601905061063d565b90509250925092565b6000602082840312156106ef57600080fd5b5035919050565b60008083601f84011261070857600080fd5b50813567ffffffffffffffff81111561072057600080fd5b60208301915083602082850101111561073857600080fd5b9250929050565b6000806020838503121561075257600080fd5b823567ffffffffffffffff81111561076957600080fd5b610775858286016106f6565b90969095509350505050565b60008060006040848603121561079657600080fd5b833567ffffffffffffffff8111156107ad57600080fd5b6107b9868287016106f6565b90945092506106d490506020850161063d565b6000602082840312156107de57600080fd5b6102578261063d565b634e487b7160e01b600052603260045260246000fd5b8183823760009101908152919050565b60208152816020820152818360408301376000818301604090810191909152601f909201601f19160101919050565b8082018082111561033557634e487b7160e01b600052601160045260246000fdfea2646970667358221220e9442bc5b72c0455211db874f4f20750c2166dfa53242f838db95ced6d5541b164736f6c63430008130033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100b45760003560e01c80638932cbf4116100715780638932cbf41461015b5780638da5cb5b1461016e578063c58657931461017f578063dcf0aaed14610192578063dd927233146101a5578063f2fde38b146101ce57600080fd5b8063158ef93e146100b957806317c50818146100e2578063715018a6146100f55780637ef50298146100ff5780638129fc1c14610140578063853db32314610148575b600080fd5b6000546100cd90600160a01b900460ff1681565b60405190151581526020015b60405180910390f35b6100cd6100f0366004610659565b6101e1565b6100fd61025e565b005b61012861010d3660046106dd565b6001602052600090815260409020546001600160a01b031681565b6040516001600160a01b0390911681526020016100d9565b6100fd610272565b61012861015636600461073f565b6102ed565b61012861016936600461073f565b61033b565b6000546001600160a01b0316610128565b6100fd61018d366004610781565b6103ed565b6101286101a03660046106dd565b61048e565b6101286101b33660046106dd565b6000908152600160205260409020546001600160a01b031690565b6100fd6101dc3660046107cc565b61050e565b6000805b8381101561025157826001600160a01b03166001600087878581811061020d5761020d6107e7565b60209081029290920135835250810191909152604001600020546001600160a01b03160361023f576001915050610257565b61024a816001610587565b90506101e5565b50600090505b9392505050565b610266610593565b61027060006105ed565b565b600054600160a01b900460ff16156102d15760405162461bcd60e51b815260206004820152601c60248201527f636f6e747261637420616c726561647920696e697469616c697a65640000000060448201526064015b60405180910390fd5b6000805460ff60a01b1916600160a01b179055610270336105ed565b60008083836040516020016103039291906107fd565b60408051601f198184030181529181528151602092830120600090815260019092529020546001600160a01b03169150505b92915050565b60008083836040516020016103519291906107fd565b60408051601f198184030181529181528151602092830120600081815260019093529120549091506001600160a01b03166103ce5760405162461bcd60e51b815260206004820181905260248201527f6964656e74696669657220686173206e6f20726567697374727920656e74727960448201526064016102c8565b6000908152600160205260409020546001600160a01b03169392505050565b6103f5610593565b6000838360405160200161040a9291906107fd565b60408051808303601f1901815282825280516020918201206000818152600190925291902080546001600160a01b0319166001600160a01b0386169081179091559092509082907f4166d073a7a5e704ce0db7113320f88da2457f872d46dc020c805c562c1582a090610480908890889061080d565b60405180910390a350505050565b6000818152600160205260408120546001600160a01b03166104f25760405162461bcd60e51b815260206004820181905260248201527f6964656e74696669657220686173206e6f20726567697374727920656e74727960448201526064016102c8565b506000908152600160205260409020546001600160a01b031690565b610516610593565b6001600160a01b03811661057b5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016102c8565b610584816105ed565b50565b6000610257828461083c565b6000546001600160a01b031633146102705760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016102c8565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b80356001600160a01b038116811461065457600080fd5b919050565b60008060006040848603121561066e57600080fd5b833567ffffffffffffffff8082111561068657600080fd5b818601915086601f83011261069a57600080fd5b8135818111156106a957600080fd5b8760208260051b85010111156106be57600080fd5b6020928301955093506106d4918601905061063d565b90509250925092565b6000602082840312156106ef57600080fd5b5035919050565b60008083601f84011261070857600080fd5b50813567ffffffffffffffff81111561072057600080fd5b60208301915083602082850101111561073857600080fd5b9250929050565b6000806020838503121561075257600080fd5b823567ffffffffffffffff81111561076957600080fd5b610775858286016106f6565b90969095509350505050565b60008060006040848603121561079657600080fd5b833567ffffffffffffffff8111156107ad57600080fd5b6107b9868287016106f6565b90945092506106d490506020850161063d565b6000602082840312156107de57600080fd5b6102578261063d565b634e487b7160e01b600052603260045260246000fd5b8183823760009101908152919050565b60208152816020820152818360408301376000818301604090810191909152601f909201601f19160101919050565b8082018082111561033557634e487b7160e01b600052601160045260246000fdfea2646970667358221220e9442bc5b72c0455211db874f4f20750c2166dfa53242f838db95ced6d5541b164736f6c63430008130033",
  "immutableReferences": {},
  "generatedSources": [
    {
      "ast": {
        "nodeType": "YulBlock",
        "src": "0:293:85",
        "statements": [
          {
            "nodeType": "YulBlock",
            "src": "6:3:85",
            "statements": []
          },
          {
            "body": {
              "nodeType": "YulBlock",
              "src": "92:199:85",
              "statements": [
                {
                  "body": {
                    "nodeType": "YulBlock",
                    "src": "138:16:85",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "kind": "number",
                              "nodeType": "YulLiteral",
                              "src": "147:1:85",
                              "type": "",
                              "value": "0"
                            },
                            {
                              "kind": "number",
                              "nodeType": "YulLiteral",
                              "src": "150:1:85",
                              "type": "",
                              "value": "0"
                            }
                          ],
                          "functionName": {
                            "name": "revert",
                            "nodeType": "YulIdentifier",
                            "src": "140:6:85"
                          },
                          "nodeType": "YulFunctionCall",
                          "src": "140:12:85"
                        },
                        "nodeType": "YulExpressionStatement",
                        "src": "140:12:85"
                      }
                    ]
                  },
                  "condition": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "name": "dataEnd",
                            "nodeType": "YulIdentifier",
                            "src": "113:7:85"
                          },
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "122:9:85"
                          }
                        ],
                        "functionName": {
                          "name": "sub",
                          "nodeType": "YulIdentifier",
                          "src": "109:3:85"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "109:23:85"
                      },
                      {
                        "kind": "number",
                        "nodeType": "YulLiteral",
                        "src": "134:2:85",
                        "type": "",
                        "value": "32"
                      }
                    ],
                    "functionName": {
                      "name": "slt",
                      "nodeType": "YulIdentifier",
                      "src": "105:3:85"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "105:32:85"
                  },
                  "nodeType": "YulIf",
                  "src": "102:52:85"
                },
                {
                  "nodeType": "YulVariableDeclaration",
                  "src": "163:29:85",
                  "value": {
                    "arguments": [
                      {
                        "name": "headStart",
                        "nodeType": "YulIdentifier",
                        "src": "182:9:85"
                      }
                    ],
                    "functionName": {
                      "name": "mload",
                      "nodeType": "YulIdentifier",
                      "src": "176:5:85"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "176:16:85"
                  },
                  "variables": [
                    {
                      "name": "value",
                      "nodeType": "YulTypedName",
                      "src": "167:5:85",
                      "type": ""
                    }
                  ]
                },
                {
                  "body": {
                    "nodeType": "YulBlock",
                    "src": "245:16:85",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "kind": "number",
                              "nodeType": "YulLiteral",
                              "src": "254:1:85",
                              "type": "",
                              "value": "0"
                            },
                            {
                              "kind": "number",
                              "nodeType": "YulLiteral",
                              "src": "257:1:85",
                              "type": "",
                              "value": "0"
                            }
                          ],
                          "functionName": {
                            "name": "revert",
                            "nodeType": "YulIdentifier",
                            "src": "247:6:85"
                          },
                          "nodeType": "YulFunctionCall",
                          "src": "247:12:85"
                        },
                        "nodeType": "YulExpressionStatement",
                        "src": "247:12:85"
                      }
                    ]
                  },
                  "condition": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "name": "value",
                            "nodeType": "YulIdentifier",
                            "src": "214:5:85"
                          },
                          {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulIdentifier",
                                    "src": "235:5:85"
                                  }
                                ],
                                "functionName": {
                                  "name": "iszero",
                                  "nodeType": "YulIdentifier",
                                  "src": "228:6:85"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "228:13:85"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "221:6:85"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "221:21:85"
                          }
                        ],
                        "functionName": {
                          "name": "eq",
                          "nodeType": "YulIdentifier",
                          "src": "211:2:85"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "211:32:85"
                      }
                    ],
                    "functionName": {
                      "name": "iszero",
                      "nodeType": "YulIdentifier",
                      "src": "204:6:85"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "204:40:85"
                  },
                  "nodeType": "YulIf",
                  "src": "201:60:85"
                },
                {
                  "nodeType": "YulAssignment",
                  "src": "270:15:85",
                  "value": {
                    "name": "value",
                    "nodeType": "YulIdentifier",
                    "src": "280:5:85"
                  },
                  "variableNames": [
                    {
                      "name": "value0",
                      "nodeType": "YulIdentifier",
                      "src": "270:6:85"
                    }
                  ]
                }
              ]
            },
            "name": "abi_decode_tuple_t_bool_fromMemory",
            "nodeType": "YulFunctionDefinition",
            "parameters": [
              {
                "name": "headStart",
                "nodeType": "YulTypedName",
                "src": "58:9:85",
                "type": ""
              },
              {
                "name": "dataEnd",
                "nodeType": "YulTypedName",
                "src": "69:7:85",
                "type": ""
              }
            ],
            "returnVariables": [
              {
                "name": "value0",
                "nodeType": "YulTypedName",
                "src": "81:6:85",
                "type": ""
              }
            ],
            "src": "14:277:85"
          }
        ]
      },
      "contents": "{\n    { }\n    function abi_decode_tuple_t_bool_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := mload(headStart)\n        if iszero(eq(value, iszero(iszero(value)))) { revert(0, 0) }\n        value0 := value\n    }\n}",
      "id": 85,
      "language": "Yul",
      "name": "#utility.yul"
    }
  ],
  "deployedGeneratedSources": [
    {
      "ast": {
        "nodeType": "YulBlock",
        "src": "0:5442:85",
        "statements": [
          {
            "nodeType": "YulBlock",
            "src": "6:3:85",
            "statements": []
          },
          {
            "body": {
              "nodeType": "YulBlock",
              "src": "109:92:85",
              "statements": [
                {
                  "nodeType": "YulAssignment",
                  "src": "119:26:85",
                  "value": {
                    "arguments": [
                      {
                        "name": "headStart",
                        "nodeType": "YulIdentifier",
                        "src": "131:9:85"
                      },
                      {
                        "kind": "number",
                        "nodeType": "YulLiteral",
                        "src": "142:2:85",
                        "type": "",
                        "value": "32"
                      }
                    ],
                    "functionName": {
                      "name": "add",
                      "nodeType": "YulIdentifier",
                      "src": "127:3:85"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "127:18:85"
                  },
                  "variableNames": [
                    {
                      "name": "tail",
                      "nodeType": "YulIdentifier",
                      "src": "119:4:85"
                    }
                  ]
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "name": "headStart",
                        "nodeType": "YulIdentifier",
                        "src": "161:9:85"
                      },
                      {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "186:6:85"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "179:6:85"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "179:14:85"
                          }
                        ],
                        "functionName": {
                          "name": "iszero",
                          "nodeType": "YulIdentifier",
                          "src": "172:6:85"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "172:22:85"
                      }
                    ],
                    "functionName": {
                      "name": "mstore",
                      "nodeType": "YulIdentifier",
                      "src": "154:6:85"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "154:41:85"
                  },
                  "nodeType": "YulExpressionStatement",
                  "src": "154:41:85"
                }
              ]
            },
            "name": "abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed",
            "nodeType": "YulFunctionDefinition",
            "parameters": [
              {
                "name": "headStart",
                "nodeType": "YulTypedName",
                "src": "78:9:85",
                "type": ""
              },
              {
                "name": "value0",
                "nodeType": "YulTypedName",
                "src": "89:6:85",
                "type": ""
              }
            ],
            "returnVariables": [
              {
                "name": "tail",
                "nodeType": "YulTypedName",
                "src": "100:4:85",
                "type": ""
              }
            ],
            "src": "14:187:85"
          },
          {
            "body": {
              "nodeType": "YulBlock",
              "src": "255:124:85",
              "statements": [
                {
                  "nodeType": "YulAssignment",
                  "src": "265:29:85",
                  "value": {
                    "arguments": [
                      {
                        "name": "offset",
                        "nodeType": "YulIdentifier",
                        "src": "287:6:85"
                      }
                    ],
                    "functionName": {
                      "name": "calldataload",
                      "nodeType": "YulIdentifier",
                      "src": "274:12:85"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "274:20:85"
                  },
                  "variableNames": [
                    {
                      "name": "value",
                      "nodeType": "YulIdentifier",
                      "src": "265:5:85"
                    }
                  ]
                },
                {
                  "body": {
                    "nodeType": "YulBlock",
                    "src": "357:16:85",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "kind": "number",
                              "nodeType": "YulLiteral",
                              "src": "366:1:85",
                              "type": "",
                              "value": "0"
                            },
                            {
                              "kind": "number",
                              "nodeType": "YulLiteral",
                              "src": "369:1:85",
                              "type": "",
                              "value": "0"
                            }
                          ],
                          "functionName": {
                            "name": "revert",
                            "nodeType": "YulIdentifier",
                            "src": "359:6:85"
                          },
                          "nodeType": "YulFunctionCall",
                          "src": "359:12:85"
                        },
                        "nodeType": "YulExpressionStatement",
                        "src": "359:12:85"
                      }
                    ]
                  },
                  "condition": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "name": "value",
                            "nodeType": "YulIdentifier",
                            "src": "316:5:85"
                          },
                          {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "327:5:85"
                              },
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "342:3:85",
                                        "type": "",
                                        "value": "160"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "347:1:85",
                                        "type": "",
                                        "value": "1"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "shl",
                                      "nodeType": "YulIdentifier",
                                      "src": "338:3:85"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "338:11:85"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "351:1:85",
                                    "type": "",
                                    "value": "1"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "334:3:85"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "334:19:85"
                              }
                            ],
                            "functionName": {
                              "name": "and",
                              "nodeType": "YulIdentifier",
                              "src": "323:3:85"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "323:31:85"
                          }
                        ],
                        "functionName": {
                          "name": "eq",
                          "nodeType": "YulIdentifier",
                          "src": "313:2:85"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "313:42:85"
                      }
                    ],
                    "functionName": {
                      "name": "iszero",
                      "nodeType": "YulIdentifier",
                      "src": "306:6:85"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "306:50:85"
                  },
                  "nodeType": "YulIf",
                  "src": "303:70:85"
                }
              ]
            },
            "name": "abi_decode_address",
            "nodeType": "YulFunctionDefinition",
            "parameters": [
              {
                "name": "offset",
                "nodeType": "YulTypedName",
                "src": "234:6:85",
                "type": ""
              }
            ],
            "returnVariables": [
              {
                "name": "value",
                "nodeType": "YulTypedName",
                "src": "245:5:85",
                "type": ""
              }
            ],
            "src": "206:173:85"
          },
          {
            "body": {
              "nodeType": "YulBlock",
              "src": "506:573:85",
              "statements": [
                {
                  "body": {
                    "nodeType": "YulBlock",
                    "src": "552:16:85",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "kind": "number",
                              "nodeType": "YulLiteral",
                              "src": "561:1:85",
                              "type": "",
                              "value": "0"
                            },
                            {
                              "kind": "number",
                              "nodeType": "YulLiteral",
                              "src": "564:1:85",
                              "type": "",
                              "value": "0"
                            }
                          ],
                          "functionName": {
                            "name": "revert",
                            "nodeType": "YulIdentifier",
                            "src": "554:6:85"
                          },
                          "nodeType": "YulFunctionCall",
                          "src": "554:12:85"
                        },
                        "nodeType": "YulExpressionStatement",
                        "src": "554:12:85"
                      }
                    ]
                  },
                  "condition": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "name": "dataEnd",
                            "nodeType": "YulIdentifier",
                            "src": "527:7:85"
                          },
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "536:9:85"
                          }
                        ],
                        "functionName": {
                          "name": "sub",
                          "nodeType": "YulIdentifier",
                          "src": "523:3:85"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "523:23:85"
                      },
                      {
                        "kind": "number",
                        "nodeType": "YulLiteral",
                        "src": "548:2:85",
                        "type": "",
                        "value": "64"
                      }
                    ],
                    "functionName": {
                      "name": "slt",
                      "nodeType": "YulIdentifier",
                      "src": "519:3:85"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "519:32:85"
                  },
                  "nodeType": "YulIf",
                  "src": "516:52:85"
                },
                {
                  "nodeType": "YulVariableDeclaration",
                  "src": "577:37:85",
                  "value": {
                    "arguments": [
                      {
                        "name": "headStart",
                        "nodeType": "YulIdentifier",
                        "src": "604:9:85"
                      }
                    ],
                    "functionName": {
                      "name": "calldataload",
                      "nodeType": "YulIdentifier",
                      "src": "591:12:85"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "591:23:85"
                  },
                  "variables": [
                    {
                      "name": "offset",
                      "nodeType": "YulTypedName",
                      "src": "581:6:85",
                      "type": ""
                    }
                  ]
                },
                {
                  "nodeType": "YulVariableDeclaration",
                  "src": "623:28:85",
                  "value": {
                    "kind": "number",
                    "nodeType": "YulLiteral",
                    "src": "633:18:85",
                    "type": "",
                    "value": "0xffffffffffffffff"
                  },
                  "variables": [
                    {
                      "name": "_1",
                      "nodeType": "YulTypedName",
                      "src": "627:2:85",
                      "type": ""
                    }
                  ]
                },
                {
                  "body": {
                    "nodeType": "YulBlock",
                    "src": "678:16:85",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "kind": "number",
                              "nodeType": "YulLiteral",
                              "src": "687:1:85",
                              "type": "",
                              "value": "0"
                            },
                            {
                              "kind": "number",
                              "nodeType": "YulLiteral",
                              "src": "690:1:85",
                              "type": "",
                              "value": "0"
                            }
                          ],
                          "functionName": {
                            "name": "revert",
                            "nodeType": "YulIdentifier",
                            "src": "680:6:85"
                          },
                          "nodeType": "YulFunctionCall",
                          "src": "680:12:85"
                        },
                        "nodeType": "YulExpressionStatement",
                        "src": "680:12:85"
                      }
                    ]
                  },
                  "condition": {
                    "arguments": [
                      {
                        "name": "offset",
                        "nodeType": "YulIdentifier",
                        "src": "666:6:85"
                      },
                      {
                        "name": "_1",
                        "nodeType": "YulIdentifier",
                        "src": "674:2:85"
                      }
                    ],
                    "functionName": {
                      "name": "gt",
                      "nodeType": "YulIdentifier",
                      "src": "663:2:85"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "663:14:85"
                  },
                  "nodeType": "YulIf",
                  "src": "660:34:85"
                },
                {
                  "nodeType": "YulVariableDeclaration",
                  "src": "703:32:85",
                  "value": {
                    "arguments": [
                      {
                        "name": "headStart",
                        "nodeType": "YulIdentifier",
                        "src": "717:9:85"
                      },
                      {
                        "name": "offset",
                        "nodeType": "YulIdentifier",
                        "src": "728:6:85"
                      }
                    ],
                    "functionName": {
                      "name": "add",
                      "nodeType": "YulIdentifier",
                      "src": "713:3:85"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "713:22:85"
                  },
                  "variables": [
                    {
                      "name": "_2",
                      "nodeType": "YulTypedName",
                      "src": "707:2:85",
                      "type": ""
                    }
                  ]
                },
                {
                  "body": {
                    "nodeType": "YulBlock",
                    "src": "783:16:85",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "kind": "number",
                              "nodeType": "YulLiteral",
                              "src": "792:1:85",
                              "type": "",
                              "value": "0"
                            },
                            {
                              "kind": "number",
                              "nodeType": "YulLiteral",
                              "src": "795:1:85",
                              "type": "",
                              "value": "0"
                            }
                          ],
                          "functionName": {
                            "name": "revert",
                            "nodeType": "YulIdentifier",
                            "src": "785:6:85"
                          },
                          "nodeType": "YulFunctionCall",
                          "src": "785:12:85"
                        },
                        "nodeType": "YulExpressionStatement",
                        "src": "785:12:85"
                      }
                    ]
                  },
                  "condition": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "_2",
                                "nodeType": "YulIdentifier",
                                "src": "762:2:85"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "766:4:85",
                                "type": "",
                                "value": "0x1f"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "758:3:85"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "758:13:85"
                          },
                          {
                            "name": "dataEnd",
                            "nodeType": "YulIdentifier",
                            "src": "773:7:85"
                          }
                        ],
                        "functionName": {
                          "name": "slt",
                          "nodeType": "YulIdentifier",
                          "src": "754:3:85"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "754:27:85"
                      }
                    ],
                    "functionName": {
                      "name": "iszero",
                      "nodeType": "YulIdentifier",
                      "src": "747:6:85"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "747:35:85"
                  },
                  "nodeType": "YulIf",
                  "src": "744:55:85"
                },
                {
                  "nodeType": "YulVariableDeclaration",
                  "src": "808:30:85",
                  "value": {
                    "arguments": [
                      {
                        "name": "_2",
                        "nodeType": "YulIdentifier",
                        "src": "835:2:85"
                      }
                    ],
                    "functionName": {
                      "name": "calldataload",
                      "nodeType": "YulIdentifier",
                      "src": "822:12:85"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "822:16:85"
                  },
                  "variables": [
                    {
                      "name": "length",
                      "nodeType": "YulTypedName",
                      "src": "812:6:85",
                      "type": ""
                    }
                  ]
                },
                {
                  "body": {
                    "nodeType": "YulBlock",
                    "src": "865:16:85",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "kind": "number",
                              "nodeType": "YulLiteral",
                              "src": "874:1:85",
                              "type": "",
                              "value": "0"
                            },
                            {
                              "kind": "number",
                              "nodeType": "YulLiteral",
                              "src": "877:1:85",
                              "type": "",
                              "value": "0"
                            }
                          ],
                          "functionName": {
                            "name": "revert",
                            "nodeType": "YulIdentifier",
                            "src": "867:6:85"
                          },
                          "nodeType": "YulFunctionCall",
                          "src": "867:12:85"
                        },
                        "nodeType": "YulExpressionStatement",
                        "src": "867:12:85"
                      }
                    ]
                  },
                  "condition": {
                    "arguments": [
                      {
                        "name": "length",
                        "nodeType": "YulIdentifier",
                        "src": "853:6:85"
                      },
                      {
                        "name": "_1",
                        "nodeType": "YulIdentifier",
                        "src": "861:2:85"
                      }
                    ],
                    "functionName": {
                      "name": "gt",
                      "nodeType": "YulIdentifier",
                      "src": "850:2:85"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "850:14:85"
                  },
                  "nodeType": "YulIf",
                  "src": "847:34:85"
                },
                {
                  "body": {
                    "nodeType": "YulBlock",
                    "src": "941:16:85",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "kind": "number",
                              "nodeType": "YulLiteral",
                              "src": "950:1:85",
                              "type": "",
                              "value": "0"
                            },
                            {
                              "kind": "number",
                              "nodeType": "YulLiteral",
                              "src": "953:1:85",
                              "type": "",
                              "value": "0"
                            }
                          ],
                          "functionName": {
                            "name": "revert",
                            "nodeType": "YulIdentifier",
                            "src": "943:6:85"
                          },
                          "nodeType": "YulFunctionCall",
                          "src": "943:12:85"
                        },
                        "nodeType": "YulExpressionStatement",
                        "src": "943:12:85"
                      }
                    ]
                  },
                  "condition": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "_2",
                                "nodeType": "YulIdentifier",
                                "src": "904:2:85"
                              },
                              {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "912:1:85",
                                    "type": "",
                                    "value": "5"
                                  },
                                  {
                                    "name": "length",
                                    "nodeType": "YulIdentifier",
                                    "src": "915:6:85"
                                  }
                                ],
                                "functionName": {
                                  "name": "shl",
                                  "nodeType": "YulIdentifier",
                                  "src": "908:3:85"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "908:14:85"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "900:3:85"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "900:23:85"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "925:4:85",
                            "type": "",
                            "value": "0x20"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "896:3:85"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "896:34:85"
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulIdentifier",
                        "src": "932:7:85"
                      }
                    ],
                    "functionName": {
                      "name": "gt",
                      "nodeType": "YulIdentifier",
                      "src": "893:2:85"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "893:47:85"
                  },
                  "nodeType": "YulIf",
                  "src": "890:67:85"
                },
                {
                  "nodeType": "YulAssignment",
                  "src": "966:23:85",
                  "value": {
                    "arguments": [
                      {
                        "name": "_2",
                        "nodeType": "YulIdentifier",
                        "src": "980:2:85"
                      },
                      {
                        "kind": "number",
                        "nodeType": "YulLiteral",
                        "src": "984:4:85",
                        "type": "",
                        "value": "0x20"
                      }
                    ],
                    "functionName": {
                      "name": "add",
                      "nodeType": "YulIdentifier",
                      "src": "976:3:85"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "976:13:85"
                  },
                  "variableNames": [
                    {
                      "name": "value0",
                      "nodeType": "YulIdentifier",
                      "src": "966:6:85"
                    }
                  ]
                },
                {
                  "nodeType": "YulAssignment",
                  "src": "998:16:85",
                  "value": {
                    "name": "length",
                    "nodeType": "YulIdentifier",
                    "src": "1008:6:85"
                  },
                  "variableNames": [
                    {
                      "name": "value1",
                      "nodeType": "YulIdentifier",
                      "src": "998:6:85"
                    }
                  ]
                },
                {
                  "nodeType": "YulAssignment",
                  "src": "1023:50:85",
                  "value": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "1056:9:85"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "1067:4:85",
                            "type": "",
                            "value": "0x20"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "1052:3:85"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "1052:20:85"
                      }
                    ],
                    "functionName": {
                      "name": "abi_decode_address",
                      "nodeType": "YulIdentifier",
                      "src": "1033:18:85"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "1033:40:85"
                  },
                  "variableNames": [
                    {
                      "name": "value2",
                      "nodeType": "YulIdentifier",
                      "src": "1023:6:85"
                    }
                  ]
                }
              ]
            },
            "name": "abi_decode_tuple_t_array$_t_bytes32_$dyn_calldata_ptrt_address",
            "nodeType": "YulFunctionDefinition",
            "parameters": [
              {
                "name": "headStart",
                "nodeType": "YulTypedName",
                "src": "456:9:85",
                "type": ""
              },
              {
                "name": "dataEnd",
                "nodeType": "YulTypedName",
                "src": "467:7:85",
                "type": ""
              }
            ],
            "returnVariables": [
              {
                "name": "value0",
                "nodeType": "YulTypedName",
                "src": "479:6:85",
                "type": ""
              },
              {
                "name": "value1",
                "nodeType": "YulTypedName",
                "src": "487:6:85",
                "type": ""
              },
              {
                "name": "value2",
                "nodeType": "YulTypedName",
                "src": "495:6:85",
                "type": ""
              }
            ],
            "src": "384:695:85"
          },
          {
            "body": {
              "nodeType": "YulBlock",
              "src": "1154:110:85",
              "statements": [
                {
                  "body": {
                    "nodeType": "YulBlock",
                    "src": "1200:16:85",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "kind": "number",
                              "nodeType": "YulLiteral",
                              "src": "1209:1:85",
                              "type": "",
                              "value": "0"
                            },
                            {
                              "kind": "number",
                              "nodeType": "YulLiteral",
                              "src": "1212:1:85",
                              "type": "",
                              "value": "0"
                            }
                          ],
                          "functionName": {
                            "name": "revert",
                            "nodeType": "YulIdentifier",
                            "src": "1202:6:85"
                          },
                          "nodeType": "YulFunctionCall",
                          "src": "1202:12:85"
                        },
                        "nodeType": "YulExpressionStatement",
                        "src": "1202:12:85"
                      }
                    ]
                  },
                  "condition": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "name": "dataEnd",
                            "nodeType": "YulIdentifier",
                            "src": "1175:7:85"
                          },
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "1184:9:85"
                          }
                        ],
                        "functionName": {
                          "name": "sub",
                          "nodeType": "YulIdentifier",
                          "src": "1171:3:85"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "1171:23:85"
                      },
                      {
                        "kind": "number",
                        "nodeType": "YulLiteral",
                        "src": "1196:2:85",
                        "type": "",
                        "value": "32"
                      }
                    ],
                    "functionName": {
                      "name": "slt",
                      "nodeType": "YulIdentifier",
                      "src": "1167:3:85"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "1167:32:85"
                  },
                  "nodeType": "YulIf",
                  "src": "1164:52:85"
                },
                {
                  "nodeType": "YulAssignment",
                  "src": "1225:33:85",
                  "value": {
                    "arguments": [
                      {
                        "name": "headStart",
                        "nodeType": "YulIdentifier",
                        "src": "1248:9:85"
                      }
                    ],
                    "functionName": {
                      "name": "calldataload",
                      "nodeType": "YulIdentifier",
                      "src": "1235:12:85"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "1235:23:85"
                  },
                  "variableNames": [
                    {
                      "name": "value0",
                      "nodeType": "YulIdentifier",
                      "src": "1225:6:85"
                    }
                  ]
                }
              ]
            },
            "name": "abi_decode_tuple_t_bytes32",
            "nodeType": "YulFunctionDefinition",
            "parameters": [
              {
                "name": "headStart",
                "nodeType": "YulTypedName",
                "src": "1120:9:85",
                "type": ""
              },
              {
                "name": "dataEnd",
                "nodeType": "YulTypedName",
                "src": "1131:7:85",
                "type": ""
              }
            ],
            "returnVariables": [
              {
                "name": "value0",
                "nodeType": "YulTypedName",
                "src": "1143:6:85",
                "type": ""
              }
            ],
            "src": "1084:180:85"
          },
          {
            "body": {
              "nodeType": "YulBlock",
              "src": "1370:102:85",
              "statements": [
                {
                  "nodeType": "YulAssignment",
                  "src": "1380:26:85",
                  "value": {
                    "arguments": [
                      {
                        "name": "headStart",
                        "nodeType": "YulIdentifier",
                        "src": "1392:9:85"
                      },
                      {
                        "kind": "number",
                        "nodeType": "YulLiteral",
                        "src": "1403:2:85",
                        "type": "",
                        "value": "32"
                      }
                    ],
                    "functionName": {
                      "name": "add",
                      "nodeType": "YulIdentifier",
                      "src": "1388:3:85"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "1388:18:85"
                  },
                  "variableNames": [
                    {
                      "name": "tail",
                      "nodeType": "YulIdentifier",
                      "src": "1380:4:85"
                    }
                  ]
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "name": "headStart",
                        "nodeType": "YulIdentifier",
                        "src": "1422:9:85"
                      },
                      {
                        "arguments": [
                          {
                            "name": "value0",
                            "nodeType": "YulIdentifier",
                            "src": "1437:6:85"
                          },
                          {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "1453:3:85",
                                    "type": "",
                                    "value": "160"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "1458:1:85",
                                    "type": "",
                                    "value": "1"
                                  }
                                ],
                                "functionName": {
                                  "name": "shl",
                                  "nodeType": "YulIdentifier",
                                  "src": "1449:3:85"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1449:11:85"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "1462:1:85",
                                "type": "",
                                "value": "1"
                              }
                            ],
                            "functionName": {
                              "name": "sub",
                              "nodeType": "YulIdentifier",
                              "src": "1445:3:85"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1445:19:85"
                          }
                        ],
                        "functionName": {
                          "name": "and",
                          "nodeType": "YulIdentifier",
                          "src": "1433:3:85"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "1433:32:85"
                      }
                    ],
                    "functionName": {
                      "name": "mstore",
                      "nodeType": "YulIdentifier",
                      "src": "1415:6:85"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "1415:51:85"
                  },
                  "nodeType": "YulExpressionStatement",
                  "src": "1415:51:85"
                }
              ]
            },
            "name": "abi_encode_tuple_t_address__to_t_address__fromStack_reversed",
            "nodeType": "YulFunctionDefinition",
            "parameters": [
              {
                "name": "headStart",
                "nodeType": "YulTypedName",
                "src": "1339:9:85",
                "type": ""
              },
              {
                "name": "value0",
                "nodeType": "YulTypedName",
                "src": "1350:6:85",
                "type": ""
              }
            ],
            "returnVariables": [
              {
                "name": "tail",
                "nodeType": "YulTypedName",
                "src": "1361:4:85",
                "type": ""
              }
            ],
            "src": "1269:203:85"
          },
          {
            "body": {
              "nodeType": "YulBlock",
              "src": "1550:275:85",
              "statements": [
                {
                  "body": {
                    "nodeType": "YulBlock",
                    "src": "1599:16:85",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "kind": "number",
                              "nodeType": "YulLiteral",
                              "src": "1608:1:85",
                              "type": "",
                              "value": "0"
                            },
                            {
                              "kind": "number",
                              "nodeType": "YulLiteral",
                              "src": "1611:1:85",
                              "type": "",
                              "value": "0"
                            }
                          ],
                          "functionName": {
                            "name": "revert",
                            "nodeType": "YulIdentifier",
                            "src": "1601:6:85"
                          },
                          "nodeType": "YulFunctionCall",
                          "src": "1601:12:85"
                        },
                        "nodeType": "YulExpressionStatement",
                        "src": "1601:12:85"
                      }
                    ]
                  },
                  "condition": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "offset",
                                "nodeType": "YulIdentifier",
                                "src": "1578:6:85"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "1586:4:85",
                                "type": "",
                                "value": "0x1f"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "1574:3:85"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1574:17:85"
                          },
                          {
                            "name": "end",
                            "nodeType": "YulIdentifier",
                            "src": "1593:3:85"
                          }
                        ],
                        "functionName": {
                          "name": "slt",
                          "nodeType": "YulIdentifier",
                          "src": "1570:3:85"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "1570:27:85"
                      }
                    ],
                    "functionName": {
                      "name": "iszero",
                      "nodeType": "YulIdentifier",
                      "src": "1563:6:85"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "1563:35:85"
                  },
                  "nodeType": "YulIf",
                  "src": "1560:55:85"
                },
                {
                  "nodeType": "YulAssignment",
                  "src": "1624:30:85",
                  "value": {
                    "arguments": [
                      {
                        "name": "offset",
                        "nodeType": "YulIdentifier",
                        "src": "1647:6:85"
                      }
                    ],
                    "functionName": {
                      "name": "calldataload",
                      "nodeType": "YulIdentifier",
                      "src": "1634:12:85"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "1634:20:85"
                  },
                  "variableNames": [
                    {
                      "name": "length",
                      "nodeType": "YulIdentifier",
                      "src": "1624:6:85"
                    }
                  ]
                },
                {
                  "body": {
                    "nodeType": "YulBlock",
                    "src": "1697:16:85",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "kind": "number",
                              "nodeType": "YulLiteral",
                              "src": "1706:1:85",
                              "type": "",
                              "value": "0"
                            },
                            {
                              "kind": "number",
                              "nodeType": "YulLiteral",
                              "src": "1709:1:85",
                              "type": "",
                              "value": "0"
                            }
                          ],
                          "functionName": {
                            "name": "revert",
                            "nodeType": "YulIdentifier",
                            "src": "1699:6:85"
                          },
                          "nodeType": "YulFunctionCall",
                          "src": "1699:12:85"
                        },
                        "nodeType": "YulExpressionStatement",
                        "src": "1699:12:85"
                      }
                    ]
                  },
                  "condition": {
                    "arguments": [
                      {
                        "name": "length",
                        "nodeType": "YulIdentifier",
                        "src": "1669:6:85"
                      },
                      {
                        "kind": "number",
                        "nodeType": "YulLiteral",
                        "src": "1677:18:85",
                        "type": "",
                        "value": "0xffffffffffffffff"
                      }
                    ],
                    "functionName": {
                      "name": "gt",
                      "nodeType": "YulIdentifier",
                      "src": "1666:2:85"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "1666:30:85"
                  },
                  "nodeType": "YulIf",
                  "src": "1663:50:85"
                },
                {
                  "nodeType": "YulAssignment",
                  "src": "1722:29:85",
                  "value": {
                    "arguments": [
                      {
                        "name": "offset",
                        "nodeType": "YulIdentifier",
                        "src": "1738:6:85"
                      },
                      {
                        "kind": "number",
                        "nodeType": "YulLiteral",
                        "src": "1746:4:85",
                        "type": "",
                        "value": "0x20"
                      }
                    ],
                    "functionName": {
                      "name": "add",
                      "nodeType": "YulIdentifier",
                      "src": "1734:3:85"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "1734:17:85"
                  },
                  "variableNames": [
                    {
                      "name": "arrayPos",
                      "nodeType": "YulIdentifier",
                      "src": "1722:8:85"
                    }
                  ]
                },
                {
                  "body": {
                    "nodeType": "YulBlock",
                    "src": "1803:16:85",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "kind": "number",
                              "nodeType": "YulLiteral",
                              "src": "1812:1:85",
                              "type": "",
                              "value": "0"
                            },
                            {
                              "kind": "number",
                              "nodeType": "YulLiteral",
                              "src": "1815:1:85",
                              "type": "",
                              "value": "0"
                            }
                          ],
                          "functionName": {
                            "name": "revert",
                            "nodeType": "YulIdentifier",
                            "src": "1805:6:85"
                          },
                          "nodeType": "YulFunctionCall",
                          "src": "1805:12:85"
                        },
                        "nodeType": "YulExpressionStatement",
                        "src": "1805:12:85"
                      }
                    ]
                  },
                  "condition": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "offset",
                                "nodeType": "YulIdentifier",
                                "src": "1774:6:85"
                              },
                              {
                                "name": "length",
                                "nodeType": "YulIdentifier",
                                "src": "1782:6:85"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "1770:3:85"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1770:19:85"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "1791:4:85",
                            "type": "",
                            "value": "0x20"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "1766:3:85"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "1766:30:85"
                      },
                      {
                        "name": "end",
                        "nodeType": "YulIdentifier",
                        "src": "1798:3:85"
                      }
                    ],
                    "functionName": {
                      "name": "gt",
                      "nodeType": "YulIdentifier",
                      "src": "1763:2:85"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "1763:39:85"
                  },
                  "nodeType": "YulIf",
                  "src": "1760:59:85"
                }
              ]
            },
            "name": "abi_decode_string_calldata",
            "nodeType": "YulFunctionDefinition",
            "parameters": [
              {
                "name": "offset",
                "nodeType": "YulTypedName",
                "src": "1513:6:85",
                "type": ""
              },
              {
                "name": "end",
                "nodeType": "YulTypedName",
                "src": "1521:3:85",
                "type": ""
              }
            ],
            "returnVariables": [
              {
                "name": "arrayPos",
                "nodeType": "YulTypedName",
                "src": "1529:8:85",
                "type": ""
              },
              {
                "name": "length",
                "nodeType": "YulTypedName",
                "src": "1539:6:85",
                "type": ""
              }
            ],
            "src": "1477:348:85"
          },
          {
            "body": {
              "nodeType": "YulBlock",
              "src": "1920:321:85",
              "statements": [
                {
                  "body": {
                    "nodeType": "YulBlock",
                    "src": "1966:16:85",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "kind": "number",
                              "nodeType": "YulLiteral",
                              "src": "1975:1:85",
                              "type": "",
                              "value": "0"
                            },
                            {
                              "kind": "number",
                              "nodeType": "YulLiteral",
                              "src": "1978:1:85",
                              "type": "",
                              "value": "0"
                            }
                          ],
                          "functionName": {
                            "name": "revert",
                            "nodeType": "YulIdentifier",
                            "src": "1968:6:85"
                          },
                          "nodeType": "YulFunctionCall",
                          "src": "1968:12:85"
                        },
                        "nodeType": "YulExpressionStatement",
                        "src": "1968:12:85"
                      }
                    ]
                  },
                  "condition": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "name": "dataEnd",
                            "nodeType": "YulIdentifier",
                            "src": "1941:7:85"
                          },
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "1950:9:85"
                          }
                        ],
                        "functionName": {
                          "name": "sub",
                          "nodeType": "YulIdentifier",
                          "src": "1937:3:85"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "1937:23:85"
                      },
                      {
                        "kind": "number",
                        "nodeType": "YulLiteral",
                        "src": "1962:2:85",
                        "type": "",
                        "value": "32"
                      }
                    ],
                    "functionName": {
                      "name": "slt",
                      "nodeType": "YulIdentifier",
                      "src": "1933:3:85"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "1933:32:85"
                  },
                  "nodeType": "YulIf",
                  "src": "1930:52:85"
                },
                {
                  "nodeType": "YulVariableDeclaration",
                  "src": "1991:37:85",
                  "value": {
                    "arguments": [
                      {
                        "name": "headStart",
                        "nodeType": "YulIdentifier",
                        "src": "2018:9:85"
                      }
                    ],
                    "functionName": {
                      "name": "calldataload",
                      "nodeType": "YulIdentifier",
                      "src": "2005:12:85"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "2005:23:85"
                  },
                  "variables": [
                    {
                      "name": "offset",
                      "nodeType": "YulTypedName",
                      "src": "1995:6:85",
                      "type": ""
                    }
                  ]
                },
                {
                  "body": {
                    "nodeType": "YulBlock",
                    "src": "2071:16:85",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "kind": "number",
                              "nodeType": "YulLiteral",
                              "src": "2080:1:85",
                              "type": "",
                              "value": "0"
                            },
                            {
                              "kind": "number",
                              "nodeType": "YulLiteral",
                              "src": "2083:1:85",
                              "type": "",
                              "value": "0"
                            }
                          ],
                          "functionName": {
                            "name": "revert",
                            "nodeType": "YulIdentifier",
                            "src": "2073:6:85"
                          },
                          "nodeType": "YulFunctionCall",
                          "src": "2073:12:85"
                        },
                        "nodeType": "YulExpressionStatement",
                        "src": "2073:12:85"
                      }
                    ]
                  },
                  "condition": {
                    "arguments": [
                      {
                        "name": "offset",
                        "nodeType": "YulIdentifier",
                        "src": "2043:6:85"
                      },
                      {
                        "kind": "number",
                        "nodeType": "YulLiteral",
                        "src": "2051:18:85",
                        "type": "",
                        "value": "0xffffffffffffffff"
                      }
                    ],
                    "functionName": {
                      "name": "gt",
                      "nodeType": "YulIdentifier",
                      "src": "2040:2:85"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "2040:30:85"
                  },
                  "nodeType": "YulIf",
                  "src": "2037:50:85"
                },
                {
                  "nodeType": "YulVariableDeclaration",
                  "src": "2096:85:85",
                  "value": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "2153:9:85"
                          },
                          {
                            "name": "offset",
                            "nodeType": "YulIdentifier",
                            "src": "2164:6:85"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "2149:3:85"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "2149:22:85"
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulIdentifier",
                        "src": "2173:7:85"
                      }
                    ],
                    "functionName": {
                      "name": "abi_decode_string_calldata",
                      "nodeType": "YulIdentifier",
                      "src": "2122:26:85"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "2122:59:85"
                  },
                  "variables": [
                    {
                      "name": "value0_1",
                      "nodeType": "YulTypedName",
                      "src": "2100:8:85",
                      "type": ""
                    },
                    {
                      "name": "value1_1",
                      "nodeType": "YulTypedName",
                      "src": "2110:8:85",
                      "type": ""
                    }
                  ]
                },
                {
                  "nodeType": "YulAssignment",
                  "src": "2190:18:85",
                  "value": {
                    "name": "value0_1",
                    "nodeType": "YulIdentifier",
                    "src": "2200:8:85"
                  },
                  "variableNames": [
                    {
                      "name": "value0",
                      "nodeType": "YulIdentifier",
                      "src": "2190:6:85"
                    }
                  ]
                },
                {
                  "nodeType": "YulAssignment",
                  "src": "2217:18:85",
                  "value": {
                    "name": "value1_1",
                    "nodeType": "YulIdentifier",
                    "src": "2227:8:85"
                  },
                  "variableNames": [
                    {
                      "name": "value1",
                      "nodeType": "YulIdentifier",
                      "src": "2217:6:85"
                    }
                  ]
                }
              ]
            },
            "name": "abi_decode_tuple_t_string_calldata_ptr",
            "nodeType": "YulFunctionDefinition",
            "parameters": [
              {
                "name": "headStart",
                "nodeType": "YulTypedName",
                "src": "1878:9:85",
                "type": ""
              },
              {
                "name": "dataEnd",
                "nodeType": "YulTypedName",
                "src": "1889:7:85",
                "type": ""
              }
            ],
            "returnVariables": [
              {
                "name": "value0",
                "nodeType": "YulTypedName",
                "src": "1901:6:85",
                "type": ""
              },
              {
                "name": "value1",
                "nodeType": "YulTypedName",
                "src": "1909:6:85",
                "type": ""
              }
            ],
            "src": "1830:411:85"
          },
          {
            "body": {
              "nodeType": "YulBlock",
              "src": "2353:378:85",
              "statements": [
                {
                  "body": {
                    "nodeType": "YulBlock",
                    "src": "2399:16:85",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "kind": "number",
                              "nodeType": "YulLiteral",
                              "src": "2408:1:85",
                              "type": "",
                              "value": "0"
                            },
                            {
                              "kind": "number",
                              "nodeType": "YulLiteral",
                              "src": "2411:1:85",
                              "type": "",
                              "value": "0"
                            }
                          ],
                          "functionName": {
                            "name": "revert",
                            "nodeType": "YulIdentifier",
                            "src": "2401:6:85"
                          },
                          "nodeType": "YulFunctionCall",
                          "src": "2401:12:85"
                        },
                        "nodeType": "YulExpressionStatement",
                        "src": "2401:12:85"
                      }
                    ]
                  },
                  "condition": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "name": "dataEnd",
                            "nodeType": "YulIdentifier",
                            "src": "2374:7:85"
                          },
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "2383:9:85"
                          }
                        ],
                        "functionName": {
                          "name": "sub",
                          "nodeType": "YulIdentifier",
                          "src": "2370:3:85"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "2370:23:85"
                      },
                      {
                        "kind": "number",
                        "nodeType": "YulLiteral",
                        "src": "2395:2:85",
                        "type": "",
                        "value": "64"
                      }
                    ],
                    "functionName": {
                      "name": "slt",
                      "nodeType": "YulIdentifier",
                      "src": "2366:3:85"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "2366:32:85"
                  },
                  "nodeType": "YulIf",
                  "src": "2363:52:85"
                },
                {
                  "nodeType": "YulVariableDeclaration",
                  "src": "2424:37:85",
                  "value": {
                    "arguments": [
                      {
                        "name": "headStart",
                        "nodeType": "YulIdentifier",
                        "src": "2451:9:85"
                      }
                    ],
                    "functionName": {
                      "name": "calldataload",
                      "nodeType": "YulIdentifier",
                      "src": "2438:12:85"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "2438:23:85"
                  },
                  "variables": [
                    {
                      "name": "offset",
                      "nodeType": "YulTypedName",
                      "src": "2428:6:85",
                      "type": ""
                    }
                  ]
                },
                {
                  "body": {
                    "nodeType": "YulBlock",
                    "src": "2504:16:85",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "kind": "number",
                              "nodeType": "YulLiteral",
                              "src": "2513:1:85",
                              "type": "",
                              "value": "0"
                            },
                            {
                              "kind": "number",
                              "nodeType": "YulLiteral",
                              "src": "2516:1:85",
                              "type": "",
                              "value": "0"
                            }
                          ],
                          "functionName": {
                            "name": "revert",
                            "nodeType": "YulIdentifier",
                            "src": "2506:6:85"
                          },
                          "nodeType": "YulFunctionCall",
                          "src": "2506:12:85"
                        },
                        "nodeType": "YulExpressionStatement",
                        "src": "2506:12:85"
                      }
                    ]
                  },
                  "condition": {
                    "arguments": [
                      {
                        "name": "offset",
                        "nodeType": "YulIdentifier",
                        "src": "2476:6:85"
                      },
                      {
                        "kind": "number",
                        "nodeType": "YulLiteral",
                        "src": "2484:18:85",
                        "type": "",
                        "value": "0xffffffffffffffff"
                      }
                    ],
                    "functionName": {
                      "name": "gt",
                      "nodeType": "YulIdentifier",
                      "src": "2473:2:85"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "2473:30:85"
                  },
                  "nodeType": "YulIf",
                  "src": "2470:50:85"
                },
                {
                  "nodeType": "YulVariableDeclaration",
                  "src": "2529:85:85",
                  "value": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "2586:9:85"
                          },
                          {
                            "name": "offset",
                            "nodeType": "YulIdentifier",
                            "src": "2597:6:85"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "2582:3:85"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "2582:22:85"
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulIdentifier",
                        "src": "2606:7:85"
                      }
                    ],
                    "functionName": {
                      "name": "abi_decode_string_calldata",
                      "nodeType": "YulIdentifier",
                      "src": "2555:26:85"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "2555:59:85"
                  },
                  "variables": [
                    {
                      "name": "value0_1",
                      "nodeType": "YulTypedName",
                      "src": "2533:8:85",
                      "type": ""
                    },
                    {
                      "name": "value1_1",
                      "nodeType": "YulTypedName",
                      "src": "2543:8:85",
                      "type": ""
                    }
                  ]
                },
                {
                  "nodeType": "YulAssignment",
                  "src": "2623:18:85",
                  "value": {
                    "name": "value0_1",
                    "nodeType": "YulIdentifier",
                    "src": "2633:8:85"
                  },
                  "variableNames": [
                    {
                      "name": "value0",
                      "nodeType": "YulIdentifier",
                      "src": "2623:6:85"
                    }
                  ]
                },
                {
                  "nodeType": "YulAssignment",
                  "src": "2650:18:85",
                  "value": {
                    "name": "value1_1",
                    "nodeType": "YulIdentifier",
                    "src": "2660:8:85"
                  },
                  "variableNames": [
                    {
                      "name": "value1",
                      "nodeType": "YulIdentifier",
                      "src": "2650:6:85"
                    }
                  ]
                },
                {
                  "nodeType": "YulAssignment",
                  "src": "2677:48:85",
                  "value": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "2710:9:85"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "2721:2:85",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "2706:3:85"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "2706:18:85"
                      }
                    ],
                    "functionName": {
                      "name": "abi_decode_address",
                      "nodeType": "YulIdentifier",
                      "src": "2687:18:85"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "2687:38:85"
                  },
                  "variableNames": [
                    {
                      "name": "value2",
                      "nodeType": "YulIdentifier",
                      "src": "2677:6:85"
                    }
                  ]
                }
              ]
            },
            "name": "abi_decode_tuple_t_string_calldata_ptrt_address",
            "nodeType": "YulFunctionDefinition",
            "parameters": [
              {
                "name": "headStart",
                "nodeType": "YulTypedName",
                "src": "2303:9:85",
                "type": ""
              },
              {
                "name": "dataEnd",
                "nodeType": "YulTypedName",
                "src": "2314:7:85",
                "type": ""
              }
            ],
            "returnVariables": [
              {
                "name": "value0",
                "nodeType": "YulTypedName",
                "src": "2326:6:85",
                "type": ""
              },
              {
                "name": "value1",
                "nodeType": "YulTypedName",
                "src": "2334:6:85",
                "type": ""
              },
              {
                "name": "value2",
                "nodeType": "YulTypedName",
                "src": "2342:6:85",
                "type": ""
              }
            ],
            "src": "2246:485:85"
          },
          {
            "body": {
              "nodeType": "YulBlock",
              "src": "2806:116:85",
              "statements": [
                {
                  "body": {
                    "nodeType": "YulBlock",
                    "src": "2852:16:85",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "kind": "number",
                              "nodeType": "YulLiteral",
                              "src": "2861:1:85",
                              "type": "",
                              "value": "0"
                            },
                            {
                              "kind": "number",
                              "nodeType": "YulLiteral",
                              "src": "2864:1:85",
                              "type": "",
                              "value": "0"
                            }
                          ],
                          "functionName": {
                            "name": "revert",
                            "nodeType": "YulIdentifier",
                            "src": "2854:6:85"
                          },
                          "nodeType": "YulFunctionCall",
                          "src": "2854:12:85"
                        },
                        "nodeType": "YulExpressionStatement",
                        "src": "2854:12:85"
                      }
                    ]
                  },
                  "condition": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "name": "dataEnd",
                            "nodeType": "YulIdentifier",
                            "src": "2827:7:85"
                          },
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "2836:9:85"
                          }
                        ],
                        "functionName": {
                          "name": "sub",
                          "nodeType": "YulIdentifier",
                          "src": "2823:3:85"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "2823:23:85"
                      },
                      {
                        "kind": "number",
                        "nodeType": "YulLiteral",
                        "src": "2848:2:85",
                        "type": "",
                        "value": "32"
                      }
                    ],
                    "functionName": {
                      "name": "slt",
                      "nodeType": "YulIdentifier",
                      "src": "2819:3:85"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "2819:32:85"
                  },
                  "nodeType": "YulIf",
                  "src": "2816:52:85"
                },
                {
                  "nodeType": "YulAssignment",
                  "src": "2877:39:85",
                  "value": {
                    "arguments": [
                      {
                        "name": "headStart",
                        "nodeType": "YulIdentifier",
                        "src": "2906:9:85"
                      }
                    ],
                    "functionName": {
                      "name": "abi_decode_address",
                      "nodeType": "YulIdentifier",
                      "src": "2887:18:85"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "2887:29:85"
                  },
                  "variableNames": [
                    {
                      "name": "value0",
                      "nodeType": "YulIdentifier",
                      "src": "2877:6:85"
                    }
                  ]
                }
              ]
            },
            "name": "abi_decode_tuple_t_address",
            "nodeType": "YulFunctionDefinition",
            "parameters": [
              {
                "name": "headStart",
                "nodeType": "YulTypedName",
                "src": "2772:9:85",
                "type": ""
              },
              {
                "name": "dataEnd",
                "nodeType": "YulTypedName",
                "src": "2783:7:85",
                "type": ""
              }
            ],
            "returnVariables": [
              {
                "name": "value0",
                "nodeType": "YulTypedName",
                "src": "2795:6:85",
                "type": ""
              }
            ],
            "src": "2736:186:85"
          },
          {
            "body": {
              "nodeType": "YulBlock",
              "src": "2959:95:85",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "kind": "number",
                        "nodeType": "YulLiteral",
                        "src": "2976:1:85",
                        "type": "",
                        "value": "0"
                      },
                      {
                        "arguments": [
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "2983:3:85",
                            "type": "",
                            "value": "224"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "2988:10:85",
                            "type": "",
                            "value": "0x4e487b71"
                          }
                        ],
                        "functionName": {
                          "name": "shl",
                          "nodeType": "YulIdentifier",
                          "src": "2979:3:85"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "2979:20:85"
                      }
                    ],
                    "functionName": {
                      "name": "mstore",
                      "nodeType": "YulIdentifier",
                      "src": "2969:6:85"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "2969:31:85"
                  },
                  "nodeType": "YulExpressionStatement",
                  "src": "2969:31:85"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "kind": "number",
                        "nodeType": "YulLiteral",
                        "src": "3016:1:85",
                        "type": "",
                        "value": "4"
                      },
                      {
                        "kind": "number",
                        "nodeType": "YulLiteral",
                        "src": "3019:4:85",
                        "type": "",
                        "value": "0x32"
                      }
                    ],
                    "functionName": {
                      "name": "mstore",
                      "nodeType": "YulIdentifier",
                      "src": "3009:6:85"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "3009:15:85"
                  },
                  "nodeType": "YulExpressionStatement",
                  "src": "3009:15:85"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "kind": "number",
                        "nodeType": "YulLiteral",
                        "src": "3040:1:85",
                        "type": "",
                        "value": "0"
                      },
                      {
                        "kind": "number",
                        "nodeType": "YulLiteral",
                        "src": "3043:4:85",
                        "type": "",
                        "value": "0x24"
                      }
                    ],
                    "functionName": {
                      "name": "revert",
                      "nodeType": "YulIdentifier",
                      "src": "3033:6:85"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "3033:15:85"
                  },
                  "nodeType": "YulExpressionStatement",
                  "src": "3033:15:85"
                }
              ]
            },
            "name": "panic_error_0x32",
            "nodeType": "YulFunctionDefinition",
            "src": "2927:127:85"
          },
          {
            "body": {
              "nodeType": "YulBlock",
              "src": "3233:178:85",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "name": "headStart",
                        "nodeType": "YulIdentifier",
                        "src": "3250:9:85"
                      },
                      {
                        "kind": "number",
                        "nodeType": "YulLiteral",
                        "src": "3261:2:85",
                        "type": "",
                        "value": "32"
                      }
                    ],
                    "functionName": {
                      "name": "mstore",
                      "nodeType": "YulIdentifier",
                      "src": "3243:6:85"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "3243:21:85"
                  },
                  "nodeType": "YulExpressionStatement",
                  "src": "3243:21:85"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "3284:9:85"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "3295:2:85",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "3280:3:85"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "3280:18:85"
                      },
                      {
                        "kind": "number",
                        "nodeType": "YulLiteral",
                        "src": "3300:2:85",
                        "type": "",
                        "value": "28"
                      }
                    ],
                    "functionName": {
                      "name": "mstore",
                      "nodeType": "YulIdentifier",
                      "src": "3273:6:85"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "3273:30:85"
                  },
                  "nodeType": "YulExpressionStatement",
                  "src": "3273:30:85"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "3323:9:85"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "3334:2:85",
                            "type": "",
                            "value": "64"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "3319:3:85"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "3319:18:85"
                      },
                      {
                        "hexValue": "636f6e747261637420616c726561647920696e697469616c697a6564",
                        "kind": "string",
                        "nodeType": "YulLiteral",
                        "src": "3339:30:85",
                        "type": "",
                        "value": "contract already initialized"
                      }
                    ],
                    "functionName": {
                      "name": "mstore",
                      "nodeType": "YulIdentifier",
                      "src": "3312:6:85"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "3312:58:85"
                  },
                  "nodeType": "YulExpressionStatement",
                  "src": "3312:58:85"
                },
                {
                  "nodeType": "YulAssignment",
                  "src": "3379:26:85",
                  "value": {
                    "arguments": [
                      {
                        "name": "headStart",
                        "nodeType": "YulIdentifier",
                        "src": "3391:9:85"
                      },
                      {
                        "kind": "number",
                        "nodeType": "YulLiteral",
                        "src": "3402:2:85",
                        "type": "",
                        "value": "96"
                      }
                    ],
                    "functionName": {
                      "name": "add",
                      "nodeType": "YulIdentifier",
                      "src": "3387:3:85"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "3387:18:85"
                  },
                  "variableNames": [
                    {
                      "name": "tail",
                      "nodeType": "YulIdentifier",
                      "src": "3379:4:85"
                    }
                  ]
                }
              ]
            },
            "name": "abi_encode_tuple_t_stringliteral_0eaa08b63d5ee9e058835eb2dc7a36f8bcf5c2ea6d8d745d8265f9e4063fd134__to_t_string_memory_ptr__fromStack_reversed",
            "nodeType": "YulFunctionDefinition",
            "parameters": [
              {
                "name": "headStart",
                "nodeType": "YulTypedName",
                "src": "3210:9:85",
                "type": ""
              }
            ],
            "returnVariables": [
              {
                "name": "tail",
                "nodeType": "YulTypedName",
                "src": "3224:4:85",
                "type": ""
              }
            ],
            "src": "3059:352:85"
          },
          {
            "body": {
              "nodeType": "YulBlock",
              "src": "3565:124:85",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "name": "pos",
                        "nodeType": "YulIdentifier",
                        "src": "3588:3:85"
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulIdentifier",
                        "src": "3593:6:85"
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulIdentifier",
                        "src": "3601:6:85"
                      }
                    ],
                    "functionName": {
                      "name": "calldatacopy",
                      "nodeType": "YulIdentifier",
                      "src": "3575:12:85"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "3575:33:85"
                  },
                  "nodeType": "YulExpressionStatement",
                  "src": "3575:33:85"
                },
                {
                  "nodeType": "YulVariableDeclaration",
                  "src": "3617:26:85",
                  "value": {
                    "arguments": [
                      {
                        "name": "pos",
                        "nodeType": "YulIdentifier",
                        "src": "3631:3:85"
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulIdentifier",
                        "src": "3636:6:85"
                      }
                    ],
                    "functionName": {
                      "name": "add",
                      "nodeType": "YulIdentifier",
                      "src": "3627:3:85"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "3627:16:85"
                  },
                  "variables": [
                    {
                      "name": "_1",
                      "nodeType": "YulTypedName",
                      "src": "3621:2:85",
                      "type": ""
                    }
                  ]
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "name": "_1",
                        "nodeType": "YulIdentifier",
                        "src": "3659:2:85"
                      },
                      {
                        "kind": "number",
                        "nodeType": "YulLiteral",
                        "src": "3663:1:85",
                        "type": "",
                        "value": "0"
                      }
                    ],
                    "functionName": {
                      "name": "mstore",
                      "nodeType": "YulIdentifier",
                      "src": "3652:6:85"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "3652:13:85"
                  },
                  "nodeType": "YulExpressionStatement",
                  "src": "3652:13:85"
                },
                {
                  "nodeType": "YulAssignment",
                  "src": "3674:9:85",
                  "value": {
                    "name": "_1",
                    "nodeType": "YulIdentifier",
                    "src": "3681:2:85"
                  },
                  "variableNames": [
                    {
                      "name": "end",
                      "nodeType": "YulIdentifier",
                      "src": "3674:3:85"
                    }
                  ]
                }
              ]
            },
            "name": "abi_encode_tuple_packed_t_string_calldata_ptr__to_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed",
            "nodeType": "YulFunctionDefinition",
            "parameters": [
              {
                "name": "pos",
                "nodeType": "YulTypedName",
                "src": "3533:3:85",
                "type": ""
              },
              {
                "name": "value1",
                "nodeType": "YulTypedName",
                "src": "3538:6:85",
                "type": ""
              },
              {
                "name": "value0",
                "nodeType": "YulTypedName",
                "src": "3546:6:85",
                "type": ""
              }
            ],
            "returnVariables": [
              {
                "name": "end",
                "nodeType": "YulTypedName",
                "src": "3557:3:85",
                "type": ""
              }
            ],
            "src": "3416:273:85"
          },
          {
            "body": {
              "nodeType": "YulBlock",
              "src": "3868:182:85",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "name": "headStart",
                        "nodeType": "YulIdentifier",
                        "src": "3885:9:85"
                      },
                      {
                        "kind": "number",
                        "nodeType": "YulLiteral",
                        "src": "3896:2:85",
                        "type": "",
                        "value": "32"
                      }
                    ],
                    "functionName": {
                      "name": "mstore",
                      "nodeType": "YulIdentifier",
                      "src": "3878:6:85"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "3878:21:85"
                  },
                  "nodeType": "YulExpressionStatement",
                  "src": "3878:21:85"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "3919:9:85"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "3930:2:85",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "3915:3:85"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "3915:18:85"
                      },
                      {
                        "kind": "number",
                        "nodeType": "YulLiteral",
                        "src": "3935:2:85",
                        "type": "",
                        "value": "32"
                      }
                    ],
                    "functionName": {
                      "name": "mstore",
                      "nodeType": "YulIdentifier",
                      "src": "3908:6:85"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "3908:30:85"
                  },
                  "nodeType": "YulExpressionStatement",
                  "src": "3908:30:85"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "3958:9:85"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "3969:2:85",
                            "type": "",
                            "value": "64"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "3954:3:85"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "3954:18:85"
                      },
                      {
                        "hexValue": "6964656e74696669657220686173206e6f20726567697374727920656e747279",
                        "kind": "string",
                        "nodeType": "YulLiteral",
                        "src": "3974:34:85",
                        "type": "",
                        "value": "identifier has no registry entry"
                      }
                    ],
                    "functionName": {
                      "name": "mstore",
                      "nodeType": "YulIdentifier",
                      "src": "3947:6:85"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "3947:62:85"
                  },
                  "nodeType": "YulExpressionStatement",
                  "src": "3947:62:85"
                },
                {
                  "nodeType": "YulAssignment",
                  "src": "4018:26:85",
                  "value": {
                    "arguments": [
                      {
                        "name": "headStart",
                        "nodeType": "YulIdentifier",
                        "src": "4030:9:85"
                      },
                      {
                        "kind": "number",
                        "nodeType": "YulLiteral",
                        "src": "4041:2:85",
                        "type": "",
                        "value": "96"
                      }
                    ],
                    "functionName": {
                      "name": "add",
                      "nodeType": "YulIdentifier",
                      "src": "4026:3:85"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "4026:18:85"
                  },
                  "variableNames": [
                    {
                      "name": "tail",
                      "nodeType": "YulIdentifier",
                      "src": "4018:4:85"
                    }
                  ]
                }
              ]
            },
            "name": "abi_encode_tuple_t_stringliteral_d15abe625df242946c50488116c5d1fa2b82385652a4b98f58b14fa8299917e7__to_t_string_memory_ptr__fromStack_reversed",
            "nodeType": "YulFunctionDefinition",
            "parameters": [
              {
                "name": "headStart",
                "nodeType": "YulTypedName",
                "src": "3845:9:85",
                "type": ""
              }
            ],
            "returnVariables": [
              {
                "name": "tail",
                "nodeType": "YulTypedName",
                "src": "3859:4:85",
                "type": ""
              }
            ],
            "src": "3694:356:85"
          },
          {
            "body": {
              "nodeType": "YulBlock",
              "src": "4186:259:85",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "name": "headStart",
                        "nodeType": "YulIdentifier",
                        "src": "4203:9:85"
                      },
                      {
                        "kind": "number",
                        "nodeType": "YulLiteral",
                        "src": "4214:2:85",
                        "type": "",
                        "value": "32"
                      }
                    ],
                    "functionName": {
                      "name": "mstore",
                      "nodeType": "YulIdentifier",
                      "src": "4196:6:85"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "4196:21:85"
                  },
                  "nodeType": "YulExpressionStatement",
                  "src": "4196:21:85"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "4237:9:85"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "4248:2:85",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "4233:3:85"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "4233:18:85"
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulIdentifier",
                        "src": "4253:6:85"
                      }
                    ],
                    "functionName": {
                      "name": "mstore",
                      "nodeType": "YulIdentifier",
                      "src": "4226:6:85"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "4226:34:85"
                  },
                  "nodeType": "YulExpressionStatement",
                  "src": "4226:34:85"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "4286:9:85"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "4297:2:85",
                            "type": "",
                            "value": "64"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "4282:3:85"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "4282:18:85"
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulIdentifier",
                        "src": "4302:6:85"
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulIdentifier",
                        "src": "4310:6:85"
                      }
                    ],
                    "functionName": {
                      "name": "calldatacopy",
                      "nodeType": "YulIdentifier",
                      "src": "4269:12:85"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "4269:48:85"
                  },
                  "nodeType": "YulExpressionStatement",
                  "src": "4269:48:85"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "4341:9:85"
                              },
                              {
                                "name": "value1",
                                "nodeType": "YulIdentifier",
                                "src": "4352:6:85"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "4337:3:85"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4337:22:85"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "4361:2:85",
                            "type": "",
                            "value": "64"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "4333:3:85"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "4333:31:85"
                      },
                      {
                        "kind": "number",
                        "nodeType": "YulLiteral",
                        "src": "4366:1:85",
                        "type": "",
                        "value": "0"
                      }
                    ],
                    "functionName": {
                      "name": "mstore",
                      "nodeType": "YulIdentifier",
                      "src": "4326:6:85"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "4326:42:85"
                  },
                  "nodeType": "YulExpressionStatement",
                  "src": "4326:42:85"
                },
                {
                  "nodeType": "YulAssignment",
                  "src": "4377:62:85",
                  "value": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "4393:9:85"
                          },
                          {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value1",
                                    "nodeType": "YulIdentifier",
                                    "src": "4412:6:85"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "4420:2:85",
                                    "type": "",
                                    "value": "31"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "4408:3:85"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4408:15:85"
                              },
                              {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "4429:2:85",
                                    "type": "",
                                    "value": "31"
                                  }
                                ],
                                "functionName": {
                                  "name": "not",
                                  "nodeType": "YulIdentifier",
                                  "src": "4425:3:85"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4425:7:85"
                              }
                            ],
                            "functionName": {
                              "name": "and",
                              "nodeType": "YulIdentifier",
                              "src": "4404:3:85"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4404:29:85"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "4389:3:85"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "4389:45:85"
                      },
                      {
                        "kind": "number",
                        "nodeType": "YulLiteral",
                        "src": "4436:2:85",
                        "type": "",
                        "value": "64"
                      }
                    ],
                    "functionName": {
                      "name": "add",
                      "nodeType": "YulIdentifier",
                      "src": "4385:3:85"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "4385:54:85"
                  },
                  "variableNames": [
                    {
                      "name": "tail",
                      "nodeType": "YulIdentifier",
                      "src": "4377:4:85"
                    }
                  ]
                }
              ]
            },
            "name": "abi_encode_tuple_t_string_calldata_ptr__to_t_string_memory_ptr__fromStack_reversed",
            "nodeType": "YulFunctionDefinition",
            "parameters": [
              {
                "name": "headStart",
                "nodeType": "YulTypedName",
                "src": "4147:9:85",
                "type": ""
              },
              {
                "name": "value1",
                "nodeType": "YulTypedName",
                "src": "4158:6:85",
                "type": ""
              },
              {
                "name": "value0",
                "nodeType": "YulTypedName",
                "src": "4166:6:85",
                "type": ""
              }
            ],
            "returnVariables": [
              {
                "name": "tail",
                "nodeType": "YulTypedName",
                "src": "4177:4:85",
                "type": ""
              }
            ],
            "src": "4055:390:85"
          },
          {
            "body": {
              "nodeType": "YulBlock",
              "src": "4624:228:85",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "name": "headStart",
                        "nodeType": "YulIdentifier",
                        "src": "4641:9:85"
                      },
                      {
                        "kind": "number",
                        "nodeType": "YulLiteral",
                        "src": "4652:2:85",
                        "type": "",
                        "value": "32"
                      }
                    ],
                    "functionName": {
                      "name": "mstore",
                      "nodeType": "YulIdentifier",
                      "src": "4634:6:85"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "4634:21:85"
                  },
                  "nodeType": "YulExpressionStatement",
                  "src": "4634:21:85"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "4675:9:85"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "4686:2:85",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "4671:3:85"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "4671:18:85"
                      },
                      {
                        "kind": "number",
                        "nodeType": "YulLiteral",
                        "src": "4691:2:85",
                        "type": "",
                        "value": "38"
                      }
                    ],
                    "functionName": {
                      "name": "mstore",
                      "nodeType": "YulIdentifier",
                      "src": "4664:6:85"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "4664:30:85"
                  },
                  "nodeType": "YulExpressionStatement",
                  "src": "4664:30:85"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "4714:9:85"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "4725:2:85",
                            "type": "",
                            "value": "64"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "4710:3:85"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "4710:18:85"
                      },
                      {
                        "hexValue": "4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061",
                        "kind": "string",
                        "nodeType": "YulLiteral",
                        "src": "4730:34:85",
                        "type": "",
                        "value": "Ownable: new owner is the zero a"
                      }
                    ],
                    "functionName": {
                      "name": "mstore",
                      "nodeType": "YulIdentifier",
                      "src": "4703:6:85"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "4703:62:85"
                  },
                  "nodeType": "YulExpressionStatement",
                  "src": "4703:62:85"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "4785:9:85"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "4796:2:85",
                            "type": "",
                            "value": "96"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "4781:3:85"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "4781:18:85"
                      },
                      {
                        "hexValue": "646472657373",
                        "kind": "string",
                        "nodeType": "YulLiteral",
                        "src": "4801:8:85",
                        "type": "",
                        "value": "ddress"
                      }
                    ],
                    "functionName": {
                      "name": "mstore",
                      "nodeType": "YulIdentifier",
                      "src": "4774:6:85"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "4774:36:85"
                  },
                  "nodeType": "YulExpressionStatement",
                  "src": "4774:36:85"
                },
                {
                  "nodeType": "YulAssignment",
                  "src": "4819:27:85",
                  "value": {
                    "arguments": [
                      {
                        "name": "headStart",
                        "nodeType": "YulIdentifier",
                        "src": "4831:9:85"
                      },
                      {
                        "kind": "number",
                        "nodeType": "YulLiteral",
                        "src": "4842:3:85",
                        "type": "",
                        "value": "128"
                      }
                    ],
                    "functionName": {
                      "name": "add",
                      "nodeType": "YulIdentifier",
                      "src": "4827:3:85"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "4827:19:85"
                  },
                  "variableNames": [
                    {
                      "name": "tail",
                      "nodeType": "YulIdentifier",
                      "src": "4819:4:85"
                    }
                  ]
                }
              ]
            },
            "name": "abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack_reversed",
            "nodeType": "YulFunctionDefinition",
            "parameters": [
              {
                "name": "headStart",
                "nodeType": "YulTypedName",
                "src": "4601:9:85",
                "type": ""
              }
            ],
            "returnVariables": [
              {
                "name": "tail",
                "nodeType": "YulTypedName",
                "src": "4615:4:85",
                "type": ""
              }
            ],
            "src": "4450:402:85"
          },
          {
            "body": {
              "nodeType": "YulBlock",
              "src": "4905:174:85",
              "statements": [
                {
                  "nodeType": "YulAssignment",
                  "src": "4915:16:85",
                  "value": {
                    "arguments": [
                      {
                        "name": "x",
                        "nodeType": "YulIdentifier",
                        "src": "4926:1:85"
                      },
                      {
                        "name": "y",
                        "nodeType": "YulIdentifier",
                        "src": "4929:1:85"
                      }
                    ],
                    "functionName": {
                      "name": "add",
                      "nodeType": "YulIdentifier",
                      "src": "4922:3:85"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "4922:9:85"
                  },
                  "variableNames": [
                    {
                      "name": "sum",
                      "nodeType": "YulIdentifier",
                      "src": "4915:3:85"
                    }
                  ]
                },
                {
                  "body": {
                    "nodeType": "YulBlock",
                    "src": "4962:111:85",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "kind": "number",
                              "nodeType": "YulLiteral",
                              "src": "4983:1:85",
                              "type": "",
                              "value": "0"
                            },
                            {
                              "arguments": [
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "4990:3:85",
                                  "type": "",
                                  "value": "224"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "4995:10:85",
                                  "type": "",
                                  "value": "0x4e487b71"
                                }
                              ],
                              "functionName": {
                                "name": "shl",
                                "nodeType": "YulIdentifier",
                                "src": "4986:3:85"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "4986:20:85"
                            }
                          ],
                          "functionName": {
                            "name": "mstore",
                            "nodeType": "YulIdentifier",
                            "src": "4976:6:85"
                          },
                          "nodeType": "YulFunctionCall",
                          "src": "4976:31:85"
                        },
                        "nodeType": "YulExpressionStatement",
                        "src": "4976:31:85"
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "kind": "number",
                              "nodeType": "YulLiteral",
                              "src": "5027:1:85",
                              "type": "",
                              "value": "4"
                            },
                            {
                              "kind": "number",
                              "nodeType": "YulLiteral",
                              "src": "5030:4:85",
                              "type": "",
                              "value": "0x11"
                            }
                          ],
                          "functionName": {
                            "name": "mstore",
                            "nodeType": "YulIdentifier",
                            "src": "5020:6:85"
                          },
                          "nodeType": "YulFunctionCall",
                          "src": "5020:15:85"
                        },
                        "nodeType": "YulExpressionStatement",
                        "src": "5020:15:85"
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "kind": "number",
                              "nodeType": "YulLiteral",
                              "src": "5055:1:85",
                              "type": "",
                              "value": "0"
                            },
                            {
                              "kind": "number",
                              "nodeType": "YulLiteral",
                              "src": "5058:4:85",
                              "type": "",
                              "value": "0x24"
                            }
                          ],
                          "functionName": {
                            "name": "revert",
                            "nodeType": "YulIdentifier",
                            "src": "5048:6:85"
                          },
                          "nodeType": "YulFunctionCall",
                          "src": "5048:15:85"
                        },
                        "nodeType": "YulExpressionStatement",
                        "src": "5048:15:85"
                      }
                    ]
                  },
                  "condition": {
                    "arguments": [
                      {
                        "name": "x",
                        "nodeType": "YulIdentifier",
                        "src": "4946:1:85"
                      },
                      {
                        "name": "sum",
                        "nodeType": "YulIdentifier",
                        "src": "4949:3:85"
                      }
                    ],
                    "functionName": {
                      "name": "gt",
                      "nodeType": "YulIdentifier",
                      "src": "4943:2:85"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "4943:10:85"
                  },
                  "nodeType": "YulIf",
                  "src": "4940:133:85"
                }
              ]
            },
            "name": "checked_add_t_uint256",
            "nodeType": "YulFunctionDefinition",
            "parameters": [
              {
                "name": "x",
                "nodeType": "YulTypedName",
                "src": "4888:1:85",
                "type": ""
              },
              {
                "name": "y",
                "nodeType": "YulTypedName",
                "src": "4891:1:85",
                "type": ""
              }
            ],
            "returnVariables": [
              {
                "name": "sum",
                "nodeType": "YulTypedName",
                "src": "4897:3:85",
                "type": ""
              }
            ],
            "src": "4857:222:85"
          },
          {
            "body": {
              "nodeType": "YulBlock",
              "src": "5258:182:85",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "name": "headStart",
                        "nodeType": "YulIdentifier",
                        "src": "5275:9:85"
                      },
                      {
                        "kind": "number",
                        "nodeType": "YulLiteral",
                        "src": "5286:2:85",
                        "type": "",
                        "value": "32"
                      }
                    ],
                    "functionName": {
                      "name": "mstore",
                      "nodeType": "YulIdentifier",
                      "src": "5268:6:85"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "5268:21:85"
                  },
                  "nodeType": "YulExpressionStatement",
                  "src": "5268:21:85"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "5309:9:85"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "5320:2:85",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "5305:3:85"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "5305:18:85"
                      },
                      {
                        "kind": "number",
                        "nodeType": "YulLiteral",
                        "src": "5325:2:85",
                        "type": "",
                        "value": "32"
                      }
                    ],
                    "functionName": {
                      "name": "mstore",
                      "nodeType": "YulIdentifier",
                      "src": "5298:6:85"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "5298:30:85"
                  },
                  "nodeType": "YulExpressionStatement",
                  "src": "5298:30:85"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "5348:9:85"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "5359:2:85",
                            "type": "",
                            "value": "64"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "5344:3:85"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "5344:18:85"
                      },
                      {
                        "hexValue": "4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572",
                        "kind": "string",
                        "nodeType": "YulLiteral",
                        "src": "5364:34:85",
                        "type": "",
                        "value": "Ownable: caller is not the owner"
                      }
                    ],
                    "functionName": {
                      "name": "mstore",
                      "nodeType": "YulIdentifier",
                      "src": "5337:6:85"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "5337:62:85"
                  },
                  "nodeType": "YulExpressionStatement",
                  "src": "5337:62:85"
                },
                {
                  "nodeType": "YulAssignment",
                  "src": "5408:26:85",
                  "value": {
                    "arguments": [
                      {
                        "name": "headStart",
                        "nodeType": "YulIdentifier",
                        "src": "5420:9:85"
                      },
                      {
                        "kind": "number",
                        "nodeType": "YulLiteral",
                        "src": "5431:2:85",
                        "type": "",
                        "value": "96"
                      }
                    ],
                    "functionName": {
                      "name": "add",
                      "nodeType": "YulIdentifier",
                      "src": "5416:3:85"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "5416:18:85"
                  },
                  "variableNames": [
                    {
                      "name": "tail",
                      "nodeType": "YulIdentifier",
                      "src": "5408:4:85"
                    }
                  ]
                }
              ]
            },
            "name": "abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed",
            "nodeType": "YulFunctionDefinition",
            "parameters": [
              {
                "name": "headStart",
                "nodeType": "YulTypedName",
                "src": "5235:9:85",
                "type": ""
              }
            ],
            "returnVariables": [
              {
                "name": "tail",
                "nodeType": "YulTypedName",
                "src": "5249:4:85",
                "type": ""
              }
            ],
            "src": "5084:356:85"
          }
        ]
      },
      "contents": "{\n    { }\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, iszero(iszero(value0)))\n    }\n    function abi_decode_address(offset) -> value\n    {\n        value := calldataload(offset)\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_array$_t_bytes32_$dyn_calldata_ptrt_address(headStart, dataEnd) -> value0, value1, value2\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        let offset := calldataload(headStart)\n        let _1 := 0xffffffffffffffff\n        if gt(offset, _1) { revert(0, 0) }\n        let _2 := add(headStart, offset)\n        if iszero(slt(add(_2, 0x1f), dataEnd)) { revert(0, 0) }\n        let length := calldataload(_2)\n        if gt(length, _1) { revert(0, 0) }\n        if gt(add(add(_2, shl(5, length)), 0x20), dataEnd) { revert(0, 0) }\n        value0 := add(_2, 0x20)\n        value1 := length\n        value2 := abi_decode_address(add(headStart, 0x20))\n    }\n    function abi_decode_tuple_t_bytes32(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := calldataload(headStart)\n    }\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n    }\n    function abi_decode_string_calldata(offset, end) -> arrayPos, length\n    {\n        if iszero(slt(add(offset, 0x1f), end)) { revert(0, 0) }\n        length := calldataload(offset)\n        if gt(length, 0xffffffffffffffff) { revert(0, 0) }\n        arrayPos := add(offset, 0x20)\n        if gt(add(add(offset, length), 0x20), end) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_string_calldata_ptr(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let offset := calldataload(headStart)\n        if gt(offset, 0xffffffffffffffff) { revert(0, 0) }\n        let value0_1, value1_1 := abi_decode_string_calldata(add(headStart, offset), dataEnd)\n        value0 := value0_1\n        value1 := value1_1\n    }\n    function abi_decode_tuple_t_string_calldata_ptrt_address(headStart, dataEnd) -> value0, value1, value2\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        let offset := calldataload(headStart)\n        if gt(offset, 0xffffffffffffffff) { revert(0, 0) }\n        let value0_1, value1_1 := abi_decode_string_calldata(add(headStart, offset), dataEnd)\n        value0 := value0_1\n        value1 := value1_1\n        value2 := abi_decode_address(add(headStart, 32))\n    }\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n    }\n    function panic_error_0x32()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x32)\n        revert(0, 0x24)\n    }\n    function abi_encode_tuple_t_stringliteral_0eaa08b63d5ee9e058835eb2dc7a36f8bcf5c2ea6d8d745d8265f9e4063fd134__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 28)\n        mstore(add(headStart, 64), \"contract already initialized\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_packed_t_string_calldata_ptr__to_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed(pos, value1, value0) -> end\n    {\n        calldatacopy(pos, value0, value1)\n        let _1 := add(pos, value1)\n        mstore(_1, 0)\n        end := _1\n    }\n    function abi_encode_tuple_t_stringliteral_d15abe625df242946c50488116c5d1fa2b82385652a4b98f58b14fa8299917e7__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 32)\n        mstore(add(headStart, 64), \"identifier has no registry entry\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_string_calldata_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), value1)\n        calldatacopy(add(headStart, 64), value0, value1)\n        mstore(add(add(headStart, value1), 64), 0)\n        tail := add(add(headStart, and(add(value1, 31), not(31))), 64)\n    }\n    function abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 38)\n        mstore(add(headStart, 64), \"Ownable: new owner is the zero a\")\n        mstore(add(headStart, 96), \"ddress\")\n        tail := add(headStart, 128)\n    }\n    function checked_add_t_uint256(x, y) -> sum\n    {\n        sum := add(x, y)\n        if gt(x, sum)\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x11)\n            revert(0, 0x24)\n        }\n    }\n    function abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 32)\n        mstore(add(headStart, 64), \"Ownable: caller is not the owner\")\n        tail := add(headStart, 96)\n    }\n}",
      "id": 85,
      "language": "Yul",
      "name": "#utility.yul"
    }
  ],
  "sourceMap": "429:3410:44:-:0;;;837:45;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;874:4;936:32:0;719:10:2;936:18:0;:32::i;:::-;896:17:59;891:57;;923:11;:18;;-1:-1:-1;;;;923:18:59;-1:-1:-1;;;923:18:59;;;891:57;842:110;837:45:44;429:3410;;2426:187:0;2499:16;2518:6;;-1:-1:-1;;;;;2534:17:0;;;-1:-1:-1;;;;;;2534:17:0;;;;;;2566:40;;2518:6;;;;;;;2566:40;;2499:16;2566:40;2489:124;2426:187;:::o;14:277:85:-;81:6;134:2;122:9;113:7;109:23;105:32;102:52;;;150:1;147;140:12;102:52;182:9;176:16;235:5;228:13;221:21;214:5;211:32;201:60;;257:1;254;247:12;201:60;280:5;14:277;-1:-1:-1;;;14:277:85:o;:::-;429:3410:44;;;;;;",
  "deployedSourceMap": "429:3410:44:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;319:23:59;;;;;-1:-1:-1;;;319:23:59;;;;;;;;;179:14:85;;172:22;154:41;;142:2;127:18;319:23:59;;;;;;;;3546:291:44;;;;;;:::i;:::-;;:::i;1824:101:0:-;;;:::i;:::-;;545:43:44;;;;;;:::i;:::-;;;;;;;;;;;;-1:-1:-1;;;;;545:43:44;;;;;;-1:-1:-1;;;;;1433:32:85;;;1415:51;;1403:2;1388:18;545:43:44;1269:203:85;994:84:44;;;:::i;2904:201::-;;;;;;:::i;:::-;;:::i;2449:295::-;;;;;;:::i;:::-;;:::i;1201:85:0:-;1247:7;1273:6;-1:-1:-1;;;;;1273:6:0;1201:85;;1277:256:44;;;;;;:::i;:::-;;:::i;1743:215::-;;;;;;:::i;:::-;;:::i;2131:121::-;;;;;;:::i;:::-;2201:7;2223:24;;;:8;:24;;;;;;-1:-1:-1;;;;;2223:24:44;;2131:121;2074:198:0;;;;;;:::i;:::-;;:::i;3546:291:44:-;3651:4;;3663:152;3683:27;;;3663:152;;;3771:6;-1:-1:-1;;;;;3738:39:44;:8;:29;3747:16;;3764:1;3747:19;;;;;;;:::i;:::-;;;;;;;;;;3738:29;;-1:-1:-1;3738:29:44;;;;;;;;-1:-1:-1;3738:29:44;;-1:-1:-1;;;;;3738:29:44;:39;3734:75;;3796:4;3789:11;;;;;3734:75;3716:8;:1;3722;3716:5;:8::i;:::-;3712:12;;3663:152;;;;3827:5;3820:12;;3546:291;;;;;;:::o;1824:101:0:-;1094:13;:11;:13::i;:::-;1888:30:::1;1915:1;1888:18;:30::i;:::-;1824:101::o:0;994:84:44:-;476:11:59;;-1:-1:-1;;;476:11:59;;;;475:12;467:53;;;;-1:-1:-1;;;467:53:59;;3261:2:85;467:53:59;;;3243:21:85;3300:2;3280:18;;;3273:30;3339;3319:18;;;3312:58;3387:18;;467:53:59;;;;;;;;;526:11;:18;;-1:-1:-1;;;;526:18:59;-1:-1:-1;;;526:18:59;;;1043:30:44::1;1062:10;1043:18;:30::i;2904:201::-:0;2984:7;2999:22;3051:10;;3034:28;;;;;;;;;:::i;:::-;;;;-1:-1:-1;;3034:28:44;;;;;;;;;3024:39;;3034:28;3024:39;;;;3076:24;;;;:8;:24;;;;;;-1:-1:-1;;;;;3076:24:44;;-1:-1:-1;;2904:201:44;;;;;:::o;2449:295::-;2534:7;2549:22;2601:10;;2584:28;;;;;;;;;:::i;:::-;;;;-1:-1:-1;;2584:28:44;;;;;;;;;2574:39;;2584:28;2574:39;;;;2663:1;2627:24;;;:8;:24;;;;;;2574:39;;-1:-1:-1;;;;;;2627:24:44;2619:83;;;;-1:-1:-1;;;2619:83:44;;3896:2:85;2619:83:44;;;3878:21:85;;;3915:18;;;3908:30;3974:34;3954:18;;;3947:62;4026:18;;2619:83:44;3694:356:85;2619:83:44;2715:24;;;;:8;:24;;;;;;-1:-1:-1;;;;;2715:24:44;;2449:295;-1:-1:-1;;;2449:295:44:o;1277:256::-;1094:13:0;:11;:13::i;:::-;1367:22:44::1;1419:10;;1402:28;;;;;;;;;:::i;:::-;;::::0;;;;::::1;-1:-1:-1::0;;1402:28:44;;;;;;1392:39;;1402:28:::1;1392:39:::0;;::::1;::::0;1437:24:::1;::::0;;;:8:::1;:24:::0;;;;;;:31;;-1:-1:-1;;;;;;1437:31:44::1;-1:-1:-1::0;;;;;1437:31:44;::::1;::::0;;::::1;::::0;;;1392:39;;-1:-1:-1;1437:31:44;1392:39;;1479:49:::1;::::0;::::1;::::0;1495:10;;;;1479:49:::1;:::i;:::-;;;;;;;;1361:172;1277:256:::0;;;:::o;1743:215::-;1818:7;1841:24;;;:8;:24;;;;;;-1:-1:-1;;;;;1841:24:44;1833:83;;;;-1:-1:-1;;;1833:83:44;;3896:2:85;1833:83:44;;;3878:21:85;;;3915:18;;;3908:30;3974:34;3954:18;;;3947:62;4026:18;;1833:83:44;3694:356:85;1833:83:44;-1:-1:-1;1929:24:44;;;;:8;:24;;;;;;-1:-1:-1;;;;;1929:24:44;;1743:215::o;2074:198:0:-;1094:13;:11;:13::i;:::-;-1:-1:-1;;;;;2162:22:0;::::1;2154:73;;;::::0;-1:-1:-1;;;2154:73:0;;4652:2:85;2154:73:0::1;::::0;::::1;4634:21:85::0;4691:2;4671:18;;;4664:30;4730:34;4710:18;;;4703:62;-1:-1:-1;;;4781:18:85;;;4774:36;4827:19;;2154:73:0::1;4450:402:85::0;2154:73:0::1;2237:28;2256:8;2237:18;:28::i;:::-;2074:198:::0;:::o;2755:96:5:-;2813:7;2839:5;2843:1;2839;:5;:::i;1359:130:0:-;1247:7;1273:6;-1:-1:-1;;;;;1273:6:0;719:10:2;1422:23:0;1414:68;;;;-1:-1:-1;;;1414:68:0;;5286:2:85;1414:68:0;;;5268:21:85;;;5305:18;;;5298:30;5364:34;5344:18;;;5337:62;5416:18;;1414:68:0;5084:356:85;2426:187:0;2499:16;2518:6;;-1:-1:-1;;;;;2534:17:0;;;-1:-1:-1;;;;;;2534:17:0;;;;;;2566:40;;2518:6;;;;;;;2566:40;;2499:16;2566:40;2489:124;2426:187;:::o;206:173:85:-;274:20;;-1:-1:-1;;;;;323:31:85;;313:42;;303:70;;369:1;366;359:12;303:70;206:173;;;:::o;384:695::-;479:6;487;495;548:2;536:9;527:7;523:23;519:32;516:52;;;564:1;561;554:12;516:52;604:9;591:23;633:18;674:2;666:6;663:14;660:34;;;690:1;687;680:12;660:34;728:6;717:9;713:22;703:32;;773:7;766:4;762:2;758:13;754:27;744:55;;795:1;792;785:12;744:55;835:2;822:16;861:2;853:6;850:14;847:34;;;877:1;874;867:12;847:34;932:7;925:4;915:6;912:1;908:14;904:2;900:23;896:34;893:47;890:67;;;953:1;950;943:12;890:67;984:4;976:13;;;;-1:-1:-1;1008:6:85;-1:-1:-1;1033:40:85;;1052:20;;;-1:-1:-1;1033:40:85;:::i;:::-;1023:50;;384:695;;;;;:::o;1084:180::-;1143:6;1196:2;1184:9;1175:7;1171:23;1167:32;1164:52;;;1212:1;1209;1202:12;1164:52;-1:-1:-1;1235:23:85;;1084:180;-1:-1:-1;1084:180:85:o;1477:348::-;1529:8;1539:6;1593:3;1586:4;1578:6;1574:17;1570:27;1560:55;;1611:1;1608;1601:12;1560:55;-1:-1:-1;1634:20:85;;1677:18;1666:30;;1663:50;;;1709:1;1706;1699:12;1663:50;1746:4;1738:6;1734:17;1722:29;;1798:3;1791:4;1782:6;1774;1770:19;1766:30;1763:39;1760:59;;;1815:1;1812;1805:12;1760:59;1477:348;;;;;:::o;1830:411::-;1901:6;1909;1962:2;1950:9;1941:7;1937:23;1933:32;1930:52;;;1978:1;1975;1968:12;1930:52;2018:9;2005:23;2051:18;2043:6;2040:30;2037:50;;;2083:1;2080;2073:12;2037:50;2122:59;2173:7;2164:6;2153:9;2149:22;2122:59;:::i;:::-;2200:8;;2096:85;;-1:-1:-1;1830:411:85;-1:-1:-1;;;;1830:411:85:o;2246:485::-;2326:6;2334;2342;2395:2;2383:9;2374:7;2370:23;2366:32;2363:52;;;2411:1;2408;2401:12;2363:52;2451:9;2438:23;2484:18;2476:6;2473:30;2470:50;;;2516:1;2513;2506:12;2470:50;2555:59;2606:7;2597:6;2586:9;2582:22;2555:59;:::i;:::-;2633:8;;-1:-1:-1;2529:85:85;-1:-1:-1;2687:38:85;;-1:-1:-1;2721:2:85;2706:18;;2687:38;:::i;2736:186::-;2795:6;2848:2;2836:9;2827:7;2823:23;2819:32;2816:52;;;2864:1;2861;2854:12;2816:52;2887:29;2906:9;2887:29;:::i;2927:127::-;2988:10;2983:3;2979:20;2976:1;2969:31;3019:4;3016:1;3009:15;3043:4;3040:1;3033:15;3416:273;3601:6;3593;3588:3;3575:33;3557:3;3627:16;;3652:13;;;3627:16;3416:273;-1:-1:-1;3416:273:85:o;4055:390::-;4214:2;4203:9;4196:21;4253:6;4248:2;4237:9;4233:18;4226:34;4310:6;4302;4297:2;4286:9;4282:18;4269:48;4366:1;4337:22;;;4361:2;4333:31;;;4326:42;;;;4429:2;4408:15;;;-1:-1:-1;;4404:29:85;4389:45;4385:54;;4055:390;-1:-1:-1;4055:390:85:o;4857:222::-;4922:9;;;4943:10;;;4940:133;;;4995:10;4990:3;4986:20;4983:1;4976:31;5030:4;5027:1;5020:15;5058:4;5055:1;5048:15",
  "source": "// SPDX-License-Identifier: LGPL-3.0-only\npragma solidity >=0.8.7 <0.8.20;\n\nimport \"@openzeppelin/contracts8/utils/math/SafeMath.sol\";\nimport \"@openzeppelin/contracts8/access/Ownable.sol\";\n\nimport \"../../../contracts/common/interfaces/IRegistry.sol\";\nimport \"../../../contracts/common/interfaces/IRegistryInitializer.sol\";\nimport \"../../../contracts/common/Initializable.sol\";\n\n/**\n * @title Routes identifiers to addresses.\n */\ncontract MockRegistry is IRegistry, IRegistryInitializer, Ownable, Initializable {\n  using SafeMath for uint256;\n\n  mapping(bytes32 => address) public registry;\n\n  event RegistryUpdated(string identifier, bytes32 indexed identifierHash, address indexed addr);\n\n  /**\n   * @notice Sets initialized == true on implementation contracts\n   * @param test Set to true to skip implementation initialization\n   */\n  constructor(bool test) Initializable(test) {}\n\n  /**\n   * @notice Used in place of the constructor to allow the contract to be upgradable via proxy.\n   */\n  function initialize() external initializer {\n    _transferOwnership(msg.sender);\n  }\n\n  /**\n   * @notice Associates the given address with the given identifier.\n   * @param identifier Identifier of contract whose address we want to set.\n   * @param addr Address of contract.\n   */\n  function setAddressFor(string calldata identifier, address addr) external onlyOwner {\n    bytes32 identifierHash = keccak256(abi.encodePacked(identifier));\n    registry[identifierHash] = addr;\n    emit RegistryUpdated(identifier, identifierHash, addr);\n  }\n\n  /**\n   * @notice Gets address associated with the given identifierHash.\n   * @param identifierHash Identifier hash of contract whose address we want to look up.\n   * @dev Throws if address not set.\n   */\n  function getAddressForOrDie(bytes32 identifierHash) external view returns (address) {\n    require(registry[identifierHash] != address(0), \"identifier has no registry entry\");\n    return registry[identifierHash];\n  }\n\n  /**\n   * @notice Gets address associated with the given identifierHash.\n   * @param identifierHash Identifier hash of contract whose address we want to look up.\n   */\n  function getAddressFor(bytes32 identifierHash) external view returns (address) {\n    return registry[identifierHash];\n  }\n\n  /**\n   * @notice Gets address associated with the given identifier.\n   * @param identifier Identifier of contract whose address we want to look up.\n   * @dev Throws if address not set.\n   */\n  function getAddressForStringOrDie(string calldata identifier) external view returns (address) {\n    bytes32 identifierHash = keccak256(abi.encodePacked(identifier));\n    require(registry[identifierHash] != address(0), \"identifier has no registry entry\");\n    return registry[identifierHash];\n  }\n\n  /**\n   * @notice Gets address associated with the given identifier.\n   * @param identifier Identifier of contract whose address we want to look up.\n   */\n  function getAddressForString(string calldata identifier) external view returns (address) {\n    bytes32 identifierHash = keccak256(abi.encodePacked(identifier));\n    return registry[identifierHash];\n  }\n\n  /**\n   * @notice Iterates over provided array of identifiers, getting the address for each.\n   *         Returns true if `sender` matches the address of one of the provided identifiers.\n   * @param identifierHashes Array of hashes of approved identifiers.\n   * @param sender Address in question to verify membership.\n   * @return True if `sender` corresponds to the address of any of `identifiers`\n   *         registry entries.\n   */\n  function isOneOf(\n    bytes32[] calldata identifierHashes,\n    address sender\n  ) external view returns (bool) {\n    for (uint256 i = 0; i < identifierHashes.length; i = i.add(1)) {\n      if (registry[identifierHashes[i]] == sender) {\n        return true;\n      }\n    }\n    return false;\n  }\n}\n",
  "sourcePath": "/Users/beaver/Development/temp/celo-monorepo/packages/protocol/contracts-0.8/common/test/MockRegistry.sol",
  "ast": {
    "absolutePath": "project:/contracts-0.8/common/test/MockRegistry.sol",
    "exportedSymbols": {
      "Context": [
        212
      ],
      "IRegistry": [
        17608
      ],
      "IRegistryInitializer": [
        17614
      ],
      "Initializable": [
        16991
      ],
      "MockRegistry": [
        10628
      ],
      "Ownable": [
        112
      ],
      "SafeMath": [
        1471
      ]
    },
    "id": 10629,
    "license": "LGPL-3.0-only",
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 10408,
        "literals": [
          "solidity",
          ">=",
          "0.8",
          ".7",
          "<",
          "0.8",
          ".20"
        ],
        "nodeType": "PragmaDirective",
        "src": "42:32:44"
      },
      {
        "absolutePath": "@openzeppelin/contracts8/utils/math/SafeMath.sol",
        "file": "@openzeppelin/contracts8/utils/math/SafeMath.sol",
        "id": 10409,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 10629,
        "sourceUnit": 1472,
        "src": "76:58:44",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "@openzeppelin/contracts8/access/Ownable.sol",
        "file": "@openzeppelin/contracts8/access/Ownable.sol",
        "id": 10410,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 10629,
        "sourceUnit": 113,
        "src": "135:53:44",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "project:/contracts/common/interfaces/IRegistry.sol",
        "file": "../../../contracts/common/interfaces/IRegistry.sol",
        "id": 10411,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 10629,
        "sourceUnit": 17609,
        "src": "190:60:44",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "project:/contracts/common/interfaces/IRegistryInitializer.sol",
        "file": "../../../contracts/common/interfaces/IRegistryInitializer.sol",
        "id": 10412,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 10629,
        "sourceUnit": 17615,
        "src": "251:71:44",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "project:/contracts/common/Initializable.sol",
        "file": "../../../contracts/common/Initializable.sol",
        "id": 10413,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 10629,
        "sourceUnit": 16992,
        "src": "323:53:44",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "abstract": false,
        "baseContracts": [
          {
            "baseName": {
              "id": 10415,
              "name": "IRegistry",
              "nameLocations": [
                "454:9:44"
              ],
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 17608,
              "src": "454:9:44"
            },
            "id": 10416,
            "nodeType": "InheritanceSpecifier",
            "src": "454:9:44"
          },
          {
            "baseName": {
              "id": 10417,
              "name": "IRegistryInitializer",
              "nameLocations": [
                "465:20:44"
              ],
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 17614,
              "src": "465:20:44"
            },
            "id": 10418,
            "nodeType": "InheritanceSpecifier",
            "src": "465:20:44"
          },
          {
            "baseName": {
              "id": 10419,
              "name": "Ownable",
              "nameLocations": [
                "487:7:44"
              ],
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 112,
              "src": "487:7:44"
            },
            "id": 10420,
            "nodeType": "InheritanceSpecifier",
            "src": "487:7:44"
          },
          {
            "baseName": {
              "id": 10421,
              "name": "Initializable",
              "nameLocations": [
                "496:13:44"
              ],
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 16991,
              "src": "496:13:44"
            },
            "id": 10422,
            "nodeType": "InheritanceSpecifier",
            "src": "496:13:44"
          }
        ],
        "canonicalName": "MockRegistry",
        "contractDependencies": [],
        "contractKind": "contract",
        "documentation": {
          "id": 10414,
          "nodeType": "StructuredDocumentation",
          "src": "378:50:44",
          "text": " @title Routes identifiers to addresses."
        },
        "fullyImplemented": true,
        "id": 10628,
        "linearizedBaseContracts": [
          10628,
          16991,
          112,
          212,
          17614,
          17608
        ],
        "name": "MockRegistry",
        "nameLocation": "438:12:44",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "global": false,
            "id": 10425,
            "libraryName": {
              "id": 10423,
              "name": "SafeMath",
              "nameLocations": [
                "520:8:44"
              ],
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 1471,
              "src": "520:8:44"
            },
            "nodeType": "UsingForDirective",
            "src": "514:27:44",
            "typeName": {
              "id": 10424,
              "name": "uint256",
              "nodeType": "ElementaryTypeName",
              "src": "533:7:44",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            }
          },
          {
            "constant": false,
            "functionSelector": "7ef50298",
            "id": 10429,
            "mutability": "mutable",
            "name": "registry",
            "nameLocation": "580:8:44",
            "nodeType": "VariableDeclaration",
            "scope": 10628,
            "src": "545:43:44",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_mapping$_t_bytes32_$_t_address_$",
              "typeString": "mapping(bytes32 => address)"
            },
            "typeName": {
              "id": 10428,
              "keyName": "",
              "keyNameLocation": "-1:-1:-1",
              "keyType": {
                "id": 10426,
                "name": "bytes32",
                "nodeType": "ElementaryTypeName",
                "src": "553:7:44",
                "typeDescriptions": {
                  "typeIdentifier": "t_bytes32",
                  "typeString": "bytes32"
                }
              },
              "nodeType": "Mapping",
              "src": "545:27:44",
              "typeDescriptions": {
                "typeIdentifier": "t_mapping$_t_bytes32_$_t_address_$",
                "typeString": "mapping(bytes32 => address)"
              },
              "valueName": "",
              "valueNameLocation": "-1:-1:-1",
              "valueType": {
                "id": 10427,
                "name": "address",
                "nodeType": "ElementaryTypeName",
                "src": "564:7:44",
                "stateMutability": "nonpayable",
                "typeDescriptions": {
                  "typeIdentifier": "t_address",
                  "typeString": "address"
                }
              }
            },
            "visibility": "public"
          },
          {
            "anonymous": false,
            "eventSelector": "4166d073a7a5e704ce0db7113320f88da2457f872d46dc020c805c562c1582a0",
            "id": 10437,
            "name": "RegistryUpdated",
            "nameLocation": "599:15:44",
            "nodeType": "EventDefinition",
            "parameters": {
              "id": 10436,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 10431,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "identifier",
                  "nameLocation": "622:10:44",
                  "nodeType": "VariableDeclaration",
                  "scope": 10437,
                  "src": "615:17:44",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 10430,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "615:6:44",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 10433,
                  "indexed": true,
                  "mutability": "mutable",
                  "name": "identifierHash",
                  "nameLocation": "650:14:44",
                  "nodeType": "VariableDeclaration",
                  "scope": 10437,
                  "src": "634:30:44",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 10432,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "634:7:44",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 10435,
                  "indexed": true,
                  "mutability": "mutable",
                  "name": "addr",
                  "nameLocation": "682:4:44",
                  "nodeType": "VariableDeclaration",
                  "scope": 10437,
                  "src": "666:20:44",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 10434,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "666:7:44",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "614:73:44"
            },
            "src": "593:95:44"
          },
          {
            "body": {
              "id": 10446,
              "nodeType": "Block",
              "src": "880:2:44",
              "statements": []
            },
            "documentation": {
              "id": 10438,
              "nodeType": "StructuredDocumentation",
              "src": "692:142:44",
              "text": " @notice Sets initialized == true on implementation contracts\n @param test Set to true to skip implementation initialization"
            },
            "id": 10447,
            "implemented": true,
            "kind": "constructor",
            "modifiers": [
              {
                "arguments": [
                  {
                    "id": 10443,
                    "name": "test",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 10440,
                    "src": "874:4:44",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  }
                ],
                "id": 10444,
                "kind": "baseConstructorSpecifier",
                "modifierName": {
                  "id": 10442,
                  "name": "Initializable",
                  "nameLocations": [
                    "860:13:44"
                  ],
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 16991,
                  "src": "860:13:44"
                },
                "nodeType": "ModifierInvocation",
                "src": "860:19:44"
              }
            ],
            "name": "",
            "nameLocation": "-1:-1:-1",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 10441,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 10440,
                  "mutability": "mutable",
                  "name": "test",
                  "nameLocation": "854:4:44",
                  "nodeType": "VariableDeclaration",
                  "scope": 10447,
                  "src": "849:9:44",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 10439,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "849:4:44",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "848:11:44"
            },
            "returnParameters": {
              "id": 10445,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "880:0:44"
            },
            "scope": 10628,
            "src": "837:45:44",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "baseFunctions": [
              17613
            ],
            "body": {
              "id": 10458,
              "nodeType": "Block",
              "src": "1037:41:44",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "expression": {
                          "id": 10454,
                          "name": "msg",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 4294967281,
                          "src": "1062:3:44",
                          "typeDescriptions": {
                            "typeIdentifier": "t_magic_message",
                            "typeString": "msg"
                          }
                        },
                        "id": 10455,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberLocation": "1066:6:44",
                        "memberName": "sender",
                        "nodeType": "MemberAccess",
                        "src": "1062:10:44",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "id": 10453,
                      "name": "_transferOwnership",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 111,
                      "src": "1043:18:44",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
                        "typeString": "function (address)"
                      }
                    },
                    "id": 10456,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1043:30:44",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 10457,
                  "nodeType": "ExpressionStatement",
                  "src": "1043:30:44"
                }
              ]
            },
            "documentation": {
              "id": 10448,
              "nodeType": "StructuredDocumentation",
              "src": "886:105:44",
              "text": " @notice Used in place of the constructor to allow the contract to be upgradable via proxy."
            },
            "functionSelector": "8129fc1c",
            "id": 10459,
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "id": 10451,
                "kind": "modifierInvocation",
                "modifierName": {
                  "id": 10450,
                  "name": "initializer",
                  "nameLocations": [
                    "1025:11:44"
                  ],
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 16975,
                  "src": "1025:11:44"
                },
                "nodeType": "ModifierInvocation",
                "src": "1025:11:44"
              }
            ],
            "name": "initialize",
            "nameLocation": "1003:10:44",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 10449,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1013:2:44"
            },
            "returnParameters": {
              "id": 10452,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1037:0:44"
            },
            "scope": 10628,
            "src": "994:84:44",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "baseFunctions": [
              17569
            ],
            "body": {
              "id": 10490,
              "nodeType": "Block",
              "src": "1361:172:44",
              "statements": [
                {
                  "assignments": [
                    10470
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 10470,
                      "mutability": "mutable",
                      "name": "identifierHash",
                      "nameLocation": "1375:14:44",
                      "nodeType": "VariableDeclaration",
                      "scope": 10490,
                      "src": "1367:22:44",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      },
                      "typeName": {
                        "id": 10469,
                        "name": "bytes32",
                        "nodeType": "ElementaryTypeName",
                        "src": "1367:7:44",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 10477,
                  "initialValue": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "id": 10474,
                            "name": "identifier",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 10462,
                            "src": "1419:10:44",
                            "typeDescriptions": {
                              "typeIdentifier": "t_string_calldata_ptr",
                              "typeString": "string calldata"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_string_calldata_ptr",
                              "typeString": "string calldata"
                            }
                          ],
                          "expression": {
                            "id": 10472,
                            "name": "abi",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 4294967295,
                            "src": "1402:3:44",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_abi",
                              "typeString": "abi"
                            }
                          },
                          "id": 10473,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "memberLocation": "1406:12:44",
                          "memberName": "encodePacked",
                          "nodeType": "MemberAccess",
                          "src": "1402:16:44",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$",
                            "typeString": "function () pure returns (bytes memory)"
                          }
                        },
                        "id": 10475,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "nameLocations": [],
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "1402:28:44",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes memory"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes memory"
                        }
                      ],
                      "id": 10471,
                      "name": "keccak256",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 4294967288,
                      "src": "1392:9:44",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
                        "typeString": "function (bytes memory) pure returns (bytes32)"
                      }
                    },
                    "id": 10476,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1392:39:44",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "1367:64:44"
                },
                {
                  "expression": {
                    "id": 10482,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "baseExpression": {
                        "id": 10478,
                        "name": "registry",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 10429,
                        "src": "1437:8:44",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_bytes32_$_t_address_$",
                          "typeString": "mapping(bytes32 => address)"
                        }
                      },
                      "id": 10480,
                      "indexExpression": {
                        "id": 10479,
                        "name": "identifierHash",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 10470,
                        "src": "1446:14:44",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "nodeType": "IndexAccess",
                      "src": "1437:24:44",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "id": 10481,
                      "name": "addr",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 10464,
                      "src": "1464:4:44",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "src": "1437:31:44",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "id": 10483,
                  "nodeType": "ExpressionStatement",
                  "src": "1437:31:44"
                },
                {
                  "eventCall": {
                    "arguments": [
                      {
                        "id": 10485,
                        "name": "identifier",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 10462,
                        "src": "1495:10:44",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_calldata_ptr",
                          "typeString": "string calldata"
                        }
                      },
                      {
                        "id": 10486,
                        "name": "identifierHash",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 10470,
                        "src": "1507:14:44",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      },
                      {
                        "id": 10487,
                        "name": "addr",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 10464,
                        "src": "1523:4:44",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_string_calldata_ptr",
                          "typeString": "string calldata"
                        },
                        {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "id": 10484,
                      "name": "RegistryUpdated",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 10437,
                      "src": "1479:15:44",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_event_nonpayable$_t_string_memory_ptr_$_t_bytes32_$_t_address_$returns$__$",
                        "typeString": "function (string memory,bytes32,address)"
                      }
                    },
                    "id": 10488,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1479:49:44",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 10489,
                  "nodeType": "EmitStatement",
                  "src": "1474:54:44"
                }
              ]
            },
            "documentation": {
              "id": 10460,
              "nodeType": "StructuredDocumentation",
              "src": "1082:192:44",
              "text": " @notice Associates the given address with the given identifier.\n @param identifier Identifier of contract whose address we want to set.\n @param addr Address of contract."
            },
            "functionSelector": "c5865793",
            "id": 10491,
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "id": 10467,
                "kind": "modifierInvocation",
                "modifierName": {
                  "id": 10466,
                  "name": "onlyOwner",
                  "nameLocations": [
                    "1351:9:44"
                  ],
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 31,
                  "src": "1351:9:44"
                },
                "nodeType": "ModifierInvocation",
                "src": "1351:9:44"
              }
            ],
            "name": "setAddressFor",
            "nameLocation": "1286:13:44",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 10465,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 10462,
                  "mutability": "mutable",
                  "name": "identifier",
                  "nameLocation": "1316:10:44",
                  "nodeType": "VariableDeclaration",
                  "scope": 10491,
                  "src": "1300:26:44",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_calldata_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 10461,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "1300:6:44",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 10464,
                  "mutability": "mutable",
                  "name": "addr",
                  "nameLocation": "1336:4:44",
                  "nodeType": "VariableDeclaration",
                  "scope": 10491,
                  "src": "1328:12:44",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 10463,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1328:7:44",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1299:42:44"
            },
            "returnParameters": {
              "id": 10468,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1361:0:44"
            },
            "scope": 10628,
            "src": "1277:256:44",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "baseFunctions": [
              17576
            ],
            "body": {
              "id": 10515,
              "nodeType": "Block",
              "src": "1827:131:44",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "id": 10507,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "baseExpression": {
                            "id": 10500,
                            "name": "registry",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 10429,
                            "src": "1841:8:44",
                            "typeDescriptions": {
                              "typeIdentifier": "t_mapping$_t_bytes32_$_t_address_$",
                              "typeString": "mapping(bytes32 => address)"
                            }
                          },
                          "id": 10502,
                          "indexExpression": {
                            "id": 10501,
                            "name": "identifierHash",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 10494,
                            "src": "1850:14:44",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes32",
                              "typeString": "bytes32"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "IndexAccess",
                          "src": "1841:24:44",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "!=",
                        "rightExpression": {
                          "arguments": [
                            {
                              "hexValue": "30",
                              "id": 10505,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "1877:1:44",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              },
                              "value": "0"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              }
                            ],
                            "id": 10504,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "nodeType": "ElementaryTypeNameExpression",
                            "src": "1869:7:44",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_address_$",
                              "typeString": "type(address)"
                            },
                            "typeName": {
                              "id": 10503,
                              "name": "address",
                              "nodeType": "ElementaryTypeName",
                              "src": "1869:7:44",
                              "typeDescriptions": {}
                            }
                          },
                          "id": 10506,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "typeConversion",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "1869:10:44",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "src": "1841:38:44",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "6964656e74696669657220686173206e6f20726567697374727920656e747279",
                        "id": 10508,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "1881:34:44",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_d15abe625df242946c50488116c5d1fa2b82385652a4b98f58b14fa8299917e7",
                          "typeString": "literal_string \"identifier has no registry entry\""
                        },
                        "value": "identifier has no registry entry"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_d15abe625df242946c50488116c5d1fa2b82385652a4b98f58b14fa8299917e7",
                          "typeString": "literal_string \"identifier has no registry entry\""
                        }
                      ],
                      "id": 10499,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        4294967278,
                        4294967278
                      ],
                      "referencedDeclaration": 4294967278,
                      "src": "1833:7:44",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 10509,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1833:83:44",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 10510,
                  "nodeType": "ExpressionStatement",
                  "src": "1833:83:44"
                },
                {
                  "expression": {
                    "baseExpression": {
                      "id": 10511,
                      "name": "registry",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 10429,
                      "src": "1929:8:44",
                      "typeDescriptions": {
                        "typeIdentifier": "t_mapping$_t_bytes32_$_t_address_$",
                        "typeString": "mapping(bytes32 => address)"
                      }
                    },
                    "id": 10513,
                    "indexExpression": {
                      "id": 10512,
                      "name": "identifierHash",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 10494,
                      "src": "1938:14:44",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      }
                    },
                    "isConstant": false,
                    "isLValue": true,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "IndexAccess",
                    "src": "1929:24:44",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "functionReturnParameters": 10498,
                  "id": 10514,
                  "nodeType": "Return",
                  "src": "1922:31:44"
                }
              ]
            },
            "documentation": {
              "id": 10492,
              "nodeType": "StructuredDocumentation",
              "src": "1537:203:44",
              "text": " @notice Gets address associated with the given identifierHash.\n @param identifierHash Identifier hash of contract whose address we want to look up.\n @dev Throws if address not set."
            },
            "functionSelector": "dcf0aaed",
            "id": 10516,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "getAddressForOrDie",
            "nameLocation": "1752:18:44",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 10495,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 10494,
                  "mutability": "mutable",
                  "name": "identifierHash",
                  "nameLocation": "1779:14:44",
                  "nodeType": "VariableDeclaration",
                  "scope": 10516,
                  "src": "1771:22:44",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 10493,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "1771:7:44",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1770:24:44"
            },
            "returnParameters": {
              "id": 10498,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 10497,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 10516,
                  "src": "1818:7:44",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 10496,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1818:7:44",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1817:9:44"
            },
            "scope": 10628,
            "src": "1743:215:44",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "baseFunctions": [
              17583
            ],
            "body": {
              "id": 10528,
              "nodeType": "Block",
              "src": "2210:42:44",
              "statements": [
                {
                  "expression": {
                    "baseExpression": {
                      "id": 10524,
                      "name": "registry",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 10429,
                      "src": "2223:8:44",
                      "typeDescriptions": {
                        "typeIdentifier": "t_mapping$_t_bytes32_$_t_address_$",
                        "typeString": "mapping(bytes32 => address)"
                      }
                    },
                    "id": 10526,
                    "indexExpression": {
                      "id": 10525,
                      "name": "identifierHash",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 10519,
                      "src": "2232:14:44",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      }
                    },
                    "isConstant": false,
                    "isLValue": true,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "IndexAccess",
                    "src": "2223:24:44",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "functionReturnParameters": 10523,
                  "id": 10527,
                  "nodeType": "Return",
                  "src": "2216:31:44"
                }
              ]
            },
            "documentation": {
              "id": 10517,
              "nodeType": "StructuredDocumentation",
              "src": "1962:166:44",
              "text": " @notice Gets address associated with the given identifierHash.\n @param identifierHash Identifier hash of contract whose address we want to look up."
            },
            "functionSelector": "dd927233",
            "id": 10529,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "getAddressFor",
            "nameLocation": "2140:13:44",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 10520,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 10519,
                  "mutability": "mutable",
                  "name": "identifierHash",
                  "nameLocation": "2162:14:44",
                  "nodeType": "VariableDeclaration",
                  "scope": 10529,
                  "src": "2154:22:44",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 10518,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "2154:7:44",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2153:24:44"
            },
            "returnParameters": {
              "id": 10523,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 10522,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 10529,
                  "src": "2201:7:44",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 10521,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "2201:7:44",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2200:9:44"
            },
            "scope": 10628,
            "src": "2131:121:44",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "baseFunctions": [
              17590
            ],
            "body": {
              "id": 10562,
              "nodeType": "Block",
              "src": "2543:201:44",
              "statements": [
                {
                  "assignments": [
                    10538
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 10538,
                      "mutability": "mutable",
                      "name": "identifierHash",
                      "nameLocation": "2557:14:44",
                      "nodeType": "VariableDeclaration",
                      "scope": 10562,
                      "src": "2549:22:44",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      },
                      "typeName": {
                        "id": 10537,
                        "name": "bytes32",
                        "nodeType": "ElementaryTypeName",
                        "src": "2549:7:44",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 10545,
                  "initialValue": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "id": 10542,
                            "name": "identifier",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 10532,
                            "src": "2601:10:44",
                            "typeDescriptions": {
                              "typeIdentifier": "t_string_calldata_ptr",
                              "typeString": "string calldata"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_string_calldata_ptr",
                              "typeString": "string calldata"
                            }
                          ],
                          "expression": {
                            "id": 10540,
                            "name": "abi",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 4294967295,
                            "src": "2584:3:44",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_abi",
                              "typeString": "abi"
                            }
                          },
                          "id": 10541,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "memberLocation": "2588:12:44",
                          "memberName": "encodePacked",
                          "nodeType": "MemberAccess",
                          "src": "2584:16:44",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$",
                            "typeString": "function () pure returns (bytes memory)"
                          }
                        },
                        "id": 10543,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "nameLocations": [],
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "2584:28:44",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes memory"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes memory"
                        }
                      ],
                      "id": 10539,
                      "name": "keccak256",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 4294967288,
                      "src": "2574:9:44",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
                        "typeString": "function (bytes memory) pure returns (bytes32)"
                      }
                    },
                    "id": 10544,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "2574:39:44",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "2549:64:44"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "id": 10554,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "baseExpression": {
                            "id": 10547,
                            "name": "registry",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 10429,
                            "src": "2627:8:44",
                            "typeDescriptions": {
                              "typeIdentifier": "t_mapping$_t_bytes32_$_t_address_$",
                              "typeString": "mapping(bytes32 => address)"
                            }
                          },
                          "id": 10549,
                          "indexExpression": {
                            "id": 10548,
                            "name": "identifierHash",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 10538,
                            "src": "2636:14:44",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes32",
                              "typeString": "bytes32"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "IndexAccess",
                          "src": "2627:24:44",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "!=",
                        "rightExpression": {
                          "arguments": [
                            {
                              "hexValue": "30",
                              "id": 10552,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "2663:1:44",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              },
                              "value": "0"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              }
                            ],
                            "id": 10551,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "nodeType": "ElementaryTypeNameExpression",
                            "src": "2655:7:44",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_address_$",
                              "typeString": "type(address)"
                            },
                            "typeName": {
                              "id": 10550,
                              "name": "address",
                              "nodeType": "ElementaryTypeName",
                              "src": "2655:7:44",
                              "typeDescriptions": {}
                            }
                          },
                          "id": 10553,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "typeConversion",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "2655:10:44",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "src": "2627:38:44",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "6964656e74696669657220686173206e6f20726567697374727920656e747279",
                        "id": 10555,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "2667:34:44",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_d15abe625df242946c50488116c5d1fa2b82385652a4b98f58b14fa8299917e7",
                          "typeString": "literal_string \"identifier has no registry entry\""
                        },
                        "value": "identifier has no registry entry"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_d15abe625df242946c50488116c5d1fa2b82385652a4b98f58b14fa8299917e7",
                          "typeString": "literal_string \"identifier has no registry entry\""
                        }
                      ],
                      "id": 10546,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        4294967278,
                        4294967278
                      ],
                      "referencedDeclaration": 4294967278,
                      "src": "2619:7:44",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 10556,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "2619:83:44",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 10557,
                  "nodeType": "ExpressionStatement",
                  "src": "2619:83:44"
                },
                {
                  "expression": {
                    "baseExpression": {
                      "id": 10558,
                      "name": "registry",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 10429,
                      "src": "2715:8:44",
                      "typeDescriptions": {
                        "typeIdentifier": "t_mapping$_t_bytes32_$_t_address_$",
                        "typeString": "mapping(bytes32 => address)"
                      }
                    },
                    "id": 10560,
                    "indexExpression": {
                      "id": 10559,
                      "name": "identifierHash",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 10538,
                      "src": "2724:14:44",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      }
                    },
                    "isConstant": false,
                    "isLValue": true,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "IndexAccess",
                    "src": "2715:24:44",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "functionReturnParameters": 10536,
                  "id": 10561,
                  "nodeType": "Return",
                  "src": "2708:31:44"
                }
              ]
            },
            "documentation": {
              "id": 10530,
              "nodeType": "StructuredDocumentation",
              "src": "2256:190:44",
              "text": " @notice Gets address associated with the given identifier.\n @param identifier Identifier of contract whose address we want to look up.\n @dev Throws if address not set."
            },
            "functionSelector": "8932cbf4",
            "id": 10563,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "getAddressForStringOrDie",
            "nameLocation": "2458:24:44",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 10533,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 10532,
                  "mutability": "mutable",
                  "name": "identifier",
                  "nameLocation": "2499:10:44",
                  "nodeType": "VariableDeclaration",
                  "scope": 10563,
                  "src": "2483:26:44",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_calldata_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 10531,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "2483:6:44",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2482:28:44"
            },
            "returnParameters": {
              "id": 10536,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 10535,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 10563,
                  "src": "2534:7:44",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 10534,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "2534:7:44",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2533:9:44"
            },
            "scope": 10628,
            "src": "2449:295:44",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "baseFunctions": [
              17597
            ],
            "body": {
              "id": 10584,
              "nodeType": "Block",
              "src": "2993:112:44",
              "statements": [
                {
                  "assignments": [
                    10572
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 10572,
                      "mutability": "mutable",
                      "name": "identifierHash",
                      "nameLocation": "3007:14:44",
                      "nodeType": "VariableDeclaration",
                      "scope": 10584,
                      "src": "2999:22:44",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      },
                      "typeName": {
                        "id": 10571,
                        "name": "bytes32",
                        "nodeType": "ElementaryTypeName",
                        "src": "2999:7:44",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 10579,
                  "initialValue": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "id": 10576,
                            "name": "identifier",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 10566,
                            "src": "3051:10:44",
                            "typeDescriptions": {
                              "typeIdentifier": "t_string_calldata_ptr",
                              "typeString": "string calldata"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_string_calldata_ptr",
                              "typeString": "string calldata"
                            }
                          ],
                          "expression": {
                            "id": 10574,
                            "name": "abi",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 4294967295,
                            "src": "3034:3:44",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_abi",
                              "typeString": "abi"
                            }
                          },
                          "id": 10575,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "memberLocation": "3038:12:44",
                          "memberName": "encodePacked",
                          "nodeType": "MemberAccess",
                          "src": "3034:16:44",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$",
                            "typeString": "function () pure returns (bytes memory)"
                          }
                        },
                        "id": 10577,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "nameLocations": [],
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "3034:28:44",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes memory"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes memory"
                        }
                      ],
                      "id": 10573,
                      "name": "keccak256",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 4294967288,
                      "src": "3024:9:44",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
                        "typeString": "function (bytes memory) pure returns (bytes32)"
                      }
                    },
                    "id": 10578,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "3024:39:44",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "2999:64:44"
                },
                {
                  "expression": {
                    "baseExpression": {
                      "id": 10580,
                      "name": "registry",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 10429,
                      "src": "3076:8:44",
                      "typeDescriptions": {
                        "typeIdentifier": "t_mapping$_t_bytes32_$_t_address_$",
                        "typeString": "mapping(bytes32 => address)"
                      }
                    },
                    "id": 10582,
                    "indexExpression": {
                      "id": 10581,
                      "name": "identifierHash",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 10572,
                      "src": "3085:14:44",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      }
                    },
                    "isConstant": false,
                    "isLValue": true,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "IndexAccess",
                    "src": "3076:24:44",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "functionReturnParameters": 10570,
                  "id": 10583,
                  "nodeType": "Return",
                  "src": "3069:31:44"
                }
              ]
            },
            "documentation": {
              "id": 10564,
              "nodeType": "StructuredDocumentation",
              "src": "2748:153:44",
              "text": " @notice Gets address associated with the given identifier.\n @param identifier Identifier of contract whose address we want to look up."
            },
            "functionSelector": "853db323",
            "id": 10585,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "getAddressForString",
            "nameLocation": "2913:19:44",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 10567,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 10566,
                  "mutability": "mutable",
                  "name": "identifier",
                  "nameLocation": "2949:10:44",
                  "nodeType": "VariableDeclaration",
                  "scope": 10585,
                  "src": "2933:26:44",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_calldata_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 10565,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "2933:6:44",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2932:28:44"
            },
            "returnParameters": {
              "id": 10570,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 10569,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 10585,
                  "src": "2984:7:44",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 10568,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "2984:7:44",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2983:9:44"
            },
            "scope": 10628,
            "src": "2904:201:44",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "baseFunctions": [
              17607
            ],
            "body": {
              "id": 10626,
              "nodeType": "Block",
              "src": "3657:180:44",
              "statements": [
                {
                  "body": {
                    "id": 10622,
                    "nodeType": "Block",
                    "src": "3726:89:44",
                    "statements": [
                      {
                        "condition": {
                          "commonType": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          },
                          "id": 10617,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "baseExpression": {
                              "id": 10611,
                              "name": "registry",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 10429,
                              "src": "3738:8:44",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_bytes32_$_t_address_$",
                                "typeString": "mapping(bytes32 => address)"
                              }
                            },
                            "id": 10615,
                            "indexExpression": {
                              "baseExpression": {
                                "id": 10612,
                                "name": "identifierHashes",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 10589,
                                "src": "3747:16:44",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_array$_t_bytes32_$dyn_calldata_ptr",
                                  "typeString": "bytes32[] calldata"
                                }
                              },
                              "id": 10614,
                              "indexExpression": {
                                "id": 10613,
                                "name": "i",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 10597,
                                "src": "3764:1:44",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "IndexAccess",
                              "src": "3747:19:44",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes32",
                                "typeString": "bytes32"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "IndexAccess",
                            "src": "3738:29:44",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "==",
                          "rightExpression": {
                            "id": 10616,
                            "name": "sender",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 10591,
                            "src": "3771:6:44",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "src": "3738:39:44",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 10621,
                        "nodeType": "IfStatement",
                        "src": "3734:75:44",
                        "trueBody": {
                          "id": 10620,
                          "nodeType": "Block",
                          "src": "3779:30:44",
                          "statements": [
                            {
                              "expression": {
                                "hexValue": "74727565",
                                "id": 10618,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "bool",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "3796:4:44",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bool",
                                  "typeString": "bool"
                                },
                                "value": "true"
                              },
                              "functionReturnParameters": 10595,
                              "id": 10619,
                              "nodeType": "Return",
                              "src": "3789:11:44"
                            }
                          ]
                        }
                      }
                    ]
                  },
                  "condition": {
                    "commonType": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    },
                    "id": 10603,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "id": 10600,
                      "name": "i",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 10597,
                      "src": "3683:1:44",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "<",
                    "rightExpression": {
                      "expression": {
                        "id": 10601,
                        "name": "identifierHashes",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 10589,
                        "src": "3687:16:44",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_bytes32_$dyn_calldata_ptr",
                          "typeString": "bytes32[] calldata"
                        }
                      },
                      "id": 10602,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberLocation": "3704:6:44",
                      "memberName": "length",
                      "nodeType": "MemberAccess",
                      "src": "3687:23:44",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "3683:27:44",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 10623,
                  "initializationExpression": {
                    "assignments": [
                      10597
                    ],
                    "declarations": [
                      {
                        "constant": false,
                        "id": 10597,
                        "mutability": "mutable",
                        "name": "i",
                        "nameLocation": "3676:1:44",
                        "nodeType": "VariableDeclaration",
                        "scope": 10623,
                        "src": "3668:9:44",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 10596,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "3668:7:44",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "id": 10599,
                    "initialValue": {
                      "hexValue": "30",
                      "id": 10598,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "3680:1:44",
                      "typeDescriptions": {
                        "typeIdentifier": "t_rational_0_by_1",
                        "typeString": "int_const 0"
                      },
                      "value": "0"
                    },
                    "nodeType": "VariableDeclarationStatement",
                    "src": "3668:13:44"
                  },
                  "loopExpression": {
                    "expression": {
                      "id": 10609,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "leftHandSide": {
                        "id": 10604,
                        "name": "i",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 10597,
                        "src": "3712:1:44",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "nodeType": "Assignment",
                      "operator": "=",
                      "rightHandSide": {
                        "arguments": [
                          {
                            "hexValue": "31",
                            "id": 10607,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "3722:1:44",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_1_by_1",
                              "typeString": "int_const 1"
                            },
                            "value": "1"
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_rational_1_by_1",
                              "typeString": "int_const 1"
                            }
                          ],
                          "expression": {
                            "id": 10605,
                            "name": "i",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 10597,
                            "src": "3716:1:44",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "id": 10606,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberLocation": "3718:3:44",
                          "memberName": "add",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 1335,
                          "src": "3716:5:44",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$attached_to$_t_uint256_$",
                            "typeString": "function (uint256,uint256) pure returns (uint256)"
                          }
                        },
                        "id": 10608,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "nameLocations": [],
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "3716:8:44",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "src": "3712:12:44",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "id": 10610,
                    "nodeType": "ExpressionStatement",
                    "src": "3712:12:44"
                  },
                  "nodeType": "ForStatement",
                  "src": "3663:152:44"
                },
                {
                  "expression": {
                    "hexValue": "66616c7365",
                    "id": 10624,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "bool",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "3827:5:44",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    },
                    "value": "false"
                  },
                  "functionReturnParameters": 10595,
                  "id": 10625,
                  "nodeType": "Return",
                  "src": "3820:12:44"
                }
              ]
            },
            "documentation": {
              "id": 10586,
              "nodeType": "StructuredDocumentation",
              "src": "3109:434:44",
              "text": " @notice Iterates over provided array of identifiers, getting the address for each.\n         Returns true if `sender` matches the address of one of the provided identifiers.\n @param identifierHashes Array of hashes of approved identifiers.\n @param sender Address in question to verify membership.\n @return True if `sender` corresponds to the address of any of `identifiers`\n         registry entries."
            },
            "functionSelector": "17c50818",
            "id": 10627,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "isOneOf",
            "nameLocation": "3555:7:44",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 10592,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 10589,
                  "mutability": "mutable",
                  "name": "identifierHashes",
                  "nameLocation": "3587:16:44",
                  "nodeType": "VariableDeclaration",
                  "scope": 10627,
                  "src": "3568:35:44",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_bytes32_$dyn_calldata_ptr",
                    "typeString": "bytes32[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 10587,
                      "name": "bytes32",
                      "nodeType": "ElementaryTypeName",
                      "src": "3568:7:44",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      }
                    },
                    "id": 10588,
                    "nodeType": "ArrayTypeName",
                    "src": "3568:9:44",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_bytes32_$dyn_storage_ptr",
                      "typeString": "bytes32[]"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 10591,
                  "mutability": "mutable",
                  "name": "sender",
                  "nameLocation": "3617:6:44",
                  "nodeType": "VariableDeclaration",
                  "scope": 10627,
                  "src": "3609:14:44",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 10590,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "3609:7:44",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3562:65:44"
            },
            "returnParameters": {
              "id": 10595,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 10594,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 10627,
                  "src": "3651:4:44",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 10593,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "3651:4:44",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3650:6:44"
            },
            "scope": 10628,
            "src": "3546:291:44",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          }
        ],
        "scope": 10629,
        "src": "429:3410:44",
        "usedErrors": []
      }
    ],
    "src": "42:3798:44"
  },
  "compiler": {
    "name": "solc",
    "version": "0.8.19+commit.7dd6d404.Emscripten.clang"
  },
  "networks": {},
  "schemaVersion": "3.4.13",
  "updatedAt": "2025-05-05T17:49:34.186Z",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "constructor": {
        "params": {
          "test": "Set to true to skip implementation initialization"
        }
      },
      "getAddressFor(bytes32)": {
        "params": {
          "identifierHash": "Identifier hash of contract whose address we want to look up."
        }
      },
      "getAddressForOrDie(bytes32)": {
        "details": "Throws if address not set.",
        "params": {
          "identifierHash": "Identifier hash of contract whose address we want to look up."
        }
      },
      "getAddressForString(string)": {
        "params": {
          "identifier": "Identifier of contract whose address we want to look up."
        }
      },
      "getAddressForStringOrDie(string)": {
        "details": "Throws if address not set.",
        "params": {
          "identifier": "Identifier of contract whose address we want to look up."
        }
      },
      "isOneOf(bytes32[],address)": {
        "params": {
          "identifierHashes": "Array of hashes of approved identifiers.",
          "sender": "Address in question to verify membership."
        },
        "returns": {
          "_0": "True if `sender` corresponds to the address of any of `identifiers`         registry entries."
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "setAddressFor(string,address)": {
        "params": {
          "addr": "Address of contract.",
          "identifier": "Identifier of contract whose address we want to set."
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "title": "Routes identifiers to addresses.",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "constructor": {
        "notice": "Sets initialized == true on implementation contracts"
      },
      "getAddressFor(bytes32)": {
        "notice": "Gets address associated with the given identifierHash."
      },
      "getAddressForOrDie(bytes32)": {
        "notice": "Gets address associated with the given identifierHash."
      },
      "getAddressForString(string)": {
        "notice": "Gets address associated with the given identifier."
      },
      "getAddressForStringOrDie(string)": {
        "notice": "Gets address associated with the given identifier."
      },
      "initialize()": {
        "notice": "Used in place of the constructor to allow the contract to be upgradable via proxy."
      },
      "isOneOf(bytes32[],address)": {
        "notice": "Iterates over provided array of identifiers, getting the address for each.         Returns true if `sender` matches the address of one of the provided identifiers."
      },
      "setAddressFor(string,address)": {
        "notice": "Associates the given address with the given identifier."
      }
    },
    "version": 1
  }
}