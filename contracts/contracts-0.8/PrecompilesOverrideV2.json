{
  "contractName": "PrecompilesOverrideV2",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "blsKey",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "blsPop",
          "type": "bytes"
        }
      ],
      "name": "checkProofOfPossession",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "aNumerator",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "aDenominator",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "bNumerator",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "bDenominator",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "exponent",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_decimals",
          "type": "uint256"
        }
      ],
      "name": "fractionMulExp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "header",
          "type": "bytes"
        }
      ],
      "name": "getBlockNumberFromHeader",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getEpochSize",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "blockNumber",
          "type": "uint256"
        }
      ],
      "name": "getParentSealBitmap",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "header",
          "type": "bytes"
        }
      ],
      "name": "getVerifiedSealBitmapFromHeader",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "header",
          "type": "bytes"
        }
      ],
      "name": "hashHeader",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "blockNumber",
          "type": "uint256"
        }
      ],
      "name": "minQuorumSize",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minQuorumSizeInCurrentSet",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "blockNumber",
          "type": "uint256"
        }
      ],
      "name": "numberValidatorsInSet",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "registryContract",
      "outputs": [
        {
          "internalType": "contract IRegistry",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "blockNumber",
          "type": "uint256"
        }
      ],
      "name": "validatorSignerAddressFromSet",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "blockNumber",
          "type": "uint256"
        }
      ],
      "name": "getEpochNumberOfBlock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getEpochNumber",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "validatorSignerAddressFromCurrentSet",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "validatorAddressFromCurrentSet",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "numberValidatorsInCurrentSet",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"blsKey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"blsPop\",\"type\":\"bytes\"}],\"name\":\"checkProofOfPossession\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"aNumerator\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"aDenominator\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bNumerator\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bDenominator\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"exponent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_decimals\",\"type\":\"uint256\"}],\"name\":\"fractionMulExp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"header\",\"type\":\"bytes\"}],\"name\":\"getBlockNumberFromHeader\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEpochNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"getEpochNumberOfBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEpochSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"getParentSealBitmap\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"header\",\"type\":\"bytes\"}],\"name\":\"getVerifiedSealBitmapFromHeader\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"header\",\"type\":\"bytes\"}],\"name\":\"hashHeader\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"minQuorumSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minQuorumSizeInCurrentSet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numberValidatorsInCurrentSet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"numberValidatorsInSet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"registryContract\",\"outputs\":[{\"internalType\":\"contract IRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"validatorAddressFromCurrentSet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"validatorSignerAddressFromCurrentSet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"validatorSignerAddressFromSet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"checkProofOfPossession(address,bytes,bytes)\":{\"details\":\"This function will be deprecated in L2.\",\"params\":{\"blsKey\":\"The BLS public key that the validator is using for consensus, should pass proof   of possession. 48 bytes.\",\"blsPop\":\"The BLS public key proof-of-possession, which consists of a signature on the   account address. 96 bytes.\",\"sender\":\"The address signed by the BLS key to generate the proof of possession.\"},\"returns\":{\"_0\":\"True upon success.\"}},\"fractionMulExp(uint256,uint256,uint256,uint256,uint256,uint256)\":{\"details\":\"This function will be deprecated in L2.\",\"params\":{\"_decimals\":\"precision\",\"aDenominator\":\"Denominator of first fraction\",\"aNumerator\":\"Numerator of first fraction\",\"bDenominator\":\"Denominator of exponentiated fraction\",\"bNumerator\":\"Numerator of exponentiated fraction\",\"exponent\":\"exponent to raise b to\"},\"returns\":{\"_0\":\"Numerator of the computed quantity (not reduced).\",\"_1\":\"Denominator of the computed quantity (not reduced).\"}},\"getBlockNumberFromHeader(bytes)\":{\"details\":\"This function will be deprecated in L2.\",\"params\":{\"header\":\"RLP encoded header\"},\"returns\":{\"_0\":\"Block number.\"}},\"getEpochNumber()\":{\"returns\":{\"_0\":\"Current epoch number.\"}},\"getEpochNumberOfBlock(uint256)\":{\"params\":{\"blockNumber\":\"Block number where epoch number is calculated.\"},\"returns\":{\"_0\":\"Epoch number.\"}},\"getEpochSize()\":{\"details\":\"This function will be deprecated in L2.\",\"returns\":{\"_0\":\"The current epoch size in blocks.\"}},\"getParentSealBitmap(uint256)\":{\"details\":\"This function will be deprecated in L2.\",\"params\":{\"blockNumber\":\"Block number to retrieve. Must be within 4 epochs of the current number.\"},\"returns\":{\"_0\":\"Bitmap parent seal with set bits at indices corresponding to signing validators.\"}},\"getVerifiedSealBitmapFromHeader(bytes)\":{\"details\":\"This function will be deprecated in L2.\",\"params\":{\"header\":\"RLP encoded header\"},\"returns\":{\"_0\":\"Bitmap parent seal with set bits at indices correspoinding to signing validators.\"}},\"hashHeader(bytes)\":{\"details\":\"This function will be deprecated in L2.\",\"params\":{\"header\":\"RLP encoded header\"},\"returns\":{\"_0\":\"Header hash.\"}},\"minQuorumSize(uint256)\":{\"details\":\"Computed in celo-blockchain as int(math.Ceil(float64(2*valSet.Size()) / 3))This function will be deprecated in L2.\"},\"minQuorumSizeInCurrentSet()\":{\"details\":\"This function will be deprecated in L2.\",\"returns\":{\"_0\":\"Byzantine quorum of validators.\"}},\"numberValidatorsInCurrentSet()\":{\"returns\":{\"_0\":\"Size of the current elected validator set.\"}},\"numberValidatorsInSet(uint256)\":{\"details\":\"This function will be deprecated in L2.\",\"params\":{\"blockNumber\":\"Block number to retrieve the validator set from.\"},\"returns\":{\"_0\":\"Size of the validator set.\"}},\"validatorAddressFromCurrentSet(uint256)\":{\"params\":{\"index\":\"Index of requested validator in the validator set.\"},\"returns\":{\"_0\":\"Address of validator at the requested index.\"}},\"validatorSignerAddressFromCurrentSet(uint256)\":{\"params\":{\"index\":\"Index of requested validator in the validator set.\"},\"returns\":{\"_0\":\"Address of validator signer at the requested index.\"}},\"validatorSignerAddressFromSet(uint256,uint256)\":{\"details\":\"This function will be deprecated in L2.\",\"params\":{\"blockNumber\":\"Block number to retrieve the validator set from.\",\"index\":\"Index of requested validator in the validator set.\"},\"returns\":{\"_0\":\"Address of validator signer at the requested index.\"}}},\"title\":\"PrecompilesOverride Contract\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"checkProofOfPossession(address,bytes,bytes)\":{\"notice\":\"Checks a BLS proof of possession.\"},\"fractionMulExp(uint256,uint256,uint256,uint256,uint256,uint256)\":{\"notice\":\"calculate a * b^x for fractions a, b to `decimals` precision\"},\"getBlockNumberFromHeader(bytes)\":{\"notice\":\"Parses block number out of header.\"},\"getEpochNumber()\":{\"notice\":\"Returns the epoch number at a block.\"},\"getEpochNumberOfBlock(uint256)\":{\"notice\":\"Returns the epoch number at a block.\"},\"getEpochSize()\":{\"notice\":\"Returns the current epoch size in blocks.\"},\"getParentSealBitmap(uint256)\":{\"notice\":\"Gets the parent seal bitmap from the header at the given block number.\"},\"getVerifiedSealBitmapFromHeader(bytes)\":{\"notice\":\"Verifies the BLS signature on the header and returns the seal bitmap. The validator set used for verification is retrieved based on the parent hash field of the header.  If the parent hash is not in the blockchain, verification fails.\"},\"hashHeader(bytes)\":{\"notice\":\"Computes hash of header.\"},\"minQuorumSize(uint256)\":{\"notice\":\"Returns the minimum number of required signers for a given block number.\"},\"minQuorumSizeInCurrentSet()\":{\"notice\":\"Computes byzantine quorum from current validator set size\"},\"numberValidatorsInCurrentSet()\":{\"notice\":\"Gets the size of the current elected validator set.\"},\"numberValidatorsInSet(uint256)\":{\"notice\":\"Gets the size of the validator set that must sign the given block number.\"},\"validatorAddressFromCurrentSet(uint256)\":{\"notice\":\"Gets a validator address from the current validator set.\"},\"validatorSignerAddressFromCurrentSet(uint256)\":{\"notice\":\"Gets a validator signer address from the current validator set.\"},\"validatorSignerAddressFromSet(uint256,uint256)\":{\"notice\":\"Gets a validator signer address from the validator set at the given block number.\"}},\"notice\":\"This contract allows for a smoother transition from L1 to L2 by abstracting away the usingPrecompile contract, and taking care of the L1 to L2 swtiching logic.*\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"project:/contracts-0.8/common/PrecompilesOverrideV2.sol\":\"PrecompilesOverrideV2\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts8/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts8/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts8/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts8/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x58b21219689909c4f8339af00813760337f7e2e7f169a97fe49e2896dcfb3b9a\",\"license\":\"MIT\"},\"project:/contracts-0.8/common/IsL2Check.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.5.13 <0.8.20;\\n\\n/**\\n * @title Based on predeploy returns whether this is L1 or L2.\\n */\\ncontract IsL2Check {\\n  address constant proxyAdminAddress = 0x4200000000000000000000000000000000000018;\\n\\n  /**\\n   * @notice Throws if called on L2.\\n   */\\n  modifier onlyL1() {\\n    allowOnlyL1();\\n    _;\\n  }\\n\\n  /**\\n   * @notice Throws if called on L1.\\n   */\\n  modifier onlyL2() {\\n    if (!isL2()) {\\n      revert(\\\"This method is not supported in L1.\\\");\\n    }\\n    _;\\n  }\\n\\n  /**\\n   * @notice Checks to see if current network is Celo L2.\\n   * @return Whether or not the current network is a Celo L2.\\n   */\\n  function isL2() internal view returns (bool) {\\n    uint32 size;\\n    address _addr = proxyAdminAddress;\\n    assembly {\\n      size := extcodesize(_addr)\\n    }\\n    return (size > 0);\\n  }\\n\\n  /**\\n   * @notice Used to restrict usage of the parent function to L1 execution.\\n   * @dev Reverts if called on a Celo L2 network.\\n   */\\n  function allowOnlyL1() internal view {\\n    if (isL2()) {\\n      revert(\\\"This method is no longer supported in L2.\\\");\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x4629a6f2c4364780f5a6a5e2ad5c3675c0a1d3bea35cfd4426eeaebca60cac37\",\"license\":\"LGPL-3.0-only\"},\"project:/contracts-0.8/common/PrecompilesOverrideV2.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.8.7 <0.8.20;\\n\\nimport \\\"../../contracts/common/interfaces/ICeloVersionedContract.sol\\\";\\nimport \\\"../../contracts-0.8/common/IsL2Check.sol\\\";\\n\\nimport \\\"./UsingPrecompiles.sol\\\";\\nimport \\\"./UsingRegistryV2NoMento.sol\\\";\\n\\n/**\\n * @title PrecompilesOverride Contract\\n * @notice This contract allows for a smoother transition from L1 to L2\\n * by abstracting away the usingPrecompile contract, and taking care of the L1 to L2 swtiching logic.\\n **/\\nabstract contract PrecompilesOverrideV2 is UsingPrecompiles, UsingRegistryV2NoMento {\\n  /**\\n   * @notice Returns the epoch number at a block.\\n   * @param blockNumber Block number where epoch number is calculated.\\n   * @return Epoch number.\\n   */\\n  function getEpochNumberOfBlock(uint256 blockNumber) public view override returns (uint256) {\\n    if (isL2()) {\\n      return getEpochManager().getEpochNumberOfBlock(blockNumber);\\n    } else {\\n      return epochNumberOfBlock(blockNumber, getEpochSize());\\n    }\\n  }\\n\\n  /**\\n   * @notice Returns the epoch number at a block.\\n   * @return Current epoch number.\\n   */\\n  function getEpochNumber() public view override returns (uint256) {\\n    return getEpochNumberOfBlock(block.number);\\n  }\\n\\n  /**\\n   * @notice Gets a validator signer address from the current validator set.\\n   * @param index Index of requested validator in the validator set.\\n   * @return Address of validator signer at the requested index.\\n   */\\n  function validatorSignerAddressFromCurrentSet(\\n    uint256 index\\n  ) public view override returns (address) {\\n    if (isL2()) {\\n      return getEpochManager().getElectedSignerByIndex(index);\\n    } else {\\n      return super.validatorSignerAddressFromCurrentSet(index);\\n    }\\n  }\\n\\n  /**\\n   * @notice Gets a validator address from the current validator set.\\n   * @param index Index of requested validator in the validator set.\\n   * @return Address of validator at the requested index.\\n   */\\n  function validatorAddressFromCurrentSet(uint256 index) public view onlyL2 returns (address) {\\n    return getEpochManager().getElectedAccountByIndex(index);\\n  }\\n\\n  /**\\n   * @notice Gets the size of the current elected validator set.\\n   * @return Size of the current elected validator set.\\n   */\\n  function numberValidatorsInCurrentSet() public view override returns (uint256) {\\n    if (isL2()) {\\n      return getEpochManager().numberOfElectedInCurrentSet();\\n    } else {\\n      return super.numberValidatorsInCurrentSet();\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x78acf60b2f57abbae83a1fee5a467465ce45e5629990bbe8f7dcc658f16d0923\",\"license\":\"LGPL-3.0-only\"},\"project:/contracts-0.8/common/UsingPrecompiles.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.8.0 <0.8.20;\\n\\n// Note: This is not an exact copy of UsingPrecompiles in the contract's folder, but in solidity 0.8\\nimport \\\"@openzeppelin/contracts8/utils/math/SafeMath.sol\\\";\\nimport \\\"../../contracts/common/interfaces/ICeloVersionedContract.sol\\\";\\nimport \\\"../common/IsL2Check.sol\\\";\\n\\ncontract UsingPrecompiles is IsL2Check {\\n  using SafeMath for uint256;\\n\\n  address constant TRANSFER = address(0xff - 2);\\n  address constant FRACTION_MUL = address(0xff - 3);\\n  address constant PROOF_OF_POSSESSION = address(0xff - 4);\\n  address constant GET_VALIDATOR = address(0xff - 5);\\n  address constant NUMBER_VALIDATORS = address(0xff - 6);\\n  address constant EPOCH_SIZE = address(0xff - 7);\\n  address constant BLOCK_NUMBER_FROM_HEADER = address(0xff - 8);\\n  address constant HASH_HEADER = address(0xff - 9);\\n  address constant GET_PARENT_SEAL_BITMAP = address(0xff - 10);\\n  address constant GET_VERIFIED_SEAL_BITMAP = address(0xff - 11);\\n  uint256 constant DAY = 86400;\\n\\n  /**\\n   * @notice calculate a * b^x for fractions a, b to `decimals` precision\\n   * @param aNumerator Numerator of first fraction\\n   * @param aDenominator Denominator of first fraction\\n   * @param bNumerator Numerator of exponentiated fraction\\n   * @param bDenominator Denominator of exponentiated fraction\\n   * @param exponent exponent to raise b to\\n   * @param _decimals precision\\n   * @return Numerator of the computed quantity (not reduced).\\n   * @return Denominator of the computed quantity (not reduced).\\n   * @dev This function will be deprecated in L2.\\n   */\\n  function fractionMulExp(\\n    uint256 aNumerator,\\n    uint256 aDenominator,\\n    uint256 bNumerator,\\n    uint256 bDenominator,\\n    uint256 exponent,\\n    uint256 _decimals\\n  ) public view onlyL1 returns (uint256, uint256) {\\n    require(aDenominator != 0 && bDenominator != 0, \\\"a denominator is zero\\\");\\n    uint256 returnNumerator;\\n    uint256 returnDenominator;\\n    bool success;\\n    bytes memory out;\\n    (success, out) = FRACTION_MUL.staticcall(\\n      abi.encodePacked(aNumerator, aDenominator, bNumerator, bDenominator, exponent, _decimals)\\n    );\\n    require(success, \\\"error calling fractionMulExp precompile\\\");\\n    returnNumerator = getUint256FromBytes(out, 0);\\n    returnDenominator = getUint256FromBytes(out, 32);\\n    return (returnNumerator, returnDenominator);\\n  }\\n\\n  /**\\n   * @notice Returns the current epoch size in blocks.\\n   * @return The current epoch size in blocks.\\n   * @dev This function will be deprecated in L2.\\n   */\\n  function getEpochSize() public view onlyL1 returns (uint256) {\\n    bytes memory out;\\n    bool success;\\n    (success, out) = EPOCH_SIZE.staticcall(abi.encodePacked(true));\\n    require(success, \\\"error calling getEpochSize precompile\\\");\\n    return getUint256FromBytes(out, 0);\\n  }\\n\\n  /**\\n   * @notice Returns the epoch number at a block.\\n   * @param blockNumber Block number where epoch number is calculated.\\n   * @return Epoch number.\\n   * @dev This function will be deprecated in L2.\\n   */\\n  function getEpochNumberOfBlock(uint256 blockNumber) public view virtual onlyL1 returns (uint256) {\\n    return epochNumberOfBlock(blockNumber, getEpochSize());\\n  }\\n\\n  /**\\n   * @notice Returns the epoch number at a block.\\n   * @return Current epoch number.\\n   * @dev This function will be deprecated in L2.\\n   */\\n  function getEpochNumber() public view virtual onlyL1 returns (uint256) {\\n    return getEpochNumberOfBlock(block.number);\\n  }\\n\\n  /**\\n   * @notice Gets a validator signer address from the current validator set.\\n   * @param index Index of requested validator in the validator set.\\n   * @return Address of validator signer at the requested index.\\n   * @dev This function will be deprecated in L2.\\n   */\\n  function validatorSignerAddressFromCurrentSet(\\n    uint256 index\\n  ) public view virtual onlyL1 returns (address) {\\n    bytes memory out;\\n    bool success;\\n    (success, out) = GET_VALIDATOR.staticcall(abi.encodePacked(index, uint256(block.number)));\\n    require(success, \\\"error calling validatorSignerAddressFromCurrentSet precompile\\\");\\n    return address(uint160(getUint256FromBytes(out, 0)));\\n  }\\n\\n  /**\\n   * @notice Gets a validator signer address from the validator set at the given block number.\\n   * @param index Index of requested validator in the validator set.\\n   * @param blockNumber Block number to retrieve the validator set from.\\n   * @return Address of validator signer at the requested index.\\n   * @dev This function will be deprecated in L2.\\n   */\\n  function validatorSignerAddressFromSet(\\n    uint256 index,\\n    uint256 blockNumber\\n  ) public view virtual onlyL1 returns (address) {\\n    bytes memory out;\\n    bool success;\\n    (success, out) = GET_VALIDATOR.staticcall(abi.encodePacked(index, blockNumber));\\n    require(success, \\\"error calling validatorSignerAddressFromSet precompile\\\");\\n    return address(uint160(getUint256FromBytes(out, 0)));\\n  }\\n\\n  /**\\n   * @notice Gets the size of the current elected validator set.\\n   * @return Size of the current elected validator set.\\n   * @dev This function will be deprecated in L2.\\n   */\\n  function numberValidatorsInCurrentSet() public view virtual onlyL1 returns (uint256) {\\n    bytes memory out;\\n    bool success;\\n    (success, out) = NUMBER_VALIDATORS.staticcall(abi.encodePacked(uint256(block.number)));\\n    require(success, \\\"error calling numberValidatorsInCurrentSet precompile\\\");\\n    return getUint256FromBytes(out, 0);\\n  }\\n\\n  /**\\n   * @notice Gets the size of the validator set that must sign the given block number.\\n   * @param blockNumber Block number to retrieve the validator set from.\\n   * @return Size of the validator set.\\n   * @dev This function will be deprecated in L2.\\n   */\\n  function numberValidatorsInSet(uint256 blockNumber) public view virtual onlyL1 returns (uint256) {\\n    bytes memory out;\\n    bool success;\\n    (success, out) = NUMBER_VALIDATORS.staticcall(abi.encodePacked(blockNumber));\\n    require(success, \\\"error calling numberValidatorsInSet precompile\\\");\\n    return getUint256FromBytes(out, 0);\\n  }\\n\\n  /**\\n   * @notice Checks a BLS proof of possession.\\n   * @param sender The address signed by the BLS key to generate the proof of possession.\\n   * @param blsKey The BLS public key that the validator is using for consensus, should pass proof\\n   *   of possession. 48 bytes.\\n   * @param blsPop The BLS public key proof-of-possession, which consists of a signature on the\\n   *   account address. 96 bytes.\\n   * @return True upon success.\\n   * @dev This function will be deprecated in L2.\\n   */\\n  function checkProofOfPossession(\\n    address sender,\\n    bytes memory blsKey,\\n    bytes memory blsPop\\n  ) public view onlyL1 returns (bool) {\\n    bool success;\\n    (success, ) = PROOF_OF_POSSESSION.staticcall(abi.encodePacked(sender, blsKey, blsPop));\\n    return success;\\n  }\\n\\n  /**\\n   * @notice Parses block number out of header.\\n   * @param header RLP encoded header\\n   * @return Block number.\\n   * @dev This function will be deprecated in L2.\\n   */\\n  function getBlockNumberFromHeader(bytes memory header) public view onlyL1 returns (uint256) {\\n    bytes memory out;\\n    bool success;\\n    (success, out) = BLOCK_NUMBER_FROM_HEADER.staticcall(abi.encodePacked(header));\\n    require(success, \\\"error calling getBlockNumberFromHeader precompile\\\");\\n    return getUint256FromBytes(out, 0);\\n  }\\n\\n  /**\\n   * @notice Computes hash of header.\\n   * @param header RLP encoded header\\n   * @return Header hash.\\n   * @dev This function will be deprecated in L2.\\n   */\\n  function hashHeader(bytes memory header) public view onlyL1 returns (bytes32) {\\n    bytes memory out;\\n    bool success;\\n    (success, out) = HASH_HEADER.staticcall(abi.encodePacked(header));\\n    require(success, \\\"error calling hashHeader precompile\\\");\\n    return getBytes32FromBytes(out, 0);\\n  }\\n\\n  /**\\n   * @notice Gets the parent seal bitmap from the header at the given block number.\\n   * @param blockNumber Block number to retrieve. Must be within 4 epochs of the current number.\\n   * @return Bitmap parent seal with set bits at indices corresponding to signing validators.\\n   * @dev This function will be deprecated in L2.\\n   */\\n  function getParentSealBitmap(uint256 blockNumber) public view onlyL1 returns (bytes32) {\\n    bytes memory out;\\n    bool success;\\n    (success, out) = GET_PARENT_SEAL_BITMAP.staticcall(abi.encodePacked(blockNumber));\\n    require(success, \\\"error calling getParentSealBitmap precompile\\\");\\n    return getBytes32FromBytes(out, 0);\\n  }\\n\\n  /**\\n   * @notice Verifies the BLS signature on the header and returns the seal bitmap.\\n   * The validator set used for verification is retrieved based on the parent hash field of the\\n   * header.  If the parent hash is not in the blockchain, verification fails.\\n   * @param header RLP encoded header\\n   * @return Bitmap parent seal with set bits at indices correspoinding to signing validators.\\n   * @dev This function will be deprecated in L2.\\n   */\\n  function getVerifiedSealBitmapFromHeader(\\n    bytes memory header\\n  ) public view onlyL1 returns (bytes32) {\\n    bytes memory out;\\n    bool success;\\n    (success, out) = GET_VERIFIED_SEAL_BITMAP.staticcall(abi.encodePacked(header));\\n    require(success, \\\"error calling getVerifiedSealBitmapFromHeader precompile\\\");\\n    return getBytes32FromBytes(out, 0);\\n  }\\n\\n  /**\\n   * @notice Returns the minimum number of required signers for a given block number.\\n   * @dev Computed in celo-blockchain as int(math.Ceil(float64(2*valSet.Size()) / 3))\\n   * @dev This function will be deprecated in L2.\\n   */\\n  function minQuorumSize(uint256 blockNumber) public view onlyL1 returns (uint256) {\\n    return numberValidatorsInSet(blockNumber).mul(2).add(2).div(3);\\n  }\\n\\n  /**\\n   * @notice Computes byzantine quorum from current validator set size\\n   * @return Byzantine quorum of validators.\\n   * @dev This function will be deprecated in L2.\\n   */\\n  function minQuorumSizeInCurrentSet() public view onlyL1 returns (uint256) {\\n    return minQuorumSize(block.number);\\n  }\\n\\n  /**\\n   * @notice Returns the epoch number at a block.\\n   * @param blockNumber Block number where epoch number is calculated.\\n   * @param epochSize The epoch size in blocks.\\n   * @return Epoch number.\\n   */\\n  function epochNumberOfBlock(\\n    uint256 blockNumber,\\n    uint256 epochSize\\n  ) internal pure returns (uint256) {\\n    // Follows GetEpochNumber from celo-blockchain/blob/master/consensus/istanbul/utils.go\\n    uint256 epochNumber = blockNumber / epochSize;\\n    if (blockNumber % epochSize == 0) {\\n      return epochNumber;\\n    } else {\\n      return epochNumber.add(1);\\n    }\\n  }\\n\\n  /**\\n   * @notice Converts bytes to uint256.\\n   * @param bs byte[] data\\n   * @param start offset into byte data to convert\\n   * @return uint256 data\\n   */\\n  function getUint256FromBytes(bytes memory bs, uint256 start) internal pure returns (uint256) {\\n    return uint256(getBytes32FromBytes(bs, start));\\n  }\\n\\n  /**\\n   * @notice Converts bytes to bytes32.\\n   * @param bs byte[] data\\n   * @param start offset into byte data to convert\\n   * @return bytes32 data\\n   */\\n  function getBytes32FromBytes(bytes memory bs, uint256 start) internal pure returns (bytes32) {\\n    require(bs.length >= start.add(32), \\\"slicing out of range\\\");\\n    bytes32 x;\\n    assembly {\\n      x := mload(add(bs, add(start, 32)))\\n    }\\n    return x;\\n  }\\n}\\n\",\"keccak256\":\"0xc3d623e15765e2ce37dadaefd792a2c272e1a43fa9f90763e5619bcfc82cee0c\",\"license\":\"LGPL-3.0-only\"},\"project:/contracts-0.8/common/UsingRegistryV2NoMento.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.8.0 <0.8.20;\\n\\n// Note: This is not an exact copy of UsingRegistry or UsingRegistryV2 in the contract's folder\\n// because Mento's interfaces still don't support Solidity 0.8\\n\\nimport \\\"@openzeppelin/contracts8/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts8/token/ERC20/IERC20.sol\\\";\\n\\nimport \\\"./interfaces/IScoreReader.sol\\\";\\n\\nimport \\\"../../contracts/common/interfaces/IAccounts.sol\\\";\\nimport \\\"../../contracts/common/interfaces/IEpochManager.sol\\\";\\nimport \\\"../../contracts/common/interfaces/IFeeCurrencyWhitelist.sol\\\";\\nimport \\\"../../contracts/common/interfaces/IFreezer.sol\\\";\\nimport \\\"../../contracts/common/interfaces/IRegistry.sol\\\";\\nimport \\\"../../contracts/common/interfaces/ICeloUnreleasedTreasury.sol\\\";\\n\\nimport \\\"../../contracts/governance/interfaces/IElection.sol\\\";\\nimport \\\"../../contracts/governance/interfaces/IEpochRewards.sol\\\";\\nimport \\\"../../contracts/governance/interfaces/IGovernance.sol\\\";\\nimport \\\"../../contracts/governance/interfaces/ILockedGold.sol\\\";\\nimport \\\"../../contracts/governance/interfaces/ILockedCelo.sol\\\";\\nimport \\\"../../contracts/governance/interfaces/IValidators.sol\\\";\\n\\nimport \\\"../../contracts/identity/interfaces/IRandom.sol\\\";\\nimport \\\"../../contracts/identity/interfaces/IAttestations.sol\\\";\\nimport \\\"../../contracts/identity/interfaces/IFederatedAttestations.sol\\\";\\n\\n// import \\\"../../lib/mento-core/contracts/interfaces/IExchange.sol\\\";\\n// import \\\"../../lib/mento-core/contracts/interfaces/IReserve.sol\\\";\\n// import \\\"../../lib/mento-core/contracts/interfaces/IStableToken.sol\\\";\\nimport \\\"../../contracts/stability/interfaces/ISortedOracles.sol\\\";\\n\\ncontract UsingRegistryV2NoMento {\\n  address internal constant registryAddress = 0x000000000000000000000000000000000000ce10;\\n  IRegistry public constant registryContract = IRegistry(registryAddress);\\n\\n  bytes32 internal constant ACCOUNTS_REGISTRY_ID = keccak256(abi.encodePacked(\\\"Accounts\\\"));\\n  bytes32 internal constant ATTESTATIONS_REGISTRY_ID = keccak256(abi.encodePacked(\\\"Attestations\\\"));\\n  bytes32 internal constant DOWNTIME_SLASHER_REGISTRY_ID =\\n    keccak256(abi.encodePacked(\\\"DowntimeSlasher\\\"));\\n  bytes32 internal constant DOUBLE_SIGNING_SLASHER_REGISTRY_ID =\\n    keccak256(abi.encodePacked(\\\"DoubleSigningSlasher\\\"));\\n  bytes32 internal constant ELECTION_REGISTRY_ID = keccak256(abi.encodePacked(\\\"Election\\\"));\\n  bytes32 internal constant EXCHANGE_REGISTRY_ID = keccak256(abi.encodePacked(\\\"Exchange\\\"));\\n  bytes32 internal constant EXCHANGE_EURO_REGISTRY_ID = keccak256(abi.encodePacked(\\\"ExchangeEUR\\\"));\\n  bytes32 internal constant EXCHANGE_REAL_REGISTRY_ID = keccak256(abi.encodePacked(\\\"ExchangeBRL\\\"));\\n\\n  bytes32 internal constant FEE_CURRENCY_WHITELIST_REGISTRY_ID =\\n    keccak256(abi.encodePacked(\\\"FeeCurrencyWhitelist\\\"));\\n  bytes32 internal constant FEDERATED_ATTESTATIONS_REGISTRY_ID =\\n    keccak256(abi.encodePacked(\\\"FederatedAttestations\\\"));\\n  bytes32 internal constant FREEZER_REGISTRY_ID = keccak256(abi.encodePacked(\\\"Freezer\\\"));\\n  bytes32 internal constant GOLD_TOKEN_REGISTRY_ID = keccak256(abi.encodePacked(\\\"GoldToken\\\"));\\n  bytes32 internal constant GOVERNANCE_REGISTRY_ID = keccak256(abi.encodePacked(\\\"Governance\\\"));\\n  bytes32 internal constant GOVERNANCE_SLASHER_REGISTRY_ID =\\n    keccak256(abi.encodePacked(\\\"GovernanceSlasher\\\"));\\n  bytes32 internal constant LOCKED_GOLD_REGISTRY_ID = keccak256(abi.encodePacked(\\\"LockedGold\\\"));\\n  bytes32 internal constant RESERVE_REGISTRY_ID = keccak256(abi.encodePacked(\\\"Reserve\\\"));\\n  bytes32 internal constant RANDOM_REGISTRY_ID = keccak256(abi.encodePacked(\\\"Random\\\"));\\n  bytes32 internal constant SORTED_ORACLES_REGISTRY_ID =\\n    keccak256(abi.encodePacked(\\\"SortedOracles\\\"));\\n  bytes32 internal constant STABLE_TOKEN_REGISTRY_ID = keccak256(abi.encodePacked(\\\"StableToken\\\"));\\n  bytes32 internal constant STABLE_EURO_TOKEN_REGISTRY_ID =\\n    keccak256(abi.encodePacked(\\\"StableTokenEUR\\\"));\\n  bytes32 internal constant STABLE_REAL_TOKEN_REGISTRY_ID =\\n    keccak256(abi.encodePacked(\\\"StableTokenBRL\\\"));\\n  bytes32 internal constant VALIDATORS_REGISTRY_ID = keccak256(abi.encodePacked(\\\"Validators\\\"));\\n  bytes32 internal constant CELO_UNRELEASED_TREASURY_REGISTRY_ID =\\n    keccak256(abi.encodePacked(\\\"CeloUnreleasedTreasury\\\"));\\n\\n  bytes32 internal constant CELO_TOKEN_REGISTRY_ID = keccak256(abi.encodePacked(\\\"CeloToken\\\"));\\n  bytes32 internal constant LOCKED_CELO_REGISTRY_ID = keccak256(abi.encodePacked(\\\"LockedCelo\\\"));\\n  bytes32 internal constant EPOCH_REWARDS_REGISTRY_ID = keccak256(abi.encodePacked(\\\"EpochRewards\\\"));\\n  bytes32 internal constant EPOCH_MANAGER_ENABLER_REGISTRY_ID =\\n    keccak256(abi.encodePacked(\\\"EpochManagerEnabler\\\"));\\n  bytes32 internal constant EPOCH_MANAGER_REGISTRY_ID = keccak256(abi.encodePacked(\\\"EpochManager\\\"));\\n  bytes32 internal constant SCORE_MANAGER_REGISTRY_ID = keccak256(abi.encodePacked(\\\"ScoreManager\\\"));\\n\\n  modifier onlyRegisteredContract(bytes32 identifierHash) {\\n    require(\\n      registryContract.getAddressForOrDie(identifierHash) == msg.sender,\\n      \\\"only registered contract\\\"\\n    );\\n    _;\\n  }\\n\\n  modifier onlyRegisteredContracts(bytes32[] memory identifierHashes) {\\n    require(registryContract.isOneOf(identifierHashes, msg.sender), \\\"only registered contracts\\\");\\n    _;\\n  }\\n\\n  function getAccounts() internal view returns (IAccounts) {\\n    return IAccounts(registryContract.getAddressForOrDie(ACCOUNTS_REGISTRY_ID));\\n  }\\n\\n  function getAttestations() internal view returns (IAttestations) {\\n    return IAttestations(registryContract.getAddressForOrDie(ATTESTATIONS_REGISTRY_ID));\\n  }\\n\\n  function getElection() internal view returns (IElection) {\\n    return IElection(registryContract.getAddressForOrDie(ELECTION_REGISTRY_ID));\\n  }\\n\\n  // function getExchange() internal view returns (IExchange) {\\n  //   return IExchange(registryContract.getAddressForOrDie(EXCHANGE_REGISTRY_ID));\\n  // }\\n\\n  // function getExchangeDollar() internal view returns (IExchange) {\\n  //   return getExchange();\\n  // }\\n\\n  // function getExchangeEuro() internal view returns (IExchange) {\\n  //   return IExchange(registryContract.getAddressForOrDie(EXCHANGE_EURO_REGISTRY_ID));\\n  // }\\n\\n  // function getExchangeREAL() internal view returns (IExchange) {\\n  //   return IExchange(registryContract.getAddressForOrDie(EXCHANGE_REAL_REGISTRY_ID));\\n  // }\\n\\n  function getFeeCurrencyWhitelistRegistry() internal view returns (IFeeCurrencyWhitelist) {\\n    return\\n      IFeeCurrencyWhitelist(\\n        registryContract.getAddressForOrDie(FEE_CURRENCY_WHITELIST_REGISTRY_ID)\\n      );\\n  }\\n\\n  function getFederatedAttestations() internal view returns (IFederatedAttestations) {\\n    return\\n      IFederatedAttestations(\\n        registryContract.getAddressForOrDie(FEDERATED_ATTESTATIONS_REGISTRY_ID)\\n      );\\n  }\\n\\n  function getFreezer() internal view returns (IFreezer) {\\n    return IFreezer(registryContract.getAddressForOrDie(FREEZER_REGISTRY_ID));\\n  }\\n\\n  function getGoldToken() internal view returns (IERC20) {\\n    return IERC20(registryContract.getAddressForOrDie(GOLD_TOKEN_REGISTRY_ID));\\n  }\\n\\n  function getCeloToken() internal view returns (IERC20) {\\n    return IERC20(registryContract.getAddressForOrDie(CELO_TOKEN_REGISTRY_ID));\\n  }\\n\\n  function getGovernance() internal view returns (IGovernance) {\\n    return IGovernance(registryContract.getAddressForOrDie(GOVERNANCE_REGISTRY_ID));\\n  }\\n\\n  function getLockedGold() internal view returns (ILockedGold) {\\n    return ILockedGold(registryContract.getAddressForOrDie(LOCKED_GOLD_REGISTRY_ID));\\n  }\\n\\n  function getLockedCelo() internal view returns (ILockedCelo) {\\n    return ILockedCelo(registryContract.getAddressForOrDie(LOCKED_CELO_REGISTRY_ID));\\n  }\\n\\n  function getRandom() internal view returns (IRandom) {\\n    return IRandom(registryContract.getAddressForOrDie(RANDOM_REGISTRY_ID));\\n  }\\n\\n  // function getReserve() internal view returns (IReserve) {\\n  //   return IReserve(registryContract.getAddressForOrDie(RESERVE_REGISTRY_ID));\\n  // }\\n\\n  function getSortedOracles() internal view returns (ISortedOracles) {\\n    return ISortedOracles(registryContract.getAddressForOrDie(SORTED_ORACLES_REGISTRY_ID));\\n  }\\n\\n  // function getStableToken() internal view returns (IStableToken) {\\n  //   return IStableToken(registryContract.getAddressForOrDie(STABLE_TOKEN_REGISTRY_ID));\\n  // }\\n\\n  // function getStableDollarToken() internal view returns (IStableToken) {\\n  //   return getStableToken();\\n  // }\\n\\n  // function getStableEuroToken() internal view returns (IStableToken) {\\n  //   return IStableToken(registryContract.getAddressForOrDie(STABLE_EURO_TOKEN_REGISTRY_ID));\\n  // }\\n\\n  // function getStableRealToken() internal view returns (IStableToken) {\\n  //   return IStableToken(registryContract.getAddressForOrDie(STABLE_REAL_TOKEN_REGISTRY_ID));\\n  // }\\n\\n  function getValidators() internal view returns (IValidators) {\\n    return IValidators(registryContract.getAddressForOrDie(VALIDATORS_REGISTRY_ID));\\n  }\\n\\n  function getCeloUnreleasedTreasury() internal view returns (ICeloUnreleasedTreasury) {\\n    return\\n      ICeloUnreleasedTreasury(\\n        registryContract.getAddressForOrDie(CELO_UNRELEASED_TREASURY_REGISTRY_ID)\\n      );\\n  }\\n\\n  function getEpochRewards() internal view returns (IEpochRewards) {\\n    return IEpochRewards(registryContract.getAddressForOrDie(EPOCH_REWARDS_REGISTRY_ID));\\n  }\\n\\n  function getEpochManager() internal view returns (IEpochManager) {\\n    return IEpochManager(registryContract.getAddressForOrDie(EPOCH_MANAGER_REGISTRY_ID));\\n  }\\n\\n  function getScoreReader() internal view returns (IScoreReader) {\\n    return IScoreReader(registryContract.getAddressForOrDie(SCORE_MANAGER_REGISTRY_ID));\\n  }\\n}\\n\",\"keccak256\":\"0x480af9ba0d3b55674832f04cf5ff9e1636cd4de0bf9b0a6c80259443ae007d01\",\"license\":\"LGPL-3.0-only\"},\"project:/contracts-0.8/common/interfaces/IScoreReader.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.8.7 <0.8.20;\\n\\ninterface IScoreReader {\\n  function getValidatorScore(address validator) external view returns (uint256);\\n  function getGroupScore(address validator) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xa9276e744a343a3c1eaf68253b7f5ff2325897e18fae20a3265a257a2d0d1036\",\"license\":\"LGPL-3.0-only\"},\"project:/contracts/common/interfaces/IAccounts.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.5.13 <0.9.0;\\n\\ninterface IAccounts {\\n  function setAccountDataEncryptionKey(bytes calldata) external;\\n  function setMetadataURL(string calldata) external;\\n  function setName(string calldata) external;\\n  function setWalletAddress(address, uint8, bytes32, bytes32) external;\\n  function setAccount(string calldata, bytes calldata, address, uint8, bytes32, bytes32) external;\\n\\n  function authorizeVoteSigner(address, uint8, bytes32, bytes32) external;\\n  function authorizeValidatorSigner(address, uint8, bytes32, bytes32) external;\\n  function authorizeValidatorSignerWithPublicKey(\\n    address,\\n    uint8,\\n    bytes32,\\n    bytes32,\\n    bytes calldata\\n  ) external;\\n  function authorizeValidatorSignerWithKeys(\\n    address,\\n    uint8,\\n    bytes32,\\n    bytes32,\\n    bytes calldata,\\n    bytes calldata,\\n    bytes calldata\\n  ) external;\\n  function authorizeAttestationSigner(address, uint8, bytes32, bytes32) external;\\n  function setEip712DomainSeparator() external;\\n  function createAccount() external returns (bool);\\n\\n  function setPaymentDelegation(address, uint256) external;\\n\\n  function isAccount(address) external view returns (bool);\\n  function voteSignerToAccount(address) external view returns (address);\\n  function validatorSignerToAccount(address) external view returns (address);\\n  function attestationSignerToAccount(address) external view returns (address);\\n  function signerToAccount(address) external view returns (address);\\n  function getAttestationSigner(address) external view returns (address);\\n  function getValidatorSigner(address) external view returns (address);\\n  function getVoteSigner(address) external view returns (address);\\n  function hasAuthorizedVoteSigner(address) external view returns (bool);\\n  function hasAuthorizedValidatorSigner(address) external view returns (bool);\\n  function hasAuthorizedAttestationSigner(address) external view returns (bool);\\n\\n  function batchGetMetadataURL(\\n    address[] calldata\\n  ) external view returns (uint256[] memory, bytes memory);\\n\\n  function getDataEncryptionKey(address) external view returns (bytes memory);\\n  function getWalletAddress(address) external view returns (address);\\n  function getMetadataURL(address) external view returns (string memory);\\n\\n  function getName(address) external view returns (string memory);\\n\\n  function getPaymentDelegation(address) external view returns (address, uint256);\\n  function isSigner(address, address, bytes32) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xd316739cfeeed50b89bd45a4596abf71fac174f10c2a24dbf352a53b2bab2dc1\",\"license\":\"LGPL-3.0-only\"},\"project:/contracts/common/interfaces/ICeloUnreleasedTreasury.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.5.13 <0.9.0;\\n\\ninterface ICeloUnreleasedTreasury {\\n  /**\\n   * @notice Releases the Celo to the specified address.\\n   * @param to The address to release the amount to.\\n   * @param amount The amount to release.\\n   */\\n  function release(address to, uint256 amount) external;\\n\\n  function getRemainingBalanceToRelease() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x41f4cda8fd14ba24261d9e6ef9c2f62ac15432ac78107e74045d2a880b50df82\",\"license\":\"LGPL-3.0-only\"},\"project:/contracts/common/interfaces/ICeloVersionedContract.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.5.13 <0.9.0;\\n\\ninterface ICeloVersionedContract {\\n  /**\\n   * @notice Returns the storage, major, minor, and patch version of the contract.\\n   * @return Storage version of the contract.\\n   * @return Major version of the contract.\\n   * @return Minor version of the contract.\\n   * @return Patch version of the contract.\\n   */\\n  function getVersionNumber() external pure returns (uint256, uint256, uint256, uint256);\\n}\\n\",\"keccak256\":\"0x3ce622e646f0bd7cce110045bf6cde1fd84242e9c8ee73a27e56956f0b1fb128\",\"license\":\"LGPL-3.0-only\"},\"project:/contracts/common/interfaces/IEpochManager.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.5.13 <0.9.0;\\n\\ninterface IEpochManager {\\n  function initializeSystem(\\n    uint256 firstEpochNumber,\\n    uint256 firstEpochBlock,\\n    address[] calldata firstElected\\n  ) external;\\n  function startNextEpochProcess() external;\\n  function finishNextEpochProcess(\\n    address[] calldata groups,\\n    address[] calldata lessers,\\n    address[] calldata greaters\\n  ) external;\\n  function setToProcessGroups() external;\\n  function processGroup(address group, address lesser, address greater) external;\\n  function sendValidatorPayment(address) external;\\n  function getCurrentEpoch() external view returns (uint256, uint256, uint256, uint256);\\n  function getEpochByNumber(\\n    uint256 epochNumber\\n  ) external view returns (uint256, uint256, uint256, uint256);\\n  function getEpochByBlockNumber(\\n    uint256 blockNumber\\n  ) external view returns (uint256, uint256, uint256, uint256);\\n  function getEpochNumberOfBlock(uint256) external view returns (uint256);\\n  function getCurrentEpochNumber() external view returns (uint256);\\n  function numberOfElectedInCurrentSet() external view returns (uint256);\\n  function getElectedAccounts() external view returns (address[] memory);\\n  function getElectedAccountByIndex(uint256 index) external view returns (address);\\n  function getElectedSigners() external view returns (address[] memory);\\n  function getElectedSignerByIndex(uint256 index) external view returns (address);\\n  function epochDuration() external view returns (uint256);\\n  function firstKnownEpoch() external view returns (uint256);\\n  function getEpochProcessingState()\\n    external\\n    view\\n    returns (uint256, uint256, uint256, uint256, uint256);\\n  function systemAlreadyInitialized() external view returns (bool);\\n  function isBlocked() external view returns (bool);\\n  function isTimeForNextEpoch() external view returns (bool);\\n  function isOnEpochProcess() external view returns (bool);\\n  function getFirstBlockAtEpoch(uint256) external view returns (uint256);\\n  function getLastBlockAtEpoch(uint256) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xc019958b7b5281fbfcd3c31b49d6ab29192ab4138de175a404bf0c17cccf9350\",\"license\":\"LGPL-3.0-only\"},\"project:/contracts/common/interfaces/IFeeCurrencyWhitelist.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.5.13 <0.9.0;\\n\\ninterface IFeeCurrencyWhitelist {\\n  function initialize() external;\\n  function addToken(address) external;\\n  function getWhitelist() external view returns (address[] memory);\\n}\\n\",\"keccak256\":\"0xa732071c691bf1ba84774ac5301fa5b18e1ecf6ea6f6210ecac00f5130341621\",\"license\":\"LGPL-3.0-only\"},\"project:/contracts/common/interfaces/IFreezer.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.5.13 <0.9.0;\\n\\ninterface IFreezer {\\n  function freeze(address target) external;\\n  function unfreeze(address target) external;\\n  function isFrozen(address) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x31cee67b005413c61d6aa90d2899e6a37257cd4c026d8422249b397131a10755\",\"license\":\"LGPL-3.0-only\"},\"project:/contracts/common/interfaces/IRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.5.13 <0.9.0;\\n\\ninterface IRegistry {\\n  function setAddressFor(string calldata, address) external;\\n  function getAddressForOrDie(bytes32) external view returns (address);\\n  function getAddressFor(bytes32) external view returns (address);\\n  function getAddressForStringOrDie(string calldata identifier) external view returns (address);\\n  function getAddressForString(string calldata identifier) external view returns (address);\\n  function isOneOf(bytes32[] calldata, address) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x7737cbda6f3519bf6a4108e07b2c991a655e8731a4c040a3681e9629cfc4b52d\",\"license\":\"LGPL-3.0-only\"},\"project:/contracts/governance/interfaces/IElection.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.5.13 <0.9.0;\\n\\ninterface IElection {\\n  function vote(address, uint256, address, address) external returns (bool);\\n  function activate(address) external returns (bool);\\n  function revokeActive(address, uint256, address, address, uint256) external returns (bool);\\n  function revokeAllActive(address, address, address, uint256) external returns (bool);\\n  function revokePending(address, uint256, address, address, uint256) external returns (bool);\\n  function markGroupIneligible(address) external;\\n  function markGroupEligible(address, address, address) external;\\n  function allowedToVoteOverMaxNumberOfGroups(address) external returns (bool);\\n  function forceDecrementVotes(\\n    address,\\n    uint256,\\n    address[] calldata,\\n    address[] calldata,\\n    uint256[] calldata\\n  ) external returns (uint256);\\n  function setAllowedToVoteOverMaxNumberOfGroups(bool flag) external;\\n\\n  // only owner\\n  function setElectableValidators(uint256, uint256) external returns (bool);\\n  function setMaxNumGroupsVotedFor(uint256) external returns (bool);\\n  function setElectabilityThreshold(uint256) external returns (bool);\\n\\n  // only VM\\n  function distributeEpochRewards(address, uint256, address, address) external;\\n\\n  // view functions\\n  function electValidatorSigners() external view returns (address[] memory);\\n  function electValidatorAccounts() external view returns (address[] memory);\\n  function electNValidatorSigners(uint256, uint256) external view returns (address[] memory);\\n  function electNValidatorAccounts(uint256, uint256) external view returns (address[] memory);\\n  function getElectableValidators() external view returns (uint256, uint256);\\n  function getElectabilityThreshold() external view returns (uint256);\\n  function getNumVotesReceivable(address) external view returns (uint256);\\n  function getTotalVotes() external view returns (uint256);\\n  function getActiveVotes() external view returns (uint256);\\n  function getTotalVotesByAccount(address) external view returns (uint256);\\n  function getPendingVotesForGroupByAccount(address, address) external view returns (uint256);\\n  function getActiveVotesForGroupByAccount(address, address) external view returns (uint256);\\n  function getTotalVotesForGroupByAccount(address, address) external view returns (uint256);\\n  function getActiveVoteUnitsForGroupByAccount(address, address) external view returns (uint256);\\n  function getTotalVotesForGroup(address) external view returns (uint256);\\n  function getActiveVotesForGroup(address) external view returns (uint256);\\n  function getPendingVotesForGroup(address) external view returns (uint256);\\n  function getGroupEligibility(address) external view returns (bool);\\n  function getGroupEpochRewards(\\n    address,\\n    uint256,\\n    uint256[] calldata\\n  ) external view returns (uint256);\\n  function getGroupEpochRewardsBasedOnScore(\\n    address group,\\n    uint256 totalEpochRewards,\\n    uint256 groupScore\\n  ) external view returns (uint256);\\n  function getGroupsVotedForByAccount(address) external view returns (address[] memory);\\n  function getEligibleValidatorGroups() external view returns (address[] memory);\\n  function getTotalVotesForEligibleValidatorGroups()\\n    external\\n    view\\n    returns (address[] memory, uint256[] memory);\\n  function getCurrentValidatorSigners() external view returns (address[] memory);\\n  function canReceiveVotes(address, uint256) external view returns (bool);\\n  function hasActivatablePendingVotes(address, address) external view returns (bool);\\n  function validatorSignerAddressFromCurrentSet(uint256 index) external view returns (address);\\n  function numberValidatorsInCurrentSet() external view returns (uint256);\\n  function owner() external view returns (address);\\n}\\n\",\"keccak256\":\"0x598e1f22422d01cd2feccff34c5c276c388209058d7fab3d770e25fa8dec9e59\",\"license\":\"LGPL-3.0-only\"},\"project:/contracts/governance/interfaces/IEpochRewards.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.5.13 <0.9.0;\\n\\ninterface IEpochRewards {\\n  function updateTargetVotingYield() external;\\n  function isReserveLow() external view returns (bool);\\n  function calculateTargetEpochRewards() external view returns (uint256, uint256, uint256, uint256);\\n  function getTargetVotingYieldParameters() external view returns (uint256, uint256, uint256);\\n  function getRewardsMultiplierParameters() external view returns (uint256, uint256, uint256);\\n  function getCommunityRewardFraction() external view returns (uint256);\\n  function getCarbonOffsettingFraction() external view returns (uint256);\\n  function getTargetVotingGoldFraction() external view returns (uint256);\\n  function getRewardsMultiplier() external view returns (uint256);\\n  function carbonOffsettingPartner() external view returns (address);\\n}\\n\",\"keccak256\":\"0xfa534a0dc188ffd55595c6edb28b2e4ac9f036022a644b3a61e6a12097e14788\",\"license\":\"LGPL-3.0-only\"},\"project:/contracts/governance/interfaces/IGovernance.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.5.13 <0.9.0;\\n\\ninterface IGovernance {\\n  function removeVotesWhenRevokingDelegatedVotes(\\n    address account,\\n    uint256 maxAmountAllowed\\n  ) external;\\n  function votePartially(\\n    uint256 proposalId,\\n    uint256 index,\\n    uint256 yesVotes,\\n    uint256 noVotes,\\n    uint256 abstainVotes\\n  ) external returns (bool);\\n\\n  function setConstitution(address destination, bytes4 functionId, uint256 threshold) external;\\n\\n  function isVoting(address) external view returns (bool);\\n  function getAmountOfGoldUsedForVoting(address account) external view returns (uint256);\\n\\n  function getProposal(\\n    uint256 proposalId\\n  ) external view returns (address, uint256, uint256, uint256, string memory, uint256, bool);\\n\\n  function getReferendumStageDuration() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x8780295e0ecffc9870c59ed17fd4f50902117227157dd060db19d2ebbaaf3d2b\",\"license\":\"LGPL-3.0-only\"},\"project:/contracts/governance/interfaces/ILockedCelo.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.5.13 <0.9.0;\\n\\ninterface ILockedCelo {\\n  function lock() external payable;\\n  function incrementNonvotingAccountBalance(address, uint256) external;\\n  function decrementNonvotingAccountBalance(address, uint256) external;\\n\\n  function unlock(uint256) external;\\n  function relock(uint256, uint256) external;\\n  function withdraw(uint256) external;\\n  function slash(\\n    address account,\\n    uint256 penalty,\\n    address reporter,\\n    uint256 reward,\\n    address[] calldata lessers,\\n    address[] calldata greaters,\\n    uint256[] calldata indices\\n  ) external;\\n  function addSlasher(string calldata slasherIdentifier) external;\\n\\n  function getAccountNonvotingLockedGold(address account) external view returns (uint256);\\n  function getAccountTotalLockedCelo(address) external view returns (uint256);\\n  function getTotalLockedCelo() external view returns (uint256);\\n  function getPendingWithdrawals(\\n    address\\n  ) external view returns (uint256[] memory, uint256[] memory);\\n  function getPendingWithdrawal(\\n    address account,\\n    uint256 index\\n  ) external view returns (uint256, uint256);\\n  function getTotalPendingWithdrawals(address) external view returns (uint256);\\n  function isSlasher(address) external view returns (bool);\\n\\n  function getAccountTotalDelegatedFraction(address account) external view returns (uint256);\\n\\n  function getAccountTotalGovernanceVotingPower(address account) external view returns (uint256);\\n  function unlockingPeriod() external view returns (uint256);\\n  function getAccountNonvotingLockedCelo(address account) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x41cd5970ccc5612c9cd9cdf89a299a3cff0d8984d0b16ffad14da7670424920b\",\"license\":\"LGPL-3.0-only\"},\"project:/contracts/governance/interfaces/ILockedGold.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.5.13 <0.9.0;\\n\\ninterface ILockedGold {\\n  function lock() external payable;\\n  function incrementNonvotingAccountBalance(address, uint256) external;\\n  function decrementNonvotingAccountBalance(address, uint256) external;\\n\\n  function unlock(uint256) external;\\n  function relock(uint256, uint256) external;\\n  function withdraw(uint256) external;\\n  function slash(\\n    address account,\\n    uint256 penalty,\\n    address reporter,\\n    uint256 reward,\\n    address[] calldata lessers,\\n    address[] calldata greaters,\\n    uint256[] calldata indices\\n  ) external;\\n  function addSlasher(string calldata slasherIdentifier) external;\\n\\n  function getAccountTotalLockedGold(address) external view returns (uint256);\\n  function getTotalLockedGold() external view returns (uint256);\\n  function getPendingWithdrawals(\\n    address\\n  ) external view returns (uint256[] memory, uint256[] memory);\\n  function getPendingWithdrawal(\\n    address account,\\n    uint256 index\\n  ) external view returns (uint256, uint256);\\n  function getTotalPendingWithdrawals(address) external view returns (uint256);\\n  function isSlasher(address) external view returns (bool);\\n\\n  function getAccountTotalDelegatedFraction(address account) external view returns (uint256);\\n\\n  function getAccountTotalGovernanceVotingPower(address account) external view returns (uint256);\\n  function unlockingPeriod() external view returns (uint256);\\n  function getAccountNonvotingLockedGold(address account) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x4ab7ee32f3cbac55e91ef1087ba3e8bbdd784833faa2b9b7e1d66ff662800227\",\"license\":\"LGPL-3.0-only\"},\"project:/contracts/governance/interfaces/IValidators.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.5.13 <0.9.0;\\n\\ninterface IValidators {\\n  function registerValidator(\\n    bytes calldata,\\n    bytes calldata,\\n    bytes calldata\\n  ) external returns (bool);\\n  function registerValidatorNoBls(bytes calldata ecdsaPublicKey) external returns (bool);\\n  function deregisterValidator(uint256) external returns (bool);\\n  function affiliate(address) external returns (bool);\\n  function deaffiliate() external returns (bool);\\n  function updateBlsPublicKey(bytes calldata, bytes calldata) external returns (bool);\\n  function registerValidatorGroup(uint256) external returns (bool);\\n  function deregisterValidatorGroup(uint256) external returns (bool);\\n  function addMember(address) external returns (bool);\\n  function addFirstMember(address, address, address) external returns (bool);\\n  function removeMember(address) external returns (bool);\\n  function reorderMember(address, address, address) external returns (bool);\\n  function updateCommission() external;\\n  function setNextCommissionUpdate(uint256) external;\\n  function resetSlashingMultiplier() external;\\n\\n  // only owner\\n  function setCommissionUpdateDelay(uint256) external;\\n  function setMaxGroupSize(uint256) external returns (bool);\\n  function setMembershipHistoryLength(uint256) external returns (bool);\\n  function setValidatorScoreParameters(uint256, uint256) external returns (bool);\\n  function setGroupLockedGoldRequirements(uint256, uint256) external returns (bool);\\n  function setValidatorLockedGoldRequirements(uint256, uint256) external returns (bool);\\n  function setSlashingMultiplierResetPeriod(uint256) external;\\n  function setDowntimeGracePeriod(uint256 value) external;\\n\\n  // only registered contract\\n  function updateEcdsaPublicKey(address, address, bytes calldata) external returns (bool);\\n  function updatePublicKeys(\\n    address,\\n    address,\\n    bytes calldata,\\n    bytes calldata,\\n    bytes calldata\\n  ) external returns (bool);\\n  function mintStableToEpochManager(uint256 amount) external;\\n\\n  // only VM\\n  function updateValidatorScoreFromSigner(address, uint256) external;\\n  function distributeEpochPaymentsFromSigner(address, uint256) external returns (uint256);\\n\\n  // only slasher\\n  function forceDeaffiliateIfValidator(address) external;\\n  function halveSlashingMultiplier(address) external;\\n\\n  // view functions\\n  function maxGroupSize() external view returns (uint256);\\n  function downtimeGracePeriod() external view returns (uint256);\\n  function getCommissionUpdateDelay() external view returns (uint256);\\n  function getValidatorScoreParameters() external view returns (uint256, uint256);\\n  function getMembershipHistory(\\n    address\\n  ) external view returns (uint256[] memory, address[] memory, uint256, uint256);\\n  function calculateEpochScore(uint256) external view returns (uint256);\\n  function calculateGroupEpochScore(uint256[] calldata) external view returns (uint256);\\n  function getAccountLockedGoldRequirement(address) external view returns (uint256);\\n  function meetsAccountLockedGoldRequirements(address) external view returns (bool);\\n  function getValidatorBlsPublicKeyFromSigner(address) external view returns (bytes memory);\\n  function getValidator(\\n    address account\\n  ) external view returns (bytes memory, bytes memory, address, uint256, address);\\n  function getValidatorsGroup(address account) external view returns (address affiliation);\\n  function getValidatorGroup(\\n    address\\n  )\\n    external\\n    view\\n    returns (address[] memory, uint256, uint256, uint256, uint256[] memory, uint256, uint256);\\n  function getGroupNumMembers(address) external view returns (uint256);\\n  function getTopGroupValidators(address, uint256) external view returns (address[] memory);\\n  function getTopGroupValidatorsAccounts(address, uint256) external view returns (address[] memory);\\n  function getGroupsNumMembers(\\n    address[] calldata accounts\\n  ) external view returns (uint256[] memory);\\n  function getNumRegisteredValidators() external view returns (uint256);\\n  function groupMembershipInEpoch(address, uint256, uint256) external view returns (address);\\n\\n  function getValidatorLockedGoldRequirements() external view returns (uint256, uint256);\\n  function getGroupLockedGoldRequirements() external view returns (uint256, uint256);\\n  function getRegisteredValidators() external view returns (address[] memory);\\n  function getRegisteredValidatorGroups() external view returns (address[] memory);\\n  function isValidatorGroup(address) external view returns (bool);\\n  function isValidator(address) external view returns (bool);\\n  function getValidatorGroupSlashingMultiplier(address) external view returns (uint256);\\n  function getMembershipInLastEpoch(address) external view returns (address);\\n  function getMembershipInLastEpochFromSigner(address) external view returns (address);\\n  function computeEpochReward(\\n    address account,\\n    uint256 score,\\n    uint256 maxPayment\\n  ) external view returns (uint256);\\n  function getMembershipHistoryLength() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x78a09c1b3e80fbb1a8fd907575a71e181d100a09d999ea5c032140efbeeeb90f\",\"license\":\"LGPL-3.0-only\"},\"project:/contracts/identity/interfaces/IAttestations.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.5.13 <0.9.0;\\n\\ninterface IAttestations {\\n  function revoke(bytes32, uint256) external;\\n  function withdraw(address) external;\\n\\n  // only owner\\n  function setAttestationRequestFee(address, uint256) external;\\n  function setAttestationExpiryBlocks(uint256) external;\\n  function setSelectIssuersWaitBlocks(uint256) external;\\n  function setMaxAttestations(uint256) external;\\n\\n  // view functions\\n  function getUnselectedRequest(bytes32, address) external view returns (uint32, uint32, address);\\n  function getAttestationIssuers(bytes32, address) external view returns (address[] memory);\\n  function getAttestationStats(bytes32, address) external view returns (uint32, uint32);\\n  function batchGetAttestationStats(\\n    bytes32[] calldata\\n  ) external view returns (uint256[] memory, address[] memory, uint64[] memory, uint64[] memory);\\n  function getAttestationState(\\n    bytes32,\\n    address,\\n    address\\n  ) external view returns (uint8, uint32, address);\\n  function getCompletableAttestations(\\n    bytes32,\\n    address\\n  ) external view returns (uint32[] memory, address[] memory, uint256[] memory, bytes memory);\\n  function getAttestationRequestFee(address) external view returns (uint256);\\n  function getMaxAttestations() external view returns (uint256);\\n  function validateAttestationCode(\\n    bytes32,\\n    address,\\n    uint8,\\n    bytes32,\\n    bytes32\\n  ) external view returns (address);\\n  function lookupAccountsForIdentifier(bytes32) external view returns (address[] memory);\\n  function requireNAttestationsRequested(bytes32, address, uint32) external view;\\n}\\n\",\"keccak256\":\"0x6afd5f303e153798b15448e0206ed5e645b6e2f2e46762cb17c5b665e256cdb2\",\"license\":\"LGPL-3.0-only\"},\"project:/contracts/identity/interfaces/IFederatedAttestations.sol\":{\"content\":\"pragma solidity >=0.5.13 <0.9.0;\\n\\ninterface IFederatedAttestations {\\n  function registerAttestationAsIssuer(\\n    bytes32 identifier,\\n    address account,\\n    uint64 issuedOn\\n  ) external;\\n  function registerAttestation(\\n    bytes32 identifier,\\n    address issuer,\\n    address account,\\n    address signer,\\n    uint64 issuedOn,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) external;\\n  function revokeAttestation(bytes32 identifier, address issuer, address account) external;\\n  function batchRevokeAttestations(\\n    address issuer,\\n    bytes32[] calldata identifiers,\\n    address[] calldata accounts\\n  ) external;\\n\\n  // view functions\\n  function lookupAttestations(\\n    bytes32 identifier,\\n    address[] calldata trustedIssuers\\n  )\\n    external\\n    view\\n    returns (\\n      uint256[] memory,\\n      address[] memory,\\n      address[] memory,\\n      uint64[] memory,\\n      uint64[] memory\\n    );\\n  function lookupIdentifiers(\\n    address account,\\n    address[] calldata trustedIssuers\\n  ) external view returns (uint256[] memory, bytes32[] memory);\\n  function validateAttestationSig(\\n    bytes32 identifier,\\n    address issuer,\\n    address account,\\n    address signer,\\n    uint64 issuedOn,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) external view;\\n  function getUniqueAttestationHash(\\n    bytes32 identifier,\\n    address issuer,\\n    address account,\\n    address signer,\\n    uint64 issuedOn\\n  ) external pure returns (bytes32);\\n}\\n\",\"keccak256\":\"0x0e0c46c3a187afbaaf1f7d27d0e7e0870cc3f7e5b46143a5ae38ab08ce4efac7\"},\"project:/contracts/identity/interfaces/IRandom.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.5.13 <0.9.0;\\n\\ninterface IRandom {\\n  function revealAndCommit(bytes32, bytes32, address) external;\\n  function randomnessBlockRetentionWindow() external view returns (uint256);\\n  function random() external view returns (bytes32);\\n  function getBlockRandomness(uint256) external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xdb545530be6397d23692e4465f4514cf3c87c1d4f553323964694818c375c08d\",\"license\":\"LGPL-3.0-only\"},\"project:/contracts/stability/interfaces/ISortedOracles.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.5.13 <0.9.0;\\n\\ninterface ISortedOracles {\\n  function addOracle(address, address) external;\\n  function removeOracle(address, address, uint256) external;\\n  function report(address, uint256, address, address) external;\\n  function removeExpiredReports(address, uint256) external;\\n  function isOldestReportExpired(address token) external view returns (bool, address);\\n  function numRates(address) external view returns (uint256);\\n  function medianRate(address) external view returns (uint256, uint256);\\n  function numTimestamps(address) external view returns (uint256);\\n  function medianTimestamp(address) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xc9d69b608b060effe4a0b246e7fad096b524b848aa51d8f4eccad36c1aa0479d\",\"license\":\"LGPL-3.0-only\"}},\"version\":1}",
  "bytecode": "0x",
  "deployedBytecode": "0x",
  "immutableReferences": {},
  "generatedSources": [],
  "deployedGeneratedSources": [],
  "sourceMap": "",
  "deployedSourceMap": "",
  "source": "// SPDX-License-Identifier: LGPL-3.0-only\npragma solidity >=0.8.7 <0.8.20;\n\nimport \"../../contracts/common/interfaces/ICeloVersionedContract.sol\";\nimport \"../../contracts-0.8/common/IsL2Check.sol\";\n\nimport \"./UsingPrecompiles.sol\";\nimport \"./UsingRegistryV2NoMento.sol\";\n\n/**\n * @title PrecompilesOverride Contract\n * @notice This contract allows for a smoother transition from L1 to L2\n * by abstracting away the usingPrecompile contract, and taking care of the L1 to L2 swtiching logic.\n **/\nabstract contract PrecompilesOverrideV2 is UsingPrecompiles, UsingRegistryV2NoMento {\n  /**\n   * @notice Returns the epoch number at a block.\n   * @param blockNumber Block number where epoch number is calculated.\n   * @return Epoch number.\n   */\n  function getEpochNumberOfBlock(uint256 blockNumber) public view override returns (uint256) {\n    if (isL2()) {\n      return getEpochManager().getEpochNumberOfBlock(blockNumber);\n    } else {\n      return epochNumberOfBlock(blockNumber, getEpochSize());\n    }\n  }\n\n  /**\n   * @notice Returns the epoch number at a block.\n   * @return Current epoch number.\n   */\n  function getEpochNumber() public view override returns (uint256) {\n    return getEpochNumberOfBlock(block.number);\n  }\n\n  /**\n   * @notice Gets a validator signer address from the current validator set.\n   * @param index Index of requested validator in the validator set.\n   * @return Address of validator signer at the requested index.\n   */\n  function validatorSignerAddressFromCurrentSet(\n    uint256 index\n  ) public view override returns (address) {\n    if (isL2()) {\n      return getEpochManager().getElectedSignerByIndex(index);\n    } else {\n      return super.validatorSignerAddressFromCurrentSet(index);\n    }\n  }\n\n  /**\n   * @notice Gets a validator address from the current validator set.\n   * @param index Index of requested validator in the validator set.\n   * @return Address of validator at the requested index.\n   */\n  function validatorAddressFromCurrentSet(uint256 index) public view onlyL2 returns (address) {\n    return getEpochManager().getElectedAccountByIndex(index);\n  }\n\n  /**\n   * @notice Gets the size of the current elected validator set.\n   * @return Size of the current elected validator set.\n   */\n  function numberValidatorsInCurrentSet() public view override returns (uint256) {\n    if (isL2()) {\n      return getEpochManager().numberOfElectedInCurrentSet();\n    } else {\n      return super.numberValidatorsInCurrentSet();\n    }\n  }\n}\n",
  "sourcePath": "/Users/beaver/Development/temp/celo-monorepo/packages/protocol/contracts-0.8/common/PrecompilesOverrideV2.sol",
  "ast": {
    "absolutePath": "project:/contracts-0.8/common/PrecompilesOverrideV2.sol",
    "exportedSymbols": {
      "Context": [
        212
      ],
      "IAccounts": [
        17249
      ],
      "IAttestations": [
        19106
      ],
      "ICeloUnreleasedTreasury": [
        17265
      ],
      "ICeloVersionedContract": [
        17280
      ],
      "IERC20": [
        190
      ],
      "IElection": [
        18056
      ],
      "IEpochManager": [
        17462
      ],
      "IEpochRewards": [
        18121
      ],
      "IFederatedAttestations": [
        19228
      ],
      "IFeeCurrencyWhitelist": [
        17488
      ],
      "IFreezer": [
        17535
      ],
      "IGovernance": [
        18193
      ],
      "ILockedCelo": [
        18336
      ],
      "ILockedGold": [
        18472
      ],
      "IRandom": [
        19257
      ],
      "IRegistry": [
        17608
      ],
      "IScoreReader": [
        7470
      ],
      "ISortedOracles": [
        19333
      ],
      "IValidators": [
        18940
      ],
      "IsL2Check": [
        4661
      ],
      "Ownable": [
        112
      ],
      "PrecompilesOverrideV2": [
        5138
      ],
      "SafeMath": [
        1471
      ],
      "UsingPrecompiles": [
        6197
      ],
      "UsingRegistryV2NoMento": [
        7274
      ]
    },
    "id": 5139,
    "license": "LGPL-3.0-only",
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 5023,
        "literals": [
          "solidity",
          ">=",
          "0.8",
          ".7",
          "<",
          "0.8",
          ".20"
        ],
        "nodeType": "PragmaDirective",
        "src": "42:32:14"
      },
      {
        "absolutePath": "project:/contracts/common/interfaces/ICeloVersionedContract.sol",
        "file": "../../contracts/common/interfaces/ICeloVersionedContract.sol",
        "id": 5024,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 5139,
        "sourceUnit": 17281,
        "src": "76:70:14",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "project:/contracts-0.8/common/IsL2Check.sol",
        "file": "../../contracts-0.8/common/IsL2Check.sol",
        "id": 5025,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 5139,
        "sourceUnit": 4662,
        "src": "147:50:14",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "project:/contracts-0.8/common/UsingPrecompiles.sol",
        "file": "./UsingPrecompiles.sol",
        "id": 5026,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 5139,
        "sourceUnit": 6198,
        "src": "199:32:14",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "project:/contracts-0.8/common/UsingRegistryV2NoMento.sol",
        "file": "./UsingRegistryV2NoMento.sol",
        "id": 5027,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 5139,
        "sourceUnit": 7275,
        "src": "232:38:14",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "abstract": true,
        "baseContracts": [
          {
            "baseName": {
              "id": 5029,
              "name": "UsingPrecompiles",
              "nameLocations": [
                "537:16:14"
              ],
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 6197,
              "src": "537:16:14"
            },
            "id": 5030,
            "nodeType": "InheritanceSpecifier",
            "src": "537:16:14"
          },
          {
            "baseName": {
              "id": 5031,
              "name": "UsingRegistryV2NoMento",
              "nameLocations": [
                "555:22:14"
              ],
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 7274,
              "src": "555:22:14"
            },
            "id": 5032,
            "nodeType": "InheritanceSpecifier",
            "src": "555:22:14"
          }
        ],
        "canonicalName": "PrecompilesOverrideV2",
        "contractDependencies": [],
        "contractKind": "contract",
        "documentation": {
          "id": 5028,
          "nodeType": "StructuredDocumentation",
          "src": "272:221:14",
          "text": " @title PrecompilesOverride Contract\n @notice This contract allows for a smoother transition from L1 to L2\n by abstracting away the usingPrecompile contract, and taking care of the L1 to L2 swtiching logic.*"
        },
        "fullyImplemented": true,
        "id": 5138,
        "linearizedBaseContracts": [
          5138,
          7274,
          6197,
          4661
        ],
        "name": "PrecompilesOverrideV2",
        "nameLocation": "512:21:14",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "baseFunctions": [
              5698
            ],
            "body": {
              "id": 5058,
              "nodeType": "Block",
              "src": "833:171:14",
              "statements": [
                {
                  "condition": {
                    "arguments": [],
                    "expression": {
                      "argumentTypes": [],
                      "id": 5041,
                      "name": "isL2",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 4647,
                      "src": "843:4:14",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_view$__$returns$_t_bool_$",
                        "typeString": "function () view returns (bool)"
                      }
                    },
                    "id": 5042,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "843:6:14",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "falseBody": {
                    "id": 5056,
                    "nodeType": "Block",
                    "src": "931:69:14",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "id": 5051,
                              "name": "blockNumber",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 5035,
                              "src": "965:11:14",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            {
                              "arguments": [],
                              "expression": {
                                "argumentTypes": [],
                                "id": 5052,
                                "name": "getEpochSize",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 5681,
                                "src": "978:12:14",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_internal_view$__$returns$_t_uint256_$",
                                  "typeString": "function () view returns (uint256)"
                                }
                              },
                              "id": 5053,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "nameLocations": [],
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "978:14:14",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "id": 5050,
                            "name": "epochNumberOfBlock",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 6149,
                            "src": "946:18:14",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$",
                              "typeString": "function (uint256,uint256) pure returns (uint256)"
                            }
                          },
                          "id": 5054,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "946:47:14",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "functionReturnParameters": 5040,
                        "id": 5055,
                        "nodeType": "Return",
                        "src": "939:54:14"
                      }
                    ]
                  },
                  "id": 5057,
                  "nodeType": "IfStatement",
                  "src": "839:161:14",
                  "trueBody": {
                    "id": 5049,
                    "nodeType": "Block",
                    "src": "851:74:14",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "id": 5046,
                              "name": "blockNumber",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 5035,
                              "src": "906:11:14",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "expression": {
                              "arguments": [],
                              "expression": {
                                "argumentTypes": [],
                                "id": 5043,
                                "name": "getEpochManager",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 7259,
                                "src": "866:15:14",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_internal_view$__$returns$_t_contract$_IEpochManager_$17462_$",
                                  "typeString": "function () view returns (contract IEpochManager)"
                                }
                              },
                              "id": 5044,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "nameLocations": [],
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "866:17:14",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_contract$_IEpochManager_$17462",
                                "typeString": "contract IEpochManager"
                              }
                            },
                            "id": 5045,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberLocation": "884:21:14",
                            "memberName": "getEpochNumberOfBlock",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 17368,
                            "src": "866:39:14",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_external_view$_t_uint256_$returns$_t_uint256_$",
                              "typeString": "function (uint256) view external returns (uint256)"
                            }
                          },
                          "id": 5047,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "866:52:14",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "functionReturnParameters": 5040,
                        "id": 5048,
                        "nodeType": "Return",
                        "src": "859:59:14"
                      }
                    ]
                  }
                }
              ]
            },
            "documentation": {
              "id": 5033,
              "nodeType": "StructuredDocumentation",
              "src": "582:157:14",
              "text": " @notice Returns the epoch number at a block.\n @param blockNumber Block number where epoch number is calculated.\n @return Epoch number."
            },
            "functionSelector": "3b1eb4bf",
            "id": 5059,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "getEpochNumberOfBlock",
            "nameLocation": "751:21:14",
            "nodeType": "FunctionDefinition",
            "overrides": {
              "id": 5037,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "806:8:14"
            },
            "parameters": {
              "id": 5036,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 5035,
                  "mutability": "mutable",
                  "name": "blockNumber",
                  "nameLocation": "781:11:14",
                  "nodeType": "VariableDeclaration",
                  "scope": 5059,
                  "src": "773:19:14",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 5034,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "773:7:14",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "772:21:14"
            },
            "returnParameters": {
              "id": 5040,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 5039,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 5059,
                  "src": "824:7:14",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 5038,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "824:7:14",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "823:9:14"
            },
            "scope": 5138,
            "src": "742:262:14",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "public"
          },
          {
            "baseFunctions": [
              5712
            ],
            "body": {
              "id": 5071,
              "nodeType": "Block",
              "src": "1170:53:14",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "expression": {
                          "id": 5067,
                          "name": "block",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 4294967292,
                          "src": "1205:5:14",
                          "typeDescriptions": {
                            "typeIdentifier": "t_magic_block",
                            "typeString": "block"
                          }
                        },
                        "id": 5068,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberLocation": "1211:6:14",
                        "memberName": "number",
                        "nodeType": "MemberAccess",
                        "src": "1205:12:14",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 5066,
                      "name": "getEpochNumberOfBlock",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        5059
                      ],
                      "referencedDeclaration": 5059,
                      "src": "1183:21:14",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_view$_t_uint256_$returns$_t_uint256_$",
                        "typeString": "function (uint256) view returns (uint256)"
                      }
                    },
                    "id": 5069,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1183:35:14",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "functionReturnParameters": 5065,
                  "id": 5070,
                  "nodeType": "Return",
                  "src": "1176:42:14"
                }
              ]
            },
            "documentation": {
              "id": 5060,
              "nodeType": "StructuredDocumentation",
              "src": "1008:94:14",
              "text": " @notice Returns the epoch number at a block.\n @return Current epoch number."
            },
            "functionSelector": "9a7b3be7",
            "id": 5072,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "getEpochNumber",
            "nameLocation": "1114:14:14",
            "nodeType": "FunctionDefinition",
            "overrides": {
              "id": 5062,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "1143:8:14"
            },
            "parameters": {
              "id": 5061,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1128:2:14"
            },
            "returnParameters": {
              "id": 5065,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 5064,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 5072,
                  "src": "1161:7:14",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 5063,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "1161:7:14",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1160:9:14"
            },
            "scope": 5138,
            "src": "1105:118:14",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "public"
          },
          {
            "baseFunctions": [
              5762
            ],
            "body": {
              "id": 5097,
              "nodeType": "Block",
              "src": "1558:169:14",
              "statements": [
                {
                  "condition": {
                    "arguments": [],
                    "expression": {
                      "argumentTypes": [],
                      "id": 5081,
                      "name": "isL2",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 4647,
                      "src": "1568:4:14",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_view$__$returns$_t_bool_$",
                        "typeString": "function () view returns (bool)"
                      }
                    },
                    "id": 5082,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1568:6:14",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "falseBody": {
                    "id": 5095,
                    "nodeType": "Block",
                    "src": "1652:71:14",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "id": 5092,
                              "name": "index",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 5075,
                              "src": "1710:5:14",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "expression": {
                              "id": 5090,
                              "name": "super",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 4294967271,
                              "src": "1667:5:14",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_super$_PrecompilesOverrideV2_$5138_$",
                                "typeString": "type(contract super PrecompilesOverrideV2)"
                              }
                            },
                            "id": 5091,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberLocation": "1673:36:14",
                            "memberName": "validatorSignerAddressFromCurrentSet",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 5762,
                            "src": "1667:42:14",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_view$_t_uint256_$returns$_t_address_$",
                              "typeString": "function (uint256) view returns (address)"
                            }
                          },
                          "id": 5093,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "1667:49:14",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "functionReturnParameters": 5080,
                        "id": 5094,
                        "nodeType": "Return",
                        "src": "1660:56:14"
                      }
                    ]
                  },
                  "id": 5096,
                  "nodeType": "IfStatement",
                  "src": "1564:159:14",
                  "trueBody": {
                    "id": 5089,
                    "nodeType": "Block",
                    "src": "1576:70:14",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "id": 5086,
                              "name": "index",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 5075,
                              "src": "1633:5:14",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "expression": {
                              "arguments": [],
                              "expression": {
                                "argumentTypes": [],
                                "id": 5083,
                                "name": "getEpochManager",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 7259,
                                "src": "1591:15:14",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_internal_view$__$returns$_t_contract$_IEpochManager_$17462_$",
                                  "typeString": "function () view returns (contract IEpochManager)"
                                }
                              },
                              "id": 5084,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "nameLocations": [],
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "1591:17:14",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_contract$_IEpochManager_$17462",
                                "typeString": "contract IEpochManager"
                              }
                            },
                            "id": 5085,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberLocation": "1609:23:14",
                            "memberName": "getElectedSignerByIndex",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 17404,
                            "src": "1591:41:14",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_external_view$_t_uint256_$returns$_t_address_$",
                              "typeString": "function (uint256) view external returns (address)"
                            }
                          },
                          "id": 5087,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "1591:48:14",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "functionReturnParameters": 5080,
                        "id": 5088,
                        "nodeType": "Return",
                        "src": "1584:55:14"
                      }
                    ]
                  }
                }
              ]
            },
            "documentation": {
              "id": 5073,
              "nodeType": "StructuredDocumentation",
              "src": "1227:220:14",
              "text": " @notice Gets a validator signer address from the current validator set.\n @param index Index of requested validator in the validator set.\n @return Address of validator signer at the requested index."
            },
            "functionSelector": "123633ea",
            "id": 5098,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "validatorSignerAddressFromCurrentSet",
            "nameLocation": "1459:36:14",
            "nodeType": "FunctionDefinition",
            "overrides": {
              "id": 5077,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "1531:8:14"
            },
            "parameters": {
              "id": 5076,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 5075,
                  "mutability": "mutable",
                  "name": "index",
                  "nameLocation": "1509:5:14",
                  "nodeType": "VariableDeclaration",
                  "scope": 5098,
                  "src": "1501:13:14",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 5074,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "1501:7:14",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1495:23:14"
            },
            "returnParameters": {
              "id": 5080,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 5079,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 5098,
                  "src": "1549:7:14",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 5078,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1549:7:14",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1548:9:14"
            },
            "scope": 5138,
            "src": "1450:277:14",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 5114,
              "nodeType": "Block",
              "src": "2032:67:14",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 5111,
                        "name": "index",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 5101,
                        "src": "2088:5:14",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "expression": {
                        "arguments": [],
                        "expression": {
                          "argumentTypes": [],
                          "id": 5108,
                          "name": "getEpochManager",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 7259,
                          "src": "2045:15:14",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_view$__$returns$_t_contract$_IEpochManager_$17462_$",
                            "typeString": "function () view returns (contract IEpochManager)"
                          }
                        },
                        "id": 5109,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "nameLocations": [],
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "2045:17:14",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_IEpochManager_$17462",
                          "typeString": "contract IEpochManager"
                        }
                      },
                      "id": 5110,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberLocation": "2063:24:14",
                      "memberName": "getElectedAccountByIndex",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 17391,
                      "src": "2045:42:14",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_external_view$_t_uint256_$returns$_t_address_$",
                        "typeString": "function (uint256) view external returns (address)"
                      }
                    },
                    "id": 5112,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "2045:49:14",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "functionReturnParameters": 5107,
                  "id": 5113,
                  "nodeType": "Return",
                  "src": "2038:56:14"
                }
              ]
            },
            "documentation": {
              "id": 5099,
              "nodeType": "StructuredDocumentation",
              "src": "1731:206:14",
              "text": " @notice Gets a validator address from the current validator set.\n @param index Index of requested validator in the validator set.\n @return Address of validator at the requested index."
            },
            "functionSelector": "11fb9e84",
            "id": 5115,
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "id": 5104,
                "kind": "modifierInvocation",
                "modifierName": {
                  "id": 5103,
                  "name": "onlyL2",
                  "nameLocations": [
                    "2007:6:14"
                  ],
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 4627,
                  "src": "2007:6:14"
                },
                "nodeType": "ModifierInvocation",
                "src": "2007:6:14"
              }
            ],
            "name": "validatorAddressFromCurrentSet",
            "nameLocation": "1949:30:14",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 5102,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 5101,
                  "mutability": "mutable",
                  "name": "index",
                  "nameLocation": "1988:5:14",
                  "nodeType": "VariableDeclaration",
                  "scope": 5115,
                  "src": "1980:13:14",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 5100,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "1980:7:14",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1979:15:14"
            },
            "returnParameters": {
              "id": 5107,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 5106,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 5115,
                  "src": "2023:7:14",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 5105,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "2023:7:14",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2022:9:14"
            },
            "scope": 5138,
            "src": "1940:159:14",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "public"
          },
          {
            "baseFunctions": [
              5851
            ],
            "body": {
              "id": 5136,
              "nodeType": "Block",
              "src": "2315:155:14",
              "statements": [
                {
                  "condition": {
                    "arguments": [],
                    "expression": {
                      "argumentTypes": [],
                      "id": 5122,
                      "name": "isL2",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 4647,
                      "src": "2325:4:14",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_view$__$returns$_t_bool_$",
                        "typeString": "function () view returns (bool)"
                      }
                    },
                    "id": 5123,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "2325:6:14",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "falseBody": {
                    "id": 5134,
                    "nodeType": "Block",
                    "src": "2408:58:14",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [],
                          "expression": {
                            "argumentTypes": [],
                            "expression": {
                              "id": 5130,
                              "name": "super",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 4294967271,
                              "src": "2423:5:14",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_super$_PrecompilesOverrideV2_$5138_$",
                                "typeString": "type(contract super PrecompilesOverrideV2)"
                              }
                            },
                            "id": 5131,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberLocation": "2429:28:14",
                            "memberName": "numberValidatorsInCurrentSet",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 5851,
                            "src": "2423:34:14",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_view$__$returns$_t_uint256_$",
                              "typeString": "function () view returns (uint256)"
                            }
                          },
                          "id": 5132,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "2423:36:14",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "functionReturnParameters": 5121,
                        "id": 5133,
                        "nodeType": "Return",
                        "src": "2416:43:14"
                      }
                    ]
                  },
                  "id": 5135,
                  "nodeType": "IfStatement",
                  "src": "2321:145:14",
                  "trueBody": {
                    "id": 5129,
                    "nodeType": "Block",
                    "src": "2333:69:14",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [],
                          "expression": {
                            "argumentTypes": [],
                            "expression": {
                              "arguments": [],
                              "expression": {
                                "argumentTypes": [],
                                "id": 5124,
                                "name": "getEpochManager",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 7259,
                                "src": "2348:15:14",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_internal_view$__$returns$_t_contract$_IEpochManager_$17462_$",
                                  "typeString": "function () view returns (contract IEpochManager)"
                                }
                              },
                              "id": 5125,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "nameLocations": [],
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "2348:17:14",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_contract$_IEpochManager_$17462",
                                "typeString": "contract IEpochManager"
                              }
                            },
                            "id": 5126,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberLocation": "2366:27:14",
                            "memberName": "numberOfElectedInCurrentSet",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 17378,
                            "src": "2348:45:14",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_external_view$__$returns$_t_uint256_$",
                              "typeString": "function () view external returns (uint256)"
                            }
                          },
                          "id": 5127,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "2348:47:14",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "functionReturnParameters": 5121,
                        "id": 5128,
                        "nodeType": "Return",
                        "src": "2341:54:14"
                      }
                    ]
                  }
                }
              ]
            },
            "documentation": {
              "id": 5116,
              "nodeType": "StructuredDocumentation",
              "src": "2103:130:14",
              "text": " @notice Gets the size of the current elected validator set.\n @return Size of the current elected validator set."
            },
            "functionSelector": "87ee8a0f",
            "id": 5137,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "numberValidatorsInCurrentSet",
            "nameLocation": "2245:28:14",
            "nodeType": "FunctionDefinition",
            "overrides": {
              "id": 5118,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "2288:8:14"
            },
            "parameters": {
              "id": 5117,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "2273:2:14"
            },
            "returnParameters": {
              "id": 5121,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 5120,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 5137,
                  "src": "2306:7:14",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 5119,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "2306:7:14",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2305:9:14"
            },
            "scope": 5138,
            "src": "2236:234:14",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "public"
          }
        ],
        "scope": 5139,
        "src": "494:1978:14",
        "usedErrors": []
      }
    ],
    "src": "42:2431:14"
  },
  "compiler": {
    "name": "solc",
    "version": "0.8.19+commit.7dd6d404.Emscripten.clang"
  },
  "networks": {},
  "schemaVersion": "3.4.13",
  "updatedAt": "2025-05-05T17:49:34.150Z",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "checkProofOfPossession(address,bytes,bytes)": {
        "details": "This function will be deprecated in L2.",
        "params": {
          "blsKey": "The BLS public key that the validator is using for consensus, should pass proof   of possession. 48 bytes.",
          "blsPop": "The BLS public key proof-of-possession, which consists of a signature on the   account address. 96 bytes.",
          "sender": "The address signed by the BLS key to generate the proof of possession."
        },
        "returns": {
          "_0": "True upon success."
        }
      },
      "fractionMulExp(uint256,uint256,uint256,uint256,uint256,uint256)": {
        "details": "This function will be deprecated in L2.",
        "params": {
          "_decimals": "precision",
          "aDenominator": "Denominator of first fraction",
          "aNumerator": "Numerator of first fraction",
          "bDenominator": "Denominator of exponentiated fraction",
          "bNumerator": "Numerator of exponentiated fraction",
          "exponent": "exponent to raise b to"
        },
        "returns": {
          "_0": "Numerator of the computed quantity (not reduced).",
          "_1": "Denominator of the computed quantity (not reduced)."
        }
      },
      "getBlockNumberFromHeader(bytes)": {
        "details": "This function will be deprecated in L2.",
        "params": {
          "header": "RLP encoded header"
        },
        "returns": {
          "_0": "Block number."
        }
      },
      "getEpochNumber()": {
        "returns": {
          "_0": "Current epoch number."
        }
      },
      "getEpochNumberOfBlock(uint256)": {
        "params": {
          "blockNumber": "Block number where epoch number is calculated."
        },
        "returns": {
          "_0": "Epoch number."
        }
      },
      "getEpochSize()": {
        "details": "This function will be deprecated in L2.",
        "returns": {
          "_0": "The current epoch size in blocks."
        }
      },
      "getParentSealBitmap(uint256)": {
        "details": "This function will be deprecated in L2.",
        "params": {
          "blockNumber": "Block number to retrieve. Must be within 4 epochs of the current number."
        },
        "returns": {
          "_0": "Bitmap parent seal with set bits at indices corresponding to signing validators."
        }
      },
      "getVerifiedSealBitmapFromHeader(bytes)": {
        "details": "This function will be deprecated in L2.",
        "params": {
          "header": "RLP encoded header"
        },
        "returns": {
          "_0": "Bitmap parent seal with set bits at indices correspoinding to signing validators."
        }
      },
      "hashHeader(bytes)": {
        "details": "This function will be deprecated in L2.",
        "params": {
          "header": "RLP encoded header"
        },
        "returns": {
          "_0": "Header hash."
        }
      },
      "minQuorumSize(uint256)": {
        "details": "Computed in celo-blockchain as int(math.Ceil(float64(2*valSet.Size()) / 3))This function will be deprecated in L2."
      },
      "minQuorumSizeInCurrentSet()": {
        "details": "This function will be deprecated in L2.",
        "returns": {
          "_0": "Byzantine quorum of validators."
        }
      },
      "numberValidatorsInCurrentSet()": {
        "returns": {
          "_0": "Size of the current elected validator set."
        }
      },
      "numberValidatorsInSet(uint256)": {
        "details": "This function will be deprecated in L2.",
        "params": {
          "blockNumber": "Block number to retrieve the validator set from."
        },
        "returns": {
          "_0": "Size of the validator set."
        }
      },
      "validatorAddressFromCurrentSet(uint256)": {
        "params": {
          "index": "Index of requested validator in the validator set."
        },
        "returns": {
          "_0": "Address of validator at the requested index."
        }
      },
      "validatorSignerAddressFromCurrentSet(uint256)": {
        "params": {
          "index": "Index of requested validator in the validator set."
        },
        "returns": {
          "_0": "Address of validator signer at the requested index."
        }
      },
      "validatorSignerAddressFromSet(uint256,uint256)": {
        "details": "This function will be deprecated in L2.",
        "params": {
          "blockNumber": "Block number to retrieve the validator set from.",
          "index": "Index of requested validator in the validator set."
        },
        "returns": {
          "_0": "Address of validator signer at the requested index."
        }
      }
    },
    "title": "PrecompilesOverride Contract",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "checkProofOfPossession(address,bytes,bytes)": {
        "notice": "Checks a BLS proof of possession."
      },
      "fractionMulExp(uint256,uint256,uint256,uint256,uint256,uint256)": {
        "notice": "calculate a * b^x for fractions a, b to `decimals` precision"
      },
      "getBlockNumberFromHeader(bytes)": {
        "notice": "Parses block number out of header."
      },
      "getEpochNumber()": {
        "notice": "Returns the epoch number at a block."
      },
      "getEpochNumberOfBlock(uint256)": {
        "notice": "Returns the epoch number at a block."
      },
      "getEpochSize()": {
        "notice": "Returns the current epoch size in blocks."
      },
      "getParentSealBitmap(uint256)": {
        "notice": "Gets the parent seal bitmap from the header at the given block number."
      },
      "getVerifiedSealBitmapFromHeader(bytes)": {
        "notice": "Verifies the BLS signature on the header and returns the seal bitmap. The validator set used for verification is retrieved based on the parent hash field of the header.  If the parent hash is not in the blockchain, verification fails."
      },
      "hashHeader(bytes)": {
        "notice": "Computes hash of header."
      },
      "minQuorumSize(uint256)": {
        "notice": "Returns the minimum number of required signers for a given block number."
      },
      "minQuorumSizeInCurrentSet()": {
        "notice": "Computes byzantine quorum from current validator set size"
      },
      "numberValidatorsInCurrentSet()": {
        "notice": "Gets the size of the current elected validator set."
      },
      "numberValidatorsInSet(uint256)": {
        "notice": "Gets the size of the validator set that must sign the given block number."
      },
      "validatorAddressFromCurrentSet(uint256)": {
        "notice": "Gets a validator address from the current validator set."
      },
      "validatorSignerAddressFromCurrentSet(uint256)": {
        "notice": "Gets a validator signer address from the current validator set."
      },
      "validatorSignerAddressFromSet(uint256,uint256)": {
        "notice": "Gets a validator signer address from the validator set at the given block number."
      }
    },
    "notice": "This contract allows for a smoother transition from L1 to L2 by abstracting away the usingPrecompile contract, and taking care of the L1 to L2 swtiching logic.*",
    "version": 1
  }
}