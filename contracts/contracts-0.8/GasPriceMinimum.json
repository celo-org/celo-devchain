{
  "contractName": "GasPriceMinimum",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "test",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "adjustmentSpeed",
          "type": "uint256"
        }
      ],
      "name": "AdjustmentSpeedSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "baseFeeOpCodeActivationBlock",
          "type": "uint256"
        }
      ],
      "name": "BaseFeeOpCodeActivationBlockSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "gasPriceMinimumFloor",
          "type": "uint256"
        }
      ],
      "name": "GasPriceMinimumFloorSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "gasPriceMinimum",
          "type": "uint256"
        }
      ],
      "name": "GasPriceMinimumUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "registryAddress",
          "type": "address"
        }
      ],
      "name": "RegistrySet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "targetDensity",
          "type": "uint256"
        }
      ],
      "name": "TargetDensitySet",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "initialized",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "registry",
      "outputs": [
        {
          "internalType": "contract IRegistry",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "registryAddress",
          "type": "address"
        }
      ],
      "name": "setRegistry",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_registryAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_gasPriceMinimumFloor",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_targetDensity",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_adjustmentSpeed",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_baseFeeOpCodeActivationBlock",
          "type": "uint256"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_baseFeeOpCodeActivationBlock",
          "type": "uint256"
        }
      ],
      "name": "setBaseFeeOpCodeActivationBlock",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "blockGasTotal",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "blockGasLimit",
          "type": "uint256"
        }
      ],
      "name": "updateGasPriceMinimum",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        }
      ],
      "name": "getGasPriceMinimum",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getVersionNumber",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_adjustmentSpeed",
          "type": "uint256"
        }
      ],
      "name": "setAdjustmentSpeed",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_targetDensity",
          "type": "uint256"
        }
      ],
      "name": "setTargetDensity",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_gasPriceMinimumFloor",
          "type": "uint256"
        }
      ],
      "name": "setGasPriceMinimumFloor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "gasPriceMinimum",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "blockGasTotal",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "blockGasLimit",
          "type": "uint256"
        }
      ],
      "name": "getUpdatedGasPriceMinimum",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "gasPriceMinimumFloor",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "targetDensity",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "adjustmentSpeed",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "baseFeeOpCodeActivationBlock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"test\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"adjustmentSpeed\",\"type\":\"uint256\"}],\"name\":\"AdjustmentSpeedSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"baseFeeOpCodeActivationBlock\",\"type\":\"uint256\"}],\"name\":\"BaseFeeOpCodeActivationBlockSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"gasPriceMinimumFloor\",\"type\":\"uint256\"}],\"name\":\"GasPriceMinimumFloorSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"gasPriceMinimum\",\"type\":\"uint256\"}],\"name\":\"GasPriceMinimumUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"registryAddress\",\"type\":\"address\"}],\"name\":\"RegistrySet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"targetDensity\",\"type\":\"uint256\"}],\"name\":\"TargetDensitySet\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"adjustmentSpeed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseFeeOpCodeActivationBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gasPriceMinimum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gasPriceMinimumFloor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"getGasPriceMinimum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"blockGasTotal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"blockGasLimit\",\"type\":\"uint256\"}],\"name\":\"getUpdatedGasPriceMinimum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVersionNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_registryAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_gasPriceMinimumFloor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_targetDensity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_adjustmentSpeed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_baseFeeOpCodeActivationBlock\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"registry\",\"outputs\":[{\"internalType\":\"contract IRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_adjustmentSpeed\",\"type\":\"uint256\"}],\"name\":\"setAdjustmentSpeed\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_baseFeeOpCodeActivationBlock\",\"type\":\"uint256\"}],\"name\":\"setBaseFeeOpCodeActivationBlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_gasPriceMinimumFloor\",\"type\":\"uint256\"}],\"name\":\"setGasPriceMinimumFloor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"registryAddress\",\"type\":\"address\"}],\"name\":\"setRegistry\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_targetDensity\",\"type\":\"uint256\"}],\"name\":\"setTargetDensity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"targetDensity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"blockGasTotal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"blockGasLimit\",\"type\":\"uint256\"}],\"name\":\"updateGasPriceMinimum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"adjustmentSpeed()\":{\"returns\":{\"_0\":\"The adjustment speed.\"}},\"baseFeeOpCodeActivationBlock()\":{\"returns\":{\"_0\":\"The basefee opcode activation block.\"}},\"constructor\":{\"params\":{\"test\":\"Set to true to skip implementation initialization\"}},\"gasPriceMinimum()\":{\"returns\":{\"_0\":\"The gas price minimum.\"}},\"gasPriceMinimumFloor()\":{\"returns\":{\"_0\":\"The gas price minimum floor.\"}},\"getGasPriceMinimum(address)\":{\"details\":\"This functions assumes one unit of token has 18 digits.\",\"params\":{\"tokenAddress\":\"The currency the gas price should be in (defaults to Celo).\"},\"returns\":{\"_0\":\"current gas price minimum in the requested currency\"}},\"getUpdatedGasPriceMinimum(uint256,uint256)\":{\"details\":\"Calculate using the following formula: oldGasPriceMinimum * (1 + (adjustmentSpeed * (blockDensity - targetDensity))) + 1.\",\"params\":{\"blockGasLimit\":\"The maxBlockGasLimit of the past block.\",\"blockGasTotal\":\"The amount of gas in the most recent block.\"},\"returns\":{\"_0\":\"result of the calculation (new gas price minimum)\"}},\"getVersionNumber()\":{\"returns\":{\"_0\":\"Storage version of the contract.\",\"_1\":\"Major version of the contract.\",\"_2\":\"Minor version of the contract.\",\"_3\":\"Patch version of the contract.\"}},\"initialize(address,uint256,uint256,uint256,uint256)\":{\"params\":{\"_adjustmentSpeed\":\"How quickly the minimum changes, expressed as a fixidity fraction.\",\"_baseFeeOpCodeActivationBlock\":\"Block number where the baseFee opCode is activated\",\"_gasPriceMinimumFloor\":\"The lowest value the gas price minimum can be.\",\"_registryAddress\":\"The address of the registry core smart contract.\",\"_targetDensity\":\"The target gas fullness of blocks, expressed as a fixidity fraction.\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"setAdjustmentSpeed(uint256)\":{\"details\":\"Value is expected to be < 1.\",\"params\":{\"_adjustmentSpeed\":\"How quickly the minimum changes, expressed as a fixidity fraction.\"}},\"setBaseFeeOpCodeActivationBlock(uint256)\":{\"details\":\"Value is expected to be > 0.\",\"params\":{\"_baseFeeOpCodeActivationBlock\":\"Block number where the baseFee opCode is activated\"}},\"setGasPriceMinimumFloor(uint256)\":{\"details\":\"Value is expected to be > 0.\",\"params\":{\"_gasPriceMinimumFloor\":\"The lowest value the gas price minimum can be.\"}},\"setRegistry(address)\":{\"params\":{\"registryAddress\":\"The address of a registry contract for routing to other contracts.\"}},\"setTargetDensity(uint256)\":{\"details\":\"Value is expected to be < 1.\",\"params\":{\"_targetDensity\":\"The target gas fullness of blocks, expressed as a fixidity fraction.\"}},\"targetDensity()\":{\"returns\":{\"_0\":\"The target density.\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"updateGasPriceMinimum(uint256,uint256)\":{\"params\":{\"blockGasLimit\":\"The maxBlockGasLimit of the past block.\",\"blockGasTotal\":\"The amount of gas in the most recent block.\"},\"returns\":{\"_0\":\"result of the calculation (new gas price minimum)\"}}},\"title\":\"Stores and provides gas price minimum for various currencies.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"adjustmentSpeed()\":{\"notice\":\"Returns the adjustment speed.\"},\"baseFeeOpCodeActivationBlock()\":{\"notice\":\"Returns the basefee opcode activation block.\"},\"constructor\":{\"notice\":\"Sets initialized == true on implementation contracts\"},\"gasPriceMinimum()\":{\"notice\":\"Returns the gas price minimum.\"},\"gasPriceMinimumFloor()\":{\"notice\":\"Returns the gas price minimum floor.\"},\"getGasPriceMinimum(address)\":{\"notice\":\"Retrieve the current gas price minimum for a currency. When caled for 0x0 or Celo address, it returns gasPriceMinimum(). For other addresses it returns gasPriceMinimum() mutiplied by the SortedOracles median of the token. It does not check tokenAddress is a valid fee currency. this function will never returns values less than ABSOLUTE_MINIMAL_GAS_PRICE. If Oracle rate doesn't exist, it returns ABSOLUTE_MINIMAL_GAS_PRICE.\"},\"getUpdatedGasPriceMinimum(uint256,uint256)\":{\"notice\":\"Calculates the gas price minimum based on governable parameters and block congestion.\"},\"getVersionNumber()\":{\"notice\":\"Returns the storage, major, minor, and patch version of the contract.\"},\"initialize(address,uint256,uint256,uint256,uint256)\":{\"notice\":\"Used in place of the constructor to allow the contract to be upgradable via proxy.\"},\"setAdjustmentSpeed(uint256)\":{\"notice\":\"Set a multiplier that impacts how quickly gas price minimum is adjusted.\"},\"setBaseFeeOpCodeActivationBlock(uint256)\":{\"notice\":\"Set the activation block of the baseFee opCode.\"},\"setGasPriceMinimumFloor(uint256)\":{\"notice\":\"Set the minimum gas price treshold.\"},\"setRegistry(address)\":{\"notice\":\"Updates the address pointing to a Registry contract.\"},\"setTargetDensity(uint256)\":{\"notice\":\"Set the block density targeted by the gas price minimum algorithm.\"},\"targetDensity()\":{\"notice\":\"Returns the target density.\"},\"updateGasPriceMinimum(uint256,uint256)\":{\"notice\":\"Adjust the gas price minimum based on governable parameters and block congestion.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"project:/contracts-0.8/common/GasPriceMinimum.sol\":\"GasPriceMinimum\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts8/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts8/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts8/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts8/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"project:/contracts-0.8/common/GasPriceMinimum.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.8.7 <0.8.20;\\n\\nimport \\\"@openzeppelin/contracts8/access/Ownable.sol\\\";\\n\\nimport \\\"../../contracts/common/CalledByVm.sol\\\";\\nimport \\\"../../contracts/common/Initializable.sol\\\";\\nimport \\\"../../contracts/common/interfaces/ICeloVersionedContract.sol\\\";\\nimport \\\"../../contracts/common/FixidityLib.sol\\\";\\nimport \\\"./UsingRegistry.sol\\\";\\nimport \\\"../../contracts/stability/interfaces/ISortedOracles.sol\\\";\\nimport \\\"@openzeppelin/contracts8/utils/math/Math.sol\\\";\\nimport \\\"./IsL2Check.sol\\\";\\n\\n/**\\n * @title Stores and provides gas price minimum for various currencies.\\n */\\ncontract GasPriceMinimum is\\n  ICeloVersionedContract,\\n  Ownable,\\n  Initializable,\\n  UsingRegistry,\\n  IsL2Check,\\n  CalledByVm\\n{\\n  using FixidityLib for FixidityLib.Fraction;\\n\\n  uint256 private deprecated_gasPriceMinimum;\\n  uint256 private deprecated_gasPriceMinimumFloor;\\n\\n  // Block congestion level targeted by the gas price minimum calculation.\\n  FixidityLib.Fraction private deprecated_targetDensity;\\n\\n  // Speed of gas price minimum adjustment due to congestion.\\n  FixidityLib.Fraction private deprecated_adjustmentSpeed;\\n\\n  uint256 private deprecated_baseFeeOpCodeActivationBlock;\\n  uint256 private constant ABSOLUTE_MINIMAL_GAS_PRICE = 1;\\n\\n  event TargetDensitySet(uint256 targetDensity);\\n  event GasPriceMinimumFloorSet(uint256 gasPriceMinimumFloor);\\n  event AdjustmentSpeedSet(uint256 adjustmentSpeed);\\n  event GasPriceMinimumUpdated(uint256 gasPriceMinimum);\\n  event BaseFeeOpCodeActivationBlockSet(uint256 baseFeeOpCodeActivationBlock);\\n\\n  /**\\n   * @notice Sets initialized == true on implementation contracts\\n   * @param test Set to true to skip implementation initialization\\n   */\\n  constructor(bool test) Initializable(test) {}\\n\\n  /**\\n   * @notice Used in place of the constructor to allow the contract to be upgradable via proxy.\\n   * @param _registryAddress The address of the registry core smart contract.\\n   * @param _gasPriceMinimumFloor The lowest value the gas price minimum can be.\\n   * @param _targetDensity The target gas fullness of blocks, expressed as a fixidity fraction.\\n   * @param _adjustmentSpeed How quickly the minimum changes, expressed as a fixidity fraction.\\n   * @param _baseFeeOpCodeActivationBlock Block number where the baseFee opCode is activated\\n   */\\n  function initialize(\\n    address _registryAddress,\\n    uint256 _gasPriceMinimumFloor,\\n    uint256 _targetDensity,\\n    uint256 _adjustmentSpeed,\\n    uint256 _baseFeeOpCodeActivationBlock\\n  ) external initializer {\\n    _transferOwnership(msg.sender);\\n    setRegistry(_registryAddress);\\n    deprecated_gasPriceMinimum = _gasPriceMinimumFloor;\\n    setGasPriceMinimumFloor(_gasPriceMinimumFloor);\\n    setTargetDensity(_targetDensity);\\n    setAdjustmentSpeed(_adjustmentSpeed);\\n    _setBaseFeeOpCodeActivationBlock(_baseFeeOpCodeActivationBlock, true);\\n  }\\n\\n  /**\\n   * @notice Set the activation block of the baseFee opCode.\\n   * @param _baseFeeOpCodeActivationBlock Block number where the baseFee opCode is activated\\n   * @dev Value is expected to be > 0.\\n   */\\n  function setBaseFeeOpCodeActivationBlock(\\n    uint256 _baseFeeOpCodeActivationBlock\\n  ) external onlyOwner onlyL1 {\\n    _setBaseFeeOpCodeActivationBlock(_baseFeeOpCodeActivationBlock, false);\\n  }\\n\\n  /**\\n   * @notice Adjust the gas price minimum based on governable parameters\\n   * and block congestion.\\n   * @param blockGasTotal The amount of gas in the most recent block.\\n   * @param blockGasLimit The maxBlockGasLimit of the past block.\\n   * @return result of the calculation (new gas price minimum)\\n   */\\n  function updateGasPriceMinimum(\\n    uint256 blockGasTotal,\\n    uint256 blockGasLimit\\n  ) external onlyVm onlyL1 returns (uint256) {\\n    deprecated_gasPriceMinimum = getUpdatedGasPriceMinimum(blockGasTotal, blockGasLimit);\\n    emit GasPriceMinimumUpdated(deprecated_gasPriceMinimum);\\n    return deprecated_gasPriceMinimum;\\n  }\\n\\n  /**\\n   * @notice Retrieve the current gas price minimum for a currency.\\n   * When caled for 0x0 or Celo address, it returns gasPriceMinimum().\\n   * For other addresses it returns gasPriceMinimum() mutiplied by\\n   * the SortedOracles median of the token. It does not check tokenAddress is a valid fee currency.\\n   * this function will never returns values less than ABSOLUTE_MINIMAL_GAS_PRICE.\\n   * If Oracle rate doesn't exist, it returns ABSOLUTE_MINIMAL_GAS_PRICE.\\n   * @dev This functions assumes one unit of token has 18 digits.\\n   * @param tokenAddress The currency the gas price should be in (defaults to Celo).\\n   * @return current gas price minimum in the requested currency\\n   */\\n  function getGasPriceMinimum(address tokenAddress) external view onlyL1 returns (uint256) {\\n    return Math.max(_getGasPriceMinimum(tokenAddress), ABSOLUTE_MINIMAL_GAS_PRICE);\\n  }\\n  /**\\n   * @notice Returns the storage, major, minor, and patch version of the contract.\\n   * @return Storage version of the contract.\\n   * @return Major version of the contract.\\n   * @return Minor version of the contract.\\n   * @return Patch version of the contract.\\n   */\\n  function getVersionNumber() external pure returns (uint256, uint256, uint256, uint256) {\\n    return (1, 2, 1, 0);\\n  }\\n\\n  /**\\n   * @notice Set a multiplier that impacts how quickly gas price minimum is adjusted.\\n   * @param _adjustmentSpeed How quickly the minimum changes, expressed as a fixidity fraction.\\n   * @dev Value is expected to be < 1.\\n   */\\n  function setAdjustmentSpeed(uint256 _adjustmentSpeed) public onlyOwner onlyL1 {\\n    deprecated_adjustmentSpeed = FixidityLib.wrap(_adjustmentSpeed);\\n    require(\\n      deprecated_adjustmentSpeed.lt(FixidityLib.fixed1()),\\n      \\\"adjustment speed must be smaller than 1\\\"\\n    );\\n    emit AdjustmentSpeedSet(_adjustmentSpeed);\\n  }\\n\\n  /**\\n   * @notice Set the block density targeted by the gas price minimum algorithm.\\n   * @param _targetDensity The target gas fullness of blocks, expressed as a fixidity fraction.\\n   * @dev Value is expected to be < 1.\\n   */\\n  function setTargetDensity(uint256 _targetDensity) public onlyOwner onlyL1 {\\n    deprecated_targetDensity = FixidityLib.wrap(_targetDensity);\\n    require(\\n      deprecated_targetDensity.lt(FixidityLib.fixed1()),\\n      \\\"target density must be smaller than 1\\\"\\n    );\\n    emit TargetDensitySet(_targetDensity);\\n  }\\n\\n  /**\\n   * @notice Set the minimum gas price treshold.\\n   * @param _gasPriceMinimumFloor The lowest value the gas price minimum can be.\\n   * @dev Value is expected to be > 0.\\n   */\\n  function setGasPriceMinimumFloor(uint256 _gasPriceMinimumFloor) public onlyOwner onlyL1 {\\n    require(_gasPriceMinimumFloor > 0, \\\"gas price minimum floor must be greater than zero\\\");\\n    deprecated_gasPriceMinimumFloor = _gasPriceMinimumFloor;\\n    emit GasPriceMinimumFloorSet(_gasPriceMinimumFloor);\\n  }\\n\\n  /**\\n   * @notice Returns the gas price minimum.\\n   * @return The gas price minimum.\\n   */\\n  function gasPriceMinimum() public view onlyL1 returns (uint256) {\\n    if (\\n      deprecated_baseFeeOpCodeActivationBlock > 0 &&\\n      block.number >= deprecated_baseFeeOpCodeActivationBlock\\n    ) {\\n      return block.basefee;\\n    } else {\\n      return deprecated_gasPriceMinimum;\\n    }\\n  }\\n\\n  /**\\n   * @notice Calculates the gas price minimum based on governable parameters\\n   * and block congestion.\\n   * @param blockGasTotal The amount of gas in the most recent block.\\n   * @param blockGasLimit The maxBlockGasLimit of the past block.\\n   * @return result of the calculation (new gas price minimum)\\n   * @dev Calculate using the following formula:\\n   * oldGasPriceMinimum * (1 + (adjustmentSpeed * (blockDensity - targetDensity))) + 1.\\n   */\\n  function getUpdatedGasPriceMinimum(\\n    uint256 blockGasTotal,\\n    uint256 blockGasLimit\\n  ) public view onlyL1 returns (uint256) {\\n    FixidityLib.Fraction memory blockDensity = FixidityLib.newFixedFraction(\\n      blockGasTotal,\\n      blockGasLimit\\n    );\\n    bool densityGreaterThanTarget = blockDensity.gt(deprecated_targetDensity);\\n    FixidityLib.Fraction memory densityDelta = densityGreaterThanTarget\\n      ? blockDensity.subtract(deprecated_targetDensity)\\n      : deprecated_targetDensity.subtract(blockDensity);\\n    FixidityLib.Fraction memory adjustment = densityGreaterThanTarget\\n      ? FixidityLib.fixed1().add(deprecated_adjustmentSpeed.multiply(densityDelta))\\n      : FixidityLib.fixed1().subtract(deprecated_adjustmentSpeed.multiply(densityDelta));\\n\\n    uint256 newGasPriceMinimum = adjustment\\n      .multiply(FixidityLib.newFixed(gasPriceMinimum()))\\n      .add(FixidityLib.fixed1())\\n      .fromFixed();\\n\\n    return\\n      newGasPriceMinimum >= deprecated_gasPriceMinimumFloor\\n        ? newGasPriceMinimum\\n        : deprecated_gasPriceMinimumFloor;\\n  }\\n\\n  /**\\n   * @notice Returns the gas price minimum floor.\\n   * @return The gas price minimum floor.\\n   */\\n  function gasPriceMinimumFloor() external view onlyL1 returns (uint256) {\\n    return deprecated_gasPriceMinimumFloor;\\n  }\\n\\n  /**\\n   * @notice Returns the target density.\\n   * @return The target density.\\n   */\\n  function targetDensity() external view onlyL1 returns (uint256) {\\n    return deprecated_targetDensity.unwrap();\\n  }\\n\\n  /**\\n   * @notice Returns the adjustment speed.\\n   * @return The adjustment speed.\\n   */\\n  function adjustmentSpeed() external view onlyL1 returns (uint256) {\\n    return deprecated_adjustmentSpeed.unwrap();\\n  }\\n\\n  /**\\n   * @notice Returns the basefee opcode activation block.\\n   * @return The basefee opcode activation block.\\n   */\\n  function baseFeeOpCodeActivationBlock() external view onlyL1 returns (uint256) {\\n    return deprecated_baseFeeOpCodeActivationBlock;\\n  }\\n\\n  /**\\n   * @notice Set the activation block of the baseFee opCode.\\n   * @param _baseFeeOpCodeActivationBlock Block number where the baseFee opCode is activated\\n   * @dev Value is expected to be > 0.\\n   */\\n  function _setBaseFeeOpCodeActivationBlock(\\n    uint256 _baseFeeOpCodeActivationBlock,\\n    bool allowZero\\n  ) private onlyOwner {\\n    require(\\n      allowZero || _baseFeeOpCodeActivationBlock > 0,\\n      \\\"baseFee opCode activation block must be greater than zero\\\"\\n    );\\n    deprecated_baseFeeOpCodeActivationBlock = _baseFeeOpCodeActivationBlock;\\n    emit BaseFeeOpCodeActivationBlockSet(_baseFeeOpCodeActivationBlock);\\n  }\\n\\n  function _getGasPriceMinimum(address tokenAddress) private view returns (uint256) {\\n    if (\\n      tokenAddress == address(0) ||\\n      tokenAddress == registry.getAddressForOrDie(CELO_TOKEN_REGISTRY_ID)\\n    ) {\\n      return gasPriceMinimum();\\n    } else {\\n      ISortedOracles sortedOracles = ISortedOracles(\\n        registry.getAddressForOrDie(SORTED_ORACLES_REGISTRY_ID)\\n      );\\n      uint256 rateNumerator;\\n      uint256 rateDenominator;\\n      (rateNumerator, rateDenominator) = sortedOracles.medianRate(tokenAddress);\\n      return ((gasPriceMinimum() * rateNumerator) / rateDenominator);\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x650b23595028d34c455cf8034b1a71e463027906841afef24f1d46c3d7350bbf\",\"license\":\"LGPL-3.0-only\"},\"project:/contracts-0.8/common/IsL2Check.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.5.13 <0.8.20;\\n\\n/**\\n * @title Based on predeploy returns whether this is L1 or L2.\\n */\\ncontract IsL2Check {\\n  address constant proxyAdminAddress = 0x4200000000000000000000000000000000000018;\\n\\n  /**\\n   * @notice Throws if called on L2.\\n   */\\n  modifier onlyL1() {\\n    allowOnlyL1();\\n    _;\\n  }\\n\\n  /**\\n   * @notice Throws if called on L1.\\n   */\\n  modifier onlyL2() {\\n    if (!isL2()) {\\n      revert(\\\"This method is not supported in L1.\\\");\\n    }\\n    _;\\n  }\\n\\n  /**\\n   * @notice Checks to see if current network is Celo L2.\\n   * @return Whether or not the current network is a Celo L2.\\n   */\\n  function isL2() internal view returns (bool) {\\n    uint32 size;\\n    address _addr = proxyAdminAddress;\\n    assembly {\\n      size := extcodesize(_addr)\\n    }\\n    return (size > 0);\\n  }\\n\\n  /**\\n   * @notice Used to restrict usage of the parent function to L1 execution.\\n   * @dev Reverts if called on a Celo L2 network.\\n   */\\n  function allowOnlyL1() internal view {\\n    if (isL2()) {\\n      revert(\\\"This method is no longer supported in L2.\\\");\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x4629a6f2c4364780f5a6a5e2ad5c3675c0a1d3bea35cfd4426eeaebca60cac37\",\"license\":\"LGPL-3.0-only\"},\"project:/contracts-0.8/common/UsingRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.8.0 <0.8.20;\\n\\n// Note: This is not an exact copy of UsingRegistry or UsingRegistryV2 in the contract's folder\\n// because Mento's interfaces still don't support Solidity 0.8\\n\\nimport \\\"@openzeppelin/contracts8/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts8/token/ERC20/IERC20.sol\\\";\\n\\nimport \\\"../../contracts/common/interfaces/IRegistry.sol\\\";\\nimport \\\"../../contracts/common/interfaces/IAccounts.sol\\\";\\nimport \\\"../../contracts/common/interfaces/IEpochManager.sol\\\";\\nimport \\\"../../contracts/common/interfaces/IFreezer.sol\\\";\\nimport \\\"../../contracts/common/interfaces/ICeloUnreleasedTreasury.sol\\\";\\nimport \\\"../../contracts/common/interfaces/IFeeCurrencyWhitelist.sol\\\";\\nimport \\\"../../contracts/common/interfaces/IFeeHandlerSeller.sol\\\";\\nimport \\\"../../contracts/common/interfaces/IEpochManager.sol\\\";\\nimport \\\"../../contracts/governance/interfaces/IGovernance.sol\\\";\\nimport \\\"../../contracts/governance/interfaces/ILockedGold.sol\\\";\\nimport \\\"../../contracts/governance/interfaces/ILockedCelo.sol\\\";\\nimport \\\"../../contracts/governance/interfaces/IValidators.sol\\\";\\nimport \\\"../../contracts/governance/interfaces/IElection.sol\\\";\\nimport \\\"../../contracts/governance/interfaces/IEpochRewards.sol\\\";\\nimport \\\"../../contracts/stability/interfaces/ISortedOracles.sol\\\";\\n\\nimport \\\"./interfaces/IScoreReader.sol\\\";\\n\\ncontract UsingRegistry is Ownable {\\n  // solhint-disable state-visibility\\n  bytes32 constant ACCOUNTS_REGISTRY_ID = keccak256(abi.encodePacked(\\\"Accounts\\\"));\\n  bytes32 constant ATTESTATIONS_REGISTRY_ID = keccak256(abi.encodePacked(\\\"Attestations\\\"));\\n  bytes32 constant DOWNTIME_SLASHER_REGISTRY_ID = keccak256(abi.encodePacked(\\\"DowntimeSlasher\\\"));\\n  bytes32 constant DOUBLE_SIGNING_SLASHER_REGISTRY_ID =\\n    keccak256(abi.encodePacked(\\\"DoubleSigningSlasher\\\"));\\n  bytes32 constant ELECTION_REGISTRY_ID = keccak256(abi.encodePacked(\\\"Election\\\"));\\n  bytes32 constant EPOCH_REWARDS_REGISTRY_ID = keccak256(abi.encodePacked(\\\"EpochRewards\\\"));\\n  bytes32 constant EXCHANGE_REGISTRY_ID = keccak256(abi.encodePacked(\\\"Exchange\\\"));\\n  bytes32 constant FEE_CURRENCY_WHITELIST_REGISTRY_ID =\\n    keccak256(abi.encodePacked(\\\"FeeCurrencyWhitelist\\\"));\\n  bytes32 constant FREEZER_REGISTRY_ID = keccak256(abi.encodePacked(\\\"Freezer\\\"));\\n  bytes32 constant GOLD_TOKEN_REGISTRY_ID = keccak256(abi.encodePacked(\\\"GoldToken\\\"));\\n  bytes32 constant GOVERNANCE_REGISTRY_ID = keccak256(abi.encodePacked(\\\"Governance\\\"));\\n  bytes32 constant GOVERNANCE_SLASHER_REGISTRY_ID =\\n    keccak256(abi.encodePacked(\\\"GovernanceSlasher\\\"));\\n  bytes32 constant LOCKED_GOLD_REGISTRY_ID = keccak256(abi.encodePacked(\\\"LockedGold\\\"));\\n  bytes32 constant RESERVE_REGISTRY_ID = keccak256(abi.encodePacked(\\\"Reserve\\\"));\\n  bytes32 constant RANDOM_REGISTRY_ID = keccak256(abi.encodePacked(\\\"Random\\\"));\\n  bytes32 constant SORTED_ORACLES_REGISTRY_ID = keccak256(abi.encodePacked(\\\"SortedOracles\\\"));\\n  bytes32 constant STABLE_TOKEN_REGISTRY_ID = keccak256(abi.encodePacked(\\\"StableToken\\\"));\\n  bytes32 constant VALIDATORS_REGISTRY_ID = keccak256(abi.encodePacked(\\\"Validators\\\"));\\n  bytes32 constant MENTOFEEHANDLERSELLER_REGISTRY_ID =\\n    keccak256(abi.encodePacked(\\\"MentoFeeHandlerSeller\\\"));\\n  bytes32 constant CELO_TOKEN_REGISTRY_ID = keccak256(abi.encodePacked(\\\"CeloToken\\\"));\\n  bytes32 constant LOCKED_CELO_REGISTRY_ID = keccak256(abi.encodePacked(\\\"LockedCelo\\\"));\\n  bytes32 constant CELO_UNRELEASED_TREASURY_REGISTRY_ID =\\n    keccak256(abi.encodePacked(\\\"CeloUnreleasedTreasury\\\"));\\n  bytes32 constant EPOCH_MANAGER_ENABLER_REGISTRY_ID =\\n    keccak256(abi.encodePacked(\\\"EpochManagerEnabler\\\"));\\n  bytes32 constant EPOCH_MANAGER_REGISTRY_ID = keccak256(abi.encodePacked(\\\"EpochManager\\\"));\\n  bytes32 constant SCORE_MANAGER_REGISTRY_ID = keccak256(abi.encodePacked(\\\"ScoreManager\\\"));\\n  // solhint-enable state-visibility\\n\\n  IRegistry public registry;\\n\\n  event RegistrySet(address indexed registryAddress);\\n\\n  modifier onlyRegisteredContract(bytes32 identifierHash) {\\n    require(registry.getAddressForOrDie(identifierHash) == msg.sender, \\\"only registered contract\\\");\\n    _;\\n  }\\n\\n  modifier onlyRegisteredContracts(bytes32[] memory identifierHashes) {\\n    require(registry.isOneOf(identifierHashes, msg.sender), \\\"only registered contracts\\\");\\n    _;\\n  }\\n\\n  /**\\n   * @notice Updates the address pointing to a Registry contract.\\n   * @param registryAddress The address of a registry contract for routing to other contracts.\\n   */\\n  function setRegistry(address registryAddress) public onlyOwner {\\n    require(registryAddress != address(0), \\\"Cannot register the null address\\\");\\n    registry = IRegistry(registryAddress);\\n    emit RegistrySet(registryAddress);\\n  }\\n\\n  function getGoldToken() internal view returns (IERC20) {\\n    return IERC20(registry.getAddressForOrDie(GOLD_TOKEN_REGISTRY_ID));\\n  }\\n\\n  function getCeloToken() internal view returns (IERC20) {\\n    return IERC20(registry.getAddressForOrDie(CELO_TOKEN_REGISTRY_ID));\\n  }\\n\\n  function getFreezer() internal view returns (IFreezer) {\\n    return IFreezer(registry.getAddressForOrDie(FREEZER_REGISTRY_ID));\\n  }\\n\\n  function getSortedOracles() internal view returns (ISortedOracles) {\\n    return ISortedOracles(registry.getAddressForOrDie(SORTED_ORACLES_REGISTRY_ID));\\n  }\\n\\n  function getFeeCurrencyWhitelist() internal view returns (IFeeCurrencyWhitelist) {\\n    return IFeeCurrencyWhitelist(registry.getAddressForOrDie(FEE_CURRENCY_WHITELIST_REGISTRY_ID));\\n  }\\n\\n  function getLockedGold() internal view returns (ILockedGold) {\\n    return ILockedGold(registry.getAddressForOrDie(LOCKED_GOLD_REGISTRY_ID));\\n  }\\n\\n  function getLockedCelo() internal view returns (ILockedCelo) {\\n    return ILockedCelo(registry.getAddressForOrDie(LOCKED_CELO_REGISTRY_ID));\\n  }\\n\\n  // Current version of Mento doesn't support 0.8\\n  function getStableToken() internal view returns (address) {\\n    return registry.getAddressForOrDie(STABLE_TOKEN_REGISTRY_ID);\\n  }\\n\\n  function getMentoFeeHandlerSeller() internal view returns (IFeeHandlerSeller) {\\n    return IFeeHandlerSeller(registry.getAddressForOrDie(MENTOFEEHANDLERSELLER_REGISTRY_ID));\\n  }\\n\\n  function getAccounts() internal view returns (IAccounts) {\\n    return IAccounts(registry.getAddressForOrDie(ACCOUNTS_REGISTRY_ID));\\n  }\\n\\n  function getValidators() internal view returns (IValidators) {\\n    return IValidators(registry.getAddressForOrDie(VALIDATORS_REGISTRY_ID));\\n  }\\n\\n  function getElection() internal view returns (IElection) {\\n    return IElection(registry.getAddressForOrDie(ELECTION_REGISTRY_ID));\\n  }\\n\\n  function getEpochRewards() internal view returns (IEpochRewards) {\\n    return IEpochRewards(registry.getAddressForOrDie(EPOCH_REWARDS_REGISTRY_ID));\\n  }\\n\\n  function getGovernance() internal view returns (IGovernance) {\\n    return IGovernance(registry.getAddressForOrDie(GOVERNANCE_REGISTRY_ID));\\n  }\\n\\n  function getCeloUnreleasedTreasury() internal view returns (ICeloUnreleasedTreasury) {\\n    return\\n      ICeloUnreleasedTreasury(registry.getAddressForOrDie(CELO_UNRELEASED_TREASURY_REGISTRY_ID));\\n  }\\n\\n  function getEpochManager() internal view returns (IEpochManager) {\\n    return IEpochManager(registry.getAddressForOrDie(EPOCH_MANAGER_REGISTRY_ID));\\n  }\\n\\n  function getScoreReader() internal view returns (IScoreReader) {\\n    return IScoreReader(registry.getAddressForOrDie(SCORE_MANAGER_REGISTRY_ID));\\n  }\\n}\\n\",\"keccak256\":\"0x40f6a3f17d0665b82463f2c2f6837ddaf1a31bcf691c936682338f2664782dde\",\"license\":\"LGPL-3.0-only\"},\"project:/contracts-0.8/common/interfaces/IScoreReader.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.8.7 <0.8.20;\\n\\ninterface IScoreReader {\\n  function getValidatorScore(address validator) external view returns (uint256);\\n  function getGroupScore(address validator) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xa9276e744a343a3c1eaf68253b7f5ff2325897e18fae20a3265a257a2d0d1036\",\"license\":\"LGPL-3.0-only\"},\"project:/contracts/common/CalledByVm.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.5.13 <0.9.0;\\n\\ncontract CalledByVm {\\n  modifier onlyVm() {\\n    require(msg.sender == address(0), \\\"Only VM can call\\\");\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0xb94d2b580a505f5d4ef51bb14b12b6fa19d69e4fa94c96f2f105091673a0a0a4\",\"license\":\"LGPL-3.0-only\"},\"project:/contracts/common/FixidityLib.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.5.13 <0.9.0;\\n\\n/**\\n * @title FixidityLib\\n * @author Gadi Guy, Alberto Cuesta Canada\\n * @notice This library provides fixed point arithmetic with protection against\\n * overflow.\\n * All operations are done with uint256 and the operands must have been created\\n * with any of the newFrom* functions, which shift the comma digits() to the\\n * right and check for limits, or with wrap() which expects a number already\\n * in the internal representation of a fraction.\\n * When using this library be sure to use maxNewFixed() as the upper limit for\\n * creation of fixed point numbers.\\n * @dev All contained functions are pure and thus marked internal to be inlined\\n * on consuming contracts at compile time for gas efficiency.\\n */\\nlibrary FixidityLib {\\n  struct Fraction {\\n    uint256 value;\\n  }\\n\\n  uint256 private constant FIXED1_UINT = 1000000000000000000000000;\\n\\n  /**\\n   * @notice Number of positions that the comma is shifted to the right.\\n   */\\n  function digits() internal pure returns (uint8) {\\n    return 24;\\n  }\\n\\n  /**\\n   * @notice This is 1 in the fixed point units used in this library.\\n   * @dev Test fixed1() equals 10^digits()\\n   * Hardcoded to 24 digits.\\n   */\\n  function fixed1() internal pure returns (Fraction memory) {\\n    return Fraction(FIXED1_UINT);\\n  }\\n\\n  /**\\n   * @notice Wrap a uint256 that represents a 24-decimal fraction in a Fraction\\n   * struct.\\n   * @param x Number that already represents a 24-decimal fraction.\\n   * @return A Fraction struct with contents x.\\n   */\\n  function wrap(uint256 x) internal pure returns (Fraction memory) {\\n    return Fraction(x);\\n  }\\n\\n  /**\\n   * @notice Unwraps the uint256 inside of a Fraction struct.\\n   */\\n  function unwrap(Fraction memory x) internal pure returns (uint256) {\\n    return x.value;\\n  }\\n\\n  /**\\n   * @notice The amount of decimals lost on each multiplication operand.\\n   * @dev Test mulPrecision() equals sqrt(fixed1)\\n   */\\n  function mulPrecision() internal pure returns (uint256) {\\n    return 1000000000000;\\n  }\\n\\n  /**\\n   * @notice Maximum value that can be converted to fixed point. Optimize for deployment.\\n   * @dev\\n   * Test maxNewFixed() equals maxUint256() / fixed1()\\n   */\\n  function maxNewFixed() internal pure returns (uint256) {\\n    return 115792089237316195423570985008687907853269984665640564;\\n  }\\n\\n  /**\\n   * @notice Converts a uint256 to fixed point Fraction\\n   * @dev Test newFixed(0) returns 0\\n   * Test newFixed(1) returns fixed1()\\n   * Test newFixed(maxNewFixed()) returns maxNewFixed() * fixed1()\\n   * Test newFixed(maxNewFixed()+1) fails\\n   */\\n  function newFixed(uint256 x) internal pure returns (Fraction memory) {\\n    require(x <= maxNewFixed(), \\\"can't create fixidity number larger than maxNewFixed()\\\");\\n    return Fraction(x * FIXED1_UINT);\\n  }\\n\\n  /**\\n   * @notice Converts a uint256 in the fixed point representation of this\\n   * library to a non decimal. All decimal digits will be truncated.\\n   */\\n  function fromFixed(Fraction memory x) internal pure returns (uint256) {\\n    return x.value / FIXED1_UINT;\\n  }\\n\\n  /**\\n   * @notice Converts two uint256 representing a fraction to fixed point units,\\n   * equivalent to multiplying dividend and divisor by 10^digits().\\n   * @param numerator numerator must be <= maxNewFixed()\\n   * @param denominator denominator must be <= maxNewFixed() and denominator can't be 0\\n   * @dev\\n   * Test newFixedFraction(1,0) fails\\n   * Test newFixedFraction(0,1) returns 0\\n   * Test newFixedFraction(1,1) returns fixed1()\\n   * Test newFixedFraction(1,fixed1()) returns 1\\n   */\\n  function newFixedFraction(\\n    uint256 numerator,\\n    uint256 denominator\\n  ) internal pure returns (Fraction memory) {\\n    Fraction memory convertedNumerator = newFixed(numerator);\\n    Fraction memory convertedDenominator = newFixed(denominator);\\n    return divide(convertedNumerator, convertedDenominator);\\n  }\\n\\n  /**\\n   * @notice Returns the integer part of a fixed point number.\\n   * @dev\\n   * Test integer(0) returns 0\\n   * Test integer(fixed1()) returns fixed1()\\n   * Test integer(newFixed(maxNewFixed())) returns maxNewFixed()*fixed1()\\n   */\\n  function integer(Fraction memory x) internal pure returns (Fraction memory) {\\n    return Fraction((x.value / FIXED1_UINT) * FIXED1_UINT); // Can't overflow\\n  }\\n\\n  /**\\n   * @notice Returns the fractional part of a fixed point number.\\n   * In the case of a negative number the fractional is also negative.\\n   * @dev\\n   * Test fractional(0) returns 0\\n   * Test fractional(fixed1()) returns 0\\n   * Test fractional(fixed1()-1) returns 10^24-1\\n   */\\n  function fractional(Fraction memory x) internal pure returns (Fraction memory) {\\n    return Fraction(x.value - (x.value / FIXED1_UINT) * FIXED1_UINT); // Can't overflow\\n  }\\n\\n  /**\\n   * @notice x+y.\\n   * @dev The maximum value that can be safely used as an addition operator is defined as\\n   * maxFixedAdd = maxUint256()-1 / 2, or\\n   * 57896044618658097711785492504343953926634992332820282019728792003956564819967.\\n   * Test add(maxFixedAdd,maxFixedAdd) equals maxFixedAdd + maxFixedAdd\\n   * Test add(maxFixedAdd+1,maxFixedAdd+1) throws\\n   */\\n  function add(Fraction memory x, Fraction memory y) internal pure returns (Fraction memory) {\\n    uint256 z = x.value + y.value;\\n    require(z >= x.value, \\\"add overflow detected\\\");\\n    return Fraction(z);\\n  }\\n\\n  /**\\n   * @notice x-y.\\n   * @dev\\n   * Test subtract(6, 10) fails\\n   */\\n  function subtract(Fraction memory x, Fraction memory y) internal pure returns (Fraction memory) {\\n    require(x.value >= y.value, \\\"substraction underflow detected\\\");\\n    return Fraction(x.value - y.value);\\n  }\\n\\n  /**\\n   * @notice x*y. If any of the operators is higher than the max multiplier value it\\n   * might overflow.\\n   * @dev The maximum value that can be safely used as a multiplication operator\\n   * (maxFixedMul) is calculated as sqrt(maxUint256()*fixed1()),\\n   * or 340282366920938463463374607431768211455999999999999\\n   * Test multiply(0,0) returns 0\\n   * Test multiply(maxFixedMul,0) returns 0\\n   * Test multiply(0,maxFixedMul) returns 0\\n   * Test multiply(fixed1()/mulPrecision(),fixed1()*mulPrecision()) returns fixed1()\\n   * Test multiply(maxFixedMul,maxFixedMul) is around maxUint256()\\n   * Test multiply(maxFixedMul+1,maxFixedMul+1) fails\\n   */\\n  function multiply(Fraction memory x, Fraction memory y) internal pure returns (Fraction memory) {\\n    if (x.value == 0 || y.value == 0) return Fraction(0);\\n    if (y.value == FIXED1_UINT) return x;\\n    if (x.value == FIXED1_UINT) return y;\\n\\n    // Separate into integer and fractional parts\\n    // x = x1 + x2, y = y1 + y2\\n    uint256 x1 = integer(x).value / FIXED1_UINT;\\n    uint256 x2 = fractional(x).value;\\n    uint256 y1 = integer(y).value / FIXED1_UINT;\\n    uint256 y2 = fractional(y).value;\\n\\n    // (x1 + x2) * (y1 + y2) = (x1 * y1) + (x1 * y2) + (x2 * y1) + (x2 * y2)\\n    uint256 x1y1 = x1 * y1;\\n    if (x1 != 0) require(x1y1 / x1 == y1, \\\"overflow x1y1 detected\\\");\\n\\n    // x1y1 needs to be multiplied back by fixed1\\n    // solium-disable-next-line mixedcase\\n    uint256 fixed_x1y1 = x1y1 * FIXED1_UINT;\\n    if (x1y1 != 0) require(fixed_x1y1 / x1y1 == FIXED1_UINT, \\\"overflow x1y1 * fixed1 detected\\\");\\n    x1y1 = fixed_x1y1;\\n\\n    uint256 x2y1 = x2 * y1;\\n    if (x2 != 0) require(x2y1 / x2 == y1, \\\"overflow x2y1 detected\\\");\\n\\n    uint256 x1y2 = x1 * y2;\\n    if (x1 != 0) require(x1y2 / x1 == y2, \\\"overflow x1y2 detected\\\");\\n\\n    x2 = x2 / mulPrecision();\\n    y2 = y2 / mulPrecision();\\n    uint256 x2y2 = x2 * y2;\\n    if (x2 != 0) require(x2y2 / x2 == y2, \\\"overflow x2y2 detected\\\");\\n\\n    // result = fixed1() * x1 * y1 + x1 * y2 + x2 * y1 + x2 * y2 / fixed1();\\n    Fraction memory result = Fraction(x1y1);\\n    result = add(result, Fraction(x2y1)); // Add checks for overflow\\n    result = add(result, Fraction(x1y2)); // Add checks for overflow\\n    result = add(result, Fraction(x2y2)); // Add checks for overflow\\n    return result;\\n  }\\n\\n  /**\\n   * @notice 1/x\\n   * @dev\\n   * Test reciprocal(0) fails\\n   * Test reciprocal(fixed1()) returns fixed1()\\n   * Test reciprocal(fixed1()*fixed1()) returns 1 // Testing how the fractional is truncated\\n   * Test reciprocal(1+fixed1()*fixed1()) returns 0 // Testing how the fractional is truncated\\n   * Test reciprocal(newFixedFraction(1, 1e24)) returns newFixed(1e24)\\n   */\\n  function reciprocal(Fraction memory x) internal pure returns (Fraction memory) {\\n    require(x.value != 0, \\\"can't call reciprocal(0)\\\");\\n    return Fraction((FIXED1_UINT * FIXED1_UINT) / x.value); // Can't overflow\\n  }\\n\\n  /**\\n   * @notice x/y. If the dividend is higher than the max dividend value, it\\n   * might overflow. You can use multiply(x,reciprocal(y)) instead.\\n   * @dev The maximum value that can be safely used as a dividend (maxNewFixed) is defined as\\n   * divide(maxNewFixed,newFixedFraction(1,fixed1())) is around maxUint256().\\n   * This yields the value 115792089237316195423570985008687907853269984665640564.\\n   * Test maxNewFixed equals maxUint256()/fixed1()\\n   * Test divide(maxNewFixed,1) equals maxNewFixed*(fixed1)\\n   * Test divide(maxNewFixed+1,multiply(mulPrecision(),mulPrecision())) throws\\n   * Test divide(fixed1(),0) fails\\n   * Test divide(maxNewFixed,1) = maxNewFixed*(10^digits())\\n   * Test divide(maxNewFixed+1,1) throws\\n   */\\n  function divide(Fraction memory x, Fraction memory y) internal pure returns (Fraction memory) {\\n    require(y.value != 0, \\\"can't divide by 0\\\");\\n    uint256 X = x.value * FIXED1_UINT;\\n    require(X / FIXED1_UINT == x.value, \\\"overflow at divide\\\");\\n    return Fraction(X / y.value);\\n  }\\n\\n  /**\\n   * @notice x > y\\n   */\\n  function gt(Fraction memory x, Fraction memory y) internal pure returns (bool) {\\n    return x.value > y.value;\\n  }\\n\\n  /**\\n   * @notice x >= y\\n   */\\n  function gte(Fraction memory x, Fraction memory y) internal pure returns (bool) {\\n    return x.value >= y.value;\\n  }\\n\\n  /**\\n   * @notice x < y\\n   */\\n  function lt(Fraction memory x, Fraction memory y) internal pure returns (bool) {\\n    return x.value < y.value;\\n  }\\n\\n  /**\\n   * @notice x <= y\\n   */\\n  function lte(Fraction memory x, Fraction memory y) internal pure returns (bool) {\\n    return x.value <= y.value;\\n  }\\n\\n  /**\\n   * @notice x == y\\n   */\\n  function equals(Fraction memory x, Fraction memory y) internal pure returns (bool) {\\n    return x.value == y.value;\\n  }\\n\\n  /**\\n   * @notice x <= 1\\n   */\\n  function isProperFraction(Fraction memory x) internal pure returns (bool) {\\n    return lte(x, fixed1());\\n  }\\n}\\n\",\"keccak256\":\"0x546944b106cf70ad6f793e71dffd41733bec3e03ca820a3d08213fc795c042b0\",\"license\":\"LGPL-3.0-only\"},\"project:/contracts/common/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.5.13 <0.9.0;\\n\\n/**\\n * @title Used with proxied contracts that have an `initialize` function.\\n * @notice Ensures the `initialize` function:\\n *         - gets called only once\\n *         - cannot be called on the logic contract.\\n */\\ncontract Initializable {\\n  bool public initialized;\\n\\n  /**\\n   * @notice Ensures the initializer function cannot be called more than once.\\n   */\\n  modifier initializer() {\\n    require(!initialized, \\\"contract already initialized\\\");\\n    initialized = true;\\n    _;\\n  }\\n\\n  /**\\n   * @notice By default, ensures that the `initialize` function cannot be called\\n   * on the logic contract.\\n   * @param testingDeployment When set to true, allows the `initialize` function\\n   * to be called, which is useful in testing when not setting up with a Proxy.\\n   */\\n  constructor(bool testingDeployment) public {\\n    if (!testingDeployment) {\\n      initialized = true;\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x8de2ab8706668982998c5a995bdc3d8ff20a1ec8519bf49cec9e464f62c57bb9\",\"license\":\"LGPL-3.0-only\"},\"project:/contracts/common/interfaces/IAccounts.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.5.13 <0.9.0;\\n\\ninterface IAccounts {\\n  function setAccountDataEncryptionKey(bytes calldata) external;\\n  function setMetadataURL(string calldata) external;\\n  function setName(string calldata) external;\\n  function setWalletAddress(address, uint8, bytes32, bytes32) external;\\n  function setAccount(string calldata, bytes calldata, address, uint8, bytes32, bytes32) external;\\n\\n  function authorizeVoteSigner(address, uint8, bytes32, bytes32) external;\\n  function authorizeValidatorSigner(address, uint8, bytes32, bytes32) external;\\n  function authorizeValidatorSignerWithPublicKey(\\n    address,\\n    uint8,\\n    bytes32,\\n    bytes32,\\n    bytes calldata\\n  ) external;\\n  function authorizeValidatorSignerWithKeys(\\n    address,\\n    uint8,\\n    bytes32,\\n    bytes32,\\n    bytes calldata,\\n    bytes calldata,\\n    bytes calldata\\n  ) external;\\n  function authorizeAttestationSigner(address, uint8, bytes32, bytes32) external;\\n  function setEip712DomainSeparator() external;\\n  function createAccount() external returns (bool);\\n\\n  function setPaymentDelegation(address, uint256) external;\\n\\n  function isAccount(address) external view returns (bool);\\n  function voteSignerToAccount(address) external view returns (address);\\n  function validatorSignerToAccount(address) external view returns (address);\\n  function attestationSignerToAccount(address) external view returns (address);\\n  function signerToAccount(address) external view returns (address);\\n  function getAttestationSigner(address) external view returns (address);\\n  function getValidatorSigner(address) external view returns (address);\\n  function getVoteSigner(address) external view returns (address);\\n  function hasAuthorizedVoteSigner(address) external view returns (bool);\\n  function hasAuthorizedValidatorSigner(address) external view returns (bool);\\n  function hasAuthorizedAttestationSigner(address) external view returns (bool);\\n\\n  function batchGetMetadataURL(\\n    address[] calldata\\n  ) external view returns (uint256[] memory, bytes memory);\\n\\n  function getDataEncryptionKey(address) external view returns (bytes memory);\\n  function getWalletAddress(address) external view returns (address);\\n  function getMetadataURL(address) external view returns (string memory);\\n\\n  function getName(address) external view returns (string memory);\\n\\n  function getPaymentDelegation(address) external view returns (address, uint256);\\n  function isSigner(address, address, bytes32) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xd316739cfeeed50b89bd45a4596abf71fac174f10c2a24dbf352a53b2bab2dc1\",\"license\":\"LGPL-3.0-only\"},\"project:/contracts/common/interfaces/ICeloUnreleasedTreasury.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.5.13 <0.9.0;\\n\\ninterface ICeloUnreleasedTreasury {\\n  /**\\n   * @notice Releases the Celo to the specified address.\\n   * @param to The address to release the amount to.\\n   * @param amount The amount to release.\\n   */\\n  function release(address to, uint256 amount) external;\\n\\n  function getRemainingBalanceToRelease() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x41f4cda8fd14ba24261d9e6ef9c2f62ac15432ac78107e74045d2a880b50df82\",\"license\":\"LGPL-3.0-only\"},\"project:/contracts/common/interfaces/ICeloVersionedContract.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.5.13 <0.9.0;\\n\\ninterface ICeloVersionedContract {\\n  /**\\n   * @notice Returns the storage, major, minor, and patch version of the contract.\\n   * @return Storage version of the contract.\\n   * @return Major version of the contract.\\n   * @return Minor version of the contract.\\n   * @return Patch version of the contract.\\n   */\\n  function getVersionNumber() external pure returns (uint256, uint256, uint256, uint256);\\n}\\n\",\"keccak256\":\"0x3ce622e646f0bd7cce110045bf6cde1fd84242e9c8ee73a27e56956f0b1fb128\",\"license\":\"LGPL-3.0-only\"},\"project:/contracts/common/interfaces/IEpochManager.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.5.13 <0.9.0;\\n\\ninterface IEpochManager {\\n  function initializeSystem(\\n    uint256 firstEpochNumber,\\n    uint256 firstEpochBlock,\\n    address[] calldata firstElected\\n  ) external;\\n  function startNextEpochProcess() external;\\n  function finishNextEpochProcess(\\n    address[] calldata groups,\\n    address[] calldata lessers,\\n    address[] calldata greaters\\n  ) external;\\n  function setToProcessGroups() external;\\n  function processGroup(address group, address lesser, address greater) external;\\n  function sendValidatorPayment(address) external;\\n  function getCurrentEpoch() external view returns (uint256, uint256, uint256, uint256);\\n  function getEpochByNumber(\\n    uint256 epochNumber\\n  ) external view returns (uint256, uint256, uint256, uint256);\\n  function getEpochByBlockNumber(\\n    uint256 blockNumber\\n  ) external view returns (uint256, uint256, uint256, uint256);\\n  function getEpochNumberOfBlock(uint256) external view returns (uint256);\\n  function getCurrentEpochNumber() external view returns (uint256);\\n  function numberOfElectedInCurrentSet() external view returns (uint256);\\n  function getElectedAccounts() external view returns (address[] memory);\\n  function getElectedAccountByIndex(uint256 index) external view returns (address);\\n  function getElectedSigners() external view returns (address[] memory);\\n  function getElectedSignerByIndex(uint256 index) external view returns (address);\\n  function epochDuration() external view returns (uint256);\\n  function firstKnownEpoch() external view returns (uint256);\\n  function getEpochProcessingState()\\n    external\\n    view\\n    returns (uint256, uint256, uint256, uint256, uint256);\\n  function systemAlreadyInitialized() external view returns (bool);\\n  function isBlocked() external view returns (bool);\\n  function isTimeForNextEpoch() external view returns (bool);\\n  function isOnEpochProcess() external view returns (bool);\\n  function getFirstBlockAtEpoch(uint256) external view returns (uint256);\\n  function getLastBlockAtEpoch(uint256) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xc019958b7b5281fbfcd3c31b49d6ab29192ab4138de175a404bf0c17cccf9350\",\"license\":\"LGPL-3.0-only\"},\"project:/contracts/common/interfaces/IFeeCurrencyWhitelist.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.5.13 <0.9.0;\\n\\ninterface IFeeCurrencyWhitelist {\\n  function initialize() external;\\n  function addToken(address) external;\\n  function getWhitelist() external view returns (address[] memory);\\n}\\n\",\"keccak256\":\"0xa732071c691bf1ba84774ac5301fa5b18e1ecf6ea6f6210ecac00f5130341621\",\"license\":\"LGPL-3.0-only\"},\"project:/contracts/common/interfaces/IFeeHandlerSeller.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.5.13 <0.9.0;\\n\\ninterface IFeeHandlerSeller {\\n  function sell(\\n    address sellTokenAddress,\\n    address buyTokenAddress,\\n    uint256 amount,\\n    uint256 minAmount\\n  ) external returns (uint256);\\n  // in case some funds need to be returned or moved to another contract\\n  function transfer(address token, uint256 amount, address to) external returns (bool);\\n}\\n\",\"keccak256\":\"0x24e5784f088d67578e1ea00a118e0fc2e79cf610fc89d0ca7a3f23bc33a0da4e\",\"license\":\"LGPL-3.0-only\"},\"project:/contracts/common/interfaces/IFreezer.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.5.13 <0.9.0;\\n\\ninterface IFreezer {\\n  function freeze(address target) external;\\n  function unfreeze(address target) external;\\n  function isFrozen(address) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x31cee67b005413c61d6aa90d2899e6a37257cd4c026d8422249b397131a10755\",\"license\":\"LGPL-3.0-only\"},\"project:/contracts/common/interfaces/IRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.5.13 <0.9.0;\\n\\ninterface IRegistry {\\n  function setAddressFor(string calldata, address) external;\\n  function getAddressForOrDie(bytes32) external view returns (address);\\n  function getAddressFor(bytes32) external view returns (address);\\n  function getAddressForStringOrDie(string calldata identifier) external view returns (address);\\n  function getAddressForString(string calldata identifier) external view returns (address);\\n  function isOneOf(bytes32[] calldata, address) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x7737cbda6f3519bf6a4108e07b2c991a655e8731a4c040a3681e9629cfc4b52d\",\"license\":\"LGPL-3.0-only\"},\"project:/contracts/governance/interfaces/IElection.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.5.13 <0.9.0;\\n\\ninterface IElection {\\n  function vote(address, uint256, address, address) external returns (bool);\\n  function activate(address) external returns (bool);\\n  function revokeActive(address, uint256, address, address, uint256) external returns (bool);\\n  function revokeAllActive(address, address, address, uint256) external returns (bool);\\n  function revokePending(address, uint256, address, address, uint256) external returns (bool);\\n  function markGroupIneligible(address) external;\\n  function markGroupEligible(address, address, address) external;\\n  function allowedToVoteOverMaxNumberOfGroups(address) external returns (bool);\\n  function forceDecrementVotes(\\n    address,\\n    uint256,\\n    address[] calldata,\\n    address[] calldata,\\n    uint256[] calldata\\n  ) external returns (uint256);\\n  function setAllowedToVoteOverMaxNumberOfGroups(bool flag) external;\\n\\n  // only owner\\n  function setElectableValidators(uint256, uint256) external returns (bool);\\n  function setMaxNumGroupsVotedFor(uint256) external returns (bool);\\n  function setElectabilityThreshold(uint256) external returns (bool);\\n\\n  // only VM\\n  function distributeEpochRewards(address, uint256, address, address) external;\\n\\n  // view functions\\n  function electValidatorSigners() external view returns (address[] memory);\\n  function electValidatorAccounts() external view returns (address[] memory);\\n  function electNValidatorSigners(uint256, uint256) external view returns (address[] memory);\\n  function electNValidatorAccounts(uint256, uint256) external view returns (address[] memory);\\n  function getElectableValidators() external view returns (uint256, uint256);\\n  function getElectabilityThreshold() external view returns (uint256);\\n  function getNumVotesReceivable(address) external view returns (uint256);\\n  function getTotalVotes() external view returns (uint256);\\n  function getActiveVotes() external view returns (uint256);\\n  function getTotalVotesByAccount(address) external view returns (uint256);\\n  function getPendingVotesForGroupByAccount(address, address) external view returns (uint256);\\n  function getActiveVotesForGroupByAccount(address, address) external view returns (uint256);\\n  function getTotalVotesForGroupByAccount(address, address) external view returns (uint256);\\n  function getActiveVoteUnitsForGroupByAccount(address, address) external view returns (uint256);\\n  function getTotalVotesForGroup(address) external view returns (uint256);\\n  function getActiveVotesForGroup(address) external view returns (uint256);\\n  function getPendingVotesForGroup(address) external view returns (uint256);\\n  function getGroupEligibility(address) external view returns (bool);\\n  function getGroupEpochRewards(\\n    address,\\n    uint256,\\n    uint256[] calldata\\n  ) external view returns (uint256);\\n  function getGroupEpochRewardsBasedOnScore(\\n    address group,\\n    uint256 totalEpochRewards,\\n    uint256 groupScore\\n  ) external view returns (uint256);\\n  function getGroupsVotedForByAccount(address) external view returns (address[] memory);\\n  function getEligibleValidatorGroups() external view returns (address[] memory);\\n  function getTotalVotesForEligibleValidatorGroups()\\n    external\\n    view\\n    returns (address[] memory, uint256[] memory);\\n  function getCurrentValidatorSigners() external view returns (address[] memory);\\n  function canReceiveVotes(address, uint256) external view returns (bool);\\n  function hasActivatablePendingVotes(address, address) external view returns (bool);\\n  function validatorSignerAddressFromCurrentSet(uint256 index) external view returns (address);\\n  function numberValidatorsInCurrentSet() external view returns (uint256);\\n  function owner() external view returns (address);\\n}\\n\",\"keccak256\":\"0x598e1f22422d01cd2feccff34c5c276c388209058d7fab3d770e25fa8dec9e59\",\"license\":\"LGPL-3.0-only\"},\"project:/contracts/governance/interfaces/IEpochRewards.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.5.13 <0.9.0;\\n\\ninterface IEpochRewards {\\n  function updateTargetVotingYield() external;\\n  function isReserveLow() external view returns (bool);\\n  function calculateTargetEpochRewards() external view returns (uint256, uint256, uint256, uint256);\\n  function getTargetVotingYieldParameters() external view returns (uint256, uint256, uint256);\\n  function getRewardsMultiplierParameters() external view returns (uint256, uint256, uint256);\\n  function getCommunityRewardFraction() external view returns (uint256);\\n  function getCarbonOffsettingFraction() external view returns (uint256);\\n  function getTargetVotingGoldFraction() external view returns (uint256);\\n  function getRewardsMultiplier() external view returns (uint256);\\n  function carbonOffsettingPartner() external view returns (address);\\n}\\n\",\"keccak256\":\"0xfa534a0dc188ffd55595c6edb28b2e4ac9f036022a644b3a61e6a12097e14788\",\"license\":\"LGPL-3.0-only\"},\"project:/contracts/governance/interfaces/IGovernance.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.5.13 <0.9.0;\\n\\ninterface IGovernance {\\n  function removeVotesWhenRevokingDelegatedVotes(\\n    address account,\\n    uint256 maxAmountAllowed\\n  ) external;\\n  function votePartially(\\n    uint256 proposalId,\\n    uint256 index,\\n    uint256 yesVotes,\\n    uint256 noVotes,\\n    uint256 abstainVotes\\n  ) external returns (bool);\\n\\n  function setConstitution(address destination, bytes4 functionId, uint256 threshold) external;\\n\\n  function isVoting(address) external view returns (bool);\\n  function getAmountOfGoldUsedForVoting(address account) external view returns (uint256);\\n\\n  function getProposal(\\n    uint256 proposalId\\n  ) external view returns (address, uint256, uint256, uint256, string memory, uint256, bool);\\n\\n  function getReferendumStageDuration() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x8780295e0ecffc9870c59ed17fd4f50902117227157dd060db19d2ebbaaf3d2b\",\"license\":\"LGPL-3.0-only\"},\"project:/contracts/governance/interfaces/ILockedCelo.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.5.13 <0.9.0;\\n\\ninterface ILockedCelo {\\n  function lock() external payable;\\n  function incrementNonvotingAccountBalance(address, uint256) external;\\n  function decrementNonvotingAccountBalance(address, uint256) external;\\n\\n  function unlock(uint256) external;\\n  function relock(uint256, uint256) external;\\n  function withdraw(uint256) external;\\n  function slash(\\n    address account,\\n    uint256 penalty,\\n    address reporter,\\n    uint256 reward,\\n    address[] calldata lessers,\\n    address[] calldata greaters,\\n    uint256[] calldata indices\\n  ) external;\\n  function addSlasher(string calldata slasherIdentifier) external;\\n\\n  function getAccountNonvotingLockedGold(address account) external view returns (uint256);\\n  function getAccountTotalLockedCelo(address) external view returns (uint256);\\n  function getTotalLockedCelo() external view returns (uint256);\\n  function getPendingWithdrawals(\\n    address\\n  ) external view returns (uint256[] memory, uint256[] memory);\\n  function getPendingWithdrawal(\\n    address account,\\n    uint256 index\\n  ) external view returns (uint256, uint256);\\n  function getTotalPendingWithdrawals(address) external view returns (uint256);\\n  function isSlasher(address) external view returns (bool);\\n\\n  function getAccountTotalDelegatedFraction(address account) external view returns (uint256);\\n\\n  function getAccountTotalGovernanceVotingPower(address account) external view returns (uint256);\\n  function unlockingPeriod() external view returns (uint256);\\n  function getAccountNonvotingLockedCelo(address account) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x41cd5970ccc5612c9cd9cdf89a299a3cff0d8984d0b16ffad14da7670424920b\",\"license\":\"LGPL-3.0-only\"},\"project:/contracts/governance/interfaces/ILockedGold.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.5.13 <0.9.0;\\n\\ninterface ILockedGold {\\n  function lock() external payable;\\n  function incrementNonvotingAccountBalance(address, uint256) external;\\n  function decrementNonvotingAccountBalance(address, uint256) external;\\n\\n  function unlock(uint256) external;\\n  function relock(uint256, uint256) external;\\n  function withdraw(uint256) external;\\n  function slash(\\n    address account,\\n    uint256 penalty,\\n    address reporter,\\n    uint256 reward,\\n    address[] calldata lessers,\\n    address[] calldata greaters,\\n    uint256[] calldata indices\\n  ) external;\\n  function addSlasher(string calldata slasherIdentifier) external;\\n\\n  function getAccountTotalLockedGold(address) external view returns (uint256);\\n  function getTotalLockedGold() external view returns (uint256);\\n  function getPendingWithdrawals(\\n    address\\n  ) external view returns (uint256[] memory, uint256[] memory);\\n  function getPendingWithdrawal(\\n    address account,\\n    uint256 index\\n  ) external view returns (uint256, uint256);\\n  function getTotalPendingWithdrawals(address) external view returns (uint256);\\n  function isSlasher(address) external view returns (bool);\\n\\n  function getAccountTotalDelegatedFraction(address account) external view returns (uint256);\\n\\n  function getAccountTotalGovernanceVotingPower(address account) external view returns (uint256);\\n  function unlockingPeriod() external view returns (uint256);\\n  function getAccountNonvotingLockedGold(address account) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x4ab7ee32f3cbac55e91ef1087ba3e8bbdd784833faa2b9b7e1d66ff662800227\",\"license\":\"LGPL-3.0-only\"},\"project:/contracts/governance/interfaces/IValidators.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.5.13 <0.9.0;\\n\\ninterface IValidators {\\n  function registerValidator(\\n    bytes calldata,\\n    bytes calldata,\\n    bytes calldata\\n  ) external returns (bool);\\n  function registerValidatorNoBls(bytes calldata ecdsaPublicKey) external returns (bool);\\n  function deregisterValidator(uint256) external returns (bool);\\n  function affiliate(address) external returns (bool);\\n  function deaffiliate() external returns (bool);\\n  function updateBlsPublicKey(bytes calldata, bytes calldata) external returns (bool);\\n  function registerValidatorGroup(uint256) external returns (bool);\\n  function deregisterValidatorGroup(uint256) external returns (bool);\\n  function addMember(address) external returns (bool);\\n  function addFirstMember(address, address, address) external returns (bool);\\n  function removeMember(address) external returns (bool);\\n  function reorderMember(address, address, address) external returns (bool);\\n  function updateCommission() external;\\n  function setNextCommissionUpdate(uint256) external;\\n  function resetSlashingMultiplier() external;\\n\\n  // only owner\\n  function setCommissionUpdateDelay(uint256) external;\\n  function setMaxGroupSize(uint256) external returns (bool);\\n  function setMembershipHistoryLength(uint256) external returns (bool);\\n  function setValidatorScoreParameters(uint256, uint256) external returns (bool);\\n  function setGroupLockedGoldRequirements(uint256, uint256) external returns (bool);\\n  function setValidatorLockedGoldRequirements(uint256, uint256) external returns (bool);\\n  function setSlashingMultiplierResetPeriod(uint256) external;\\n  function setDowntimeGracePeriod(uint256 value) external;\\n\\n  // only registered contract\\n  function updateEcdsaPublicKey(address, address, bytes calldata) external returns (bool);\\n  function updatePublicKeys(\\n    address,\\n    address,\\n    bytes calldata,\\n    bytes calldata,\\n    bytes calldata\\n  ) external returns (bool);\\n  function mintStableToEpochManager(uint256 amount) external;\\n\\n  // only VM\\n  function updateValidatorScoreFromSigner(address, uint256) external;\\n  function distributeEpochPaymentsFromSigner(address, uint256) external returns (uint256);\\n\\n  // only slasher\\n  function forceDeaffiliateIfValidator(address) external;\\n  function halveSlashingMultiplier(address) external;\\n\\n  // view functions\\n  function maxGroupSize() external view returns (uint256);\\n  function downtimeGracePeriod() external view returns (uint256);\\n  function getCommissionUpdateDelay() external view returns (uint256);\\n  function getValidatorScoreParameters() external view returns (uint256, uint256);\\n  function getMembershipHistory(\\n    address\\n  ) external view returns (uint256[] memory, address[] memory, uint256, uint256);\\n  function calculateEpochScore(uint256) external view returns (uint256);\\n  function calculateGroupEpochScore(uint256[] calldata) external view returns (uint256);\\n  function getAccountLockedGoldRequirement(address) external view returns (uint256);\\n  function meetsAccountLockedGoldRequirements(address) external view returns (bool);\\n  function getValidatorBlsPublicKeyFromSigner(address) external view returns (bytes memory);\\n  function getValidator(\\n    address account\\n  ) external view returns (bytes memory, bytes memory, address, uint256, address);\\n  function getValidatorsGroup(address account) external view returns (address affiliation);\\n  function getValidatorGroup(\\n    address\\n  )\\n    external\\n    view\\n    returns (address[] memory, uint256, uint256, uint256, uint256[] memory, uint256, uint256);\\n  function getGroupNumMembers(address) external view returns (uint256);\\n  function getTopGroupValidators(address, uint256) external view returns (address[] memory);\\n  function getTopGroupValidatorsAccounts(address, uint256) external view returns (address[] memory);\\n  function getGroupsNumMembers(\\n    address[] calldata accounts\\n  ) external view returns (uint256[] memory);\\n  function getNumRegisteredValidators() external view returns (uint256);\\n  function groupMembershipInEpoch(address, uint256, uint256) external view returns (address);\\n\\n  function getValidatorLockedGoldRequirements() external view returns (uint256, uint256);\\n  function getGroupLockedGoldRequirements() external view returns (uint256, uint256);\\n  function getRegisteredValidators() external view returns (address[] memory);\\n  function getRegisteredValidatorGroups() external view returns (address[] memory);\\n  function isValidatorGroup(address) external view returns (bool);\\n  function isValidator(address) external view returns (bool);\\n  function getValidatorGroupSlashingMultiplier(address) external view returns (uint256);\\n  function getMembershipInLastEpoch(address) external view returns (address);\\n  function getMembershipInLastEpochFromSigner(address) external view returns (address);\\n  function computeEpochReward(\\n    address account,\\n    uint256 score,\\n    uint256 maxPayment\\n  ) external view returns (uint256);\\n  function getMembershipHistoryLength() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x78a09c1b3e80fbb1a8fd907575a71e181d100a09d999ea5c032140efbeeeb90f\",\"license\":\"LGPL-3.0-only\"},\"project:/contracts/stability/interfaces/ISortedOracles.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.5.13 <0.9.0;\\n\\ninterface ISortedOracles {\\n  function addOracle(address, address) external;\\n  function removeOracle(address, address, uint256) external;\\n  function report(address, uint256, address, address) external;\\n  function removeExpiredReports(address, uint256) external;\\n  function isOldestReportExpired(address token) external view returns (bool, address);\\n  function numRates(address) external view returns (uint256);\\n  function medianRate(address) external view returns (uint256, uint256);\\n  function numTimestamps(address) external view returns (uint256);\\n  function medianTimestamp(address) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xc9d69b608b060effe4a0b246e7fad096b524b848aa51d8f4eccad36c1aa0479d\",\"license\":\"LGPL-3.0-only\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061012c5760003560e01c806393ca6fc4116100ad578063c12398b411610071578063c12398b414610266578063ceff0bd614610279578063ef712c5b14610281578063f2fde38b14610294578063f92ad219146102a757600080fd5b806393ca6fc414610212578063a54b7fc014610225578063a68f548e14610238578063a91ee0dc14610240578063b830f4a41461025357600080fd5b806354255be0116100f457806354255be0146101a0578063715018a6146101c65780637b103999146101ce5780638da5cb5b146101f95780638efd92ca1461020a57600080fd5b8063158ef93e1461013157806330f726b91461015a57806336945c2d1461016f5780634a3d5fe2146101855780634b930e5a1461018d575b600080fd5b60005461014590600160a01b900460ff1681565b60405190151581526020015b60405180910390f35b61016d61016836600461151b565b6102ba565b005b6101776103af565b604051908152602001610151565b6101776103de565b61016d61019b36600461151b565b6103fe565b604080516001808252600260208301529181019190915260006060820152608001610151565b61016d61041c565b6001546101e1906001600160a01b031681565b6040516001600160a01b039091168152602001610151565b6000546001600160a01b03166101e1565b610177610430565b61016d61022036600461151b565b610441565b610177610233366004611549565b610528565b61017761054b565b61016d61024e366004611549565b61056b565b61016d61026136600461151b565b610613565b610177610274366004611566565b6106c2565b610177610759565b61017761028f366004611566565b61076a565b61016d6102a2366004611549565b6108f0565b61016d6102b5366004611588565b610966565b6102c2610a17565b6102ca610a71565b604080516020808201835260009182905282518082018452849052600584905582518082018452919091528151808201835269d3c21bcecceda1000000815282519182019092528290525181106103785760405162461bcd60e51b815260206004820152602760248201527f61646a7573746d656e74207370656564206d75737420626520736d616c6c6572604482015266207468616e203160c81b60648201526084015b60405180910390fd5b6040518181527fd2e71cd7012df1df07d4908ff75ae4b2bfbb6c49d39144404661f1fd47253283906020015b60405180910390a150565b60006103b9610a71565b60006006541180156103cd57506006544310155b156103d757504890565b5060025490565b60006103e8610a71565b5060408051602081019091526004549081905290565b610406610a17565b61040e610a71565b610419816000610adf565b50565b610424610a17565b61042e6000610ba1565b565b600061043a610a71565b5060065490565b610449610a17565b610451610a71565b604080516020808201835260009182905282518082018452849052600484905582518082018452919091528151808201835269d3c21bcecceda1000000815282519182019092528290525181106104f85760405162461bcd60e51b815260206004820152602560248201527f7461726765742064656e73697479206d75737420626520736d616c6c6572207460448201526468616e203160d81b606482015260840161036f565b6040518181527f2a109bad06121312708ed2a3e9b3556ea85ef8eadd4d10d8181f50d114eb4fab906020016103a4565b6000610532610a71565b61054561053e83610bf1565b6001610e0d565b92915050565b6000610555610a71565b5060408051602081019091526005549081905290565b610573610a17565b6001600160a01b0381166105c95760405162461bcd60e51b815260206004820181905260248201527f43616e6e6f7420726567697374657220746865206e756c6c2061646472657373604482015260640161036f565b600180546001600160a01b0319166001600160a01b0383169081179091556040517f27fe5f0c1c3b1ed427cc63d0f05759ffdecf9aec9e18d31ef366fc8a6cb5dc3b90600090a250565b61061b610a17565b610623610a71565b6000811161068d5760405162461bcd60e51b815260206004820152603160248201527f676173207072696365206d696e696d756d20666c6f6f72206d7573742062652060448201527067726561746572207468616e207a65726f60781b606482015260840161036f565b60038190556040518181527f5548a13ccc1d9e4e2860461edda5ad49ba8a4fda485f67d954f9d7da8d2aff27906020016103a4565b600033156107055760405162461bcd60e51b815260206004820152601060248201526f13db9b1e4815934818d85b8818d85b1b60821b604482015260640161036f565b61070d610a71565b610717838361076a565b60028190556040519081527f6e53b2f8b69496c2a175588ad1326dbabe2f66df4d82f817aeca52e3474807fb9060200160405180910390a15060025492915050565b6000610763610a71565b5060035490565b6000610774610a71565b60006107808484610e25565b6040805160208101909152600454908190528151919250106000816107be57604080516020810190915260045481526107b99084610e58565b6107d9565b604080516020810190915260045481526107d9908490610e58565b9050600082610830576040805160208101909152600554815261082b906108009084610edc565b60408051602080820183526000909152815190810190915269d3c21bcecceda1000000815290610e58565b61087a565b6040805160208101909152600554815261087a9061084e9084610edc565b60408051602080820183526000909152815190810190915269d3c21bcecceda100000081525b9061124b565b905060006108ce6108c96108af60408051602080820183526000909152815190810190915269d3c21bcecceda1000000815290565b6108746108c26108bd6103af565b6112cb565b8690610edc565b611389565b90506003548110156108e2576003546108e4565b805b98975050505050505050565b6108f8610a17565b6001600160a01b03811661095d5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161036f565b61041981610ba1565b600054600160a01b900460ff16156109c05760405162461bcd60e51b815260206004820152601c60248201527f636f6e747261637420616c726561647920696e697469616c697a656400000000604482015260640161036f565b6000805460ff60a01b1916600160a01b1790556109dc33610ba1565b6109e58561056b565b60028490556109f384610613565b6109fc83610441565b610a05826102ba565b610a10816001610adf565b5050505050565b6000546001600160a01b0316331461042e5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161036f565b6018602160991b013b63ffffffff161561042e5760405162461bcd60e51b815260206004820152602960248201527f54686973206d6574686f64206973206e6f206c6f6e67657220737570706f727460448201526832b21034b71026191760b91b606482015260840161036f565b610ae7610a17565b8080610af35750600082115b610b655760405162461bcd60e51b815260206004820152603960248201527f62617365466565206f70436f64652061637469766174696f6e20626c6f636b2060448201527f6d7573742062652067726561746572207468616e207a65726f00000000000000606482015260840161036f565b60068290556040518281527fc74fe30765574b78669fcec5cea6b0dcaacd907890a49fc756a40235d01b09fc9060200160405180910390a15050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60006001600160a01b0382161580610cbb57506001546040516821b2b637aa37b5b2b760b91b60208201526001600160a01b039091169063dcf0aaed90602901604051602081830303815290604052805190602001206040518263ffffffff1660e01b8152600401610c6591815260200190565b602060405180830381865afa158015610c82573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ca691906115cc565b6001600160a01b0316826001600160a01b0316145b15610cc8576105456103af565b6001546040516c536f727465644f7261636c657360981b60208201526000916001600160a01b03169063dcf0aaed90602d01604051602081830303815290604052805190602001206040518263ffffffff1660e01b8152600401610d2e91815260200190565b602060405180830381865afa158015610d4b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d6f91906115cc565b604051630ef90e1b60e41b81526001600160a01b03858116600483015291925060009182919084169063ef90e1b0906024016040805180830381865afa158015610dbd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610de191906115e9565b90925090508082610df06103af565b610dfa9190611623565b610e04919061163a565b95945050505050565b6000818311610e1c5781610e1e565b825b9392505050565b6040805160208101909152600081526000610e3f846112cb565b90506000610e4c846112cb565b9050610e0482826113a3565b604080516020810190915260008152815183511015610eb95760405162461bcd60e51b815260206004820152601f60248201527f737562737472616374696f6e20756e646572666c6f7720646574656374656400604482015260640161036f565b6040805160208101909152825184518291610ed39161165c565b90529392505050565b60408051602081019091526000815282511580610ef857508151155b15610f125750604080516020810190915260008152610545565b815169d3c21bcecceda0ffffff1901610f2c575081610545565b825169d3c21bcecceda0ffffff1901610f46575080610545565b600069d3c21bcecceda1000000610f5c85611491565b51610f67919061163a565b90506000610f74856114d0565b519050600069d3c21bcecceda1000000610f8d86611491565b51610f98919061163a565b90506000610fa5866114d0565b5190506000610fb48386611623565b9050841561100d5782610fc7868361163a565b1461100d5760405162461bcd60e51b81526020600482015260166024820152751bdd995c999b1bddc81e0c5e4c4819195d1958dd195960521b604482015260640161036f565b600061102369d3c21bcecceda100000083611623565b9050811561108d5769d3c21bcecceda1000000611040838361163a565b1461108d5760405162461bcd60e51b815260206004820152601f60248201527f6f766572666c6f772078317931202a2066697865643120646574656374656400604482015260640161036f565b905080600061109c8587611623565b905085156110f557846110af878361163a565b146110f55760405162461bcd60e51b81526020600482015260166024820152751bdd995c999b1bddc81e0c9e4c4819195d1958dd195960521b604482015260640161036f565b60006111018589611623565b9050871561115a5784611114898361163a565b1461115a5760405162461bcd60e51b81526020600482015260166024820152751bdd995c999b1bddc81e0c5e4c8819195d1958dd195960521b604482015260640161036f565b61116964e8d4a510008861163a565b965061117a64e8d4a510008661163a565b945060006111888689611623565b905087156111e1578561119b898361163a565b146111e15760405162461bcd60e51b81526020600482015260166024820152751bdd995c999b1bddc81e0c9e4c8819195d1958dd195960521b604482015260640161036f565b604080516020808201835287825282519081019092528482529061120690829061124b565b90506112208160405180602001604052808681525061124b565b905061123a8160405180602001604052808581525061124b565b9d9c50505050505050505050505050565b6040805160208101909152600081528151835160009161126a9161166f565b84519091508110156112b65760405162461bcd60e51b8152602060048201526015602482015274185919081bdd995c999b1bddc819195d1958dd1959605a1b604482015260640161036f565b60408051602081019091529081529392505050565b6040805160208101909152600081527601357c299a88ea76a58924d52ce4f26a85af186c2b9e748211156113605760405162461bcd60e51b815260206004820152603660248201527f63616e277420637265617465206669786964697479206e756d626572206c6172604482015275676572207468616e206d61784e65774669786564282960501b606482015260840161036f565b604051806020016040528069d3c21bcecceda1000000846113819190611623565b905292915050565b80516000906105459069d3c21bcecceda10000009061163a565b60408051602081019091526000815281516000036113f75760405162461bcd60e51b8152602060048201526011602482015270063616e277420646976696465206279203607c1b604482015260640161036f565b82516000906114119069d3c21bcecceda100000090611623565b845190915061142a69d3c21bcecceda10000008361163a565b1461146c5760405162461bcd60e51b81526020600482015260126024820152716f766572666c6f772061742064697669646560701b604482015260640161036f565b6040518060200160405280846000015183611487919061163a565b9052949350505050565b604080516020810190915260008152604051806020016040528069d3c21bcecceda10000008085600001516114c6919061163a565b6113819190611623565b604080516020810190915260008152604051806020016040528069d3c21bcecceda1000000808560000151611505919061163a565b61150f9190611623565b8451611381919061165c565b60006020828403121561152d57600080fd5b5035919050565b6001600160a01b038116811461041957600080fd5b60006020828403121561155b57600080fd5b8135610e1e81611534565b6000806040838503121561157957600080fd5b50508035926020909101359150565b600080600080600060a086880312156115a057600080fd5b85356115ab81611534565b97602087013597506040870135966060810135965060800135945092505050565b6000602082840312156115de57600080fd5b8151610e1e81611534565b600080604083850312156115fc57600080fd5b505080516020909101519092909150565b634e487b7160e01b600052601160045260246000fd5b80820281158282048414176105455761054561160d565b60008261165757634e487b7160e01b600052601260045260246000fd5b500490565b818103818111156105455761054561160d565b808201808211156105455761054561160d56fea264697066735822122016569899a71e4d049abb2cc9305277c97d0730ce81214592f0575e97c5d4c1e764736f6c63430008130033",
  "immutableReferences": {},
  "generatedSources": [
    {
      "ast": {
        "nodeType": "YulBlock",
        "src": "0:293:85",
        "statements": [
          {
            "nodeType": "YulBlock",
            "src": "6:3:85",
            "statements": []
          },
          {
            "body": {
              "nodeType": "YulBlock",
              "src": "92:199:85",
              "statements": [
                {
                  "body": {
                    "nodeType": "YulBlock",
                    "src": "138:16:85",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "kind": "number",
                              "nodeType": "YulLiteral",
                              "src": "147:1:85",
                              "type": "",
                              "value": "0"
                            },
                            {
                              "kind": "number",
                              "nodeType": "YulLiteral",
                              "src": "150:1:85",
                              "type": "",
                              "value": "0"
                            }
                          ],
                          "functionName": {
                            "name": "revert",
                            "nodeType": "YulIdentifier",
                            "src": "140:6:85"
                          },
                          "nodeType": "YulFunctionCall",
                          "src": "140:12:85"
                        },
                        "nodeType": "YulExpressionStatement",
                        "src": "140:12:85"
                      }
                    ]
                  },
                  "condition": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "name": "dataEnd",
                            "nodeType": "YulIdentifier",
                            "src": "113:7:85"
                          },
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "122:9:85"
                          }
                        ],
                        "functionName": {
                          "name": "sub",
                          "nodeType": "YulIdentifier",
                          "src": "109:3:85"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "109:23:85"
                      },
                      {
                        "kind": "number",
                        "nodeType": "YulLiteral",
                        "src": "134:2:85",
                        "type": "",
                        "value": "32"
                      }
                    ],
                    "functionName": {
                      "name": "slt",
                      "nodeType": "YulIdentifier",
                      "src": "105:3:85"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "105:32:85"
                  },
                  "nodeType": "YulIf",
                  "src": "102:52:85"
                },
                {
                  "nodeType": "YulVariableDeclaration",
                  "src": "163:29:85",
                  "value": {
                    "arguments": [
                      {
                        "name": "headStart",
                        "nodeType": "YulIdentifier",
                        "src": "182:9:85"
                      }
                    ],
                    "functionName": {
                      "name": "mload",
                      "nodeType": "YulIdentifier",
                      "src": "176:5:85"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "176:16:85"
                  },
                  "variables": [
                    {
                      "name": "value",
                      "nodeType": "YulTypedName",
                      "src": "167:5:85",
                      "type": ""
                    }
                  ]
                },
                {
                  "body": {
                    "nodeType": "YulBlock",
                    "src": "245:16:85",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "kind": "number",
                              "nodeType": "YulLiteral",
                              "src": "254:1:85",
                              "type": "",
                              "value": "0"
                            },
                            {
                              "kind": "number",
                              "nodeType": "YulLiteral",
                              "src": "257:1:85",
                              "type": "",
                              "value": "0"
                            }
                          ],
                          "functionName": {
                            "name": "revert",
                            "nodeType": "YulIdentifier",
                            "src": "247:6:85"
                          },
                          "nodeType": "YulFunctionCall",
                          "src": "247:12:85"
                        },
                        "nodeType": "YulExpressionStatement",
                        "src": "247:12:85"
                      }
                    ]
                  },
                  "condition": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "name": "value",
                            "nodeType": "YulIdentifier",
                            "src": "214:5:85"
                          },
                          {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulIdentifier",
                                    "src": "235:5:85"
                                  }
                                ],
                                "functionName": {
                                  "name": "iszero",
                                  "nodeType": "YulIdentifier",
                                  "src": "228:6:85"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "228:13:85"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "221:6:85"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "221:21:85"
                          }
                        ],
                        "functionName": {
                          "name": "eq",
                          "nodeType": "YulIdentifier",
                          "src": "211:2:85"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "211:32:85"
                      }
                    ],
                    "functionName": {
                      "name": "iszero",
                      "nodeType": "YulIdentifier",
                      "src": "204:6:85"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "204:40:85"
                  },
                  "nodeType": "YulIf",
                  "src": "201:60:85"
                },
                {
                  "nodeType": "YulAssignment",
                  "src": "270:15:85",
                  "value": {
                    "name": "value",
                    "nodeType": "YulIdentifier",
                    "src": "280:5:85"
                  },
                  "variableNames": [
                    {
                      "name": "value0",
                      "nodeType": "YulIdentifier",
                      "src": "270:6:85"
                    }
                  ]
                }
              ]
            },
            "name": "abi_decode_tuple_t_bool_fromMemory",
            "nodeType": "YulFunctionDefinition",
            "parameters": [
              {
                "name": "headStart",
                "nodeType": "YulTypedName",
                "src": "58:9:85",
                "type": ""
              },
              {
                "name": "dataEnd",
                "nodeType": "YulTypedName",
                "src": "69:7:85",
                "type": ""
              }
            ],
            "returnVariables": [
              {
                "name": "value0",
                "nodeType": "YulTypedName",
                "src": "81:6:85",
                "type": ""
              }
            ],
            "src": "14:277:85"
          }
        ]
      },
      "contents": "{\n    { }\n    function abi_decode_tuple_t_bool_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := mload(headStart)\n        if iszero(eq(value, iszero(iszero(value)))) { revert(0, 0) }\n        value0 := value\n    }\n}",
      "id": 85,
      "language": "Yul",
      "name": "#utility.yul"
    }
  ],
  "deployedGeneratedSources": [
    {
      "ast": {
        "nodeType": "YulBlock",
        "src": "0:12068:85",
        "statements": [
          {
            "nodeType": "YulBlock",
            "src": "6:3:85",
            "statements": []
          },
          {
            "body": {
              "nodeType": "YulBlock",
              "src": "109:92:85",
              "statements": [
                {
                  "nodeType": "YulAssignment",
                  "src": "119:26:85",
                  "value": {
                    "arguments": [
                      {
                        "name": "headStart",
                        "nodeType": "YulIdentifier",
                        "src": "131:9:85"
                      },
                      {
                        "kind": "number",
                        "nodeType": "YulLiteral",
                        "src": "142:2:85",
                        "type": "",
                        "value": "32"
                      }
                    ],
                    "functionName": {
                      "name": "add",
                      "nodeType": "YulIdentifier",
                      "src": "127:3:85"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "127:18:85"
                  },
                  "variableNames": [
                    {
                      "name": "tail",
                      "nodeType": "YulIdentifier",
                      "src": "119:4:85"
                    }
                  ]
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "name": "headStart",
                        "nodeType": "YulIdentifier",
                        "src": "161:9:85"
                      },
                      {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "186:6:85"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "179:6:85"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "179:14:85"
                          }
                        ],
                        "functionName": {
                          "name": "iszero",
                          "nodeType": "YulIdentifier",
                          "src": "172:6:85"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "172:22:85"
                      }
                    ],
                    "functionName": {
                      "name": "mstore",
                      "nodeType": "YulIdentifier",
                      "src": "154:6:85"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "154:41:85"
                  },
                  "nodeType": "YulExpressionStatement",
                  "src": "154:41:85"
                }
              ]
            },
            "name": "abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed",
            "nodeType": "YulFunctionDefinition",
            "parameters": [
              {
                "name": "headStart",
                "nodeType": "YulTypedName",
                "src": "78:9:85",
                "type": ""
              },
              {
                "name": "value0",
                "nodeType": "YulTypedName",
                "src": "89:6:85",
                "type": ""
              }
            ],
            "returnVariables": [
              {
                "name": "tail",
                "nodeType": "YulTypedName",
                "src": "100:4:85",
                "type": ""
              }
            ],
            "src": "14:187:85"
          },
          {
            "body": {
              "nodeType": "YulBlock",
              "src": "276:110:85",
              "statements": [
                {
                  "body": {
                    "nodeType": "YulBlock",
                    "src": "322:16:85",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "kind": "number",
                              "nodeType": "YulLiteral",
                              "src": "331:1:85",
                              "type": "",
                              "value": "0"
                            },
                            {
                              "kind": "number",
                              "nodeType": "YulLiteral",
                              "src": "334:1:85",
                              "type": "",
                              "value": "0"
                            }
                          ],
                          "functionName": {
                            "name": "revert",
                            "nodeType": "YulIdentifier",
                            "src": "324:6:85"
                          },
                          "nodeType": "YulFunctionCall",
                          "src": "324:12:85"
                        },
                        "nodeType": "YulExpressionStatement",
                        "src": "324:12:85"
                      }
                    ]
                  },
                  "condition": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "name": "dataEnd",
                            "nodeType": "YulIdentifier",
                            "src": "297:7:85"
                          },
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "306:9:85"
                          }
                        ],
                        "functionName": {
                          "name": "sub",
                          "nodeType": "YulIdentifier",
                          "src": "293:3:85"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "293:23:85"
                      },
                      {
                        "kind": "number",
                        "nodeType": "YulLiteral",
                        "src": "318:2:85",
                        "type": "",
                        "value": "32"
                      }
                    ],
                    "functionName": {
                      "name": "slt",
                      "nodeType": "YulIdentifier",
                      "src": "289:3:85"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "289:32:85"
                  },
                  "nodeType": "YulIf",
                  "src": "286:52:85"
                },
                {
                  "nodeType": "YulAssignment",
                  "src": "347:33:85",
                  "value": {
                    "arguments": [
                      {
                        "name": "headStart",
                        "nodeType": "YulIdentifier",
                        "src": "370:9:85"
                      }
                    ],
                    "functionName": {
                      "name": "calldataload",
                      "nodeType": "YulIdentifier",
                      "src": "357:12:85"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "357:23:85"
                  },
                  "variableNames": [
                    {
                      "name": "value0",
                      "nodeType": "YulIdentifier",
                      "src": "347:6:85"
                    }
                  ]
                }
              ]
            },
            "name": "abi_decode_tuple_t_uint256",
            "nodeType": "YulFunctionDefinition",
            "parameters": [
              {
                "name": "headStart",
                "nodeType": "YulTypedName",
                "src": "242:9:85",
                "type": ""
              },
              {
                "name": "dataEnd",
                "nodeType": "YulTypedName",
                "src": "253:7:85",
                "type": ""
              }
            ],
            "returnVariables": [
              {
                "name": "value0",
                "nodeType": "YulTypedName",
                "src": "265:6:85",
                "type": ""
              }
            ],
            "src": "206:180:85"
          },
          {
            "body": {
              "nodeType": "YulBlock",
              "src": "492:76:85",
              "statements": [
                {
                  "nodeType": "YulAssignment",
                  "src": "502:26:85",
                  "value": {
                    "arguments": [
                      {
                        "name": "headStart",
                        "nodeType": "YulIdentifier",
                        "src": "514:9:85"
                      },
                      {
                        "kind": "number",
                        "nodeType": "YulLiteral",
                        "src": "525:2:85",
                        "type": "",
                        "value": "32"
                      }
                    ],
                    "functionName": {
                      "name": "add",
                      "nodeType": "YulIdentifier",
                      "src": "510:3:85"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "510:18:85"
                  },
                  "variableNames": [
                    {
                      "name": "tail",
                      "nodeType": "YulIdentifier",
                      "src": "502:4:85"
                    }
                  ]
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "name": "headStart",
                        "nodeType": "YulIdentifier",
                        "src": "544:9:85"
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulIdentifier",
                        "src": "555:6:85"
                      }
                    ],
                    "functionName": {
                      "name": "mstore",
                      "nodeType": "YulIdentifier",
                      "src": "537:6:85"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "537:25:85"
                  },
                  "nodeType": "YulExpressionStatement",
                  "src": "537:25:85"
                }
              ]
            },
            "name": "abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed",
            "nodeType": "YulFunctionDefinition",
            "parameters": [
              {
                "name": "headStart",
                "nodeType": "YulTypedName",
                "src": "461:9:85",
                "type": ""
              },
              {
                "name": "value0",
                "nodeType": "YulTypedName",
                "src": "472:6:85",
                "type": ""
              }
            ],
            "returnVariables": [
              {
                "name": "tail",
                "nodeType": "YulTypedName",
                "src": "483:4:85",
                "type": ""
              }
            ],
            "src": "391:177:85"
          },
          {
            "body": {
              "nodeType": "YulBlock",
              "src": "758:206:85",
              "statements": [
                {
                  "nodeType": "YulAssignment",
                  "src": "768:27:85",
                  "value": {
                    "arguments": [
                      {
                        "name": "headStart",
                        "nodeType": "YulIdentifier",
                        "src": "780:9:85"
                      },
                      {
                        "kind": "number",
                        "nodeType": "YulLiteral",
                        "src": "791:3:85",
                        "type": "",
                        "value": "128"
                      }
                    ],
                    "functionName": {
                      "name": "add",
                      "nodeType": "YulIdentifier",
                      "src": "776:3:85"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "776:19:85"
                  },
                  "variableNames": [
                    {
                      "name": "tail",
                      "nodeType": "YulIdentifier",
                      "src": "768:4:85"
                    }
                  ]
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "name": "headStart",
                        "nodeType": "YulIdentifier",
                        "src": "811:9:85"
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulIdentifier",
                        "src": "822:6:85"
                      }
                    ],
                    "functionName": {
                      "name": "mstore",
                      "nodeType": "YulIdentifier",
                      "src": "804:6:85"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "804:25:85"
                  },
                  "nodeType": "YulExpressionStatement",
                  "src": "804:25:85"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "849:9:85"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "860:2:85",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "845:3:85"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "845:18:85"
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulIdentifier",
                        "src": "865:6:85"
                      }
                    ],
                    "functionName": {
                      "name": "mstore",
                      "nodeType": "YulIdentifier",
                      "src": "838:6:85"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "838:34:85"
                  },
                  "nodeType": "YulExpressionStatement",
                  "src": "838:34:85"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "892:9:85"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "903:2:85",
                            "type": "",
                            "value": "64"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "888:3:85"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "888:18:85"
                      },
                      {
                        "name": "value2",
                        "nodeType": "YulIdentifier",
                        "src": "908:6:85"
                      }
                    ],
                    "functionName": {
                      "name": "mstore",
                      "nodeType": "YulIdentifier",
                      "src": "881:6:85"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "881:34:85"
                  },
                  "nodeType": "YulExpressionStatement",
                  "src": "881:34:85"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "935:9:85"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "946:2:85",
                            "type": "",
                            "value": "96"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "931:3:85"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "931:18:85"
                      },
                      {
                        "name": "value3",
                        "nodeType": "YulIdentifier",
                        "src": "951:6:85"
                      }
                    ],
                    "functionName": {
                      "name": "mstore",
                      "nodeType": "YulIdentifier",
                      "src": "924:6:85"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "924:34:85"
                  },
                  "nodeType": "YulExpressionStatement",
                  "src": "924:34:85"
                }
              ]
            },
            "name": "abi_encode_tuple_t_uint256_t_uint256_t_uint256_t_uint256__to_t_uint256_t_uint256_t_uint256_t_uint256__fromStack_reversed",
            "nodeType": "YulFunctionDefinition",
            "parameters": [
              {
                "name": "headStart",
                "nodeType": "YulTypedName",
                "src": "703:9:85",
                "type": ""
              },
              {
                "name": "value3",
                "nodeType": "YulTypedName",
                "src": "714:6:85",
                "type": ""
              },
              {
                "name": "value2",
                "nodeType": "YulTypedName",
                "src": "722:6:85",
                "type": ""
              },
              {
                "name": "value1",
                "nodeType": "YulTypedName",
                "src": "730:6:85",
                "type": ""
              },
              {
                "name": "value0",
                "nodeType": "YulTypedName",
                "src": "738:6:85",
                "type": ""
              }
            ],
            "returnVariables": [
              {
                "name": "tail",
                "nodeType": "YulTypedName",
                "src": "749:4:85",
                "type": ""
              }
            ],
            "src": "573:391:85"
          },
          {
            "body": {
              "nodeType": "YulBlock",
              "src": "1089:102:85",
              "statements": [
                {
                  "nodeType": "YulAssignment",
                  "src": "1099:26:85",
                  "value": {
                    "arguments": [
                      {
                        "name": "headStart",
                        "nodeType": "YulIdentifier",
                        "src": "1111:9:85"
                      },
                      {
                        "kind": "number",
                        "nodeType": "YulLiteral",
                        "src": "1122:2:85",
                        "type": "",
                        "value": "32"
                      }
                    ],
                    "functionName": {
                      "name": "add",
                      "nodeType": "YulIdentifier",
                      "src": "1107:3:85"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "1107:18:85"
                  },
                  "variableNames": [
                    {
                      "name": "tail",
                      "nodeType": "YulIdentifier",
                      "src": "1099:4:85"
                    }
                  ]
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "name": "headStart",
                        "nodeType": "YulIdentifier",
                        "src": "1141:9:85"
                      },
                      {
                        "arguments": [
                          {
                            "name": "value0",
                            "nodeType": "YulIdentifier",
                            "src": "1156:6:85"
                          },
                          {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "1172:3:85",
                                    "type": "",
                                    "value": "160"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "1177:1:85",
                                    "type": "",
                                    "value": "1"
                                  }
                                ],
                                "functionName": {
                                  "name": "shl",
                                  "nodeType": "YulIdentifier",
                                  "src": "1168:3:85"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1168:11:85"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "1181:1:85",
                                "type": "",
                                "value": "1"
                              }
                            ],
                            "functionName": {
                              "name": "sub",
                              "nodeType": "YulIdentifier",
                              "src": "1164:3:85"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1164:19:85"
                          }
                        ],
                        "functionName": {
                          "name": "and",
                          "nodeType": "YulIdentifier",
                          "src": "1152:3:85"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "1152:32:85"
                      }
                    ],
                    "functionName": {
                      "name": "mstore",
                      "nodeType": "YulIdentifier",
                      "src": "1134:6:85"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "1134:51:85"
                  },
                  "nodeType": "YulExpressionStatement",
                  "src": "1134:51:85"
                }
              ]
            },
            "name": "abi_encode_tuple_t_contract$_IRegistry_$17608__to_t_address__fromStack_reversed",
            "nodeType": "YulFunctionDefinition",
            "parameters": [
              {
                "name": "headStart",
                "nodeType": "YulTypedName",
                "src": "1058:9:85",
                "type": ""
              },
              {
                "name": "value0",
                "nodeType": "YulTypedName",
                "src": "1069:6:85",
                "type": ""
              }
            ],
            "returnVariables": [
              {
                "name": "tail",
                "nodeType": "YulTypedName",
                "src": "1080:4:85",
                "type": ""
              }
            ],
            "src": "969:222:85"
          },
          {
            "body": {
              "nodeType": "YulBlock",
              "src": "1297:102:85",
              "statements": [
                {
                  "nodeType": "YulAssignment",
                  "src": "1307:26:85",
                  "value": {
                    "arguments": [
                      {
                        "name": "headStart",
                        "nodeType": "YulIdentifier",
                        "src": "1319:9:85"
                      },
                      {
                        "kind": "number",
                        "nodeType": "YulLiteral",
                        "src": "1330:2:85",
                        "type": "",
                        "value": "32"
                      }
                    ],
                    "functionName": {
                      "name": "add",
                      "nodeType": "YulIdentifier",
                      "src": "1315:3:85"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "1315:18:85"
                  },
                  "variableNames": [
                    {
                      "name": "tail",
                      "nodeType": "YulIdentifier",
                      "src": "1307:4:85"
                    }
                  ]
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "name": "headStart",
                        "nodeType": "YulIdentifier",
                        "src": "1349:9:85"
                      },
                      {
                        "arguments": [
                          {
                            "name": "value0",
                            "nodeType": "YulIdentifier",
                            "src": "1364:6:85"
                          },
                          {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "1380:3:85",
                                    "type": "",
                                    "value": "160"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "1385:1:85",
                                    "type": "",
                                    "value": "1"
                                  }
                                ],
                                "functionName": {
                                  "name": "shl",
                                  "nodeType": "YulIdentifier",
                                  "src": "1376:3:85"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1376:11:85"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "1389:1:85",
                                "type": "",
                                "value": "1"
                              }
                            ],
                            "functionName": {
                              "name": "sub",
                              "nodeType": "YulIdentifier",
                              "src": "1372:3:85"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1372:19:85"
                          }
                        ],
                        "functionName": {
                          "name": "and",
                          "nodeType": "YulIdentifier",
                          "src": "1360:3:85"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "1360:32:85"
                      }
                    ],
                    "functionName": {
                      "name": "mstore",
                      "nodeType": "YulIdentifier",
                      "src": "1342:6:85"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "1342:51:85"
                  },
                  "nodeType": "YulExpressionStatement",
                  "src": "1342:51:85"
                }
              ]
            },
            "name": "abi_encode_tuple_t_address__to_t_address__fromStack_reversed",
            "nodeType": "YulFunctionDefinition",
            "parameters": [
              {
                "name": "headStart",
                "nodeType": "YulTypedName",
                "src": "1266:9:85",
                "type": ""
              },
              {
                "name": "value0",
                "nodeType": "YulTypedName",
                "src": "1277:6:85",
                "type": ""
              }
            ],
            "returnVariables": [
              {
                "name": "tail",
                "nodeType": "YulTypedName",
                "src": "1288:4:85",
                "type": ""
              }
            ],
            "src": "1196:203:85"
          },
          {
            "body": {
              "nodeType": "YulBlock",
              "src": "1449:86:85",
              "statements": [
                {
                  "body": {
                    "nodeType": "YulBlock",
                    "src": "1513:16:85",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "kind": "number",
                              "nodeType": "YulLiteral",
                              "src": "1522:1:85",
                              "type": "",
                              "value": "0"
                            },
                            {
                              "kind": "number",
                              "nodeType": "YulLiteral",
                              "src": "1525:1:85",
                              "type": "",
                              "value": "0"
                            }
                          ],
                          "functionName": {
                            "name": "revert",
                            "nodeType": "YulIdentifier",
                            "src": "1515:6:85"
                          },
                          "nodeType": "YulFunctionCall",
                          "src": "1515:12:85"
                        },
                        "nodeType": "YulExpressionStatement",
                        "src": "1515:12:85"
                      }
                    ]
                  },
                  "condition": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "name": "value",
                            "nodeType": "YulIdentifier",
                            "src": "1472:5:85"
                          },
                          {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "1483:5:85"
                              },
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "1498:3:85",
                                        "type": "",
                                        "value": "160"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "1503:1:85",
                                        "type": "",
                                        "value": "1"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "shl",
                                      "nodeType": "YulIdentifier",
                                      "src": "1494:3:85"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "1494:11:85"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "1507:1:85",
                                    "type": "",
                                    "value": "1"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "1490:3:85"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1490:19:85"
                              }
                            ],
                            "functionName": {
                              "name": "and",
                              "nodeType": "YulIdentifier",
                              "src": "1479:3:85"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1479:31:85"
                          }
                        ],
                        "functionName": {
                          "name": "eq",
                          "nodeType": "YulIdentifier",
                          "src": "1469:2:85"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "1469:42:85"
                      }
                    ],
                    "functionName": {
                      "name": "iszero",
                      "nodeType": "YulIdentifier",
                      "src": "1462:6:85"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "1462:50:85"
                  },
                  "nodeType": "YulIf",
                  "src": "1459:70:85"
                }
              ]
            },
            "name": "validator_revert_address",
            "nodeType": "YulFunctionDefinition",
            "parameters": [
              {
                "name": "value",
                "nodeType": "YulTypedName",
                "src": "1438:5:85",
                "type": ""
              }
            ],
            "src": "1404:131:85"
          },
          {
            "body": {
              "nodeType": "YulBlock",
              "src": "1610:177:85",
              "statements": [
                {
                  "body": {
                    "nodeType": "YulBlock",
                    "src": "1656:16:85",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "kind": "number",
                              "nodeType": "YulLiteral",
                              "src": "1665:1:85",
                              "type": "",
                              "value": "0"
                            },
                            {
                              "kind": "number",
                              "nodeType": "YulLiteral",
                              "src": "1668:1:85",
                              "type": "",
                              "value": "0"
                            }
                          ],
                          "functionName": {
                            "name": "revert",
                            "nodeType": "YulIdentifier",
                            "src": "1658:6:85"
                          },
                          "nodeType": "YulFunctionCall",
                          "src": "1658:12:85"
                        },
                        "nodeType": "YulExpressionStatement",
                        "src": "1658:12:85"
                      }
                    ]
                  },
                  "condition": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "name": "dataEnd",
                            "nodeType": "YulIdentifier",
                            "src": "1631:7:85"
                          },
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "1640:9:85"
                          }
                        ],
                        "functionName": {
                          "name": "sub",
                          "nodeType": "YulIdentifier",
                          "src": "1627:3:85"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "1627:23:85"
                      },
                      {
                        "kind": "number",
                        "nodeType": "YulLiteral",
                        "src": "1652:2:85",
                        "type": "",
                        "value": "32"
                      }
                    ],
                    "functionName": {
                      "name": "slt",
                      "nodeType": "YulIdentifier",
                      "src": "1623:3:85"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "1623:32:85"
                  },
                  "nodeType": "YulIf",
                  "src": "1620:52:85"
                },
                {
                  "nodeType": "YulVariableDeclaration",
                  "src": "1681:36:85",
                  "value": {
                    "arguments": [
                      {
                        "name": "headStart",
                        "nodeType": "YulIdentifier",
                        "src": "1707:9:85"
                      }
                    ],
                    "functionName": {
                      "name": "calldataload",
                      "nodeType": "YulIdentifier",
                      "src": "1694:12:85"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "1694:23:85"
                  },
                  "variables": [
                    {
                      "name": "value",
                      "nodeType": "YulTypedName",
                      "src": "1685:5:85",
                      "type": ""
                    }
                  ]
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "name": "value",
                        "nodeType": "YulIdentifier",
                        "src": "1751:5:85"
                      }
                    ],
                    "functionName": {
                      "name": "validator_revert_address",
                      "nodeType": "YulIdentifier",
                      "src": "1726:24:85"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "1726:31:85"
                  },
                  "nodeType": "YulExpressionStatement",
                  "src": "1726:31:85"
                },
                {
                  "nodeType": "YulAssignment",
                  "src": "1766:15:85",
                  "value": {
                    "name": "value",
                    "nodeType": "YulIdentifier",
                    "src": "1776:5:85"
                  },
                  "variableNames": [
                    {
                      "name": "value0",
                      "nodeType": "YulIdentifier",
                      "src": "1766:6:85"
                    }
                  ]
                }
              ]
            },
            "name": "abi_decode_tuple_t_address",
            "nodeType": "YulFunctionDefinition",
            "parameters": [
              {
                "name": "headStart",
                "nodeType": "YulTypedName",
                "src": "1576:9:85",
                "type": ""
              },
              {
                "name": "dataEnd",
                "nodeType": "YulTypedName",
                "src": "1587:7:85",
                "type": ""
              }
            ],
            "returnVariables": [
              {
                "name": "value0",
                "nodeType": "YulTypedName",
                "src": "1599:6:85",
                "type": ""
              }
            ],
            "src": "1540:247:85"
          },
          {
            "body": {
              "nodeType": "YulBlock",
              "src": "1879:161:85",
              "statements": [
                {
                  "body": {
                    "nodeType": "YulBlock",
                    "src": "1925:16:85",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "kind": "number",
                              "nodeType": "YulLiteral",
                              "src": "1934:1:85",
                              "type": "",
                              "value": "0"
                            },
                            {
                              "kind": "number",
                              "nodeType": "YulLiteral",
                              "src": "1937:1:85",
                              "type": "",
                              "value": "0"
                            }
                          ],
                          "functionName": {
                            "name": "revert",
                            "nodeType": "YulIdentifier",
                            "src": "1927:6:85"
                          },
                          "nodeType": "YulFunctionCall",
                          "src": "1927:12:85"
                        },
                        "nodeType": "YulExpressionStatement",
                        "src": "1927:12:85"
                      }
                    ]
                  },
                  "condition": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "name": "dataEnd",
                            "nodeType": "YulIdentifier",
                            "src": "1900:7:85"
                          },
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "1909:9:85"
                          }
                        ],
                        "functionName": {
                          "name": "sub",
                          "nodeType": "YulIdentifier",
                          "src": "1896:3:85"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "1896:23:85"
                      },
                      {
                        "kind": "number",
                        "nodeType": "YulLiteral",
                        "src": "1921:2:85",
                        "type": "",
                        "value": "64"
                      }
                    ],
                    "functionName": {
                      "name": "slt",
                      "nodeType": "YulIdentifier",
                      "src": "1892:3:85"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "1892:32:85"
                  },
                  "nodeType": "YulIf",
                  "src": "1889:52:85"
                },
                {
                  "nodeType": "YulAssignment",
                  "src": "1950:33:85",
                  "value": {
                    "arguments": [
                      {
                        "name": "headStart",
                        "nodeType": "YulIdentifier",
                        "src": "1973:9:85"
                      }
                    ],
                    "functionName": {
                      "name": "calldataload",
                      "nodeType": "YulIdentifier",
                      "src": "1960:12:85"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "1960:23:85"
                  },
                  "variableNames": [
                    {
                      "name": "value0",
                      "nodeType": "YulIdentifier",
                      "src": "1950:6:85"
                    }
                  ]
                },
                {
                  "nodeType": "YulAssignment",
                  "src": "1992:42:85",
                  "value": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "2019:9:85"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "2030:2:85",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "2015:3:85"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "2015:18:85"
                      }
                    ],
                    "functionName": {
                      "name": "calldataload",
                      "nodeType": "YulIdentifier",
                      "src": "2002:12:85"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "2002:32:85"
                  },
                  "variableNames": [
                    {
                      "name": "value1",
                      "nodeType": "YulIdentifier",
                      "src": "1992:6:85"
                    }
                  ]
                }
              ]
            },
            "name": "abi_decode_tuple_t_uint256t_uint256",
            "nodeType": "YulFunctionDefinition",
            "parameters": [
              {
                "name": "headStart",
                "nodeType": "YulTypedName",
                "src": "1837:9:85",
                "type": ""
              },
              {
                "name": "dataEnd",
                "nodeType": "YulTypedName",
                "src": "1848:7:85",
                "type": ""
              }
            ],
            "returnVariables": [
              {
                "name": "value0",
                "nodeType": "YulTypedName",
                "src": "1860:6:85",
                "type": ""
              },
              {
                "name": "value1",
                "nodeType": "YulTypedName",
                "src": "1868:6:85",
                "type": ""
              }
            ],
            "src": "1792:248:85"
          },
          {
            "body": {
              "nodeType": "YulBlock",
              "src": "2183:383:85",
              "statements": [
                {
                  "body": {
                    "nodeType": "YulBlock",
                    "src": "2230:16:85",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "kind": "number",
                              "nodeType": "YulLiteral",
                              "src": "2239:1:85",
                              "type": "",
                              "value": "0"
                            },
                            {
                              "kind": "number",
                              "nodeType": "YulLiteral",
                              "src": "2242:1:85",
                              "type": "",
                              "value": "0"
                            }
                          ],
                          "functionName": {
                            "name": "revert",
                            "nodeType": "YulIdentifier",
                            "src": "2232:6:85"
                          },
                          "nodeType": "YulFunctionCall",
                          "src": "2232:12:85"
                        },
                        "nodeType": "YulExpressionStatement",
                        "src": "2232:12:85"
                      }
                    ]
                  },
                  "condition": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "name": "dataEnd",
                            "nodeType": "YulIdentifier",
                            "src": "2204:7:85"
                          },
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "2213:9:85"
                          }
                        ],
                        "functionName": {
                          "name": "sub",
                          "nodeType": "YulIdentifier",
                          "src": "2200:3:85"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "2200:23:85"
                      },
                      {
                        "kind": "number",
                        "nodeType": "YulLiteral",
                        "src": "2225:3:85",
                        "type": "",
                        "value": "160"
                      }
                    ],
                    "functionName": {
                      "name": "slt",
                      "nodeType": "YulIdentifier",
                      "src": "2196:3:85"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "2196:33:85"
                  },
                  "nodeType": "YulIf",
                  "src": "2193:53:85"
                },
                {
                  "nodeType": "YulVariableDeclaration",
                  "src": "2255:36:85",
                  "value": {
                    "arguments": [
                      {
                        "name": "headStart",
                        "nodeType": "YulIdentifier",
                        "src": "2281:9:85"
                      }
                    ],
                    "functionName": {
                      "name": "calldataload",
                      "nodeType": "YulIdentifier",
                      "src": "2268:12:85"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "2268:23:85"
                  },
                  "variables": [
                    {
                      "name": "value",
                      "nodeType": "YulTypedName",
                      "src": "2259:5:85",
                      "type": ""
                    }
                  ]
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "name": "value",
                        "nodeType": "YulIdentifier",
                        "src": "2325:5:85"
                      }
                    ],
                    "functionName": {
                      "name": "validator_revert_address",
                      "nodeType": "YulIdentifier",
                      "src": "2300:24:85"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "2300:31:85"
                  },
                  "nodeType": "YulExpressionStatement",
                  "src": "2300:31:85"
                },
                {
                  "nodeType": "YulAssignment",
                  "src": "2340:15:85",
                  "value": {
                    "name": "value",
                    "nodeType": "YulIdentifier",
                    "src": "2350:5:85"
                  },
                  "variableNames": [
                    {
                      "name": "value0",
                      "nodeType": "YulIdentifier",
                      "src": "2340:6:85"
                    }
                  ]
                },
                {
                  "nodeType": "YulAssignment",
                  "src": "2364:42:85",
                  "value": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "2391:9:85"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "2402:2:85",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "2387:3:85"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "2387:18:85"
                      }
                    ],
                    "functionName": {
                      "name": "calldataload",
                      "nodeType": "YulIdentifier",
                      "src": "2374:12:85"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "2374:32:85"
                  },
                  "variableNames": [
                    {
                      "name": "value1",
                      "nodeType": "YulIdentifier",
                      "src": "2364:6:85"
                    }
                  ]
                },
                {
                  "nodeType": "YulAssignment",
                  "src": "2415:42:85",
                  "value": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "2442:9:85"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "2453:2:85",
                            "type": "",
                            "value": "64"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "2438:3:85"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "2438:18:85"
                      }
                    ],
                    "functionName": {
                      "name": "calldataload",
                      "nodeType": "YulIdentifier",
                      "src": "2425:12:85"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "2425:32:85"
                  },
                  "variableNames": [
                    {
                      "name": "value2",
                      "nodeType": "YulIdentifier",
                      "src": "2415:6:85"
                    }
                  ]
                },
                {
                  "nodeType": "YulAssignment",
                  "src": "2466:42:85",
                  "value": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "2493:9:85"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "2504:2:85",
                            "type": "",
                            "value": "96"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "2489:3:85"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "2489:18:85"
                      }
                    ],
                    "functionName": {
                      "name": "calldataload",
                      "nodeType": "YulIdentifier",
                      "src": "2476:12:85"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "2476:32:85"
                  },
                  "variableNames": [
                    {
                      "name": "value3",
                      "nodeType": "YulIdentifier",
                      "src": "2466:6:85"
                    }
                  ]
                },
                {
                  "nodeType": "YulAssignment",
                  "src": "2517:43:85",
                  "value": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "2544:9:85"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "2555:3:85",
                            "type": "",
                            "value": "128"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "2540:3:85"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "2540:19:85"
                      }
                    ],
                    "functionName": {
                      "name": "calldataload",
                      "nodeType": "YulIdentifier",
                      "src": "2527:12:85"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "2527:33:85"
                  },
                  "variableNames": [
                    {
                      "name": "value4",
                      "nodeType": "YulIdentifier",
                      "src": "2517:6:85"
                    }
                  ]
                }
              ]
            },
            "name": "abi_decode_tuple_t_addresst_uint256t_uint256t_uint256t_uint256",
            "nodeType": "YulFunctionDefinition",
            "parameters": [
              {
                "name": "headStart",
                "nodeType": "YulTypedName",
                "src": "2117:9:85",
                "type": ""
              },
              {
                "name": "dataEnd",
                "nodeType": "YulTypedName",
                "src": "2128:7:85",
                "type": ""
              }
            ],
            "returnVariables": [
              {
                "name": "value0",
                "nodeType": "YulTypedName",
                "src": "2140:6:85",
                "type": ""
              },
              {
                "name": "value1",
                "nodeType": "YulTypedName",
                "src": "2148:6:85",
                "type": ""
              },
              {
                "name": "value2",
                "nodeType": "YulTypedName",
                "src": "2156:6:85",
                "type": ""
              },
              {
                "name": "value3",
                "nodeType": "YulTypedName",
                "src": "2164:6:85",
                "type": ""
              },
              {
                "name": "value4",
                "nodeType": "YulTypedName",
                "src": "2172:6:85",
                "type": ""
              }
            ],
            "src": "2045:521:85"
          },
          {
            "body": {
              "nodeType": "YulBlock",
              "src": "2745:229:85",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "name": "headStart",
                        "nodeType": "YulIdentifier",
                        "src": "2762:9:85"
                      },
                      {
                        "kind": "number",
                        "nodeType": "YulLiteral",
                        "src": "2773:2:85",
                        "type": "",
                        "value": "32"
                      }
                    ],
                    "functionName": {
                      "name": "mstore",
                      "nodeType": "YulIdentifier",
                      "src": "2755:6:85"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "2755:21:85"
                  },
                  "nodeType": "YulExpressionStatement",
                  "src": "2755:21:85"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "2796:9:85"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "2807:2:85",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "2792:3:85"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "2792:18:85"
                      },
                      {
                        "kind": "number",
                        "nodeType": "YulLiteral",
                        "src": "2812:2:85",
                        "type": "",
                        "value": "39"
                      }
                    ],
                    "functionName": {
                      "name": "mstore",
                      "nodeType": "YulIdentifier",
                      "src": "2785:6:85"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "2785:30:85"
                  },
                  "nodeType": "YulExpressionStatement",
                  "src": "2785:30:85"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "2835:9:85"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "2846:2:85",
                            "type": "",
                            "value": "64"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "2831:3:85"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "2831:18:85"
                      },
                      {
                        "hexValue": "61646a7573746d656e74207370656564206d75737420626520736d616c6c6572",
                        "kind": "string",
                        "nodeType": "YulLiteral",
                        "src": "2851:34:85",
                        "type": "",
                        "value": "adjustment speed must be smaller"
                      }
                    ],
                    "functionName": {
                      "name": "mstore",
                      "nodeType": "YulIdentifier",
                      "src": "2824:6:85"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "2824:62:85"
                  },
                  "nodeType": "YulExpressionStatement",
                  "src": "2824:62:85"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "2906:9:85"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "2917:2:85",
                            "type": "",
                            "value": "96"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "2902:3:85"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "2902:18:85"
                      },
                      {
                        "hexValue": "207468616e2031",
                        "kind": "string",
                        "nodeType": "YulLiteral",
                        "src": "2922:9:85",
                        "type": "",
                        "value": " than 1"
                      }
                    ],
                    "functionName": {
                      "name": "mstore",
                      "nodeType": "YulIdentifier",
                      "src": "2895:6:85"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "2895:37:85"
                  },
                  "nodeType": "YulExpressionStatement",
                  "src": "2895:37:85"
                },
                {
                  "nodeType": "YulAssignment",
                  "src": "2941:27:85",
                  "value": {
                    "arguments": [
                      {
                        "name": "headStart",
                        "nodeType": "YulIdentifier",
                        "src": "2953:9:85"
                      },
                      {
                        "kind": "number",
                        "nodeType": "YulLiteral",
                        "src": "2964:3:85",
                        "type": "",
                        "value": "128"
                      }
                    ],
                    "functionName": {
                      "name": "add",
                      "nodeType": "YulIdentifier",
                      "src": "2949:3:85"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "2949:19:85"
                  },
                  "variableNames": [
                    {
                      "name": "tail",
                      "nodeType": "YulIdentifier",
                      "src": "2941:4:85"
                    }
                  ]
                }
              ]
            },
            "name": "abi_encode_tuple_t_stringliteral_1ca525b7c92ab0b7df54934c50022a14e556f23c4839d801f989aa9d9a315b5d__to_t_string_memory_ptr__fromStack_reversed",
            "nodeType": "YulFunctionDefinition",
            "parameters": [
              {
                "name": "headStart",
                "nodeType": "YulTypedName",
                "src": "2722:9:85",
                "type": ""
              }
            ],
            "returnVariables": [
              {
                "name": "tail",
                "nodeType": "YulTypedName",
                "src": "2736:4:85",
                "type": ""
              }
            ],
            "src": "2571:403:85"
          },
          {
            "body": {
              "nodeType": "YulBlock",
              "src": "3153:227:85",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "name": "headStart",
                        "nodeType": "YulIdentifier",
                        "src": "3170:9:85"
                      },
                      {
                        "kind": "number",
                        "nodeType": "YulLiteral",
                        "src": "3181:2:85",
                        "type": "",
                        "value": "32"
                      }
                    ],
                    "functionName": {
                      "name": "mstore",
                      "nodeType": "YulIdentifier",
                      "src": "3163:6:85"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "3163:21:85"
                  },
                  "nodeType": "YulExpressionStatement",
                  "src": "3163:21:85"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "3204:9:85"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "3215:2:85",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "3200:3:85"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "3200:18:85"
                      },
                      {
                        "kind": "number",
                        "nodeType": "YulLiteral",
                        "src": "3220:2:85",
                        "type": "",
                        "value": "37"
                      }
                    ],
                    "functionName": {
                      "name": "mstore",
                      "nodeType": "YulIdentifier",
                      "src": "3193:6:85"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "3193:30:85"
                  },
                  "nodeType": "YulExpressionStatement",
                  "src": "3193:30:85"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "3243:9:85"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "3254:2:85",
                            "type": "",
                            "value": "64"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "3239:3:85"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "3239:18:85"
                      },
                      {
                        "hexValue": "7461726765742064656e73697479206d75737420626520736d616c6c65722074",
                        "kind": "string",
                        "nodeType": "YulLiteral",
                        "src": "3259:34:85",
                        "type": "",
                        "value": "target density must be smaller t"
                      }
                    ],
                    "functionName": {
                      "name": "mstore",
                      "nodeType": "YulIdentifier",
                      "src": "3232:6:85"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "3232:62:85"
                  },
                  "nodeType": "YulExpressionStatement",
                  "src": "3232:62:85"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "3314:9:85"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "3325:2:85",
                            "type": "",
                            "value": "96"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "3310:3:85"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "3310:18:85"
                      },
                      {
                        "hexValue": "68616e2031",
                        "kind": "string",
                        "nodeType": "YulLiteral",
                        "src": "3330:7:85",
                        "type": "",
                        "value": "han 1"
                      }
                    ],
                    "functionName": {
                      "name": "mstore",
                      "nodeType": "YulIdentifier",
                      "src": "3303:6:85"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "3303:35:85"
                  },
                  "nodeType": "YulExpressionStatement",
                  "src": "3303:35:85"
                },
                {
                  "nodeType": "YulAssignment",
                  "src": "3347:27:85",
                  "value": {
                    "arguments": [
                      {
                        "name": "headStart",
                        "nodeType": "YulIdentifier",
                        "src": "3359:9:85"
                      },
                      {
                        "kind": "number",
                        "nodeType": "YulLiteral",
                        "src": "3370:3:85",
                        "type": "",
                        "value": "128"
                      }
                    ],
                    "functionName": {
                      "name": "add",
                      "nodeType": "YulIdentifier",
                      "src": "3355:3:85"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "3355:19:85"
                  },
                  "variableNames": [
                    {
                      "name": "tail",
                      "nodeType": "YulIdentifier",
                      "src": "3347:4:85"
                    }
                  ]
                }
              ]
            },
            "name": "abi_encode_tuple_t_stringliteral_de9fc88c13166a48d03981dcc23a666759f32cad49458a022b7a646309293f6e__to_t_string_memory_ptr__fromStack_reversed",
            "nodeType": "YulFunctionDefinition",
            "parameters": [
              {
                "name": "headStart",
                "nodeType": "YulTypedName",
                "src": "3130:9:85",
                "type": ""
              }
            ],
            "returnVariables": [
              {
                "name": "tail",
                "nodeType": "YulTypedName",
                "src": "3144:4:85",
                "type": ""
              }
            ],
            "src": "2979:401:85"
          },
          {
            "body": {
              "nodeType": "YulBlock",
              "src": "3559:182:85",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "name": "headStart",
                        "nodeType": "YulIdentifier",
                        "src": "3576:9:85"
                      },
                      {
                        "kind": "number",
                        "nodeType": "YulLiteral",
                        "src": "3587:2:85",
                        "type": "",
                        "value": "32"
                      }
                    ],
                    "functionName": {
                      "name": "mstore",
                      "nodeType": "YulIdentifier",
                      "src": "3569:6:85"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "3569:21:85"
                  },
                  "nodeType": "YulExpressionStatement",
                  "src": "3569:21:85"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "3610:9:85"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "3621:2:85",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "3606:3:85"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "3606:18:85"
                      },
                      {
                        "kind": "number",
                        "nodeType": "YulLiteral",
                        "src": "3626:2:85",
                        "type": "",
                        "value": "32"
                      }
                    ],
                    "functionName": {
                      "name": "mstore",
                      "nodeType": "YulIdentifier",
                      "src": "3599:6:85"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "3599:30:85"
                  },
                  "nodeType": "YulExpressionStatement",
                  "src": "3599:30:85"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "3649:9:85"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "3660:2:85",
                            "type": "",
                            "value": "64"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "3645:3:85"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "3645:18:85"
                      },
                      {
                        "hexValue": "43616e6e6f7420726567697374657220746865206e756c6c2061646472657373",
                        "kind": "string",
                        "nodeType": "YulLiteral",
                        "src": "3665:34:85",
                        "type": "",
                        "value": "Cannot register the null address"
                      }
                    ],
                    "functionName": {
                      "name": "mstore",
                      "nodeType": "YulIdentifier",
                      "src": "3638:6:85"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "3638:62:85"
                  },
                  "nodeType": "YulExpressionStatement",
                  "src": "3638:62:85"
                },
                {
                  "nodeType": "YulAssignment",
                  "src": "3709:26:85",
                  "value": {
                    "arguments": [
                      {
                        "name": "headStart",
                        "nodeType": "YulIdentifier",
                        "src": "3721:9:85"
                      },
                      {
                        "kind": "number",
                        "nodeType": "YulLiteral",
                        "src": "3732:2:85",
                        "type": "",
                        "value": "96"
                      }
                    ],
                    "functionName": {
                      "name": "add",
                      "nodeType": "YulIdentifier",
                      "src": "3717:3:85"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "3717:18:85"
                  },
                  "variableNames": [
                    {
                      "name": "tail",
                      "nodeType": "YulIdentifier",
                      "src": "3709:4:85"
                    }
                  ]
                }
              ]
            },
            "name": "abi_encode_tuple_t_stringliteral_b421fd6a276ccb4cd9aa78e3abb2c3737827239503a8378bfb1b144b3eb6c5b8__to_t_string_memory_ptr__fromStack_reversed",
            "nodeType": "YulFunctionDefinition",
            "parameters": [
              {
                "name": "headStart",
                "nodeType": "YulTypedName",
                "src": "3536:9:85",
                "type": ""
              }
            ],
            "returnVariables": [
              {
                "name": "tail",
                "nodeType": "YulTypedName",
                "src": "3550:4:85",
                "type": ""
              }
            ],
            "src": "3385:356:85"
          },
          {
            "body": {
              "nodeType": "YulBlock",
              "src": "3920:239:85",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "name": "headStart",
                        "nodeType": "YulIdentifier",
                        "src": "3937:9:85"
                      },
                      {
                        "kind": "number",
                        "nodeType": "YulLiteral",
                        "src": "3948:2:85",
                        "type": "",
                        "value": "32"
                      }
                    ],
                    "functionName": {
                      "name": "mstore",
                      "nodeType": "YulIdentifier",
                      "src": "3930:6:85"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "3930:21:85"
                  },
                  "nodeType": "YulExpressionStatement",
                  "src": "3930:21:85"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "3971:9:85"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "3982:2:85",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "3967:3:85"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "3967:18:85"
                      },
                      {
                        "kind": "number",
                        "nodeType": "YulLiteral",
                        "src": "3987:2:85",
                        "type": "",
                        "value": "49"
                      }
                    ],
                    "functionName": {
                      "name": "mstore",
                      "nodeType": "YulIdentifier",
                      "src": "3960:6:85"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "3960:30:85"
                  },
                  "nodeType": "YulExpressionStatement",
                  "src": "3960:30:85"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "4010:9:85"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "4021:2:85",
                            "type": "",
                            "value": "64"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "4006:3:85"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "4006:18:85"
                      },
                      {
                        "hexValue": "676173207072696365206d696e696d756d20666c6f6f72206d75737420626520",
                        "kind": "string",
                        "nodeType": "YulLiteral",
                        "src": "4026:34:85",
                        "type": "",
                        "value": "gas price minimum floor must be "
                      }
                    ],
                    "functionName": {
                      "name": "mstore",
                      "nodeType": "YulIdentifier",
                      "src": "3999:6:85"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "3999:62:85"
                  },
                  "nodeType": "YulExpressionStatement",
                  "src": "3999:62:85"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "4081:9:85"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "4092:2:85",
                            "type": "",
                            "value": "96"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "4077:3:85"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "4077:18:85"
                      },
                      {
                        "hexValue": "67726561746572207468616e207a65726f",
                        "kind": "string",
                        "nodeType": "YulLiteral",
                        "src": "4097:19:85",
                        "type": "",
                        "value": "greater than zero"
                      }
                    ],
                    "functionName": {
                      "name": "mstore",
                      "nodeType": "YulIdentifier",
                      "src": "4070:6:85"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "4070:47:85"
                  },
                  "nodeType": "YulExpressionStatement",
                  "src": "4070:47:85"
                },
                {
                  "nodeType": "YulAssignment",
                  "src": "4126:27:85",
                  "value": {
                    "arguments": [
                      {
                        "name": "headStart",
                        "nodeType": "YulIdentifier",
                        "src": "4138:9:85"
                      },
                      {
                        "kind": "number",
                        "nodeType": "YulLiteral",
                        "src": "4149:3:85",
                        "type": "",
                        "value": "128"
                      }
                    ],
                    "functionName": {
                      "name": "add",
                      "nodeType": "YulIdentifier",
                      "src": "4134:3:85"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "4134:19:85"
                  },
                  "variableNames": [
                    {
                      "name": "tail",
                      "nodeType": "YulIdentifier",
                      "src": "4126:4:85"
                    }
                  ]
                }
              ]
            },
            "name": "abi_encode_tuple_t_stringliteral_8930b1a1fce9c6c6ac87e8e1f4ca019a03f6b66006482ef580a68eacea7bcd7b__to_t_string_memory_ptr__fromStack_reversed",
            "nodeType": "YulFunctionDefinition",
            "parameters": [
              {
                "name": "headStart",
                "nodeType": "YulTypedName",
                "src": "3897:9:85",
                "type": ""
              }
            ],
            "returnVariables": [
              {
                "name": "tail",
                "nodeType": "YulTypedName",
                "src": "3911:4:85",
                "type": ""
              }
            ],
            "src": "3746:413:85"
          },
          {
            "body": {
              "nodeType": "YulBlock",
              "src": "4338:166:85",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "name": "headStart",
                        "nodeType": "YulIdentifier",
                        "src": "4355:9:85"
                      },
                      {
                        "kind": "number",
                        "nodeType": "YulLiteral",
                        "src": "4366:2:85",
                        "type": "",
                        "value": "32"
                      }
                    ],
                    "functionName": {
                      "name": "mstore",
                      "nodeType": "YulIdentifier",
                      "src": "4348:6:85"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "4348:21:85"
                  },
                  "nodeType": "YulExpressionStatement",
                  "src": "4348:21:85"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "4389:9:85"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "4400:2:85",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "4385:3:85"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "4385:18:85"
                      },
                      {
                        "kind": "number",
                        "nodeType": "YulLiteral",
                        "src": "4405:2:85",
                        "type": "",
                        "value": "16"
                      }
                    ],
                    "functionName": {
                      "name": "mstore",
                      "nodeType": "YulIdentifier",
                      "src": "4378:6:85"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "4378:30:85"
                  },
                  "nodeType": "YulExpressionStatement",
                  "src": "4378:30:85"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "4428:9:85"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "4439:2:85",
                            "type": "",
                            "value": "64"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "4424:3:85"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "4424:18:85"
                      },
                      {
                        "hexValue": "4f6e6c7920564d2063616e2063616c6c",
                        "kind": "string",
                        "nodeType": "YulLiteral",
                        "src": "4444:18:85",
                        "type": "",
                        "value": "Only VM can call"
                      }
                    ],
                    "functionName": {
                      "name": "mstore",
                      "nodeType": "YulIdentifier",
                      "src": "4417:6:85"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "4417:46:85"
                  },
                  "nodeType": "YulExpressionStatement",
                  "src": "4417:46:85"
                },
                {
                  "nodeType": "YulAssignment",
                  "src": "4472:26:85",
                  "value": {
                    "arguments": [
                      {
                        "name": "headStart",
                        "nodeType": "YulIdentifier",
                        "src": "4484:9:85"
                      },
                      {
                        "kind": "number",
                        "nodeType": "YulLiteral",
                        "src": "4495:2:85",
                        "type": "",
                        "value": "96"
                      }
                    ],
                    "functionName": {
                      "name": "add",
                      "nodeType": "YulIdentifier",
                      "src": "4480:3:85"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "4480:18:85"
                  },
                  "variableNames": [
                    {
                      "name": "tail",
                      "nodeType": "YulIdentifier",
                      "src": "4472:4:85"
                    }
                  ]
                }
              ]
            },
            "name": "abi_encode_tuple_t_stringliteral_952607dfd16d11dfdf90c18f6142a68af14c41694106cb4ca9d22c7c3186d750__to_t_string_memory_ptr__fromStack_reversed",
            "nodeType": "YulFunctionDefinition",
            "parameters": [
              {
                "name": "headStart",
                "nodeType": "YulTypedName",
                "src": "4315:9:85",
                "type": ""
              }
            ],
            "returnVariables": [
              {
                "name": "tail",
                "nodeType": "YulTypedName",
                "src": "4329:4:85",
                "type": ""
              }
            ],
            "src": "4164:340:85"
          },
          {
            "body": {
              "nodeType": "YulBlock",
              "src": "4683:228:85",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "name": "headStart",
                        "nodeType": "YulIdentifier",
                        "src": "4700:9:85"
                      },
                      {
                        "kind": "number",
                        "nodeType": "YulLiteral",
                        "src": "4711:2:85",
                        "type": "",
                        "value": "32"
                      }
                    ],
                    "functionName": {
                      "name": "mstore",
                      "nodeType": "YulIdentifier",
                      "src": "4693:6:85"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "4693:21:85"
                  },
                  "nodeType": "YulExpressionStatement",
                  "src": "4693:21:85"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "4734:9:85"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "4745:2:85",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "4730:3:85"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "4730:18:85"
                      },
                      {
                        "kind": "number",
                        "nodeType": "YulLiteral",
                        "src": "4750:2:85",
                        "type": "",
                        "value": "38"
                      }
                    ],
                    "functionName": {
                      "name": "mstore",
                      "nodeType": "YulIdentifier",
                      "src": "4723:6:85"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "4723:30:85"
                  },
                  "nodeType": "YulExpressionStatement",
                  "src": "4723:30:85"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "4773:9:85"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "4784:2:85",
                            "type": "",
                            "value": "64"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "4769:3:85"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "4769:18:85"
                      },
                      {
                        "hexValue": "4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061",
                        "kind": "string",
                        "nodeType": "YulLiteral",
                        "src": "4789:34:85",
                        "type": "",
                        "value": "Ownable: new owner is the zero a"
                      }
                    ],
                    "functionName": {
                      "name": "mstore",
                      "nodeType": "YulIdentifier",
                      "src": "4762:6:85"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "4762:62:85"
                  },
                  "nodeType": "YulExpressionStatement",
                  "src": "4762:62:85"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "4844:9:85"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "4855:2:85",
                            "type": "",
                            "value": "96"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "4840:3:85"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "4840:18:85"
                      },
                      {
                        "hexValue": "646472657373",
                        "kind": "string",
                        "nodeType": "YulLiteral",
                        "src": "4860:8:85",
                        "type": "",
                        "value": "ddress"
                      }
                    ],
                    "functionName": {
                      "name": "mstore",
                      "nodeType": "YulIdentifier",
                      "src": "4833:6:85"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "4833:36:85"
                  },
                  "nodeType": "YulExpressionStatement",
                  "src": "4833:36:85"
                },
                {
                  "nodeType": "YulAssignment",
                  "src": "4878:27:85",
                  "value": {
                    "arguments": [
                      {
                        "name": "headStart",
                        "nodeType": "YulIdentifier",
                        "src": "4890:9:85"
                      },
                      {
                        "kind": "number",
                        "nodeType": "YulLiteral",
                        "src": "4901:3:85",
                        "type": "",
                        "value": "128"
                      }
                    ],
                    "functionName": {
                      "name": "add",
                      "nodeType": "YulIdentifier",
                      "src": "4886:3:85"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "4886:19:85"
                  },
                  "variableNames": [
                    {
                      "name": "tail",
                      "nodeType": "YulIdentifier",
                      "src": "4878:4:85"
                    }
                  ]
                }
              ]
            },
            "name": "abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack_reversed",
            "nodeType": "YulFunctionDefinition",
            "parameters": [
              {
                "name": "headStart",
                "nodeType": "YulTypedName",
                "src": "4660:9:85",
                "type": ""
              }
            ],
            "returnVariables": [
              {
                "name": "tail",
                "nodeType": "YulTypedName",
                "src": "4674:4:85",
                "type": ""
              }
            ],
            "src": "4509:402:85"
          },
          {
            "body": {
              "nodeType": "YulBlock",
              "src": "5090:178:85",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "name": "headStart",
                        "nodeType": "YulIdentifier",
                        "src": "5107:9:85"
                      },
                      {
                        "kind": "number",
                        "nodeType": "YulLiteral",
                        "src": "5118:2:85",
                        "type": "",
                        "value": "32"
                      }
                    ],
                    "functionName": {
                      "name": "mstore",
                      "nodeType": "YulIdentifier",
                      "src": "5100:6:85"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "5100:21:85"
                  },
                  "nodeType": "YulExpressionStatement",
                  "src": "5100:21:85"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "5141:9:85"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "5152:2:85",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "5137:3:85"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "5137:18:85"
                      },
                      {
                        "kind": "number",
                        "nodeType": "YulLiteral",
                        "src": "5157:2:85",
                        "type": "",
                        "value": "28"
                      }
                    ],
                    "functionName": {
                      "name": "mstore",
                      "nodeType": "YulIdentifier",
                      "src": "5130:6:85"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "5130:30:85"
                  },
                  "nodeType": "YulExpressionStatement",
                  "src": "5130:30:85"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "5180:9:85"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "5191:2:85",
                            "type": "",
                            "value": "64"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "5176:3:85"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "5176:18:85"
                      },
                      {
                        "hexValue": "636f6e747261637420616c726561647920696e697469616c697a6564",
                        "kind": "string",
                        "nodeType": "YulLiteral",
                        "src": "5196:30:85",
                        "type": "",
                        "value": "contract already initialized"
                      }
                    ],
                    "functionName": {
                      "name": "mstore",
                      "nodeType": "YulIdentifier",
                      "src": "5169:6:85"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "5169:58:85"
                  },
                  "nodeType": "YulExpressionStatement",
                  "src": "5169:58:85"
                },
                {
                  "nodeType": "YulAssignment",
                  "src": "5236:26:85",
                  "value": {
                    "arguments": [
                      {
                        "name": "headStart",
                        "nodeType": "YulIdentifier",
                        "src": "5248:9:85"
                      },
                      {
                        "kind": "number",
                        "nodeType": "YulLiteral",
                        "src": "5259:2:85",
                        "type": "",
                        "value": "96"
                      }
                    ],
                    "functionName": {
                      "name": "add",
                      "nodeType": "YulIdentifier",
                      "src": "5244:3:85"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "5244:18:85"
                  },
                  "variableNames": [
                    {
                      "name": "tail",
                      "nodeType": "YulIdentifier",
                      "src": "5236:4:85"
                    }
                  ]
                }
              ]
            },
            "name": "abi_encode_tuple_t_stringliteral_0eaa08b63d5ee9e058835eb2dc7a36f8bcf5c2ea6d8d745d8265f9e4063fd134__to_t_string_memory_ptr__fromStack_reversed",
            "nodeType": "YulFunctionDefinition",
            "parameters": [
              {
                "name": "headStart",
                "nodeType": "YulTypedName",
                "src": "5067:9:85",
                "type": ""
              }
            ],
            "returnVariables": [
              {
                "name": "tail",
                "nodeType": "YulTypedName",
                "src": "5081:4:85",
                "type": ""
              }
            ],
            "src": "4916:352:85"
          },
          {
            "body": {
              "nodeType": "YulBlock",
              "src": "5447:182:85",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "name": "headStart",
                        "nodeType": "YulIdentifier",
                        "src": "5464:9:85"
                      },
                      {
                        "kind": "number",
                        "nodeType": "YulLiteral",
                        "src": "5475:2:85",
                        "type": "",
                        "value": "32"
                      }
                    ],
                    "functionName": {
                      "name": "mstore",
                      "nodeType": "YulIdentifier",
                      "src": "5457:6:85"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "5457:21:85"
                  },
                  "nodeType": "YulExpressionStatement",
                  "src": "5457:21:85"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "5498:9:85"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "5509:2:85",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "5494:3:85"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "5494:18:85"
                      },
                      {
                        "kind": "number",
                        "nodeType": "YulLiteral",
                        "src": "5514:2:85",
                        "type": "",
                        "value": "32"
                      }
                    ],
                    "functionName": {
                      "name": "mstore",
                      "nodeType": "YulIdentifier",
                      "src": "5487:6:85"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "5487:30:85"
                  },
                  "nodeType": "YulExpressionStatement",
                  "src": "5487:30:85"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "5537:9:85"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "5548:2:85",
                            "type": "",
                            "value": "64"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "5533:3:85"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "5533:18:85"
                      },
                      {
                        "hexValue": "4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572",
                        "kind": "string",
                        "nodeType": "YulLiteral",
                        "src": "5553:34:85",
                        "type": "",
                        "value": "Ownable: caller is not the owner"
                      }
                    ],
                    "functionName": {
                      "name": "mstore",
                      "nodeType": "YulIdentifier",
                      "src": "5526:6:85"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "5526:62:85"
                  },
                  "nodeType": "YulExpressionStatement",
                  "src": "5526:62:85"
                },
                {
                  "nodeType": "YulAssignment",
                  "src": "5597:26:85",
                  "value": {
                    "arguments": [
                      {
                        "name": "headStart",
                        "nodeType": "YulIdentifier",
                        "src": "5609:9:85"
                      },
                      {
                        "kind": "number",
                        "nodeType": "YulLiteral",
                        "src": "5620:2:85",
                        "type": "",
                        "value": "96"
                      }
                    ],
                    "functionName": {
                      "name": "add",
                      "nodeType": "YulIdentifier",
                      "src": "5605:3:85"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "5605:18:85"
                  },
                  "variableNames": [
                    {
                      "name": "tail",
                      "nodeType": "YulIdentifier",
                      "src": "5597:4:85"
                    }
                  ]
                }
              ]
            },
            "name": "abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed",
            "nodeType": "YulFunctionDefinition",
            "parameters": [
              {
                "name": "headStart",
                "nodeType": "YulTypedName",
                "src": "5424:9:85",
                "type": ""
              }
            ],
            "returnVariables": [
              {
                "name": "tail",
                "nodeType": "YulTypedName",
                "src": "5438:4:85",
                "type": ""
              }
            ],
            "src": "5273:356:85"
          },
          {
            "body": {
              "nodeType": "YulBlock",
              "src": "5808:231:85",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "name": "headStart",
                        "nodeType": "YulIdentifier",
                        "src": "5825:9:85"
                      },
                      {
                        "kind": "number",
                        "nodeType": "YulLiteral",
                        "src": "5836:2:85",
                        "type": "",
                        "value": "32"
                      }
                    ],
                    "functionName": {
                      "name": "mstore",
                      "nodeType": "YulIdentifier",
                      "src": "5818:6:85"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "5818:21:85"
                  },
                  "nodeType": "YulExpressionStatement",
                  "src": "5818:21:85"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "5859:9:85"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "5870:2:85",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "5855:3:85"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "5855:18:85"
                      },
                      {
                        "kind": "number",
                        "nodeType": "YulLiteral",
                        "src": "5875:2:85",
                        "type": "",
                        "value": "41"
                      }
                    ],
                    "functionName": {
                      "name": "mstore",
                      "nodeType": "YulIdentifier",
                      "src": "5848:6:85"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "5848:30:85"
                  },
                  "nodeType": "YulExpressionStatement",
                  "src": "5848:30:85"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "5898:9:85"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "5909:2:85",
                            "type": "",
                            "value": "64"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "5894:3:85"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "5894:18:85"
                      },
                      {
                        "hexValue": "54686973206d6574686f64206973206e6f206c6f6e67657220737570706f7274",
                        "kind": "string",
                        "nodeType": "YulLiteral",
                        "src": "5914:34:85",
                        "type": "",
                        "value": "This method is no longer support"
                      }
                    ],
                    "functionName": {
                      "name": "mstore",
                      "nodeType": "YulIdentifier",
                      "src": "5887:6:85"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "5887:62:85"
                  },
                  "nodeType": "YulExpressionStatement",
                  "src": "5887:62:85"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "5969:9:85"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "5980:2:85",
                            "type": "",
                            "value": "96"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "5965:3:85"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "5965:18:85"
                      },
                      {
                        "hexValue": "656420696e204c322e",
                        "kind": "string",
                        "nodeType": "YulLiteral",
                        "src": "5985:11:85",
                        "type": "",
                        "value": "ed in L2."
                      }
                    ],
                    "functionName": {
                      "name": "mstore",
                      "nodeType": "YulIdentifier",
                      "src": "5958:6:85"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "5958:39:85"
                  },
                  "nodeType": "YulExpressionStatement",
                  "src": "5958:39:85"
                },
                {
                  "nodeType": "YulAssignment",
                  "src": "6006:27:85",
                  "value": {
                    "arguments": [
                      {
                        "name": "headStart",
                        "nodeType": "YulIdentifier",
                        "src": "6018:9:85"
                      },
                      {
                        "kind": "number",
                        "nodeType": "YulLiteral",
                        "src": "6029:3:85",
                        "type": "",
                        "value": "128"
                      }
                    ],
                    "functionName": {
                      "name": "add",
                      "nodeType": "YulIdentifier",
                      "src": "6014:3:85"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "6014:19:85"
                  },
                  "variableNames": [
                    {
                      "name": "tail",
                      "nodeType": "YulIdentifier",
                      "src": "6006:4:85"
                    }
                  ]
                }
              ]
            },
            "name": "abi_encode_tuple_t_stringliteral_6b58fe460f24176f3213b61028eeed65350ffc7614db8ee67f6cecd2e8cd9d28__to_t_string_memory_ptr__fromStack_reversed",
            "nodeType": "YulFunctionDefinition",
            "parameters": [
              {
                "name": "headStart",
                "nodeType": "YulTypedName",
                "src": "5785:9:85",
                "type": ""
              }
            ],
            "returnVariables": [
              {
                "name": "tail",
                "nodeType": "YulTypedName",
                "src": "5799:4:85",
                "type": ""
              }
            ],
            "src": "5634:405:85"
          },
          {
            "body": {
              "nodeType": "YulBlock",
              "src": "6218:247:85",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "name": "headStart",
                        "nodeType": "YulIdentifier",
                        "src": "6235:9:85"
                      },
                      {
                        "kind": "number",
                        "nodeType": "YulLiteral",
                        "src": "6246:2:85",
                        "type": "",
                        "value": "32"
                      }
                    ],
                    "functionName": {
                      "name": "mstore",
                      "nodeType": "YulIdentifier",
                      "src": "6228:6:85"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "6228:21:85"
                  },
                  "nodeType": "YulExpressionStatement",
                  "src": "6228:21:85"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "6269:9:85"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "6280:2:85",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "6265:3:85"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "6265:18:85"
                      },
                      {
                        "kind": "number",
                        "nodeType": "YulLiteral",
                        "src": "6285:2:85",
                        "type": "",
                        "value": "57"
                      }
                    ],
                    "functionName": {
                      "name": "mstore",
                      "nodeType": "YulIdentifier",
                      "src": "6258:6:85"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "6258:30:85"
                  },
                  "nodeType": "YulExpressionStatement",
                  "src": "6258:30:85"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "6308:9:85"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "6319:2:85",
                            "type": "",
                            "value": "64"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "6304:3:85"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "6304:18:85"
                      },
                      {
                        "hexValue": "62617365466565206f70436f64652061637469766174696f6e20626c6f636b20",
                        "kind": "string",
                        "nodeType": "YulLiteral",
                        "src": "6324:34:85",
                        "type": "",
                        "value": "baseFee opCode activation block "
                      }
                    ],
                    "functionName": {
                      "name": "mstore",
                      "nodeType": "YulIdentifier",
                      "src": "6297:6:85"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "6297:62:85"
                  },
                  "nodeType": "YulExpressionStatement",
                  "src": "6297:62:85"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "6379:9:85"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "6390:2:85",
                            "type": "",
                            "value": "96"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "6375:3:85"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "6375:18:85"
                      },
                      {
                        "hexValue": "6d7573742062652067726561746572207468616e207a65726f",
                        "kind": "string",
                        "nodeType": "YulLiteral",
                        "src": "6395:27:85",
                        "type": "",
                        "value": "must be greater than zero"
                      }
                    ],
                    "functionName": {
                      "name": "mstore",
                      "nodeType": "YulIdentifier",
                      "src": "6368:6:85"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "6368:55:85"
                  },
                  "nodeType": "YulExpressionStatement",
                  "src": "6368:55:85"
                },
                {
                  "nodeType": "YulAssignment",
                  "src": "6432:27:85",
                  "value": {
                    "arguments": [
                      {
                        "name": "headStart",
                        "nodeType": "YulIdentifier",
                        "src": "6444:9:85"
                      },
                      {
                        "kind": "number",
                        "nodeType": "YulLiteral",
                        "src": "6455:3:85",
                        "type": "",
                        "value": "128"
                      }
                    ],
                    "functionName": {
                      "name": "add",
                      "nodeType": "YulIdentifier",
                      "src": "6440:3:85"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "6440:19:85"
                  },
                  "variableNames": [
                    {
                      "name": "tail",
                      "nodeType": "YulIdentifier",
                      "src": "6432:4:85"
                    }
                  ]
                }
              ]
            },
            "name": "abi_encode_tuple_t_stringliteral_d9d51394b275342b564f39c329f58641636f622b7ee20b0abef6182e70e4bf06__to_t_string_memory_ptr__fromStack_reversed",
            "nodeType": "YulFunctionDefinition",
            "parameters": [
              {
                "name": "headStart",
                "nodeType": "YulTypedName",
                "src": "6195:9:85",
                "type": ""
              }
            ],
            "returnVariables": [
              {
                "name": "tail",
                "nodeType": "YulTypedName",
                "src": "6209:4:85",
                "type": ""
              }
            ],
            "src": "6044:421:85"
          },
          {
            "body": {
              "nodeType": "YulBlock",
              "src": "6662:67:85",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "name": "pos",
                        "nodeType": "YulIdentifier",
                        "src": "6679:3:85"
                      },
                      {
                        "hexValue": "43656c6f546f6b656e",
                        "kind": "string",
                        "nodeType": "YulLiteral",
                        "src": "6684:11:85",
                        "type": "",
                        "value": "CeloToken"
                      }
                    ],
                    "functionName": {
                      "name": "mstore",
                      "nodeType": "YulIdentifier",
                      "src": "6672:6:85"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "6672:24:85"
                  },
                  "nodeType": "YulExpressionStatement",
                  "src": "6672:24:85"
                },
                {
                  "nodeType": "YulAssignment",
                  "src": "6705:18:85",
                  "value": {
                    "arguments": [
                      {
                        "name": "pos",
                        "nodeType": "YulIdentifier",
                        "src": "6716:3:85"
                      },
                      {
                        "kind": "number",
                        "nodeType": "YulLiteral",
                        "src": "6721:1:85",
                        "type": "",
                        "value": "9"
                      }
                    ],
                    "functionName": {
                      "name": "add",
                      "nodeType": "YulIdentifier",
                      "src": "6712:3:85"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "6712:11:85"
                  },
                  "variableNames": [
                    {
                      "name": "end",
                      "nodeType": "YulIdentifier",
                      "src": "6705:3:85"
                    }
                  ]
                }
              ]
            },
            "name": "abi_encode_tuple_packed_t_stringliteral_a3bf392f34150f84db7aaff1f18e6e51f7e38850760f779b6db33e8f4e043d3d__to_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed",
            "nodeType": "YulFunctionDefinition",
            "parameters": [
              {
                "name": "pos",
                "nodeType": "YulTypedName",
                "src": "6646:3:85",
                "type": ""
              }
            ],
            "returnVariables": [
              {
                "name": "end",
                "nodeType": "YulTypedName",
                "src": "6654:3:85",
                "type": ""
              }
            ],
            "src": "6470:259:85"
          },
          {
            "body": {
              "nodeType": "YulBlock",
              "src": "6835:76:85",
              "statements": [
                {
                  "nodeType": "YulAssignment",
                  "src": "6845:26:85",
                  "value": {
                    "arguments": [
                      {
                        "name": "headStart",
                        "nodeType": "YulIdentifier",
                        "src": "6857:9:85"
                      },
                      {
                        "kind": "number",
                        "nodeType": "YulLiteral",
                        "src": "6868:2:85",
                        "type": "",
                        "value": "32"
                      }
                    ],
                    "functionName": {
                      "name": "add",
                      "nodeType": "YulIdentifier",
                      "src": "6853:3:85"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "6853:18:85"
                  },
                  "variableNames": [
                    {
                      "name": "tail",
                      "nodeType": "YulIdentifier",
                      "src": "6845:4:85"
                    }
                  ]
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "name": "headStart",
                        "nodeType": "YulIdentifier",
                        "src": "6887:9:85"
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulIdentifier",
                        "src": "6898:6:85"
                      }
                    ],
                    "functionName": {
                      "name": "mstore",
                      "nodeType": "YulIdentifier",
                      "src": "6880:6:85"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "6880:25:85"
                  },
                  "nodeType": "YulExpressionStatement",
                  "src": "6880:25:85"
                }
              ]
            },
            "name": "abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed",
            "nodeType": "YulFunctionDefinition",
            "parameters": [
              {
                "name": "headStart",
                "nodeType": "YulTypedName",
                "src": "6804:9:85",
                "type": ""
              },
              {
                "name": "value0",
                "nodeType": "YulTypedName",
                "src": "6815:6:85",
                "type": ""
              }
            ],
            "returnVariables": [
              {
                "name": "tail",
                "nodeType": "YulTypedName",
                "src": "6826:4:85",
                "type": ""
              }
            ],
            "src": "6734:177:85"
          },
          {
            "body": {
              "nodeType": "YulBlock",
              "src": "6997:170:85",
              "statements": [
                {
                  "body": {
                    "nodeType": "YulBlock",
                    "src": "7043:16:85",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "kind": "number",
                              "nodeType": "YulLiteral",
                              "src": "7052:1:85",
                              "type": "",
                              "value": "0"
                            },
                            {
                              "kind": "number",
                              "nodeType": "YulLiteral",
                              "src": "7055:1:85",
                              "type": "",
                              "value": "0"
                            }
                          ],
                          "functionName": {
                            "name": "revert",
                            "nodeType": "YulIdentifier",
                            "src": "7045:6:85"
                          },
                          "nodeType": "YulFunctionCall",
                          "src": "7045:12:85"
                        },
                        "nodeType": "YulExpressionStatement",
                        "src": "7045:12:85"
                      }
                    ]
                  },
                  "condition": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "name": "dataEnd",
                            "nodeType": "YulIdentifier",
                            "src": "7018:7:85"
                          },
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "7027:9:85"
                          }
                        ],
                        "functionName": {
                          "name": "sub",
                          "nodeType": "YulIdentifier",
                          "src": "7014:3:85"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "7014:23:85"
                      },
                      {
                        "kind": "number",
                        "nodeType": "YulLiteral",
                        "src": "7039:2:85",
                        "type": "",
                        "value": "32"
                      }
                    ],
                    "functionName": {
                      "name": "slt",
                      "nodeType": "YulIdentifier",
                      "src": "7010:3:85"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "7010:32:85"
                  },
                  "nodeType": "YulIf",
                  "src": "7007:52:85"
                },
                {
                  "nodeType": "YulVariableDeclaration",
                  "src": "7068:29:85",
                  "value": {
                    "arguments": [
                      {
                        "name": "headStart",
                        "nodeType": "YulIdentifier",
                        "src": "7087:9:85"
                      }
                    ],
                    "functionName": {
                      "name": "mload",
                      "nodeType": "YulIdentifier",
                      "src": "7081:5:85"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "7081:16:85"
                  },
                  "variables": [
                    {
                      "name": "value",
                      "nodeType": "YulTypedName",
                      "src": "7072:5:85",
                      "type": ""
                    }
                  ]
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "name": "value",
                        "nodeType": "YulIdentifier",
                        "src": "7131:5:85"
                      }
                    ],
                    "functionName": {
                      "name": "validator_revert_address",
                      "nodeType": "YulIdentifier",
                      "src": "7106:24:85"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "7106:31:85"
                  },
                  "nodeType": "YulExpressionStatement",
                  "src": "7106:31:85"
                },
                {
                  "nodeType": "YulAssignment",
                  "src": "7146:15:85",
                  "value": {
                    "name": "value",
                    "nodeType": "YulIdentifier",
                    "src": "7156:5:85"
                  },
                  "variableNames": [
                    {
                      "name": "value0",
                      "nodeType": "YulIdentifier",
                      "src": "7146:6:85"
                    }
                  ]
                }
              ]
            },
            "name": "abi_decode_tuple_t_address_fromMemory",
            "nodeType": "YulFunctionDefinition",
            "parameters": [
              {
                "name": "headStart",
                "nodeType": "YulTypedName",
                "src": "6963:9:85",
                "type": ""
              },
              {
                "name": "dataEnd",
                "nodeType": "YulTypedName",
                "src": "6974:7:85",
                "type": ""
              }
            ],
            "returnVariables": [
              {
                "name": "value0",
                "nodeType": "YulTypedName",
                "src": "6986:6:85",
                "type": ""
              }
            ],
            "src": "6916:251:85"
          },
          {
            "body": {
              "nodeType": "YulBlock",
              "src": "7364:72:85",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "name": "pos",
                        "nodeType": "YulIdentifier",
                        "src": "7381:3:85"
                      },
                      {
                        "hexValue": "536f727465644f7261636c6573",
                        "kind": "string",
                        "nodeType": "YulLiteral",
                        "src": "7386:15:85",
                        "type": "",
                        "value": "SortedOracles"
                      }
                    ],
                    "functionName": {
                      "name": "mstore",
                      "nodeType": "YulIdentifier",
                      "src": "7374:6:85"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "7374:28:85"
                  },
                  "nodeType": "YulExpressionStatement",
                  "src": "7374:28:85"
                },
                {
                  "nodeType": "YulAssignment",
                  "src": "7411:19:85",
                  "value": {
                    "arguments": [
                      {
                        "name": "pos",
                        "nodeType": "YulIdentifier",
                        "src": "7422:3:85"
                      },
                      {
                        "kind": "number",
                        "nodeType": "YulLiteral",
                        "src": "7427:2:85",
                        "type": "",
                        "value": "13"
                      }
                    ],
                    "functionName": {
                      "name": "add",
                      "nodeType": "YulIdentifier",
                      "src": "7418:3:85"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "7418:12:85"
                  },
                  "variableNames": [
                    {
                      "name": "end",
                      "nodeType": "YulIdentifier",
                      "src": "7411:3:85"
                    }
                  ]
                }
              ]
            },
            "name": "abi_encode_tuple_packed_t_stringliteral_ab7ca110ac6f740fa4bdcd667652ab6f883b80daaedaf0cb53396dc5d5be6f2c__to_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed",
            "nodeType": "YulFunctionDefinition",
            "parameters": [
              {
                "name": "pos",
                "nodeType": "YulTypedName",
                "src": "7348:3:85",
                "type": ""
              }
            ],
            "returnVariables": [
              {
                "name": "end",
                "nodeType": "YulTypedName",
                "src": "7356:3:85",
                "type": ""
              }
            ],
            "src": "7172:264:85"
          },
          {
            "body": {
              "nodeType": "YulBlock",
              "src": "7539:147:85",
              "statements": [
                {
                  "body": {
                    "nodeType": "YulBlock",
                    "src": "7585:16:85",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "kind": "number",
                              "nodeType": "YulLiteral",
                              "src": "7594:1:85",
                              "type": "",
                              "value": "0"
                            },
                            {
                              "kind": "number",
                              "nodeType": "YulLiteral",
                              "src": "7597:1:85",
                              "type": "",
                              "value": "0"
                            }
                          ],
                          "functionName": {
                            "name": "revert",
                            "nodeType": "YulIdentifier",
                            "src": "7587:6:85"
                          },
                          "nodeType": "YulFunctionCall",
                          "src": "7587:12:85"
                        },
                        "nodeType": "YulExpressionStatement",
                        "src": "7587:12:85"
                      }
                    ]
                  },
                  "condition": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "name": "dataEnd",
                            "nodeType": "YulIdentifier",
                            "src": "7560:7:85"
                          },
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "7569:9:85"
                          }
                        ],
                        "functionName": {
                          "name": "sub",
                          "nodeType": "YulIdentifier",
                          "src": "7556:3:85"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "7556:23:85"
                      },
                      {
                        "kind": "number",
                        "nodeType": "YulLiteral",
                        "src": "7581:2:85",
                        "type": "",
                        "value": "64"
                      }
                    ],
                    "functionName": {
                      "name": "slt",
                      "nodeType": "YulIdentifier",
                      "src": "7552:3:85"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "7552:32:85"
                  },
                  "nodeType": "YulIf",
                  "src": "7549:52:85"
                },
                {
                  "nodeType": "YulAssignment",
                  "src": "7610:26:85",
                  "value": {
                    "arguments": [
                      {
                        "name": "headStart",
                        "nodeType": "YulIdentifier",
                        "src": "7626:9:85"
                      }
                    ],
                    "functionName": {
                      "name": "mload",
                      "nodeType": "YulIdentifier",
                      "src": "7620:5:85"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "7620:16:85"
                  },
                  "variableNames": [
                    {
                      "name": "value0",
                      "nodeType": "YulIdentifier",
                      "src": "7610:6:85"
                    }
                  ]
                },
                {
                  "nodeType": "YulAssignment",
                  "src": "7645:35:85",
                  "value": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "7665:9:85"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "7676:2:85",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "7661:3:85"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "7661:18:85"
                      }
                    ],
                    "functionName": {
                      "name": "mload",
                      "nodeType": "YulIdentifier",
                      "src": "7655:5:85"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "7655:25:85"
                  },
                  "variableNames": [
                    {
                      "name": "value1",
                      "nodeType": "YulIdentifier",
                      "src": "7645:6:85"
                    }
                  ]
                }
              ]
            },
            "name": "abi_decode_tuple_t_uint256t_uint256_fromMemory",
            "nodeType": "YulFunctionDefinition",
            "parameters": [
              {
                "name": "headStart",
                "nodeType": "YulTypedName",
                "src": "7497:9:85",
                "type": ""
              },
              {
                "name": "dataEnd",
                "nodeType": "YulTypedName",
                "src": "7508:7:85",
                "type": ""
              }
            ],
            "returnVariables": [
              {
                "name": "value0",
                "nodeType": "YulTypedName",
                "src": "7520:6:85",
                "type": ""
              },
              {
                "name": "value1",
                "nodeType": "YulTypedName",
                "src": "7528:6:85",
                "type": ""
              }
            ],
            "src": "7441:245:85"
          },
          {
            "body": {
              "nodeType": "YulBlock",
              "src": "7723:95:85",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "kind": "number",
                        "nodeType": "YulLiteral",
                        "src": "7740:1:85",
                        "type": "",
                        "value": "0"
                      },
                      {
                        "arguments": [
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "7747:3:85",
                            "type": "",
                            "value": "224"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "7752:10:85",
                            "type": "",
                            "value": "0x4e487b71"
                          }
                        ],
                        "functionName": {
                          "name": "shl",
                          "nodeType": "YulIdentifier",
                          "src": "7743:3:85"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "7743:20:85"
                      }
                    ],
                    "functionName": {
                      "name": "mstore",
                      "nodeType": "YulIdentifier",
                      "src": "7733:6:85"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "7733:31:85"
                  },
                  "nodeType": "YulExpressionStatement",
                  "src": "7733:31:85"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "kind": "number",
                        "nodeType": "YulLiteral",
                        "src": "7780:1:85",
                        "type": "",
                        "value": "4"
                      },
                      {
                        "kind": "number",
                        "nodeType": "YulLiteral",
                        "src": "7783:4:85",
                        "type": "",
                        "value": "0x11"
                      }
                    ],
                    "functionName": {
                      "name": "mstore",
                      "nodeType": "YulIdentifier",
                      "src": "7773:6:85"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "7773:15:85"
                  },
                  "nodeType": "YulExpressionStatement",
                  "src": "7773:15:85"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "kind": "number",
                        "nodeType": "YulLiteral",
                        "src": "7804:1:85",
                        "type": "",
                        "value": "0"
                      },
                      {
                        "kind": "number",
                        "nodeType": "YulLiteral",
                        "src": "7807:4:85",
                        "type": "",
                        "value": "0x24"
                      }
                    ],
                    "functionName": {
                      "name": "revert",
                      "nodeType": "YulIdentifier",
                      "src": "7797:6:85"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "7797:15:85"
                  },
                  "nodeType": "YulExpressionStatement",
                  "src": "7797:15:85"
                }
              ]
            },
            "name": "panic_error_0x11",
            "nodeType": "YulFunctionDefinition",
            "src": "7691:127:85"
          },
          {
            "body": {
              "nodeType": "YulBlock",
              "src": "7875:116:85",
              "statements": [
                {
                  "nodeType": "YulAssignment",
                  "src": "7885:20:85",
                  "value": {
                    "arguments": [
                      {
                        "name": "x",
                        "nodeType": "YulIdentifier",
                        "src": "7900:1:85"
                      },
                      {
                        "name": "y",
                        "nodeType": "YulIdentifier",
                        "src": "7903:1:85"
                      }
                    ],
                    "functionName": {
                      "name": "mul",
                      "nodeType": "YulIdentifier",
                      "src": "7896:3:85"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "7896:9:85"
                  },
                  "variableNames": [
                    {
                      "name": "product",
                      "nodeType": "YulIdentifier",
                      "src": "7885:7:85"
                    }
                  ]
                },
                {
                  "body": {
                    "nodeType": "YulBlock",
                    "src": "7963:22:85",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [],
                          "functionName": {
                            "name": "panic_error_0x11",
                            "nodeType": "YulIdentifier",
                            "src": "7965:16:85"
                          },
                          "nodeType": "YulFunctionCall",
                          "src": "7965:18:85"
                        },
                        "nodeType": "YulExpressionStatement",
                        "src": "7965:18:85"
                      }
                    ]
                  },
                  "condition": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "x",
                                "nodeType": "YulIdentifier",
                                "src": "7934:1:85"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "7927:6:85"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7927:9:85"
                          },
                          {
                            "arguments": [
                              {
                                "name": "y",
                                "nodeType": "YulIdentifier",
                                "src": "7941:1:85"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "product",
                                    "nodeType": "YulIdentifier",
                                    "src": "7948:7:85"
                                  },
                                  {
                                    "name": "x",
                                    "nodeType": "YulIdentifier",
                                    "src": "7957:1:85"
                                  }
                                ],
                                "functionName": {
                                  "name": "div",
                                  "nodeType": "YulIdentifier",
                                  "src": "7944:3:85"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "7944:15:85"
                              }
                            ],
                            "functionName": {
                              "name": "eq",
                              "nodeType": "YulIdentifier",
                              "src": "7938:2:85"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7938:22:85"
                          }
                        ],
                        "functionName": {
                          "name": "or",
                          "nodeType": "YulIdentifier",
                          "src": "7924:2:85"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "7924:37:85"
                      }
                    ],
                    "functionName": {
                      "name": "iszero",
                      "nodeType": "YulIdentifier",
                      "src": "7917:6:85"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "7917:45:85"
                  },
                  "nodeType": "YulIf",
                  "src": "7914:71:85"
                }
              ]
            },
            "name": "checked_mul_t_uint256",
            "nodeType": "YulFunctionDefinition",
            "parameters": [
              {
                "name": "x",
                "nodeType": "YulTypedName",
                "src": "7854:1:85",
                "type": ""
              },
              {
                "name": "y",
                "nodeType": "YulTypedName",
                "src": "7857:1:85",
                "type": ""
              }
            ],
            "returnVariables": [
              {
                "name": "product",
                "nodeType": "YulTypedName",
                "src": "7863:7:85",
                "type": ""
              }
            ],
            "src": "7823:168:85"
          },
          {
            "body": {
              "nodeType": "YulBlock",
              "src": "8042:171:85",
              "statements": [
                {
                  "body": {
                    "nodeType": "YulBlock",
                    "src": "8073:111:85",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "kind": "number",
                              "nodeType": "YulLiteral",
                              "src": "8094:1:85",
                              "type": "",
                              "value": "0"
                            },
                            {
                              "arguments": [
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "8101:3:85",
                                  "type": "",
                                  "value": "224"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "8106:10:85",
                                  "type": "",
                                  "value": "0x4e487b71"
                                }
                              ],
                              "functionName": {
                                "name": "shl",
                                "nodeType": "YulIdentifier",
                                "src": "8097:3:85"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "8097:20:85"
                            }
                          ],
                          "functionName": {
                            "name": "mstore",
                            "nodeType": "YulIdentifier",
                            "src": "8087:6:85"
                          },
                          "nodeType": "YulFunctionCall",
                          "src": "8087:31:85"
                        },
                        "nodeType": "YulExpressionStatement",
                        "src": "8087:31:85"
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "kind": "number",
                              "nodeType": "YulLiteral",
                              "src": "8138:1:85",
                              "type": "",
                              "value": "4"
                            },
                            {
                              "kind": "number",
                              "nodeType": "YulLiteral",
                              "src": "8141:4:85",
                              "type": "",
                              "value": "0x12"
                            }
                          ],
                          "functionName": {
                            "name": "mstore",
                            "nodeType": "YulIdentifier",
                            "src": "8131:6:85"
                          },
                          "nodeType": "YulFunctionCall",
                          "src": "8131:15:85"
                        },
                        "nodeType": "YulExpressionStatement",
                        "src": "8131:15:85"
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "kind": "number",
                              "nodeType": "YulLiteral",
                              "src": "8166:1:85",
                              "type": "",
                              "value": "0"
                            },
                            {
                              "kind": "number",
                              "nodeType": "YulLiteral",
                              "src": "8169:4:85",
                              "type": "",
                              "value": "0x24"
                            }
                          ],
                          "functionName": {
                            "name": "revert",
                            "nodeType": "YulIdentifier",
                            "src": "8159:6:85"
                          },
                          "nodeType": "YulFunctionCall",
                          "src": "8159:15:85"
                        },
                        "nodeType": "YulExpressionStatement",
                        "src": "8159:15:85"
                      }
                    ]
                  },
                  "condition": {
                    "arguments": [
                      {
                        "name": "y",
                        "nodeType": "YulIdentifier",
                        "src": "8062:1:85"
                      }
                    ],
                    "functionName": {
                      "name": "iszero",
                      "nodeType": "YulIdentifier",
                      "src": "8055:6:85"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "8055:9:85"
                  },
                  "nodeType": "YulIf",
                  "src": "8052:132:85"
                },
                {
                  "nodeType": "YulAssignment",
                  "src": "8193:14:85",
                  "value": {
                    "arguments": [
                      {
                        "name": "x",
                        "nodeType": "YulIdentifier",
                        "src": "8202:1:85"
                      },
                      {
                        "name": "y",
                        "nodeType": "YulIdentifier",
                        "src": "8205:1:85"
                      }
                    ],
                    "functionName": {
                      "name": "div",
                      "nodeType": "YulIdentifier",
                      "src": "8198:3:85"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "8198:9:85"
                  },
                  "variableNames": [
                    {
                      "name": "r",
                      "nodeType": "YulIdentifier",
                      "src": "8193:1:85"
                    }
                  ]
                }
              ]
            },
            "name": "checked_div_t_uint256",
            "nodeType": "YulFunctionDefinition",
            "parameters": [
              {
                "name": "x",
                "nodeType": "YulTypedName",
                "src": "8027:1:85",
                "type": ""
              },
              {
                "name": "y",
                "nodeType": "YulTypedName",
                "src": "8030:1:85",
                "type": ""
              }
            ],
            "returnVariables": [
              {
                "name": "r",
                "nodeType": "YulTypedName",
                "src": "8036:1:85",
                "type": ""
              }
            ],
            "src": "7996:217:85"
          },
          {
            "body": {
              "nodeType": "YulBlock",
              "src": "8392:181:85",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "name": "headStart",
                        "nodeType": "YulIdentifier",
                        "src": "8409:9:85"
                      },
                      {
                        "kind": "number",
                        "nodeType": "YulLiteral",
                        "src": "8420:2:85",
                        "type": "",
                        "value": "32"
                      }
                    ],
                    "functionName": {
                      "name": "mstore",
                      "nodeType": "YulIdentifier",
                      "src": "8402:6:85"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "8402:21:85"
                  },
                  "nodeType": "YulExpressionStatement",
                  "src": "8402:21:85"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "8443:9:85"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "8454:2:85",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "8439:3:85"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "8439:18:85"
                      },
                      {
                        "kind": "number",
                        "nodeType": "YulLiteral",
                        "src": "8459:2:85",
                        "type": "",
                        "value": "31"
                      }
                    ],
                    "functionName": {
                      "name": "mstore",
                      "nodeType": "YulIdentifier",
                      "src": "8432:6:85"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "8432:30:85"
                  },
                  "nodeType": "YulExpressionStatement",
                  "src": "8432:30:85"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "8482:9:85"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "8493:2:85",
                            "type": "",
                            "value": "64"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "8478:3:85"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "8478:18:85"
                      },
                      {
                        "hexValue": "737562737472616374696f6e20756e646572666c6f77206465746563746564",
                        "kind": "string",
                        "nodeType": "YulLiteral",
                        "src": "8498:33:85",
                        "type": "",
                        "value": "substraction underflow detected"
                      }
                    ],
                    "functionName": {
                      "name": "mstore",
                      "nodeType": "YulIdentifier",
                      "src": "8471:6:85"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "8471:61:85"
                  },
                  "nodeType": "YulExpressionStatement",
                  "src": "8471:61:85"
                },
                {
                  "nodeType": "YulAssignment",
                  "src": "8541:26:85",
                  "value": {
                    "arguments": [
                      {
                        "name": "headStart",
                        "nodeType": "YulIdentifier",
                        "src": "8553:9:85"
                      },
                      {
                        "kind": "number",
                        "nodeType": "YulLiteral",
                        "src": "8564:2:85",
                        "type": "",
                        "value": "96"
                      }
                    ],
                    "functionName": {
                      "name": "add",
                      "nodeType": "YulIdentifier",
                      "src": "8549:3:85"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "8549:18:85"
                  },
                  "variableNames": [
                    {
                      "name": "tail",
                      "nodeType": "YulIdentifier",
                      "src": "8541:4:85"
                    }
                  ]
                }
              ]
            },
            "name": "abi_encode_tuple_t_stringliteral_103c760282d8757dce4d729c716fb02b3d489bf6f0d52b4ecab5f48cb6a08d2f__to_t_string_memory_ptr__fromStack_reversed",
            "nodeType": "YulFunctionDefinition",
            "parameters": [
              {
                "name": "headStart",
                "nodeType": "YulTypedName",
                "src": "8369:9:85",
                "type": ""
              }
            ],
            "returnVariables": [
              {
                "name": "tail",
                "nodeType": "YulTypedName",
                "src": "8383:4:85",
                "type": ""
              }
            ],
            "src": "8218:355:85"
          },
          {
            "body": {
              "nodeType": "YulBlock",
              "src": "8627:79:85",
              "statements": [
                {
                  "nodeType": "YulAssignment",
                  "src": "8637:17:85",
                  "value": {
                    "arguments": [
                      {
                        "name": "x",
                        "nodeType": "YulIdentifier",
                        "src": "8649:1:85"
                      },
                      {
                        "name": "y",
                        "nodeType": "YulIdentifier",
                        "src": "8652:1:85"
                      }
                    ],
                    "functionName": {
                      "name": "sub",
                      "nodeType": "YulIdentifier",
                      "src": "8645:3:85"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "8645:9:85"
                  },
                  "variableNames": [
                    {
                      "name": "diff",
                      "nodeType": "YulIdentifier",
                      "src": "8637:4:85"
                    }
                  ]
                },
                {
                  "body": {
                    "nodeType": "YulBlock",
                    "src": "8678:22:85",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [],
                          "functionName": {
                            "name": "panic_error_0x11",
                            "nodeType": "YulIdentifier",
                            "src": "8680:16:85"
                          },
                          "nodeType": "YulFunctionCall",
                          "src": "8680:18:85"
                        },
                        "nodeType": "YulExpressionStatement",
                        "src": "8680:18:85"
                      }
                    ]
                  },
                  "condition": {
                    "arguments": [
                      {
                        "name": "diff",
                        "nodeType": "YulIdentifier",
                        "src": "8669:4:85"
                      },
                      {
                        "name": "x",
                        "nodeType": "YulIdentifier",
                        "src": "8675:1:85"
                      }
                    ],
                    "functionName": {
                      "name": "gt",
                      "nodeType": "YulIdentifier",
                      "src": "8666:2:85"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "8666:11:85"
                  },
                  "nodeType": "YulIf",
                  "src": "8663:37:85"
                }
              ]
            },
            "name": "checked_sub_t_uint256",
            "nodeType": "YulFunctionDefinition",
            "parameters": [
              {
                "name": "x",
                "nodeType": "YulTypedName",
                "src": "8609:1:85",
                "type": ""
              },
              {
                "name": "y",
                "nodeType": "YulTypedName",
                "src": "8612:1:85",
                "type": ""
              }
            ],
            "returnVariables": [
              {
                "name": "diff",
                "nodeType": "YulTypedName",
                "src": "8618:4:85",
                "type": ""
              }
            ],
            "src": "8578:128:85"
          },
          {
            "body": {
              "nodeType": "YulBlock",
              "src": "8885:172:85",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "name": "headStart",
                        "nodeType": "YulIdentifier",
                        "src": "8902:9:85"
                      },
                      {
                        "kind": "number",
                        "nodeType": "YulLiteral",
                        "src": "8913:2:85",
                        "type": "",
                        "value": "32"
                      }
                    ],
                    "functionName": {
                      "name": "mstore",
                      "nodeType": "YulIdentifier",
                      "src": "8895:6:85"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "8895:21:85"
                  },
                  "nodeType": "YulExpressionStatement",
                  "src": "8895:21:85"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "8936:9:85"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "8947:2:85",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "8932:3:85"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "8932:18:85"
                      },
                      {
                        "kind": "number",
                        "nodeType": "YulLiteral",
                        "src": "8952:2:85",
                        "type": "",
                        "value": "22"
                      }
                    ],
                    "functionName": {
                      "name": "mstore",
                      "nodeType": "YulIdentifier",
                      "src": "8925:6:85"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "8925:30:85"
                  },
                  "nodeType": "YulExpressionStatement",
                  "src": "8925:30:85"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "8975:9:85"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "8986:2:85",
                            "type": "",
                            "value": "64"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "8971:3:85"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "8971:18:85"
                      },
                      {
                        "hexValue": "6f766572666c6f772078317931206465746563746564",
                        "kind": "string",
                        "nodeType": "YulLiteral",
                        "src": "8991:24:85",
                        "type": "",
                        "value": "overflow x1y1 detected"
                      }
                    ],
                    "functionName": {
                      "name": "mstore",
                      "nodeType": "YulIdentifier",
                      "src": "8964:6:85"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "8964:52:85"
                  },
                  "nodeType": "YulExpressionStatement",
                  "src": "8964:52:85"
                },
                {
                  "nodeType": "YulAssignment",
                  "src": "9025:26:85",
                  "value": {
                    "arguments": [
                      {
                        "name": "headStart",
                        "nodeType": "YulIdentifier",
                        "src": "9037:9:85"
                      },
                      {
                        "kind": "number",
                        "nodeType": "YulLiteral",
                        "src": "9048:2:85",
                        "type": "",
                        "value": "96"
                      }
                    ],
                    "functionName": {
                      "name": "add",
                      "nodeType": "YulIdentifier",
                      "src": "9033:3:85"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "9033:18:85"
                  },
                  "variableNames": [
                    {
                      "name": "tail",
                      "nodeType": "YulIdentifier",
                      "src": "9025:4:85"
                    }
                  ]
                }
              ]
            },
            "name": "abi_encode_tuple_t_stringliteral_08c2c7829891f31a58a3b891760427262b5b3ee94befd0c6eee5d8d9f82fb381__to_t_string_memory_ptr__fromStack_reversed",
            "nodeType": "YulFunctionDefinition",
            "parameters": [
              {
                "name": "headStart",
                "nodeType": "YulTypedName",
                "src": "8862:9:85",
                "type": ""
              }
            ],
            "returnVariables": [
              {
                "name": "tail",
                "nodeType": "YulTypedName",
                "src": "8876:4:85",
                "type": ""
              }
            ],
            "src": "8711:346:85"
          },
          {
            "body": {
              "nodeType": "YulBlock",
              "src": "9236:181:85",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "name": "headStart",
                        "nodeType": "YulIdentifier",
                        "src": "9253:9:85"
                      },
                      {
                        "kind": "number",
                        "nodeType": "YulLiteral",
                        "src": "9264:2:85",
                        "type": "",
                        "value": "32"
                      }
                    ],
                    "functionName": {
                      "name": "mstore",
                      "nodeType": "YulIdentifier",
                      "src": "9246:6:85"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "9246:21:85"
                  },
                  "nodeType": "YulExpressionStatement",
                  "src": "9246:21:85"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "9287:9:85"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "9298:2:85",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "9283:3:85"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "9283:18:85"
                      },
                      {
                        "kind": "number",
                        "nodeType": "YulLiteral",
                        "src": "9303:2:85",
                        "type": "",
                        "value": "31"
                      }
                    ],
                    "functionName": {
                      "name": "mstore",
                      "nodeType": "YulIdentifier",
                      "src": "9276:6:85"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "9276:30:85"
                  },
                  "nodeType": "YulExpressionStatement",
                  "src": "9276:30:85"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "9326:9:85"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "9337:2:85",
                            "type": "",
                            "value": "64"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "9322:3:85"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "9322:18:85"
                      },
                      {
                        "hexValue": "6f766572666c6f772078317931202a20666978656431206465746563746564",
                        "kind": "string",
                        "nodeType": "YulLiteral",
                        "src": "9342:33:85",
                        "type": "",
                        "value": "overflow x1y1 * fixed1 detected"
                      }
                    ],
                    "functionName": {
                      "name": "mstore",
                      "nodeType": "YulIdentifier",
                      "src": "9315:6:85"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "9315:61:85"
                  },
                  "nodeType": "YulExpressionStatement",
                  "src": "9315:61:85"
                },
                {
                  "nodeType": "YulAssignment",
                  "src": "9385:26:85",
                  "value": {
                    "arguments": [
                      {
                        "name": "headStart",
                        "nodeType": "YulIdentifier",
                        "src": "9397:9:85"
                      },
                      {
                        "kind": "number",
                        "nodeType": "YulLiteral",
                        "src": "9408:2:85",
                        "type": "",
                        "value": "96"
                      }
                    ],
                    "functionName": {
                      "name": "add",
                      "nodeType": "YulIdentifier",
                      "src": "9393:3:85"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "9393:18:85"
                  },
                  "variableNames": [
                    {
                      "name": "tail",
                      "nodeType": "YulIdentifier",
                      "src": "9385:4:85"
                    }
                  ]
                }
              ]
            },
            "name": "abi_encode_tuple_t_stringliteral_d96960379c16e8468891ad17ca2621cab4771278df9373527845f3f6a3b4f52d__to_t_string_memory_ptr__fromStack_reversed",
            "nodeType": "YulFunctionDefinition",
            "parameters": [
              {
                "name": "headStart",
                "nodeType": "YulTypedName",
                "src": "9213:9:85",
                "type": ""
              }
            ],
            "returnVariables": [
              {
                "name": "tail",
                "nodeType": "YulTypedName",
                "src": "9227:4:85",
                "type": ""
              }
            ],
            "src": "9062:355:85"
          },
          {
            "body": {
              "nodeType": "YulBlock",
              "src": "9596:172:85",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "name": "headStart",
                        "nodeType": "YulIdentifier",
                        "src": "9613:9:85"
                      },
                      {
                        "kind": "number",
                        "nodeType": "YulLiteral",
                        "src": "9624:2:85",
                        "type": "",
                        "value": "32"
                      }
                    ],
                    "functionName": {
                      "name": "mstore",
                      "nodeType": "YulIdentifier",
                      "src": "9606:6:85"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "9606:21:85"
                  },
                  "nodeType": "YulExpressionStatement",
                  "src": "9606:21:85"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "9647:9:85"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "9658:2:85",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "9643:3:85"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "9643:18:85"
                      },
                      {
                        "kind": "number",
                        "nodeType": "YulLiteral",
                        "src": "9663:2:85",
                        "type": "",
                        "value": "22"
                      }
                    ],
                    "functionName": {
                      "name": "mstore",
                      "nodeType": "YulIdentifier",
                      "src": "9636:6:85"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "9636:30:85"
                  },
                  "nodeType": "YulExpressionStatement",
                  "src": "9636:30:85"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "9686:9:85"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "9697:2:85",
                            "type": "",
                            "value": "64"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "9682:3:85"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "9682:18:85"
                      },
                      {
                        "hexValue": "6f766572666c6f772078327931206465746563746564",
                        "kind": "string",
                        "nodeType": "YulLiteral",
                        "src": "9702:24:85",
                        "type": "",
                        "value": "overflow x2y1 detected"
                      }
                    ],
                    "functionName": {
                      "name": "mstore",
                      "nodeType": "YulIdentifier",
                      "src": "9675:6:85"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "9675:52:85"
                  },
                  "nodeType": "YulExpressionStatement",
                  "src": "9675:52:85"
                },
                {
                  "nodeType": "YulAssignment",
                  "src": "9736:26:85",
                  "value": {
                    "arguments": [
                      {
                        "name": "headStart",
                        "nodeType": "YulIdentifier",
                        "src": "9748:9:85"
                      },
                      {
                        "kind": "number",
                        "nodeType": "YulLiteral",
                        "src": "9759:2:85",
                        "type": "",
                        "value": "96"
                      }
                    ],
                    "functionName": {
                      "name": "add",
                      "nodeType": "YulIdentifier",
                      "src": "9744:3:85"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "9744:18:85"
                  },
                  "variableNames": [
                    {
                      "name": "tail",
                      "nodeType": "YulIdentifier",
                      "src": "9736:4:85"
                    }
                  ]
                }
              ]
            },
            "name": "abi_encode_tuple_t_stringliteral_ee5fdc3cc202a4e97d42a18abb6b74559ff48ee1cdea0f75c2216fd419ff5bee__to_t_string_memory_ptr__fromStack_reversed",
            "nodeType": "YulFunctionDefinition",
            "parameters": [
              {
                "name": "headStart",
                "nodeType": "YulTypedName",
                "src": "9573:9:85",
                "type": ""
              }
            ],
            "returnVariables": [
              {
                "name": "tail",
                "nodeType": "YulTypedName",
                "src": "9587:4:85",
                "type": ""
              }
            ],
            "src": "9422:346:85"
          },
          {
            "body": {
              "nodeType": "YulBlock",
              "src": "9947:172:85",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "name": "headStart",
                        "nodeType": "YulIdentifier",
                        "src": "9964:9:85"
                      },
                      {
                        "kind": "number",
                        "nodeType": "YulLiteral",
                        "src": "9975:2:85",
                        "type": "",
                        "value": "32"
                      }
                    ],
                    "functionName": {
                      "name": "mstore",
                      "nodeType": "YulIdentifier",
                      "src": "9957:6:85"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "9957:21:85"
                  },
                  "nodeType": "YulExpressionStatement",
                  "src": "9957:21:85"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "9998:9:85"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "10009:2:85",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "9994:3:85"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "9994:18:85"
                      },
                      {
                        "kind": "number",
                        "nodeType": "YulLiteral",
                        "src": "10014:2:85",
                        "type": "",
                        "value": "22"
                      }
                    ],
                    "functionName": {
                      "name": "mstore",
                      "nodeType": "YulIdentifier",
                      "src": "9987:6:85"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "9987:30:85"
                  },
                  "nodeType": "YulExpressionStatement",
                  "src": "9987:30:85"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "10037:9:85"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "10048:2:85",
                            "type": "",
                            "value": "64"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "10033:3:85"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "10033:18:85"
                      },
                      {
                        "hexValue": "6f766572666c6f772078317932206465746563746564",
                        "kind": "string",
                        "nodeType": "YulLiteral",
                        "src": "10053:24:85",
                        "type": "",
                        "value": "overflow x1y2 detected"
                      }
                    ],
                    "functionName": {
                      "name": "mstore",
                      "nodeType": "YulIdentifier",
                      "src": "10026:6:85"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "10026:52:85"
                  },
                  "nodeType": "YulExpressionStatement",
                  "src": "10026:52:85"
                },
                {
                  "nodeType": "YulAssignment",
                  "src": "10087:26:85",
                  "value": {
                    "arguments": [
                      {
                        "name": "headStart",
                        "nodeType": "YulIdentifier",
                        "src": "10099:9:85"
                      },
                      {
                        "kind": "number",
                        "nodeType": "YulLiteral",
                        "src": "10110:2:85",
                        "type": "",
                        "value": "96"
                      }
                    ],
                    "functionName": {
                      "name": "add",
                      "nodeType": "YulIdentifier",
                      "src": "10095:3:85"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "10095:18:85"
                  },
                  "variableNames": [
                    {
                      "name": "tail",
                      "nodeType": "YulIdentifier",
                      "src": "10087:4:85"
                    }
                  ]
                }
              ]
            },
            "name": "abi_encode_tuple_t_stringliteral_9cef4a5a3aaad4ff1b6c02bfe38ce8803855cabe0954c363e7c63adac3a7f3d7__to_t_string_memory_ptr__fromStack_reversed",
            "nodeType": "YulFunctionDefinition",
            "parameters": [
              {
                "name": "headStart",
                "nodeType": "YulTypedName",
                "src": "9924:9:85",
                "type": ""
              }
            ],
            "returnVariables": [
              {
                "name": "tail",
                "nodeType": "YulTypedName",
                "src": "9938:4:85",
                "type": ""
              }
            ],
            "src": "9773:346:85"
          },
          {
            "body": {
              "nodeType": "YulBlock",
              "src": "10298:172:85",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "name": "headStart",
                        "nodeType": "YulIdentifier",
                        "src": "10315:9:85"
                      },
                      {
                        "kind": "number",
                        "nodeType": "YulLiteral",
                        "src": "10326:2:85",
                        "type": "",
                        "value": "32"
                      }
                    ],
                    "functionName": {
                      "name": "mstore",
                      "nodeType": "YulIdentifier",
                      "src": "10308:6:85"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "10308:21:85"
                  },
                  "nodeType": "YulExpressionStatement",
                  "src": "10308:21:85"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "10349:9:85"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "10360:2:85",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "10345:3:85"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "10345:18:85"
                      },
                      {
                        "kind": "number",
                        "nodeType": "YulLiteral",
                        "src": "10365:2:85",
                        "type": "",
                        "value": "22"
                      }
                    ],
                    "functionName": {
                      "name": "mstore",
                      "nodeType": "YulIdentifier",
                      "src": "10338:6:85"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "10338:30:85"
                  },
                  "nodeType": "YulExpressionStatement",
                  "src": "10338:30:85"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "10388:9:85"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "10399:2:85",
                            "type": "",
                            "value": "64"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "10384:3:85"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "10384:18:85"
                      },
                      {
                        "hexValue": "6f766572666c6f772078327932206465746563746564",
                        "kind": "string",
                        "nodeType": "YulLiteral",
                        "src": "10404:24:85",
                        "type": "",
                        "value": "overflow x2y2 detected"
                      }
                    ],
                    "functionName": {
                      "name": "mstore",
                      "nodeType": "YulIdentifier",
                      "src": "10377:6:85"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "10377:52:85"
                  },
                  "nodeType": "YulExpressionStatement",
                  "src": "10377:52:85"
                },
                {
                  "nodeType": "YulAssignment",
                  "src": "10438:26:85",
                  "value": {
                    "arguments": [
                      {
                        "name": "headStart",
                        "nodeType": "YulIdentifier",
                        "src": "10450:9:85"
                      },
                      {
                        "kind": "number",
                        "nodeType": "YulLiteral",
                        "src": "10461:2:85",
                        "type": "",
                        "value": "96"
                      }
                    ],
                    "functionName": {
                      "name": "add",
                      "nodeType": "YulIdentifier",
                      "src": "10446:3:85"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "10446:18:85"
                  },
                  "variableNames": [
                    {
                      "name": "tail",
                      "nodeType": "YulIdentifier",
                      "src": "10438:4:85"
                    }
                  ]
                }
              ]
            },
            "name": "abi_encode_tuple_t_stringliteral_38611d20154e6cfee3b030675e538584e26d94d376147e11656ce521a20e1c97__to_t_string_memory_ptr__fromStack_reversed",
            "nodeType": "YulFunctionDefinition",
            "parameters": [
              {
                "name": "headStart",
                "nodeType": "YulTypedName",
                "src": "10275:9:85",
                "type": ""
              }
            ],
            "returnVariables": [
              {
                "name": "tail",
                "nodeType": "YulTypedName",
                "src": "10289:4:85",
                "type": ""
              }
            ],
            "src": "10124:346:85"
          },
          {
            "body": {
              "nodeType": "YulBlock",
              "src": "10523:77:85",
              "statements": [
                {
                  "nodeType": "YulAssignment",
                  "src": "10533:16:85",
                  "value": {
                    "arguments": [
                      {
                        "name": "x",
                        "nodeType": "YulIdentifier",
                        "src": "10544:1:85"
                      },
                      {
                        "name": "y",
                        "nodeType": "YulIdentifier",
                        "src": "10547:1:85"
                      }
                    ],
                    "functionName": {
                      "name": "add",
                      "nodeType": "YulIdentifier",
                      "src": "10540:3:85"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "10540:9:85"
                  },
                  "variableNames": [
                    {
                      "name": "sum",
                      "nodeType": "YulIdentifier",
                      "src": "10533:3:85"
                    }
                  ]
                },
                {
                  "body": {
                    "nodeType": "YulBlock",
                    "src": "10572:22:85",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [],
                          "functionName": {
                            "name": "panic_error_0x11",
                            "nodeType": "YulIdentifier",
                            "src": "10574:16:85"
                          },
                          "nodeType": "YulFunctionCall",
                          "src": "10574:18:85"
                        },
                        "nodeType": "YulExpressionStatement",
                        "src": "10574:18:85"
                      }
                    ]
                  },
                  "condition": {
                    "arguments": [
                      {
                        "name": "x",
                        "nodeType": "YulIdentifier",
                        "src": "10564:1:85"
                      },
                      {
                        "name": "sum",
                        "nodeType": "YulIdentifier",
                        "src": "10567:3:85"
                      }
                    ],
                    "functionName": {
                      "name": "gt",
                      "nodeType": "YulIdentifier",
                      "src": "10561:2:85"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "10561:10:85"
                  },
                  "nodeType": "YulIf",
                  "src": "10558:36:85"
                }
              ]
            },
            "name": "checked_add_t_uint256",
            "nodeType": "YulFunctionDefinition",
            "parameters": [
              {
                "name": "x",
                "nodeType": "YulTypedName",
                "src": "10506:1:85",
                "type": ""
              },
              {
                "name": "y",
                "nodeType": "YulTypedName",
                "src": "10509:1:85",
                "type": ""
              }
            ],
            "returnVariables": [
              {
                "name": "sum",
                "nodeType": "YulTypedName",
                "src": "10515:3:85",
                "type": ""
              }
            ],
            "src": "10475:125:85"
          },
          {
            "body": {
              "nodeType": "YulBlock",
              "src": "10779:171:85",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "name": "headStart",
                        "nodeType": "YulIdentifier",
                        "src": "10796:9:85"
                      },
                      {
                        "kind": "number",
                        "nodeType": "YulLiteral",
                        "src": "10807:2:85",
                        "type": "",
                        "value": "32"
                      }
                    ],
                    "functionName": {
                      "name": "mstore",
                      "nodeType": "YulIdentifier",
                      "src": "10789:6:85"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "10789:21:85"
                  },
                  "nodeType": "YulExpressionStatement",
                  "src": "10789:21:85"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "10830:9:85"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "10841:2:85",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "10826:3:85"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "10826:18:85"
                      },
                      {
                        "kind": "number",
                        "nodeType": "YulLiteral",
                        "src": "10846:2:85",
                        "type": "",
                        "value": "21"
                      }
                    ],
                    "functionName": {
                      "name": "mstore",
                      "nodeType": "YulIdentifier",
                      "src": "10819:6:85"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "10819:30:85"
                  },
                  "nodeType": "YulExpressionStatement",
                  "src": "10819:30:85"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "10869:9:85"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "10880:2:85",
                            "type": "",
                            "value": "64"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "10865:3:85"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "10865:18:85"
                      },
                      {
                        "hexValue": "616464206f766572666c6f77206465746563746564",
                        "kind": "string",
                        "nodeType": "YulLiteral",
                        "src": "10885:23:85",
                        "type": "",
                        "value": "add overflow detected"
                      }
                    ],
                    "functionName": {
                      "name": "mstore",
                      "nodeType": "YulIdentifier",
                      "src": "10858:6:85"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "10858:51:85"
                  },
                  "nodeType": "YulExpressionStatement",
                  "src": "10858:51:85"
                },
                {
                  "nodeType": "YulAssignment",
                  "src": "10918:26:85",
                  "value": {
                    "arguments": [
                      {
                        "name": "headStart",
                        "nodeType": "YulIdentifier",
                        "src": "10930:9:85"
                      },
                      {
                        "kind": "number",
                        "nodeType": "YulLiteral",
                        "src": "10941:2:85",
                        "type": "",
                        "value": "96"
                      }
                    ],
                    "functionName": {
                      "name": "add",
                      "nodeType": "YulIdentifier",
                      "src": "10926:3:85"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "10926:18:85"
                  },
                  "variableNames": [
                    {
                      "name": "tail",
                      "nodeType": "YulIdentifier",
                      "src": "10918:4:85"
                    }
                  ]
                }
              ]
            },
            "name": "abi_encode_tuple_t_stringliteral_cd070dd71146298b61a12aec695a33369db718b8b6d024c7f7e11725cdf3fc14__to_t_string_memory_ptr__fromStack_reversed",
            "nodeType": "YulFunctionDefinition",
            "parameters": [
              {
                "name": "headStart",
                "nodeType": "YulTypedName",
                "src": "10756:9:85",
                "type": ""
              }
            ],
            "returnVariables": [
              {
                "name": "tail",
                "nodeType": "YulTypedName",
                "src": "10770:4:85",
                "type": ""
              }
            ],
            "src": "10605:345:85"
          },
          {
            "body": {
              "nodeType": "YulBlock",
              "src": "11129:244:85",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "name": "headStart",
                        "nodeType": "YulIdentifier",
                        "src": "11146:9:85"
                      },
                      {
                        "kind": "number",
                        "nodeType": "YulLiteral",
                        "src": "11157:2:85",
                        "type": "",
                        "value": "32"
                      }
                    ],
                    "functionName": {
                      "name": "mstore",
                      "nodeType": "YulIdentifier",
                      "src": "11139:6:85"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "11139:21:85"
                  },
                  "nodeType": "YulExpressionStatement",
                  "src": "11139:21:85"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "11180:9:85"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "11191:2:85",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "11176:3:85"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "11176:18:85"
                      },
                      {
                        "kind": "number",
                        "nodeType": "YulLiteral",
                        "src": "11196:2:85",
                        "type": "",
                        "value": "54"
                      }
                    ],
                    "functionName": {
                      "name": "mstore",
                      "nodeType": "YulIdentifier",
                      "src": "11169:6:85"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "11169:30:85"
                  },
                  "nodeType": "YulExpressionStatement",
                  "src": "11169:30:85"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "11219:9:85"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "11230:2:85",
                            "type": "",
                            "value": "64"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "11215:3:85"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "11215:18:85"
                      },
                      {
                        "hexValue": "63616e277420637265617465206669786964697479206e756d626572206c6172",
                        "kind": "string",
                        "nodeType": "YulLiteral",
                        "src": "11235:34:85",
                        "type": "",
                        "value": "can't create fixidity number lar"
                      }
                    ],
                    "functionName": {
                      "name": "mstore",
                      "nodeType": "YulIdentifier",
                      "src": "11208:6:85"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "11208:62:85"
                  },
                  "nodeType": "YulExpressionStatement",
                  "src": "11208:62:85"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "11290:9:85"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "11301:2:85",
                            "type": "",
                            "value": "96"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "11286:3:85"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "11286:18:85"
                      },
                      {
                        "hexValue": "676572207468616e206d61784e657746697865642829",
                        "kind": "string",
                        "nodeType": "YulLiteral",
                        "src": "11306:24:85",
                        "type": "",
                        "value": "ger than maxNewFixed()"
                      }
                    ],
                    "functionName": {
                      "name": "mstore",
                      "nodeType": "YulIdentifier",
                      "src": "11279:6:85"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "11279:52:85"
                  },
                  "nodeType": "YulExpressionStatement",
                  "src": "11279:52:85"
                },
                {
                  "nodeType": "YulAssignment",
                  "src": "11340:27:85",
                  "value": {
                    "arguments": [
                      {
                        "name": "headStart",
                        "nodeType": "YulIdentifier",
                        "src": "11352:9:85"
                      },
                      {
                        "kind": "number",
                        "nodeType": "YulLiteral",
                        "src": "11363:3:85",
                        "type": "",
                        "value": "128"
                      }
                    ],
                    "functionName": {
                      "name": "add",
                      "nodeType": "YulIdentifier",
                      "src": "11348:3:85"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "11348:19:85"
                  },
                  "variableNames": [
                    {
                      "name": "tail",
                      "nodeType": "YulIdentifier",
                      "src": "11340:4:85"
                    }
                  ]
                }
              ]
            },
            "name": "abi_encode_tuple_t_stringliteral_592143e78f2c6dc3bbe5dd3dc8545640983a585659065fe88d523a4bca0bb535__to_t_string_memory_ptr__fromStack_reversed",
            "nodeType": "YulFunctionDefinition",
            "parameters": [
              {
                "name": "headStart",
                "nodeType": "YulTypedName",
                "src": "11106:9:85",
                "type": ""
              }
            ],
            "returnVariables": [
              {
                "name": "tail",
                "nodeType": "YulTypedName",
                "src": "11120:4:85",
                "type": ""
              }
            ],
            "src": "10955:418:85"
          },
          {
            "body": {
              "nodeType": "YulBlock",
              "src": "11552:167:85",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "name": "headStart",
                        "nodeType": "YulIdentifier",
                        "src": "11569:9:85"
                      },
                      {
                        "kind": "number",
                        "nodeType": "YulLiteral",
                        "src": "11580:2:85",
                        "type": "",
                        "value": "32"
                      }
                    ],
                    "functionName": {
                      "name": "mstore",
                      "nodeType": "YulIdentifier",
                      "src": "11562:6:85"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "11562:21:85"
                  },
                  "nodeType": "YulExpressionStatement",
                  "src": "11562:21:85"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "11603:9:85"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "11614:2:85",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "11599:3:85"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "11599:18:85"
                      },
                      {
                        "kind": "number",
                        "nodeType": "YulLiteral",
                        "src": "11619:2:85",
                        "type": "",
                        "value": "17"
                      }
                    ],
                    "functionName": {
                      "name": "mstore",
                      "nodeType": "YulIdentifier",
                      "src": "11592:6:85"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "11592:30:85"
                  },
                  "nodeType": "YulExpressionStatement",
                  "src": "11592:30:85"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "11642:9:85"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "11653:2:85",
                            "type": "",
                            "value": "64"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "11638:3:85"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "11638:18:85"
                      },
                      {
                        "hexValue": "63616e2774206469766964652062792030",
                        "kind": "string",
                        "nodeType": "YulLiteral",
                        "src": "11658:19:85",
                        "type": "",
                        "value": "can't divide by 0"
                      }
                    ],
                    "functionName": {
                      "name": "mstore",
                      "nodeType": "YulIdentifier",
                      "src": "11631:6:85"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "11631:47:85"
                  },
                  "nodeType": "YulExpressionStatement",
                  "src": "11631:47:85"
                },
                {
                  "nodeType": "YulAssignment",
                  "src": "11687:26:85",
                  "value": {
                    "arguments": [
                      {
                        "name": "headStart",
                        "nodeType": "YulIdentifier",
                        "src": "11699:9:85"
                      },
                      {
                        "kind": "number",
                        "nodeType": "YulLiteral",
                        "src": "11710:2:85",
                        "type": "",
                        "value": "96"
                      }
                    ],
                    "functionName": {
                      "name": "add",
                      "nodeType": "YulIdentifier",
                      "src": "11695:3:85"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "11695:18:85"
                  },
                  "variableNames": [
                    {
                      "name": "tail",
                      "nodeType": "YulIdentifier",
                      "src": "11687:4:85"
                    }
                  ]
                }
              ]
            },
            "name": "abi_encode_tuple_t_stringliteral_444fef91477c6a4b43c9c52c0111f2514856c1d7321d747a88d09f670bb1d6ea__to_t_string_memory_ptr__fromStack_reversed",
            "nodeType": "YulFunctionDefinition",
            "parameters": [
              {
                "name": "headStart",
                "nodeType": "YulTypedName",
                "src": "11529:9:85",
                "type": ""
              }
            ],
            "returnVariables": [
              {
                "name": "tail",
                "nodeType": "YulTypedName",
                "src": "11543:4:85",
                "type": ""
              }
            ],
            "src": "11378:341:85"
          },
          {
            "body": {
              "nodeType": "YulBlock",
              "src": "11898:168:85",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "name": "headStart",
                        "nodeType": "YulIdentifier",
                        "src": "11915:9:85"
                      },
                      {
                        "kind": "number",
                        "nodeType": "YulLiteral",
                        "src": "11926:2:85",
                        "type": "",
                        "value": "32"
                      }
                    ],
                    "functionName": {
                      "name": "mstore",
                      "nodeType": "YulIdentifier",
                      "src": "11908:6:85"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "11908:21:85"
                  },
                  "nodeType": "YulExpressionStatement",
                  "src": "11908:21:85"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "11949:9:85"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "11960:2:85",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "11945:3:85"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "11945:18:85"
                      },
                      {
                        "kind": "number",
                        "nodeType": "YulLiteral",
                        "src": "11965:2:85",
                        "type": "",
                        "value": "18"
                      }
                    ],
                    "functionName": {
                      "name": "mstore",
                      "nodeType": "YulIdentifier",
                      "src": "11938:6:85"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "11938:30:85"
                  },
                  "nodeType": "YulExpressionStatement",
                  "src": "11938:30:85"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "11988:9:85"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "11999:2:85",
                            "type": "",
                            "value": "64"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "11984:3:85"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "11984:18:85"
                      },
                      {
                        "hexValue": "6f766572666c6f7720617420646976696465",
                        "kind": "string",
                        "nodeType": "YulLiteral",
                        "src": "12004:20:85",
                        "type": "",
                        "value": "overflow at divide"
                      }
                    ],
                    "functionName": {
                      "name": "mstore",
                      "nodeType": "YulIdentifier",
                      "src": "11977:6:85"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "11977:48:85"
                  },
                  "nodeType": "YulExpressionStatement",
                  "src": "11977:48:85"
                },
                {
                  "nodeType": "YulAssignment",
                  "src": "12034:26:85",
                  "value": {
                    "arguments": [
                      {
                        "name": "headStart",
                        "nodeType": "YulIdentifier",
                        "src": "12046:9:85"
                      },
                      {
                        "kind": "number",
                        "nodeType": "YulLiteral",
                        "src": "12057:2:85",
                        "type": "",
                        "value": "96"
                      }
                    ],
                    "functionName": {
                      "name": "add",
                      "nodeType": "YulIdentifier",
                      "src": "12042:3:85"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "12042:18:85"
                  },
                  "variableNames": [
                    {
                      "name": "tail",
                      "nodeType": "YulIdentifier",
                      "src": "12034:4:85"
                    }
                  ]
                }
              ]
            },
            "name": "abi_encode_tuple_t_stringliteral_7eb0e6f925e8cd9026275f1c9c94e3d1e59b3301833fba8004c9da34d1eff12f__to_t_string_memory_ptr__fromStack_reversed",
            "nodeType": "YulFunctionDefinition",
            "parameters": [
              {
                "name": "headStart",
                "nodeType": "YulTypedName",
                "src": "11875:9:85",
                "type": ""
              }
            ],
            "returnVariables": [
              {
                "name": "tail",
                "nodeType": "YulTypedName",
                "src": "11889:4:85",
                "type": ""
              }
            ],
            "src": "11724:342:85"
          }
        ]
      },
      "contents": "{\n    { }\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, iszero(iszero(value0)))\n    }\n    function abi_decode_tuple_t_uint256(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := calldataload(headStart)\n    }\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_encode_tuple_t_uint256_t_uint256_t_uint256_t_uint256__to_t_uint256_t_uint256_t_uint256_t_uint256__fromStack_reversed(headStart, value3, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 128)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), value1)\n        mstore(add(headStart, 64), value2)\n        mstore(add(headStart, 96), value3)\n    }\n    function abi_encode_tuple_t_contract$_IRegistry_$17608__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n    }\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n    }\n    function validator_revert_address(value)\n    {\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n    }\n    function abi_decode_tuple_t_uint256t_uint256(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := calldataload(headStart)\n        value1 := calldataload(add(headStart, 32))\n    }\n    function abi_decode_tuple_t_addresst_uint256t_uint256t_uint256t_uint256(headStart, dataEnd) -> value0, value1, value2, value3, value4\n    {\n        if slt(sub(dataEnd, headStart), 160) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n        value1 := calldataload(add(headStart, 32))\n        value2 := calldataload(add(headStart, 64))\n        value3 := calldataload(add(headStart, 96))\n        value4 := calldataload(add(headStart, 128))\n    }\n    function abi_encode_tuple_t_stringliteral_1ca525b7c92ab0b7df54934c50022a14e556f23c4839d801f989aa9d9a315b5d__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 39)\n        mstore(add(headStart, 64), \"adjustment speed must be smaller\")\n        mstore(add(headStart, 96), \" than 1\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_de9fc88c13166a48d03981dcc23a666759f32cad49458a022b7a646309293f6e__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 37)\n        mstore(add(headStart, 64), \"target density must be smaller t\")\n        mstore(add(headStart, 96), \"han 1\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_b421fd6a276ccb4cd9aa78e3abb2c3737827239503a8378bfb1b144b3eb6c5b8__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 32)\n        mstore(add(headStart, 64), \"Cannot register the null address\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_8930b1a1fce9c6c6ac87e8e1f4ca019a03f6b66006482ef580a68eacea7bcd7b__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 49)\n        mstore(add(headStart, 64), \"gas price minimum floor must be \")\n        mstore(add(headStart, 96), \"greater than zero\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_952607dfd16d11dfdf90c18f6142a68af14c41694106cb4ca9d22c7c3186d750__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 16)\n        mstore(add(headStart, 64), \"Only VM can call\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 38)\n        mstore(add(headStart, 64), \"Ownable: new owner is the zero a\")\n        mstore(add(headStart, 96), \"ddress\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_0eaa08b63d5ee9e058835eb2dc7a36f8bcf5c2ea6d8d745d8265f9e4063fd134__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 28)\n        mstore(add(headStart, 64), \"contract already initialized\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 32)\n        mstore(add(headStart, 64), \"Ownable: caller is not the owner\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_6b58fe460f24176f3213b61028eeed65350ffc7614db8ee67f6cecd2e8cd9d28__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 41)\n        mstore(add(headStart, 64), \"This method is no longer support\")\n        mstore(add(headStart, 96), \"ed in L2.\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_d9d51394b275342b564f39c329f58641636f622b7ee20b0abef6182e70e4bf06__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 57)\n        mstore(add(headStart, 64), \"baseFee opCode activation block \")\n        mstore(add(headStart, 96), \"must be greater than zero\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_packed_t_stringliteral_a3bf392f34150f84db7aaff1f18e6e51f7e38850760f779b6db33e8f4e043d3d__to_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed(pos) -> end\n    {\n        mstore(pos, \"CeloToken\")\n        end := add(pos, 9)\n    }\n    function abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_decode_tuple_t_address_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := mload(headStart)\n        validator_revert_address(value)\n        value0 := value\n    }\n    function abi_encode_tuple_packed_t_stringliteral_ab7ca110ac6f740fa4bdcd667652ab6f883b80daaedaf0cb53396dc5d5be6f2c__to_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed(pos) -> end\n    {\n        mstore(pos, \"SortedOracles\")\n        end := add(pos, 13)\n    }\n    function abi_decode_tuple_t_uint256t_uint256_fromMemory(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := mload(headStart)\n        value1 := mload(add(headStart, 32))\n    }\n    function panic_error_0x11()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n    function checked_mul_t_uint256(x, y) -> product\n    {\n        product := mul(x, y)\n        if iszero(or(iszero(x), eq(y, div(product, x)))) { panic_error_0x11() }\n    }\n    function checked_div_t_uint256(x, y) -> r\n    {\n        if iszero(y)\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x12)\n            revert(0, 0x24)\n        }\n        r := div(x, y)\n    }\n    function abi_encode_tuple_t_stringliteral_103c760282d8757dce4d729c716fb02b3d489bf6f0d52b4ecab5f48cb6a08d2f__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 31)\n        mstore(add(headStart, 64), \"substraction underflow detected\")\n        tail := add(headStart, 96)\n    }\n    function checked_sub_t_uint256(x, y) -> diff\n    {\n        diff := sub(x, y)\n        if gt(diff, x) { panic_error_0x11() }\n    }\n    function abi_encode_tuple_t_stringliteral_08c2c7829891f31a58a3b891760427262b5b3ee94befd0c6eee5d8d9f82fb381__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 22)\n        mstore(add(headStart, 64), \"overflow x1y1 detected\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_d96960379c16e8468891ad17ca2621cab4771278df9373527845f3f6a3b4f52d__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 31)\n        mstore(add(headStart, 64), \"overflow x1y1 * fixed1 detected\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_ee5fdc3cc202a4e97d42a18abb6b74559ff48ee1cdea0f75c2216fd419ff5bee__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 22)\n        mstore(add(headStart, 64), \"overflow x2y1 detected\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_9cef4a5a3aaad4ff1b6c02bfe38ce8803855cabe0954c363e7c63adac3a7f3d7__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 22)\n        mstore(add(headStart, 64), \"overflow x1y2 detected\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_38611d20154e6cfee3b030675e538584e26d94d376147e11656ce521a20e1c97__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 22)\n        mstore(add(headStart, 64), \"overflow x2y2 detected\")\n        tail := add(headStart, 96)\n    }\n    function checked_add_t_uint256(x, y) -> sum\n    {\n        sum := add(x, y)\n        if gt(x, sum) { panic_error_0x11() }\n    }\n    function abi_encode_tuple_t_stringliteral_cd070dd71146298b61a12aec695a33369db718b8b6d024c7f7e11725cdf3fc14__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 21)\n        mstore(add(headStart, 64), \"add overflow detected\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_592143e78f2c6dc3bbe5dd3dc8545640983a585659065fe88d523a4bca0bb535__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 54)\n        mstore(add(headStart, 64), \"can't create fixidity number lar\")\n        mstore(add(headStart, 96), \"ger than maxNewFixed()\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_444fef91477c6a4b43c9c52c0111f2514856c1d7321d747a88d09f670bb1d6ea__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 17)\n        mstore(add(headStart, 64), \"can't divide by 0\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_7eb0e6f925e8cd9026275f1c9c94e3d1e59b3301833fba8004c9da34d1eff12f__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 18)\n        mstore(add(headStart, 64), \"overflow at divide\")\n        tail := add(headStart, 96)\n    }\n}",
      "id": 85,
      "language": "Yul",
      "name": "#utility.yul"
    }
  ],
  "sourceMap": "608:10202:10:-:0;;;1703:45;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;1740:4;936:32:0;719:10:2;936:18:0;:32::i;:::-;896:17:59;891:57;;923:11;:18;;-1:-1:-1;;;;923:18:59;-1:-1:-1;;;923:18:59;;;891:57;842:110;1703:45:10;608:10202;;2426:187:0;2499:16;2518:6;;-1:-1:-1;;;;;2534:17:0;;;-1:-1:-1;;;;;;2534:17:0;;;;;;2566:40;;2518:6;;;;;;;2566:40;;2499:16;2566:40;2489:124;2426:187;:::o;14:277:85:-;81:6;134:2;122:9;113:7;109:23;105:32;102:52;;;150:1;147;140:12;102:52;182:9;176:16;235:5;228:13;221:21;214:5;211:32;201:60;;257:1;254;247:12;201:60;280:5;14:277;-1:-1:-1;;;14:277:85:o;:::-;608:10202:10;;;;;;",
  "deployedSourceMap": "608:10202:10:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;319:23:59;;;;;-1:-1:-1;;;319:23:59;;;;;;;;;179:14:85;;172:22;154:41;;142:2;127:18;319:23:59;;;;;;;;5401:326:10;;;;;;:::i;:::-;;:::i;:::-;;6853:289;;;:::i;:::-;;;537:25:85;;;525:2;510:18;6853:289:10;391:177:85;8983:115:10;;;:::i;3063:195::-;;;;;;:::i;:::-;;:::i;5047:117::-;;;;5148:1;804:25:85;;;5151:1:10;860:2:85;845:18;;838:34;888:18;;;881:34;;;;5098:7:10;946:2:85;931:18;;924:34;791:3;776:19;5047:117:10;573:391:85;1824:101:0;;;:::i;3794:25:18:-;;;;;-1:-1:-1;;;;;3794:25:18;;;;;;-1:-1:-1;;;;;1152:32:85;;;1134:51;;1122:2;1107:18;3794:25:18;969:222:85;1201:85:0;1247:7;1273:6;-1:-1:-1;;;;;1273:6:0;1201:85;;9435:136:10;;;:::i;5958:310::-;;;;;;:::i;:::-;;:::i;4593:178::-;;;;;;:::i;:::-;;:::i;9192:119::-;;;:::i;4398:230:18:-;;;;;;:::i;:::-;;:::i;6453:304:10:-;;;;;;:::i;:::-;;:::i;3573:325::-;;;;;;:::i;:::-;;:::i;8773:120::-;;;:::i;7598:1067::-;;;;;;:::i;:::-;;:::i;2074:198:0:-;;;;;;:::i;:::-;;:::i;2304:550:10:-;;;;;;:::i;:::-;;:::i;5401:326::-;1094:13:0;:11;:13::i;:::-;328::11::1;:11;:13::i;:::-;-1:-1:-1::0;;;;;;;;;;;;;;1630:11:58;;;;;;;;;;5485:26:10::2;:63:::0;;;-1:-1:-1;;;;;;;;;;;1301:21:58;;;;;;;889:25;1301:21;;5569:29:10;;;;::::2;::::0;;;;;;9949:7:58;9939:17;;5554:121:10::2;;;::::0;-1:-1:-1;;;5554:121:10;;2773:2:85;5554:121:10::2;::::0;::::2;2755:21:85::0;2812:2;2792:18;;;2785:30;2851:34;2831:18;;;2824:62;-1:-1:-1;;;2902:18:85;;;2895:37;2949:19;;5554:121:10::2;;;;;;;;;5686:36;::::0;537:25:85;;;5686:36:10::2;::::0;525:2:85;510:18;5686:36:10::2;;;;;;;;5401:326:::0;:::o;6853:289::-;6908:7;328:13:11;:11;:13::i;:::-;6976:1:10::1;6934:39;;:43;:108;;;;;7003:39;;6987:12;:55;;6934:108;6923:215;;;-1:-1:-1::0;7064:13:10::1;6853:289:::0;:::o;6923:215::-:1;-1:-1:-1::0;7105:26:10::1;::::0;6853:289;:::o;8983:115::-;9038:7;328:13:11;:11;:13::i;:::-;-1:-1:-1;9060:31:10::1;::::0;;::::1;::::0;::::1;::::0;;;:24:::1;:31:::0;;;;;;8983:115::o;3063:195::-;1094:13:0;:11;:13::i;:::-;328::11::1;:11;:13::i;:::-;3183:70:10::2;3216:29;3247:5;3183:32;:70::i;:::-;3063:195:::0;:::o;1824:101:0:-;1094:13;:11;:13::i;:::-;1888:30:::1;1915:1;1888:18;:30::i;:::-;1824:101::o:0;9435:136:10:-;9505:7;328:13:11;:11;:13::i;:::-;-1:-1:-1;9527:39:10::1;::::0;9435:136;:::o;5958:310::-;1094:13:0;:11;:13::i;:::-;328::11::1;:11;:13::i;:::-;-1:-1:-1::0;;;;;;;;;;;;;;1630:11:58;;;;;;;;;;6038:24:10::2;:59:::0;;;-1:-1:-1;;;;;;;;;;;1301:21:58;;;;;;;889:25;1301:21;;6118:27:10;;;;::::2;::::0;;;;;;9949:7:58;9939:17;;6103:117:10::2;;;::::0;-1:-1:-1;;;6103:117:10;;3181:2:85;6103:117:10::2;::::0;::::2;3163:21:85::0;3220:2;3200:18;;;3193:30;3259:34;3239:18;;;3232:62;-1:-1:-1;;;3310:18:85;;;3303:35;3355:19;;6103:117:10::2;2979:401:85::0;6103:117:10::2;6231:32;::::0;537:25:85;;;6231:32:10::2;::::0;525:2:85;510:18;6231:32:10::2;391:177:85::0;4593:178:10;4673:7;328:13:11;:11;:13::i;:::-;4695:71:10::1;4704:33;4724:12;4704:19;:33::i;:::-;1250:1;4695:8;:71::i;:::-;4688:78:::0;4593:178;-1:-1:-1;;4593:178:10:o;9192:119::-;9249:7;328:13:11;:11;:13::i;:::-;-1:-1:-1;9271:33:10::1;::::0;;::::1;::::0;::::1;::::0;;;:26:::1;:33:::0;;;;;;8983:115::o;4398:230:18:-;1094:13:0;:11;:13::i;:::-;-1:-1:-1;;;;;4475:29:18;::::1;4467:74;;;::::0;-1:-1:-1;;;4467:74:18;;3587:2:85;4467:74:18::1;::::0;::::1;3569:21:85::0;;;3606:18;;;3599:30;3665:34;3645:18;;;3638:62;3717:18;;4467:74:18::1;3385:356:85::0;4467:74:18::1;4547:8;:37:::0;;-1:-1:-1;;;;;;4547:37:18::1;-1:-1:-1::0;;;;;4547:37:18;::::1;::::0;;::::1;::::0;;;4595:28:::1;::::0;::::1;::::0;-1:-1:-1;;4595:28:18::1;4398:230:::0;:::o;6453:304:10:-;1094:13:0;:11;:13::i;:::-;328::11::1;:11;:13::i;:::-;6579:1:10::2;6555:21;:25;6547:87;;;::::0;-1:-1:-1;;;6547:87:10;;3948:2:85;6547:87:10::2;::::0;::::2;3930:21:85::0;3987:2;3967:18;;;3960:30;4026:34;4006:18;;;3999:62;-1:-1:-1;;;4077:18:85;;;4070:47;4134:19;;6547:87:10::2;3746:413:85::0;6547:87:10::2;6640:31;:55:::0;;;6706:46:::2;::::0;537:25:85;;;6706:46:10::2;::::0;525:2:85;510:18;6706:46:10::2;391:177:85::0;3573:325:10;3694:7;132:10:57;:24;124:53;;;;-1:-1:-1;;;124:53:57;;4366:2:85;124:53:57;;;4348:21:85;4405:2;4385:18;;;4378:30;-1:-1:-1;;;4424:18:85;;;4417:46;4480:18;;124:53:57;4164:340:85;124:53:57;328:13:11::1;:11;:13::i;:::-;3738:55:10::2;3764:13;3779;3738:25;:55::i;:::-;3709:26;:84:::0;;;3804:50:::2;::::0;537:25:85;;;3804:50:10::2;::::0;525:2:85;510:18;3804:50:10::2;;;;;;;-1:-1:-1::0;3867:26:10::2;::::0;3573:325;;;;:::o;8773:120::-;8835:7;328:13:11;:11;:13::i;:::-;-1:-1:-1;8857:31:10::1;::::0;8773:120;:::o;7598:1067::-;7719:7;328:13:11;:11;:13::i;:::-;7734:40:10::1;7777:76;7813:13;7834;7777:28;:76::i;:::-;7891:41;::::0;;::::1;::::0;::::1;::::0;;;7907:24:::1;7891:41:::0;;;;;9638:7:58;;;;-1:-1:-1;;;9638:17:58;7981:136:10::1;;8070:33;::::0;;::::1;::::0;::::1;::::0;;;:24:::1;:33:::0;;;:47:::1;::::0;8104:12;8070:33:::1;:47::i;:::-;7981:136;;;8014:47;::::0;;::::1;::::0;::::1;::::0;;;8036:24:::1;8014:47:::0;;;::::1;::::0;:12;;:21:::1;:47::i;:::-;7938:179;;8123:38;8164:24;:197;;8311:35;::::0;;::::1;::::0;::::1;::::0;;;:26:::1;:35:::0;;;8281:80:::1;::::0;8311:49:::1;::::0;8347:12;8311:35:::1;:49::i;:::-;-1:-1:-1::0;;;;;;;;;;;;;1301:21:58;;;;;;;;889:25;1301:21;;8281:29:10;::::1;:80::i;:::-;8164:197;;;8222:35;::::0;;::::1;::::0;::::1;::::0;;;:26:::1;:35:::0;;;8197:75:::1;::::0;8222:49:::1;::::0;8258:12;8222:35:::1;:49::i;:::-;-1:-1:-1::0;;;;;;;;;;;;;1301:21:58;;;;;;;;889:25;1301:21;;8197:20:10::1;:24:::0;::::1;:75::i;:::-;8123:238;;8368:26;8397:119;:100;8476:20;-1:-1:-1::0;;;;;;;;;;;;;1301:21:58;;;;;;;;889:25;1301:21;;;1230:97;8476:20:10::1;8397:67;8424:39;8445:17;:15;:17::i;:::-;8424:20;:39::i;:::-;8397:10:::0;;:26:::1;:67::i;:100::-;:117;:119::i;:::-;8368:148;;8558:31;;8536:18;:53;;:124;;8629:31;;8536:124;;;8600:18;8536:124;8523:137:::0;7598:1067;-1:-1:-1;;;;;;;;7598:1067:10:o;2074:198:0:-;1094:13;:11;:13::i;:::-;-1:-1:-1;;;;;2162:22:0;::::1;2154:73;;;::::0;-1:-1:-1;;;2154:73:0;;4711:2:85;2154:73:0::1;::::0;::::1;4693:21:85::0;4750:2;4730:18;;;4723:30;4789:34;4769:18;;;4762:62;-1:-1:-1;;;4840:18:85;;;4833:36;4886:19;;2154:73:0::1;4509:402:85::0;2154:73:0::1;2237:28;2256:8;2237:18;:28::i;2304:550:10:-:0;476:11:59;;-1:-1:-1;;;476:11:59;;;;475:12;467:53;;;;-1:-1:-1;;;467:53:59;;5118:2:85;467:53:59;;;5100:21:85;5157:2;5137:18;;;5130:30;5196;5176:18;;;5169:58;5244:18;;467:53:59;4916:352:85;467:53:59;526:11;:18;;-1:-1:-1;;;;526:18:59;-1:-1:-1;;;526:18:59;;;2521:30:10::1;2540:10;2521:18;:30::i;:::-;2557:29;2569:16;2557:11;:29::i;:::-;2592:26;:50:::0;;;2648:46:::1;2621:21:::0;2648:23:::1;:46::i;:::-;2700:32;2717:14;2700:16;:32::i;:::-;2738:36;2757:16;2738:18;:36::i;:::-;2780:69;2813:29;2844:4;2780:32;:69::i;:::-;2304:550:::0;;;;;:::o;1359:130:0:-;1247:7;1273:6;-1:-1:-1;;;;;1273:6:0;719:10:2;1422:23:0;1414:68;;;;-1:-1:-1;;;1414:68:0;;5475:2:85;1414:68:0;;;5457:21:85;;;5494:18;;;5487:30;5553:34;5533:18;;;5526:62;5605:18;;1414:68:0;5273:356:85;975:125:11;-1:-1:-1;;;;;782:18:11;819:8;;;1018:78;;1038:51;;-1:-1:-1;;;1038:51:11;;5836:2:85;1038:51:11;;;5818:21:85;5875:2;5855:18;;;5848:30;5914:34;5894:18;;;5887:62;-1:-1:-1;;;5965:18:85;;;5958:39;6014:19;;1038:51:11;5634:405:85;9780:422:10;1094:13:0;:11;:13::i;:::-;9928:9:10::1;:46;;;;9973:1;9941:29;:33;9928:46;9913:134;;;::::0;-1:-1:-1;;;9913:134:10;;6246:2:85;9913:134:10::1;::::0;::::1;6228:21:85::0;6285:2;6265:18;;;6258:30;6324:34;6304:18;;;6297:62;6395:27;6375:18;;;6368:55;6440:19;;9913:134:10::1;6044:421:85::0;9913:134:10::1;10053:39;:71:::0;;;10135:62:::1;::::0;537:25:85;;;10135:62:10::1;::::0;525:2:85;510:18;10135:62:10::1;;;;;;;9780:422:::0;;:::o;2426:187:0:-;2499:16;2518:6;;-1:-1:-1;;;;;2534:17:0;;;-1:-1:-1;;;;;;2534:17:0;;;;;;2566:40;;2518:6;;;;;;;2566:40;;2499:16;2566:40;2489:124;2426:187;:::o;10206:602:10:-;10279:7;-1:-1:-1;;;;;10305:26:10;;;;:103;;-1:-1:-1;10357:8:10;;3222:29:18;;-1:-1:-1;;;3222:29:18;;;6672:24:85;-1:-1:-1;;;;;10357:8:10;;;;:27;;6712:11:85;;3222:29:18;;;;;;;;;;;;3212:40;;;;;;10357:51:10;;;;;;;;;;;;;537:25:85;;525:2;510:18;;391:177;10357:51:10;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;;;;;10341:67:10;:12;-1:-1:-1;;;;;10341:67:10;;10305:103;10294:510;;;10430:17;:15;:17::i;10294:510::-;10523:8;;2842:33:18;;-1:-1:-1;;;2842:33:18;;;7374:28:85;10468::10;;-1:-1:-1;;;;;10523:8:10;;:27;;7418:12:85;;2842:33:18;;;;;;;;;;;;2832:44;;;;;;10523:55:10;;;;;;;;;;;;;537:25:85;;525:2;510:18;;391:177;10523:55:10;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;10689:38;;-1:-1:-1;;;10689:38:10;;-1:-1:-1;;;;;1152:32:85;;;10689:38:10;;;1134:51:85;10468:118:10;;-1:-1:-1;10594:21:10;;;;10689:24;;;;;;1107:18:85;;10689:38:10;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;10654:73;;-1:-1:-1;10654:73:10;-1:-1:-1;10654:73:10;;10744:17;:15;:17::i;:::-;:33;;;;:::i;:::-;10743:53;;;;:::i;:::-;10735:62;10206:602;-1:-1:-1;;;;;10206:602:10:o;413:104:4:-;471:7;501:1;497;:5;:13;;509:1;497:13;;;505:1;497:13;490:20;413:104;-1:-1:-1;;;413:104:4:o;3565:312:58:-;-1:-1:-1;;;;;;;;;;;;3689:34:58;3726:19;3735:9;3726:8;:19::i;:::-;3689:56;;3751:36;3790:21;3799:11;3790:8;:21::i;:::-;3751:60;;3824:48;3831:18;3851:20;3824:6;:48::i;5389:209::-;-1:-1:-1;;;;;;;;;;;;5510:7:58;;5499;;:18;;5491:62;;;;-1:-1:-1;;;5491:62:58;;8420:2:85;5491:62:58;;;8402:21:85;8459:2;8439:18;;;8432:30;8498:33;8478:18;;;8471:61;8549:18;;5491:62:58;8218:355:85;5491:62:58;5566:27;;;;;;;;;5585:7;;5575;;5566:27;;5575:17;;;:::i;:::-;5566:27;;5559:34;5389:209;-1:-1:-1;;;5389:209:58:o;6254:1636::-;-1:-1:-1;;;;;;;;;;;;6360:7:58;;:12;;:28;;-1:-1:-1;6376:7:58;;:12;6360:28;6356:52;;;-1:-1:-1;6397:11:58;;;;;;;;;-1:-1:-1;6397:11:58;;6390:18;;6356:52;6418:7;;-1:-1:-1;;6418:22:58;6414:36;;-1:-1:-1;6449:1:58;6442:8;;6414:36;6460:7;;-1:-1:-1;;6460:22:58;6456:36;;-1:-1:-1;6491:1:58;6484:8;;6456:36;6581:10;889:25;6594:10;6602:1;6594:7;:10::i;:::-;:16;:30;;;;:::i;:::-;6581:43;;6630:10;6643:13;6654:1;6643:10;:13::i;:::-;:19;;-1:-1:-1;6643:19:58;889:25;6681:10;6689:1;6681:7;:10::i;:::-;:16;:30;;;;:::i;:::-;6668:43;;6717:10;6730:13;6741:1;6730:10;:13::i;:::-;:19;;-1:-1:-1;6730:19:58;6848:7;6853:2;6848;:7;:::i;:::-;6833:22;-1:-1:-1;6865:7:58;;6861:63;;6895:2;6882:9;6889:2;6882:4;:9;:::i;:::-;:15;6874:50;;;;-1:-1:-1;;;6874:50:58;;8913:2:85;6874:50:58;;;8895:21:85;8952:2;8932:18;;;8925:30;-1:-1:-1;;;8971:18:85;;;8964:52;9033:18;;6874:50:58;8711:346:85;6874:50:58;7023:18;7044;889:25;7044:4;:18;:::i;:::-;7023:39;-1:-1:-1;7072:9:58;;7068:91;;889:25;7091:17;7104:4;7091:10;:17;:::i;:::-;:32;7083:76;;;;-1:-1:-1;;;7083:76:58;;9264:2:85;7083:76:58;;;9246:21:85;9303:2;9283:18;;;9276:30;9342:33;9322:18;;;9315:61;9393:18;;7083:76:58;9062:355:85;7083:76:58;7172:10;-1:-1:-1;7172:10:58;7189:12;7204:7;7209:2;7204;:7;:::i;:::-;7189:22;-1:-1:-1;7221:7:58;;7217:63;;7251:2;7238:9;7245:2;7238:4;:9;:::i;:::-;:15;7230:50;;;;-1:-1:-1;;;7230:50:58;;9624:2:85;7230:50:58;;;9606:21:85;9663:2;9643:18;;;9636:30;-1:-1:-1;;;9682:18:85;;;9675:52;9744:18;;7230:50:58;9422:346:85;7230:50:58;7287:12;7302:7;7307:2;7302;:7;:::i;:::-;7287:22;-1:-1:-1;7319:7:58;;7315:63;;7349:2;7336:9;7343:2;7336:4;:9;:::i;:::-;:15;7328:50;;;;-1:-1:-1;;;7328:50:58;;9975:2:85;7328:50:58;;;9957:21:85;10014:2;9994:18;;;9987:30;-1:-1:-1;;;10033:18:85;;;10026:52;10095:18;;7328:50:58;9773:346:85;7328:50:58;7390:19;2024:13;7390:2;:19;:::i;:::-;7385:24;-1:-1:-1;7420:19:58;2024:13;7420:2;:19;:::i;:::-;7415:24;-1:-1:-1;7445:12:58;7460:7;7415:24;7460:2;:7;:::i;:::-;7445:22;-1:-1:-1;7477:7:58;;7473:63;;7507:2;7494:9;7501:2;7494:4;:9;:::i;:::-;:15;7486:50;;;;-1:-1:-1;;;7486:50:58;;10326:2:85;7486:50:58;;;10308:21:85;10365:2;10345:18;;;10338:30;-1:-1:-1;;;10384:18:85;;;10377:52;10446:18;;7486:50:58;10124:346:85;7486:50:58;7645:14;;;;;;;;;;;;7686;;;;;;;;;;;7645;7674:27;;7645:14;;7674:3;:27::i;:::-;7665:36;;7743:27;7747:6;7755:14;;;;;;;;7764:4;7755:14;;;7743:3;:27::i;:::-;7734:36;;7812:27;7816:6;7824:14;;;;;;;;7833:4;7824:14;;;7812:3;:27::i;:::-;7803:36;6254:1636;-1:-1:-1;;;;;;;;;;;;;6254:1636:58:o;5106:207::-;-1:-1:-1;;;;;;;;;;;;5225:7:58;;5215;;5203:9;;5215:17;;;:::i;:::-;5251:7;;5203:29;;-1:-1:-1;5246:12:58;;;5238:46;;;;-1:-1:-1;;;5238:46:58;;10807:2:85;5238:46:58;;;10789:21:85;10846:2;10826:18;;;10819:30;-1:-1:-1;;;10865:18:85;;;10858:51;10926:18;;5238:46:58;10605:345:85;5238:46:58;5297:11;;;;;;;;;;;;;5106:207;-1:-1:-1;;;5106:207:58:o;2597:203::-;-1:-1:-1;;;;;;;;;;;;2281:54:58;2680:1;:18;;2672:85;;;;-1:-1:-1;;;2672:85:58;;11157:2:85;2672:85:58;;;11139:21:85;11196:2;11176:18;;;11169:30;11235:34;11215:18;;;11208:62;-1:-1:-1;;;11286:18:85;;;11279:52;11348:19;;2672:85:58;10955:418:85;2672:85:58;2770:25;;;;;;;;889;2779:1;:15;;;;:::i;:::-;2770:25;;2763:32;2597:203;-1:-1:-1;;2597:203:58:o;2959:109::-;3042:7;;3020;;3042:21;;889:25;;3042:21;:::i;9228:283::-;-1:-1:-1;;;;;;;;;;;;9336:7:58;;;:12;9328:42;;;;-1:-1:-1;;;9328:42:58;;11580:2:85;9328:42:58;;;11562:21:85;11619:2;11599:18;;;11592:30;-1:-1:-1;;;11638:18:85;;;11631:47;11695:18;;9328:42:58;11378:341:85;9328:42:58;9388:7;;9376:9;;9388:21;;889:25;;9388:21;:::i;:::-;9442:7;;9376:33;;-1:-1:-1;9423:15:58;889:25;9376:33;9423:15;:::i;:::-;:26;9415:57;;;;-1:-1:-1;;;9415:57:58;;11926:2:85;9415:57:58;;;11908:21:85;11965:2;11945:18;;;11938:30;-1:-1:-1;;;11984:18:85;;;11977:48;12042:18;;9415:57:58;11724:342:85;9415:57:58;9485:21;;;;;;;;9498:1;:7;;;9494:1;:11;;;;:::i;:::-;9485:21;;9478:28;9228:283;-1:-1:-1;;;;9228:283:58:o;4116:159::-;-1:-1:-1;;;;;;;;;;;;4205:47:58;;;;;;;;889:25;;4215:1;:7;;;:21;;;;:::i;:::-;4214:37;;;;:::i;4562:172::-;-1:-1:-1;;;;;;;;;;;;4654:57:58;;;;;;;;889:25;;4674:1;:7;;;:21;;;;:::i;:::-;4673:37;;;;:::i;:::-;4663:7;;:47;;;;:::i;206:180:85:-;265:6;318:2;306:9;297:7;293:23;289:32;286:52;;;334:1;331;324:12;286:52;-1:-1:-1;357:23:85;;206:180;-1:-1:-1;206:180:85:o;1404:131::-;-1:-1:-1;;;;;1479:31:85;;1469:42;;1459:70;;1525:1;1522;1515:12;1540:247;1599:6;1652:2;1640:9;1631:7;1627:23;1623:32;1620:52;;;1668:1;1665;1658:12;1620:52;1707:9;1694:23;1726:31;1751:5;1726:31;:::i;1792:248::-;1860:6;1868;1921:2;1909:9;1900:7;1896:23;1892:32;1889:52;;;1937:1;1934;1927:12;1889:52;-1:-1:-1;;1960:23:85;;;2030:2;2015:18;;;2002:32;;-1:-1:-1;1792:248:85:o;2045:521::-;2140:6;2148;2156;2164;2172;2225:3;2213:9;2204:7;2200:23;2196:33;2193:53;;;2242:1;2239;2232:12;2193:53;2281:9;2268:23;2300:31;2325:5;2300:31;:::i;:::-;2350:5;2402:2;2387:18;;2374:32;;-1:-1:-1;2453:2:85;2438:18;;2425:32;;2504:2;2489:18;;2476:32;;-1:-1:-1;2555:3:85;2540:19;2527:33;;-1:-1:-1;2045:521:85;-1:-1:-1;;;2045:521:85:o;6916:251::-;6986:6;7039:2;7027:9;7018:7;7014:23;7010:32;7007:52;;;7055:1;7052;7045:12;7007:52;7087:9;7081:16;7106:31;7131:5;7106:31;:::i;7441:245::-;7520:6;7528;7581:2;7569:9;7560:7;7556:23;7552:32;7549:52;;;7597:1;7594;7587:12;7549:52;-1:-1:-1;;7620:16:85;;7676:2;7661:18;;;7655:25;7620:16;;7655:25;;-1:-1:-1;7441:245:85:o;7691:127::-;7752:10;7747:3;7743:20;7740:1;7733:31;7783:4;7780:1;7773:15;7807:4;7804:1;7797:15;7823:168;7896:9;;;7927;;7944:15;;;7938:22;;7924:37;7914:71;;7965:18;;:::i;7996:217::-;8036:1;8062;8052:132;;8106:10;8101:3;8097:20;8094:1;8087:31;8141:4;8138:1;8131:15;8169:4;8166:1;8159:15;8052:132;-1:-1:-1;8198:9:85;;7996:217::o;8578:128::-;8645:9;;;8666:11;;;8663:37;;;8680:18;;:::i;10475:125::-;10540:9;;;10561:10;;;10558:36;;;10574:18;;:::i",
  "source": "// SPDX-License-Identifier: LGPL-3.0-only\npragma solidity >=0.8.7 <0.8.20;\n\nimport \"@openzeppelin/contracts8/access/Ownable.sol\";\n\nimport \"../../contracts/common/CalledByVm.sol\";\nimport \"../../contracts/common/Initializable.sol\";\nimport \"../../contracts/common/interfaces/ICeloVersionedContract.sol\";\nimport \"../../contracts/common/FixidityLib.sol\";\nimport \"./UsingRegistry.sol\";\nimport \"../../contracts/stability/interfaces/ISortedOracles.sol\";\nimport \"@openzeppelin/contracts8/utils/math/Math.sol\";\nimport \"./IsL2Check.sol\";\n\n/**\n * @title Stores and provides gas price minimum for various currencies.\n */\ncontract GasPriceMinimum is\n  ICeloVersionedContract,\n  Ownable,\n  Initializable,\n  UsingRegistry,\n  IsL2Check,\n  CalledByVm\n{\n  using FixidityLib for FixidityLib.Fraction;\n\n  uint256 private deprecated_gasPriceMinimum;\n  uint256 private deprecated_gasPriceMinimumFloor;\n\n  // Block congestion level targeted by the gas price minimum calculation.\n  FixidityLib.Fraction private deprecated_targetDensity;\n\n  // Speed of gas price minimum adjustment due to congestion.\n  FixidityLib.Fraction private deprecated_adjustmentSpeed;\n\n  uint256 private deprecated_baseFeeOpCodeActivationBlock;\n  uint256 private constant ABSOLUTE_MINIMAL_GAS_PRICE = 1;\n\n  event TargetDensitySet(uint256 targetDensity);\n  event GasPriceMinimumFloorSet(uint256 gasPriceMinimumFloor);\n  event AdjustmentSpeedSet(uint256 adjustmentSpeed);\n  event GasPriceMinimumUpdated(uint256 gasPriceMinimum);\n  event BaseFeeOpCodeActivationBlockSet(uint256 baseFeeOpCodeActivationBlock);\n\n  /**\n   * @notice Sets initialized == true on implementation contracts\n   * @param test Set to true to skip implementation initialization\n   */\n  constructor(bool test) Initializable(test) {}\n\n  /**\n   * @notice Used in place of the constructor to allow the contract to be upgradable via proxy.\n   * @param _registryAddress The address of the registry core smart contract.\n   * @param _gasPriceMinimumFloor The lowest value the gas price minimum can be.\n   * @param _targetDensity The target gas fullness of blocks, expressed as a fixidity fraction.\n   * @param _adjustmentSpeed How quickly the minimum changes, expressed as a fixidity fraction.\n   * @param _baseFeeOpCodeActivationBlock Block number where the baseFee opCode is activated\n   */\n  function initialize(\n    address _registryAddress,\n    uint256 _gasPriceMinimumFloor,\n    uint256 _targetDensity,\n    uint256 _adjustmentSpeed,\n    uint256 _baseFeeOpCodeActivationBlock\n  ) external initializer {\n    _transferOwnership(msg.sender);\n    setRegistry(_registryAddress);\n    deprecated_gasPriceMinimum = _gasPriceMinimumFloor;\n    setGasPriceMinimumFloor(_gasPriceMinimumFloor);\n    setTargetDensity(_targetDensity);\n    setAdjustmentSpeed(_adjustmentSpeed);\n    _setBaseFeeOpCodeActivationBlock(_baseFeeOpCodeActivationBlock, true);\n  }\n\n  /**\n   * @notice Set the activation block of the baseFee opCode.\n   * @param _baseFeeOpCodeActivationBlock Block number where the baseFee opCode is activated\n   * @dev Value is expected to be > 0.\n   */\n  function setBaseFeeOpCodeActivationBlock(\n    uint256 _baseFeeOpCodeActivationBlock\n  ) external onlyOwner onlyL1 {\n    _setBaseFeeOpCodeActivationBlock(_baseFeeOpCodeActivationBlock, false);\n  }\n\n  /**\n   * @notice Adjust the gas price minimum based on governable parameters\n   * and block congestion.\n   * @param blockGasTotal The amount of gas in the most recent block.\n   * @param blockGasLimit The maxBlockGasLimit of the past block.\n   * @return result of the calculation (new gas price minimum)\n   */\n  function updateGasPriceMinimum(\n    uint256 blockGasTotal,\n    uint256 blockGasLimit\n  ) external onlyVm onlyL1 returns (uint256) {\n    deprecated_gasPriceMinimum = getUpdatedGasPriceMinimum(blockGasTotal, blockGasLimit);\n    emit GasPriceMinimumUpdated(deprecated_gasPriceMinimum);\n    return deprecated_gasPriceMinimum;\n  }\n\n  /**\n   * @notice Retrieve the current gas price minimum for a currency.\n   * When caled for 0x0 or Celo address, it returns gasPriceMinimum().\n   * For other addresses it returns gasPriceMinimum() mutiplied by\n   * the SortedOracles median of the token. It does not check tokenAddress is a valid fee currency.\n   * this function will never returns values less than ABSOLUTE_MINIMAL_GAS_PRICE.\n   * If Oracle rate doesn't exist, it returns ABSOLUTE_MINIMAL_GAS_PRICE.\n   * @dev This functions assumes one unit of token has 18 digits.\n   * @param tokenAddress The currency the gas price should be in (defaults to Celo).\n   * @return current gas price minimum in the requested currency\n   */\n  function getGasPriceMinimum(address tokenAddress) external view onlyL1 returns (uint256) {\n    return Math.max(_getGasPriceMinimum(tokenAddress), ABSOLUTE_MINIMAL_GAS_PRICE);\n  }\n  /**\n   * @notice Returns the storage, major, minor, and patch version of the contract.\n   * @return Storage version of the contract.\n   * @return Major version of the contract.\n   * @return Minor version of the contract.\n   * @return Patch version of the contract.\n   */\n  function getVersionNumber() external pure returns (uint256, uint256, uint256, uint256) {\n    return (1, 2, 1, 0);\n  }\n\n  /**\n   * @notice Set a multiplier that impacts how quickly gas price minimum is adjusted.\n   * @param _adjustmentSpeed How quickly the minimum changes, expressed as a fixidity fraction.\n   * @dev Value is expected to be < 1.\n   */\n  function setAdjustmentSpeed(uint256 _adjustmentSpeed) public onlyOwner onlyL1 {\n    deprecated_adjustmentSpeed = FixidityLib.wrap(_adjustmentSpeed);\n    require(\n      deprecated_adjustmentSpeed.lt(FixidityLib.fixed1()),\n      \"adjustment speed must be smaller than 1\"\n    );\n    emit AdjustmentSpeedSet(_adjustmentSpeed);\n  }\n\n  /**\n   * @notice Set the block density targeted by the gas price minimum algorithm.\n   * @param _targetDensity The target gas fullness of blocks, expressed as a fixidity fraction.\n   * @dev Value is expected to be < 1.\n   */\n  function setTargetDensity(uint256 _targetDensity) public onlyOwner onlyL1 {\n    deprecated_targetDensity = FixidityLib.wrap(_targetDensity);\n    require(\n      deprecated_targetDensity.lt(FixidityLib.fixed1()),\n      \"target density must be smaller than 1\"\n    );\n    emit TargetDensitySet(_targetDensity);\n  }\n\n  /**\n   * @notice Set the minimum gas price treshold.\n   * @param _gasPriceMinimumFloor The lowest value the gas price minimum can be.\n   * @dev Value is expected to be > 0.\n   */\n  function setGasPriceMinimumFloor(uint256 _gasPriceMinimumFloor) public onlyOwner onlyL1 {\n    require(_gasPriceMinimumFloor > 0, \"gas price minimum floor must be greater than zero\");\n    deprecated_gasPriceMinimumFloor = _gasPriceMinimumFloor;\n    emit GasPriceMinimumFloorSet(_gasPriceMinimumFloor);\n  }\n\n  /**\n   * @notice Returns the gas price minimum.\n   * @return The gas price minimum.\n   */\n  function gasPriceMinimum() public view onlyL1 returns (uint256) {\n    if (\n      deprecated_baseFeeOpCodeActivationBlock > 0 &&\n      block.number >= deprecated_baseFeeOpCodeActivationBlock\n    ) {\n      return block.basefee;\n    } else {\n      return deprecated_gasPriceMinimum;\n    }\n  }\n\n  /**\n   * @notice Calculates the gas price minimum based on governable parameters\n   * and block congestion.\n   * @param blockGasTotal The amount of gas in the most recent block.\n   * @param blockGasLimit The maxBlockGasLimit of the past block.\n   * @return result of the calculation (new gas price minimum)\n   * @dev Calculate using the following formula:\n   * oldGasPriceMinimum * (1 + (adjustmentSpeed * (blockDensity - targetDensity))) + 1.\n   */\n  function getUpdatedGasPriceMinimum(\n    uint256 blockGasTotal,\n    uint256 blockGasLimit\n  ) public view onlyL1 returns (uint256) {\n    FixidityLib.Fraction memory blockDensity = FixidityLib.newFixedFraction(\n      blockGasTotal,\n      blockGasLimit\n    );\n    bool densityGreaterThanTarget = blockDensity.gt(deprecated_targetDensity);\n    FixidityLib.Fraction memory densityDelta = densityGreaterThanTarget\n      ? blockDensity.subtract(deprecated_targetDensity)\n      : deprecated_targetDensity.subtract(blockDensity);\n    FixidityLib.Fraction memory adjustment = densityGreaterThanTarget\n      ? FixidityLib.fixed1().add(deprecated_adjustmentSpeed.multiply(densityDelta))\n      : FixidityLib.fixed1().subtract(deprecated_adjustmentSpeed.multiply(densityDelta));\n\n    uint256 newGasPriceMinimum = adjustment\n      .multiply(FixidityLib.newFixed(gasPriceMinimum()))\n      .add(FixidityLib.fixed1())\n      .fromFixed();\n\n    return\n      newGasPriceMinimum >= deprecated_gasPriceMinimumFloor\n        ? newGasPriceMinimum\n        : deprecated_gasPriceMinimumFloor;\n  }\n\n  /**\n   * @notice Returns the gas price minimum floor.\n   * @return The gas price minimum floor.\n   */\n  function gasPriceMinimumFloor() external view onlyL1 returns (uint256) {\n    return deprecated_gasPriceMinimumFloor;\n  }\n\n  /**\n   * @notice Returns the target density.\n   * @return The target density.\n   */\n  function targetDensity() external view onlyL1 returns (uint256) {\n    return deprecated_targetDensity.unwrap();\n  }\n\n  /**\n   * @notice Returns the adjustment speed.\n   * @return The adjustment speed.\n   */\n  function adjustmentSpeed() external view onlyL1 returns (uint256) {\n    return deprecated_adjustmentSpeed.unwrap();\n  }\n\n  /**\n   * @notice Returns the basefee opcode activation block.\n   * @return The basefee opcode activation block.\n   */\n  function baseFeeOpCodeActivationBlock() external view onlyL1 returns (uint256) {\n    return deprecated_baseFeeOpCodeActivationBlock;\n  }\n\n  /**\n   * @notice Set the activation block of the baseFee opCode.\n   * @param _baseFeeOpCodeActivationBlock Block number where the baseFee opCode is activated\n   * @dev Value is expected to be > 0.\n   */\n  function _setBaseFeeOpCodeActivationBlock(\n    uint256 _baseFeeOpCodeActivationBlock,\n    bool allowZero\n  ) private onlyOwner {\n    require(\n      allowZero || _baseFeeOpCodeActivationBlock > 0,\n      \"baseFee opCode activation block must be greater than zero\"\n    );\n    deprecated_baseFeeOpCodeActivationBlock = _baseFeeOpCodeActivationBlock;\n    emit BaseFeeOpCodeActivationBlockSet(_baseFeeOpCodeActivationBlock);\n  }\n\n  function _getGasPriceMinimum(address tokenAddress) private view returns (uint256) {\n    if (\n      tokenAddress == address(0) ||\n      tokenAddress == registry.getAddressForOrDie(CELO_TOKEN_REGISTRY_ID)\n    ) {\n      return gasPriceMinimum();\n    } else {\n      ISortedOracles sortedOracles = ISortedOracles(\n        registry.getAddressForOrDie(SORTED_ORACLES_REGISTRY_ID)\n      );\n      uint256 rateNumerator;\n      uint256 rateDenominator;\n      (rateNumerator, rateDenominator) = sortedOracles.medianRate(tokenAddress);\n      return ((gasPriceMinimum() * rateNumerator) / rateDenominator);\n    }\n  }\n}\n",
  "sourcePath": "/Users/beaver/Development/temp/celo-monorepo/packages/protocol/contracts-0.8/common/GasPriceMinimum.sol",
  "ast": {
    "absolutePath": "project:/contracts-0.8/common/GasPriceMinimum.sol",
    "exportedSymbols": {
      "CalledByVm": [
        16290
      ],
      "Context": [
        212
      ],
      "FixidityLib": [
        16955
      ],
      "GasPriceMinimum": [
        4599
      ],
      "IAccounts": [
        17249
      ],
      "ICeloUnreleasedTreasury": [
        17265
      ],
      "ICeloVersionedContract": [
        17280
      ],
      "IERC20": [
        190
      ],
      "IElection": [
        18056
      ],
      "IEpochManager": [
        17462
      ],
      "IEpochRewards": [
        18121
      ],
      "IFeeCurrencyWhitelist": [
        17488
      ],
      "IFeeHandlerSeller": [
        17515
      ],
      "IFreezer": [
        17535
      ],
      "IGovernance": [
        18193
      ],
      "ILockedCelo": [
        18336
      ],
      "ILockedGold": [
        18472
      ],
      "IRegistry": [
        17608
      ],
      "IScoreReader": [
        7470
      ],
      "ISortedOracles": [
        19333
      ],
      "IValidators": [
        18940
      ],
      "Initializable": [
        16991
      ],
      "IsL2Check": [
        4661
      ],
      "Math": [
        1159
      ],
      "Ownable": [
        112
      ],
      "UsingRegistry": [
        6725
      ]
    },
    "id": 4600,
    "license": "LGPL-3.0-only",
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 4048,
        "literals": [
          "solidity",
          ">=",
          "0.8",
          ".7",
          "<",
          "0.8",
          ".20"
        ],
        "nodeType": "PragmaDirective",
        "src": "42:32:10"
      },
      {
        "absolutePath": "@openzeppelin/contracts8/access/Ownable.sol",
        "file": "@openzeppelin/contracts8/access/Ownable.sol",
        "id": 4049,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 4600,
        "sourceUnit": 113,
        "src": "76:53:10",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "project:/contracts/common/CalledByVm.sol",
        "file": "../../contracts/common/CalledByVm.sol",
        "id": 4050,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 4600,
        "sourceUnit": 16291,
        "src": "131:47:10",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "project:/contracts/common/Initializable.sol",
        "file": "../../contracts/common/Initializable.sol",
        "id": 4051,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 4600,
        "sourceUnit": 16992,
        "src": "179:50:10",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "project:/contracts/common/interfaces/ICeloVersionedContract.sol",
        "file": "../../contracts/common/interfaces/ICeloVersionedContract.sol",
        "id": 4052,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 4600,
        "sourceUnit": 17281,
        "src": "230:70:10",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "project:/contracts/common/FixidityLib.sol",
        "file": "../../contracts/common/FixidityLib.sol",
        "id": 4053,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 4600,
        "sourceUnit": 16956,
        "src": "301:48:10",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "project:/contracts-0.8/common/UsingRegistry.sol",
        "file": "./UsingRegistry.sol",
        "id": 4054,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 4600,
        "sourceUnit": 6726,
        "src": "350:29:10",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "project:/contracts/stability/interfaces/ISortedOracles.sol",
        "file": "../../contracts/stability/interfaces/ISortedOracles.sol",
        "id": 4055,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 4600,
        "sourceUnit": 19334,
        "src": "380:65:10",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "@openzeppelin/contracts8/utils/math/Math.sol",
        "file": "@openzeppelin/contracts8/utils/math/Math.sol",
        "id": 4056,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 4600,
        "sourceUnit": 1160,
        "src": "446:54:10",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "project:/contracts-0.8/common/IsL2Check.sol",
        "file": "./IsL2Check.sol",
        "id": 4057,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 4600,
        "sourceUnit": 4662,
        "src": "501:25:10",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "abstract": false,
        "baseContracts": [
          {
            "baseName": {
              "id": 4059,
              "name": "ICeloVersionedContract",
              "nameLocations": [
                "638:22:10"
              ],
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 17280,
              "src": "638:22:10"
            },
            "id": 4060,
            "nodeType": "InheritanceSpecifier",
            "src": "638:22:10"
          },
          {
            "baseName": {
              "id": 4061,
              "name": "Ownable",
              "nameLocations": [
                "664:7:10"
              ],
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 112,
              "src": "664:7:10"
            },
            "id": 4062,
            "nodeType": "InheritanceSpecifier",
            "src": "664:7:10"
          },
          {
            "baseName": {
              "id": 4063,
              "name": "Initializable",
              "nameLocations": [
                "675:13:10"
              ],
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 16991,
              "src": "675:13:10"
            },
            "id": 4064,
            "nodeType": "InheritanceSpecifier",
            "src": "675:13:10"
          },
          {
            "baseName": {
              "id": 4065,
              "name": "UsingRegistry",
              "nameLocations": [
                "692:13:10"
              ],
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 6725,
              "src": "692:13:10"
            },
            "id": 4066,
            "nodeType": "InheritanceSpecifier",
            "src": "692:13:10"
          },
          {
            "baseName": {
              "id": 4067,
              "name": "IsL2Check",
              "nameLocations": [
                "709:9:10"
              ],
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 4661,
              "src": "709:9:10"
            },
            "id": 4068,
            "nodeType": "InheritanceSpecifier",
            "src": "709:9:10"
          },
          {
            "baseName": {
              "id": 4069,
              "name": "CalledByVm",
              "nameLocations": [
                "722:10:10"
              ],
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 16290,
              "src": "722:10:10"
            },
            "id": 4070,
            "nodeType": "InheritanceSpecifier",
            "src": "722:10:10"
          }
        ],
        "canonicalName": "GasPriceMinimum",
        "contractDependencies": [],
        "contractKind": "contract",
        "documentation": {
          "id": 4058,
          "nodeType": "StructuredDocumentation",
          "src": "528:79:10",
          "text": " @title Stores and provides gas price minimum for various currencies."
        },
        "fullyImplemented": true,
        "id": 4599,
        "linearizedBaseContracts": [
          4599,
          16290,
          4661,
          6725,
          16991,
          112,
          212,
          17280
        ],
        "name": "GasPriceMinimum",
        "nameLocation": "617:15:10",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "global": false,
            "id": 4074,
            "libraryName": {
              "id": 4071,
              "name": "FixidityLib",
              "nameLocations": [
                "743:11:10"
              ],
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 16955,
              "src": "743:11:10"
            },
            "nodeType": "UsingForDirective",
            "src": "737:43:10",
            "typeName": {
              "id": 4073,
              "nodeType": "UserDefinedTypeName",
              "pathNode": {
                "id": 4072,
                "name": "FixidityLib.Fraction",
                "nameLocations": [
                  "759:11:10",
                  "771:8:10"
                ],
                "nodeType": "IdentifierPath",
                "referencedDeclaration": 16296,
                "src": "759:20:10"
              },
              "referencedDeclaration": 16296,
              "src": "759:20:10",
              "typeDescriptions": {
                "typeIdentifier": "t_struct$_Fraction_$16296_storage_ptr",
                "typeString": "struct FixidityLib.Fraction"
              }
            }
          },
          {
            "constant": false,
            "id": 4076,
            "mutability": "mutable",
            "name": "deprecated_gasPriceMinimum",
            "nameLocation": "800:26:10",
            "nodeType": "VariableDeclaration",
            "scope": 4599,
            "src": "784:42:10",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_uint256",
              "typeString": "uint256"
            },
            "typeName": {
              "id": 4075,
              "name": "uint256",
              "nodeType": "ElementaryTypeName",
              "src": "784:7:10",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            },
            "visibility": "private"
          },
          {
            "constant": false,
            "id": 4078,
            "mutability": "mutable",
            "name": "deprecated_gasPriceMinimumFloor",
            "nameLocation": "846:31:10",
            "nodeType": "VariableDeclaration",
            "scope": 4599,
            "src": "830:47:10",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_uint256",
              "typeString": "uint256"
            },
            "typeName": {
              "id": 4077,
              "name": "uint256",
              "nodeType": "ElementaryTypeName",
              "src": "830:7:10",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            },
            "visibility": "private"
          },
          {
            "constant": false,
            "id": 4081,
            "mutability": "mutable",
            "name": "deprecated_targetDensity",
            "nameLocation": "986:24:10",
            "nodeType": "VariableDeclaration",
            "scope": 4599,
            "src": "957:53:10",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_struct$_Fraction_$16296_storage",
              "typeString": "struct FixidityLib.Fraction"
            },
            "typeName": {
              "id": 4080,
              "nodeType": "UserDefinedTypeName",
              "pathNode": {
                "id": 4079,
                "name": "FixidityLib.Fraction",
                "nameLocations": [
                  "957:11:10",
                  "969:8:10"
                ],
                "nodeType": "IdentifierPath",
                "referencedDeclaration": 16296,
                "src": "957:20:10"
              },
              "referencedDeclaration": 16296,
              "src": "957:20:10",
              "typeDescriptions": {
                "typeIdentifier": "t_struct$_Fraction_$16296_storage_ptr",
                "typeString": "struct FixidityLib.Fraction"
              }
            },
            "visibility": "private"
          },
          {
            "constant": false,
            "id": 4084,
            "mutability": "mutable",
            "name": "deprecated_adjustmentSpeed",
            "nameLocation": "1106:26:10",
            "nodeType": "VariableDeclaration",
            "scope": 4599,
            "src": "1077:55:10",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_struct$_Fraction_$16296_storage",
              "typeString": "struct FixidityLib.Fraction"
            },
            "typeName": {
              "id": 4083,
              "nodeType": "UserDefinedTypeName",
              "pathNode": {
                "id": 4082,
                "name": "FixidityLib.Fraction",
                "nameLocations": [
                  "1077:11:10",
                  "1089:8:10"
                ],
                "nodeType": "IdentifierPath",
                "referencedDeclaration": 16296,
                "src": "1077:20:10"
              },
              "referencedDeclaration": 16296,
              "src": "1077:20:10",
              "typeDescriptions": {
                "typeIdentifier": "t_struct$_Fraction_$16296_storage_ptr",
                "typeString": "struct FixidityLib.Fraction"
              }
            },
            "visibility": "private"
          },
          {
            "constant": false,
            "id": 4086,
            "mutability": "mutable",
            "name": "deprecated_baseFeeOpCodeActivationBlock",
            "nameLocation": "1153:39:10",
            "nodeType": "VariableDeclaration",
            "scope": 4599,
            "src": "1137:55:10",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_uint256",
              "typeString": "uint256"
            },
            "typeName": {
              "id": 4085,
              "name": "uint256",
              "nodeType": "ElementaryTypeName",
              "src": "1137:7:10",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            },
            "visibility": "private"
          },
          {
            "constant": true,
            "id": 4089,
            "mutability": "constant",
            "name": "ABSOLUTE_MINIMAL_GAS_PRICE",
            "nameLocation": "1221:26:10",
            "nodeType": "VariableDeclaration",
            "scope": 4599,
            "src": "1196:55:10",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_uint256",
              "typeString": "uint256"
            },
            "typeName": {
              "id": 4087,
              "name": "uint256",
              "nodeType": "ElementaryTypeName",
              "src": "1196:7:10",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            },
            "value": {
              "hexValue": "31",
              "id": 4088,
              "isConstant": false,
              "isLValue": false,
              "isPure": true,
              "kind": "number",
              "lValueRequested": false,
              "nodeType": "Literal",
              "src": "1250:1:10",
              "typeDescriptions": {
                "typeIdentifier": "t_rational_1_by_1",
                "typeString": "int_const 1"
              },
              "value": "1"
            },
            "visibility": "private"
          },
          {
            "anonymous": false,
            "eventSelector": "2a109bad06121312708ed2a3e9b3556ea85ef8eadd4d10d8181f50d114eb4fab",
            "id": 4093,
            "name": "TargetDensitySet",
            "nameLocation": "1262:16:10",
            "nodeType": "EventDefinition",
            "parameters": {
              "id": 4092,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 4091,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "targetDensity",
                  "nameLocation": "1287:13:10",
                  "nodeType": "VariableDeclaration",
                  "scope": 4093,
                  "src": "1279:21:10",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 4090,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "1279:7:10",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1278:23:10"
            },
            "src": "1256:46:10"
          },
          {
            "anonymous": false,
            "eventSelector": "5548a13ccc1d9e4e2860461edda5ad49ba8a4fda485f67d954f9d7da8d2aff27",
            "id": 4097,
            "name": "GasPriceMinimumFloorSet",
            "nameLocation": "1311:23:10",
            "nodeType": "EventDefinition",
            "parameters": {
              "id": 4096,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 4095,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "gasPriceMinimumFloor",
                  "nameLocation": "1343:20:10",
                  "nodeType": "VariableDeclaration",
                  "scope": 4097,
                  "src": "1335:28:10",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 4094,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "1335:7:10",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1334:30:10"
            },
            "src": "1305:60:10"
          },
          {
            "anonymous": false,
            "eventSelector": "d2e71cd7012df1df07d4908ff75ae4b2bfbb6c49d39144404661f1fd47253283",
            "id": 4101,
            "name": "AdjustmentSpeedSet",
            "nameLocation": "1374:18:10",
            "nodeType": "EventDefinition",
            "parameters": {
              "id": 4100,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 4099,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "adjustmentSpeed",
                  "nameLocation": "1401:15:10",
                  "nodeType": "VariableDeclaration",
                  "scope": 4101,
                  "src": "1393:23:10",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 4098,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "1393:7:10",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1392:25:10"
            },
            "src": "1368:50:10"
          },
          {
            "anonymous": false,
            "eventSelector": "6e53b2f8b69496c2a175588ad1326dbabe2f66df4d82f817aeca52e3474807fb",
            "id": 4105,
            "name": "GasPriceMinimumUpdated",
            "nameLocation": "1427:22:10",
            "nodeType": "EventDefinition",
            "parameters": {
              "id": 4104,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 4103,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "gasPriceMinimum",
                  "nameLocation": "1458:15:10",
                  "nodeType": "VariableDeclaration",
                  "scope": 4105,
                  "src": "1450:23:10",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 4102,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "1450:7:10",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1449:25:10"
            },
            "src": "1421:54:10"
          },
          {
            "anonymous": false,
            "eventSelector": "c74fe30765574b78669fcec5cea6b0dcaacd907890a49fc756a40235d01b09fc",
            "id": 4109,
            "name": "BaseFeeOpCodeActivationBlockSet",
            "nameLocation": "1484:31:10",
            "nodeType": "EventDefinition",
            "parameters": {
              "id": 4108,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 4107,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "baseFeeOpCodeActivationBlock",
                  "nameLocation": "1524:28:10",
                  "nodeType": "VariableDeclaration",
                  "scope": 4109,
                  "src": "1516:36:10",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 4106,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "1516:7:10",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1515:38:10"
            },
            "src": "1478:76:10"
          },
          {
            "body": {
              "id": 4118,
              "nodeType": "Block",
              "src": "1746:2:10",
              "statements": []
            },
            "documentation": {
              "id": 4110,
              "nodeType": "StructuredDocumentation",
              "src": "1558:142:10",
              "text": " @notice Sets initialized == true on implementation contracts\n @param test Set to true to skip implementation initialization"
            },
            "id": 4119,
            "implemented": true,
            "kind": "constructor",
            "modifiers": [
              {
                "arguments": [
                  {
                    "id": 4115,
                    "name": "test",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 4112,
                    "src": "1740:4:10",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  }
                ],
                "id": 4116,
                "kind": "baseConstructorSpecifier",
                "modifierName": {
                  "id": 4114,
                  "name": "Initializable",
                  "nameLocations": [
                    "1726:13:10"
                  ],
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 16991,
                  "src": "1726:13:10"
                },
                "nodeType": "ModifierInvocation",
                "src": "1726:19:10"
              }
            ],
            "name": "",
            "nameLocation": "-1:-1:-1",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 4113,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 4112,
                  "mutability": "mutable",
                  "name": "test",
                  "nameLocation": "1720:4:10",
                  "nodeType": "VariableDeclaration",
                  "scope": 4119,
                  "src": "1715:9:10",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 4111,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "1715:4:10",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1714:11:10"
            },
            "returnParameters": {
              "id": 4117,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1746:0:10"
            },
            "scope": 4599,
            "src": "1703:45:10",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 4165,
              "nodeType": "Block",
              "src": "2515:339:10",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "expression": {
                          "id": 4136,
                          "name": "msg",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 4294967281,
                          "src": "2540:3:10",
                          "typeDescriptions": {
                            "typeIdentifier": "t_magic_message",
                            "typeString": "msg"
                          }
                        },
                        "id": 4137,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberLocation": "2544:6:10",
                        "memberName": "sender",
                        "nodeType": "MemberAccess",
                        "src": "2540:10:10",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "id": 4135,
                      "name": "_transferOwnership",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 111,
                      "src": "2521:18:10",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
                        "typeString": "function (address)"
                      }
                    },
                    "id": 4138,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "2521:30:10",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 4139,
                  "nodeType": "ExpressionStatement",
                  "src": "2521:30:10"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 4141,
                        "name": "_registryAddress",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 4122,
                        "src": "2569:16:10",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "id": 4140,
                      "name": "setRegistry",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 6489,
                      "src": "2557:11:10",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
                        "typeString": "function (address)"
                      }
                    },
                    "id": 4142,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "2557:29:10",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 4143,
                  "nodeType": "ExpressionStatement",
                  "src": "2557:29:10"
                },
                {
                  "expression": {
                    "id": 4146,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 4144,
                      "name": "deprecated_gasPriceMinimum",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 4076,
                      "src": "2592:26:10",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "id": 4145,
                      "name": "_gasPriceMinimumFloor",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 4124,
                      "src": "2621:21:10",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "2592:50:10",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 4147,
                  "nodeType": "ExpressionStatement",
                  "src": "2592:50:10"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 4149,
                        "name": "_gasPriceMinimumFloor",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 4124,
                        "src": "2672:21:10",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 4148,
                      "name": "setGasPriceMinimumFloor",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 4338,
                      "src": "2648:23:10",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_uint256_$returns$__$",
                        "typeString": "function (uint256)"
                      }
                    },
                    "id": 4150,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "2648:46:10",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 4151,
                  "nodeType": "ExpressionStatement",
                  "src": "2648:46:10"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 4153,
                        "name": "_targetDensity",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 4126,
                        "src": "2717:14:10",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 4152,
                      "name": "setTargetDensity",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 4312,
                      "src": "2700:16:10",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_uint256_$returns$__$",
                        "typeString": "function (uint256)"
                      }
                    },
                    "id": 4154,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "2700:32:10",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 4155,
                  "nodeType": "ExpressionStatement",
                  "src": "2700:32:10"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 4157,
                        "name": "_adjustmentSpeed",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 4128,
                        "src": "2757:16:10",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 4156,
                      "name": "setAdjustmentSpeed",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 4280,
                      "src": "2738:18:10",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_uint256_$returns$__$",
                        "typeString": "function (uint256)"
                      }
                    },
                    "id": 4158,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "2738:36:10",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 4159,
                  "nodeType": "ExpressionStatement",
                  "src": "2738:36:10"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 4161,
                        "name": "_baseFeeOpCodeActivationBlock",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 4130,
                        "src": "2813:29:10",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "hexValue": "74727565",
                        "id": 4162,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "bool",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "2844:4:10",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "value": "true"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      ],
                      "id": 4160,
                      "name": "_setBaseFeeOpCodeActivationBlock",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 4537,
                      "src": "2780:32:10",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_uint256_$_t_bool_$returns$__$",
                        "typeString": "function (uint256,bool)"
                      }
                    },
                    "id": 4163,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "2780:69:10",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 4164,
                  "nodeType": "ExpressionStatement",
                  "src": "2780:69:10"
                }
              ]
            },
            "documentation": {
              "id": 4120,
              "nodeType": "StructuredDocumentation",
              "src": "1752:549:10",
              "text": " @notice Used in place of the constructor to allow the contract to be upgradable via proxy.\n @param _registryAddress The address of the registry core smart contract.\n @param _gasPriceMinimumFloor The lowest value the gas price minimum can be.\n @param _targetDensity The target gas fullness of blocks, expressed as a fixidity fraction.\n @param _adjustmentSpeed How quickly the minimum changes, expressed as a fixidity fraction.\n @param _baseFeeOpCodeActivationBlock Block number where the baseFee opCode is activated"
            },
            "functionSelector": "f92ad219",
            "id": 4166,
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "id": 4133,
                "kind": "modifierInvocation",
                "modifierName": {
                  "id": 4132,
                  "name": "initializer",
                  "nameLocations": [
                    "2503:11:10"
                  ],
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 16975,
                  "src": "2503:11:10"
                },
                "nodeType": "ModifierInvocation",
                "src": "2503:11:10"
              }
            ],
            "name": "initialize",
            "nameLocation": "2313:10:10",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 4131,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 4122,
                  "mutability": "mutable",
                  "name": "_registryAddress",
                  "nameLocation": "2337:16:10",
                  "nodeType": "VariableDeclaration",
                  "scope": 4166,
                  "src": "2329:24:10",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 4121,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "2329:7:10",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 4124,
                  "mutability": "mutable",
                  "name": "_gasPriceMinimumFloor",
                  "nameLocation": "2367:21:10",
                  "nodeType": "VariableDeclaration",
                  "scope": 4166,
                  "src": "2359:29:10",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 4123,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "2359:7:10",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 4126,
                  "mutability": "mutable",
                  "name": "_targetDensity",
                  "nameLocation": "2402:14:10",
                  "nodeType": "VariableDeclaration",
                  "scope": 4166,
                  "src": "2394:22:10",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 4125,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "2394:7:10",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 4128,
                  "mutability": "mutable",
                  "name": "_adjustmentSpeed",
                  "nameLocation": "2430:16:10",
                  "nodeType": "VariableDeclaration",
                  "scope": 4166,
                  "src": "2422:24:10",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 4127,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "2422:7:10",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 4130,
                  "mutability": "mutable",
                  "name": "_baseFeeOpCodeActivationBlock",
                  "nameLocation": "2460:29:10",
                  "nodeType": "VariableDeclaration",
                  "scope": 4166,
                  "src": "2452:37:10",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 4129,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "2452:7:10",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2323:170:10"
            },
            "returnParameters": {
              "id": 4134,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "2515:0:10"
            },
            "scope": 4599,
            "src": "2304:550:10",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "body": {
              "id": 4181,
              "nodeType": "Block",
              "src": "3177:81:10",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 4177,
                        "name": "_baseFeeOpCodeActivationBlock",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 4169,
                        "src": "3216:29:10",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "hexValue": "66616c7365",
                        "id": 4178,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "bool",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "3247:5:10",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "value": "false"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      ],
                      "id": 4176,
                      "name": "_setBaseFeeOpCodeActivationBlock",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 4537,
                      "src": "3183:32:10",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_uint256_$_t_bool_$returns$__$",
                        "typeString": "function (uint256,bool)"
                      }
                    },
                    "id": 4179,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "3183:70:10",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 4180,
                  "nodeType": "ExpressionStatement",
                  "src": "3183:70:10"
                }
              ]
            },
            "documentation": {
              "id": 4167,
              "nodeType": "StructuredDocumentation",
              "src": "2858:202:10",
              "text": " @notice Set the activation block of the baseFee opCode.\n @param _baseFeeOpCodeActivationBlock Block number where the baseFee opCode is activated\n @dev Value is expected to be > 0."
            },
            "functionSelector": "4b930e5a",
            "id": 4182,
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "id": 4172,
                "kind": "modifierInvocation",
                "modifierName": {
                  "id": 4171,
                  "name": "onlyOwner",
                  "nameLocations": [
                    "3160:9:10"
                  ],
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 31,
                  "src": "3160:9:10"
                },
                "nodeType": "ModifierInvocation",
                "src": "3160:9:10"
              },
              {
                "id": 4174,
                "kind": "modifierInvocation",
                "modifierName": {
                  "id": 4173,
                  "name": "onlyL1",
                  "nameLocations": [
                    "3170:6:10"
                  ],
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 4613,
                  "src": "3170:6:10"
                },
                "nodeType": "ModifierInvocation",
                "src": "3170:6:10"
              }
            ],
            "name": "setBaseFeeOpCodeActivationBlock",
            "nameLocation": "3072:31:10",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 4170,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 4169,
                  "mutability": "mutable",
                  "name": "_baseFeeOpCodeActivationBlock",
                  "nameLocation": "3117:29:10",
                  "nodeType": "VariableDeclaration",
                  "scope": 4182,
                  "src": "3109:37:10",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 4168,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "3109:7:10",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3103:47:10"
            },
            "returnParameters": {
              "id": 4175,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "3177:0:10"
            },
            "scope": 4599,
            "src": "3063:195:10",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "body": {
              "id": 4209,
              "nodeType": "Block",
              "src": "3703:195:10",
              "statements": [
                {
                  "expression": {
                    "id": 4201,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 4196,
                      "name": "deprecated_gasPriceMinimum",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 4076,
                      "src": "3709:26:10",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "arguments": [
                        {
                          "id": 4198,
                          "name": "blockGasTotal",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 4185,
                          "src": "3764:13:10",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        {
                          "id": 4199,
                          "name": "blockGasLimit",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 4187,
                          "src": "3779:13:10",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        ],
                        "id": 4197,
                        "name": "getUpdatedGasPriceMinimum",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 4461,
                        "src": "3738:25:10",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_internal_view$_t_uint256_$_t_uint256_$returns$_t_uint256_$",
                          "typeString": "function (uint256,uint256) view returns (uint256)"
                        }
                      },
                      "id": 4200,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "nameLocations": [],
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "3738:55:10",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "3709:84:10",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 4202,
                  "nodeType": "ExpressionStatement",
                  "src": "3709:84:10"
                },
                {
                  "eventCall": {
                    "arguments": [
                      {
                        "id": 4204,
                        "name": "deprecated_gasPriceMinimum",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 4076,
                        "src": "3827:26:10",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 4203,
                      "name": "GasPriceMinimumUpdated",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 4105,
                      "src": "3804:22:10",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_event_nonpayable$_t_uint256_$returns$__$",
                        "typeString": "function (uint256)"
                      }
                    },
                    "id": 4205,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "3804:50:10",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 4206,
                  "nodeType": "EmitStatement",
                  "src": "3799:55:10"
                },
                {
                  "expression": {
                    "id": 4207,
                    "name": "deprecated_gasPriceMinimum",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 4076,
                    "src": "3867:26:10",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "functionReturnParameters": 4195,
                  "id": 4208,
                  "nodeType": "Return",
                  "src": "3860:33:10"
                }
              ]
            },
            "documentation": {
              "id": 4183,
              "nodeType": "StructuredDocumentation",
              "src": "3262:308:10",
              "text": " @notice Adjust the gas price minimum based on governable parameters\n and block congestion.\n @param blockGasTotal The amount of gas in the most recent block.\n @param blockGasLimit The maxBlockGasLimit of the past block.\n @return result of the calculation (new gas price minimum)"
            },
            "functionSelector": "c12398b4",
            "id": 4210,
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "id": 4190,
                "kind": "modifierInvocation",
                "modifierName": {
                  "id": 4189,
                  "name": "onlyVm",
                  "nameLocations": [
                    "3671:6:10"
                  ],
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 16289,
                  "src": "3671:6:10"
                },
                "nodeType": "ModifierInvocation",
                "src": "3671:6:10"
              },
              {
                "id": 4192,
                "kind": "modifierInvocation",
                "modifierName": {
                  "id": 4191,
                  "name": "onlyL1",
                  "nameLocations": [
                    "3678:6:10"
                  ],
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 4613,
                  "src": "3678:6:10"
                },
                "nodeType": "ModifierInvocation",
                "src": "3678:6:10"
              }
            ],
            "name": "updateGasPriceMinimum",
            "nameLocation": "3582:21:10",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 4188,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 4185,
                  "mutability": "mutable",
                  "name": "blockGasTotal",
                  "nameLocation": "3617:13:10",
                  "nodeType": "VariableDeclaration",
                  "scope": 4210,
                  "src": "3609:21:10",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 4184,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "3609:7:10",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 4187,
                  "mutability": "mutable",
                  "name": "blockGasLimit",
                  "nameLocation": "3644:13:10",
                  "nodeType": "VariableDeclaration",
                  "scope": 4210,
                  "src": "3636:21:10",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 4186,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "3636:7:10",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3603:58:10"
            },
            "returnParameters": {
              "id": 4195,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 4194,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 4210,
                  "src": "3694:7:10",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 4193,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "3694:7:10",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3693:9:10"
            },
            "scope": 4599,
            "src": "3573:325:10",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "body": {
              "id": 4228,
              "nodeType": "Block",
              "src": "4682:89:10",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "id": 4223,
                            "name": "tokenAddress",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 4213,
                            "src": "4724:12:10",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          ],
                          "id": 4222,
                          "name": "_getGasPriceMinimum",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 4598,
                          "src": "4704:19:10",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_view$_t_address_$returns$_t_uint256_$",
                            "typeString": "function (address) view returns (uint256)"
                          }
                        },
                        "id": 4224,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "nameLocations": [],
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "4704:33:10",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "id": 4225,
                        "name": "ABSOLUTE_MINIMAL_GAS_PRICE",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 4089,
                        "src": "4739:26:10",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "expression": {
                        "id": 4220,
                        "name": "Math",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1159,
                        "src": "4695:4:10",
                        "typeDescriptions": {
                          "typeIdentifier": "t_type$_t_contract$_Math_$1159_$",
                          "typeString": "type(library Math)"
                        }
                      },
                      "id": 4221,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberLocation": "4700:3:10",
                      "memberName": "max",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 318,
                      "src": "4695:8:10",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$",
                        "typeString": "function (uint256,uint256) pure returns (uint256)"
                      }
                    },
                    "id": 4226,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "4695:71:10",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "functionReturnParameters": 4219,
                  "id": 4227,
                  "nodeType": "Return",
                  "src": "4688:78:10"
                }
              ]
            },
            "documentation": {
              "id": 4211,
              "nodeType": "StructuredDocumentation",
              "src": "3902:688:10",
              "text": " @notice Retrieve the current gas price minimum for a currency.\n When caled for 0x0 or Celo address, it returns gasPriceMinimum().\n For other addresses it returns gasPriceMinimum() mutiplied by\n the SortedOracles median of the token. It does not check tokenAddress is a valid fee currency.\n this function will never returns values less than ABSOLUTE_MINIMAL_GAS_PRICE.\n If Oracle rate doesn't exist, it returns ABSOLUTE_MINIMAL_GAS_PRICE.\n @dev This functions assumes one unit of token has 18 digits.\n @param tokenAddress The currency the gas price should be in (defaults to Celo).\n @return current gas price minimum in the requested currency"
            },
            "functionSelector": "a54b7fc0",
            "id": 4229,
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "id": 4216,
                "kind": "modifierInvocation",
                "modifierName": {
                  "id": 4215,
                  "name": "onlyL1",
                  "nameLocations": [
                    "4657:6:10"
                  ],
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 4613,
                  "src": "4657:6:10"
                },
                "nodeType": "ModifierInvocation",
                "src": "4657:6:10"
              }
            ],
            "name": "getGasPriceMinimum",
            "nameLocation": "4602:18:10",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 4214,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 4213,
                  "mutability": "mutable",
                  "name": "tokenAddress",
                  "nameLocation": "4629:12:10",
                  "nodeType": "VariableDeclaration",
                  "scope": 4229,
                  "src": "4621:20:10",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 4212,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "4621:7:10",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "4620:22:10"
            },
            "returnParameters": {
              "id": 4219,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 4218,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 4229,
                  "src": "4673:7:10",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 4217,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "4673:7:10",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "4672:9:10"
            },
            "scope": 4599,
            "src": "4593:178:10",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "baseFunctions": [
              17279
            ],
            "body": {
              "id": 4247,
              "nodeType": "Block",
              "src": "5134:30:10",
              "statements": [
                {
                  "expression": {
                    "components": [
                      {
                        "hexValue": "31",
                        "id": 4241,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "5148:1:10",
                        "typeDescriptions": {
                          "typeIdentifier": "t_rational_1_by_1",
                          "typeString": "int_const 1"
                        },
                        "value": "1"
                      },
                      {
                        "hexValue": "32",
                        "id": 4242,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "5151:1:10",
                        "typeDescriptions": {
                          "typeIdentifier": "t_rational_2_by_1",
                          "typeString": "int_const 2"
                        },
                        "value": "2"
                      },
                      {
                        "hexValue": "31",
                        "id": 4243,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "5154:1:10",
                        "typeDescriptions": {
                          "typeIdentifier": "t_rational_1_by_1",
                          "typeString": "int_const 1"
                        },
                        "value": "1"
                      },
                      {
                        "hexValue": "30",
                        "id": 4244,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "5157:1:10",
                        "typeDescriptions": {
                          "typeIdentifier": "t_rational_0_by_1",
                          "typeString": "int_const 0"
                        },
                        "value": "0"
                      }
                    ],
                    "id": 4245,
                    "isConstant": false,
                    "isInlineArray": false,
                    "isLValue": false,
                    "isPure": true,
                    "lValueRequested": false,
                    "nodeType": "TupleExpression",
                    "src": "5147:12:10",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$_t_rational_1_by_1_$_t_rational_2_by_1_$_t_rational_1_by_1_$_t_rational_0_by_1_$",
                      "typeString": "tuple(int_const 1,int_const 2,int_const 1,int_const 0)"
                    }
                  },
                  "functionReturnParameters": 4240,
                  "id": 4246,
                  "nodeType": "Return",
                  "src": "5140:19:10"
                }
              ]
            },
            "documentation": {
              "id": 4230,
              "nodeType": "StructuredDocumentation",
              "src": "4774:270:10",
              "text": " @notice Returns the storage, major, minor, and patch version of the contract.\n @return Storage version of the contract.\n @return Major version of the contract.\n @return Minor version of the contract.\n @return Patch version of the contract."
            },
            "functionSelector": "54255be0",
            "id": 4248,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "getVersionNumber",
            "nameLocation": "5056:16:10",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 4231,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "5072:2:10"
            },
            "returnParameters": {
              "id": 4240,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 4233,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 4248,
                  "src": "5098:7:10",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 4232,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "5098:7:10",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 4235,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 4248,
                  "src": "5107:7:10",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 4234,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "5107:7:10",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 4237,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 4248,
                  "src": "5116:7:10",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 4236,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "5116:7:10",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 4239,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 4248,
                  "src": "5125:7:10",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 4238,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "5125:7:10",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "5097:36:10"
            },
            "scope": 4599,
            "src": "5047:117:10",
            "stateMutability": "pure",
            "virtual": false,
            "visibility": "external"
          },
          {
            "body": {
              "id": 4279,
              "nodeType": "Block",
              "src": "5479:248:10",
              "statements": [
                {
                  "expression": {
                    "id": 4263,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 4258,
                      "name": "deprecated_adjustmentSpeed",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 4084,
                      "src": "5485:26:10",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_Fraction_$16296_storage",
                        "typeString": "struct FixidityLib.Fraction storage ref"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "arguments": [
                        {
                          "id": 4261,
                          "name": "_adjustmentSpeed",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 4251,
                          "src": "5531:16:10",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        ],
                        "expression": {
                          "id": 4259,
                          "name": "FixidityLib",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 16955,
                          "src": "5514:11:10",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_contract$_FixidityLib_$16955_$",
                            "typeString": "type(library FixidityLib)"
                          }
                        },
                        "id": 4260,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberLocation": "5526:4:10",
                        "memberName": "wrap",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 16334,
                        "src": "5514:16:10",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_struct$_Fraction_$16296_memory_ptr_$",
                          "typeString": "function (uint256) pure returns (struct FixidityLib.Fraction memory)"
                        }
                      },
                      "id": 4262,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "nameLocations": [],
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "5514:34:10",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_Fraction_$16296_memory_ptr",
                        "typeString": "struct FixidityLib.Fraction memory"
                      }
                    },
                    "src": "5485:63:10",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_Fraction_$16296_storage",
                      "typeString": "struct FixidityLib.Fraction storage ref"
                    }
                  },
                  "id": 4264,
                  "nodeType": "ExpressionStatement",
                  "src": "5485:63:10"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "arguments": [],
                            "expression": {
                              "argumentTypes": [],
                              "expression": {
                                "id": 4268,
                                "name": "FixidityLib",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 16955,
                                "src": "5599:11:10",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_type$_t_contract$_FixidityLib_$16955_$",
                                  "typeString": "type(library FixidityLib)"
                                }
                              },
                              "id": 4269,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberLocation": "5611:6:10",
                              "memberName": "fixed1",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 16320,
                              "src": "5599:18:10",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_internal_pure$__$returns$_t_struct$_Fraction_$16296_memory_ptr_$",
                                "typeString": "function () pure returns (struct FixidityLib.Fraction memory)"
                              }
                            },
                            "id": 4270,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "nameLocations": [],
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "5599:20:10",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_Fraction_$16296_memory_ptr",
                              "typeString": "struct FixidityLib.Fraction memory"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_struct$_Fraction_$16296_memory_ptr",
                              "typeString": "struct FixidityLib.Fraction memory"
                            }
                          ],
                          "expression": {
                            "id": 4266,
                            "name": "deprecated_adjustmentSpeed",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 4084,
                            "src": "5569:26:10",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_Fraction_$16296_storage",
                              "typeString": "struct FixidityLib.Fraction storage ref"
                            }
                          },
                          "id": 4267,
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberLocation": "5596:2:10",
                          "memberName": "lt",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 16900,
                          "src": "5569:29:10",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_pure$_t_struct$_Fraction_$16296_memory_ptr_$_t_struct$_Fraction_$16296_memory_ptr_$returns$_t_bool_$attached_to$_t_struct$_Fraction_$16296_memory_ptr_$",
                            "typeString": "function (struct FixidityLib.Fraction memory,struct FixidityLib.Fraction memory) pure returns (bool)"
                          }
                        },
                        "id": 4271,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "nameLocations": [],
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "5569:51:10",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "61646a7573746d656e74207370656564206d75737420626520736d616c6c6572207468616e2031",
                        "id": 4272,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "5628:41:10",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_1ca525b7c92ab0b7df54934c50022a14e556f23c4839d801f989aa9d9a315b5d",
                          "typeString": "literal_string \"adjustment speed must be smaller than 1\""
                        },
                        "value": "adjustment speed must be smaller than 1"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_1ca525b7c92ab0b7df54934c50022a14e556f23c4839d801f989aa9d9a315b5d",
                          "typeString": "literal_string \"adjustment speed must be smaller than 1\""
                        }
                      ],
                      "id": 4265,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        4294967278,
                        4294967278
                      ],
                      "referencedDeclaration": 4294967278,
                      "src": "5554:7:10",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 4273,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "5554:121:10",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 4274,
                  "nodeType": "ExpressionStatement",
                  "src": "5554:121:10"
                },
                {
                  "eventCall": {
                    "arguments": [
                      {
                        "id": 4276,
                        "name": "_adjustmentSpeed",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 4251,
                        "src": "5705:16:10",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 4275,
                      "name": "AdjustmentSpeedSet",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 4101,
                      "src": "5686:18:10",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_event_nonpayable$_t_uint256_$returns$__$",
                        "typeString": "function (uint256)"
                      }
                    },
                    "id": 4277,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "5686:36:10",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 4278,
                  "nodeType": "EmitStatement",
                  "src": "5681:41:10"
                }
              ]
            },
            "documentation": {
              "id": 4249,
              "nodeType": "StructuredDocumentation",
              "src": "5168:230:10",
              "text": " @notice Set a multiplier that impacts how quickly gas price minimum is adjusted.\n @param _adjustmentSpeed How quickly the minimum changes, expressed as a fixidity fraction.\n @dev Value is expected to be < 1."
            },
            "functionSelector": "30f726b9",
            "id": 4280,
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "id": 4254,
                "kind": "modifierInvocation",
                "modifierName": {
                  "id": 4253,
                  "name": "onlyOwner",
                  "nameLocations": [
                    "5462:9:10"
                  ],
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 31,
                  "src": "5462:9:10"
                },
                "nodeType": "ModifierInvocation",
                "src": "5462:9:10"
              },
              {
                "id": 4256,
                "kind": "modifierInvocation",
                "modifierName": {
                  "id": 4255,
                  "name": "onlyL1",
                  "nameLocations": [
                    "5472:6:10"
                  ],
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 4613,
                  "src": "5472:6:10"
                },
                "nodeType": "ModifierInvocation",
                "src": "5472:6:10"
              }
            ],
            "name": "setAdjustmentSpeed",
            "nameLocation": "5410:18:10",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 4252,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 4251,
                  "mutability": "mutable",
                  "name": "_adjustmentSpeed",
                  "nameLocation": "5437:16:10",
                  "nodeType": "VariableDeclaration",
                  "scope": 4280,
                  "src": "5429:24:10",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 4250,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "5429:7:10",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "5428:26:10"
            },
            "returnParameters": {
              "id": 4257,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "5479:0:10"
            },
            "scope": 4599,
            "src": "5401:326:10",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 4311,
              "nodeType": "Block",
              "src": "6032:236:10",
              "statements": [
                {
                  "expression": {
                    "id": 4295,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 4290,
                      "name": "deprecated_targetDensity",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 4081,
                      "src": "6038:24:10",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_Fraction_$16296_storage",
                        "typeString": "struct FixidityLib.Fraction storage ref"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "arguments": [
                        {
                          "id": 4293,
                          "name": "_targetDensity",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 4283,
                          "src": "6082:14:10",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        ],
                        "expression": {
                          "id": 4291,
                          "name": "FixidityLib",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 16955,
                          "src": "6065:11:10",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_contract$_FixidityLib_$16955_$",
                            "typeString": "type(library FixidityLib)"
                          }
                        },
                        "id": 4292,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberLocation": "6077:4:10",
                        "memberName": "wrap",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 16334,
                        "src": "6065:16:10",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_struct$_Fraction_$16296_memory_ptr_$",
                          "typeString": "function (uint256) pure returns (struct FixidityLib.Fraction memory)"
                        }
                      },
                      "id": 4294,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "nameLocations": [],
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "6065:32:10",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_Fraction_$16296_memory_ptr",
                        "typeString": "struct FixidityLib.Fraction memory"
                      }
                    },
                    "src": "6038:59:10",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_Fraction_$16296_storage",
                      "typeString": "struct FixidityLib.Fraction storage ref"
                    }
                  },
                  "id": 4296,
                  "nodeType": "ExpressionStatement",
                  "src": "6038:59:10"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "arguments": [],
                            "expression": {
                              "argumentTypes": [],
                              "expression": {
                                "id": 4300,
                                "name": "FixidityLib",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 16955,
                                "src": "6146:11:10",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_type$_t_contract$_FixidityLib_$16955_$",
                                  "typeString": "type(library FixidityLib)"
                                }
                              },
                              "id": 4301,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberLocation": "6158:6:10",
                              "memberName": "fixed1",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 16320,
                              "src": "6146:18:10",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_internal_pure$__$returns$_t_struct$_Fraction_$16296_memory_ptr_$",
                                "typeString": "function () pure returns (struct FixidityLib.Fraction memory)"
                              }
                            },
                            "id": 4302,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "nameLocations": [],
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "6146:20:10",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_Fraction_$16296_memory_ptr",
                              "typeString": "struct FixidityLib.Fraction memory"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_struct$_Fraction_$16296_memory_ptr",
                              "typeString": "struct FixidityLib.Fraction memory"
                            }
                          ],
                          "expression": {
                            "id": 4298,
                            "name": "deprecated_targetDensity",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 4081,
                            "src": "6118:24:10",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_Fraction_$16296_storage",
                              "typeString": "struct FixidityLib.Fraction storage ref"
                            }
                          },
                          "id": 4299,
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberLocation": "6143:2:10",
                          "memberName": "lt",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 16900,
                          "src": "6118:27:10",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_pure$_t_struct$_Fraction_$16296_memory_ptr_$_t_struct$_Fraction_$16296_memory_ptr_$returns$_t_bool_$attached_to$_t_struct$_Fraction_$16296_memory_ptr_$",
                            "typeString": "function (struct FixidityLib.Fraction memory,struct FixidityLib.Fraction memory) pure returns (bool)"
                          }
                        },
                        "id": 4303,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "nameLocations": [],
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "6118:49:10",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "7461726765742064656e73697479206d75737420626520736d616c6c6572207468616e2031",
                        "id": 4304,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "6175:39:10",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_de9fc88c13166a48d03981dcc23a666759f32cad49458a022b7a646309293f6e",
                          "typeString": "literal_string \"target density must be smaller than 1\""
                        },
                        "value": "target density must be smaller than 1"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_de9fc88c13166a48d03981dcc23a666759f32cad49458a022b7a646309293f6e",
                          "typeString": "literal_string \"target density must be smaller than 1\""
                        }
                      ],
                      "id": 4297,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        4294967278,
                        4294967278
                      ],
                      "referencedDeclaration": 4294967278,
                      "src": "6103:7:10",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 4305,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "6103:117:10",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 4306,
                  "nodeType": "ExpressionStatement",
                  "src": "6103:117:10"
                },
                {
                  "eventCall": {
                    "arguments": [
                      {
                        "id": 4308,
                        "name": "_targetDensity",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 4283,
                        "src": "6248:14:10",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 4307,
                      "name": "TargetDensitySet",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 4093,
                      "src": "6231:16:10",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_event_nonpayable$_t_uint256_$returns$__$",
                        "typeString": "function (uint256)"
                      }
                    },
                    "id": 4309,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "6231:32:10",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 4310,
                  "nodeType": "EmitStatement",
                  "src": "6226:37:10"
                }
              ]
            },
            "documentation": {
              "id": 4281,
              "nodeType": "StructuredDocumentation",
              "src": "5731:224:10",
              "text": " @notice Set the block density targeted by the gas price minimum algorithm.\n @param _targetDensity The target gas fullness of blocks, expressed as a fixidity fraction.\n @dev Value is expected to be < 1."
            },
            "functionSelector": "93ca6fc4",
            "id": 4312,
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "id": 4286,
                "kind": "modifierInvocation",
                "modifierName": {
                  "id": 4285,
                  "name": "onlyOwner",
                  "nameLocations": [
                    "6015:9:10"
                  ],
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 31,
                  "src": "6015:9:10"
                },
                "nodeType": "ModifierInvocation",
                "src": "6015:9:10"
              },
              {
                "id": 4288,
                "kind": "modifierInvocation",
                "modifierName": {
                  "id": 4287,
                  "name": "onlyL1",
                  "nameLocations": [
                    "6025:6:10"
                  ],
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 4613,
                  "src": "6025:6:10"
                },
                "nodeType": "ModifierInvocation",
                "src": "6025:6:10"
              }
            ],
            "name": "setTargetDensity",
            "nameLocation": "5967:16:10",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 4284,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 4283,
                  "mutability": "mutable",
                  "name": "_targetDensity",
                  "nameLocation": "5992:14:10",
                  "nodeType": "VariableDeclaration",
                  "scope": 4312,
                  "src": "5984:22:10",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 4282,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "5984:7:10",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "5983:24:10"
            },
            "returnParameters": {
              "id": 4289,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "6032:0:10"
            },
            "scope": 4599,
            "src": "5958:310:10",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 4337,
              "nodeType": "Block",
              "src": "6541:216:10",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 4325,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "id": 4323,
                          "name": "_gasPriceMinimumFloor",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 4315,
                          "src": "6555:21:10",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": ">",
                        "rightExpression": {
                          "hexValue": "30",
                          "id": 4324,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "6579:1:10",
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_0_by_1",
                            "typeString": "int_const 0"
                          },
                          "value": "0"
                        },
                        "src": "6555:25:10",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "676173207072696365206d696e696d756d20666c6f6f72206d7573742062652067726561746572207468616e207a65726f",
                        "id": 4326,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "6582:51:10",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_8930b1a1fce9c6c6ac87e8e1f4ca019a03f6b66006482ef580a68eacea7bcd7b",
                          "typeString": "literal_string \"gas price minimum floor must be greater than zero\""
                        },
                        "value": "gas price minimum floor must be greater than zero"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_8930b1a1fce9c6c6ac87e8e1f4ca019a03f6b66006482ef580a68eacea7bcd7b",
                          "typeString": "literal_string \"gas price minimum floor must be greater than zero\""
                        }
                      ],
                      "id": 4322,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        4294967278,
                        4294967278
                      ],
                      "referencedDeclaration": 4294967278,
                      "src": "6547:7:10",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 4327,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "6547:87:10",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 4328,
                  "nodeType": "ExpressionStatement",
                  "src": "6547:87:10"
                },
                {
                  "expression": {
                    "id": 4331,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 4329,
                      "name": "deprecated_gasPriceMinimumFloor",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 4078,
                      "src": "6640:31:10",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "id": 4330,
                      "name": "_gasPriceMinimumFloor",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 4315,
                      "src": "6674:21:10",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "6640:55:10",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 4332,
                  "nodeType": "ExpressionStatement",
                  "src": "6640:55:10"
                },
                {
                  "eventCall": {
                    "arguments": [
                      {
                        "id": 4334,
                        "name": "_gasPriceMinimumFloor",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 4315,
                        "src": "6730:21:10",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 4333,
                      "name": "GasPriceMinimumFloorSet",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 4097,
                      "src": "6706:23:10",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_event_nonpayable$_t_uint256_$returns$__$",
                        "typeString": "function (uint256)"
                      }
                    },
                    "id": 4335,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "6706:46:10",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 4336,
                  "nodeType": "EmitStatement",
                  "src": "6701:51:10"
                }
              ]
            },
            "documentation": {
              "id": 4313,
              "nodeType": "StructuredDocumentation",
              "src": "6272:178:10",
              "text": " @notice Set the minimum gas price treshold.\n @param _gasPriceMinimumFloor The lowest value the gas price minimum can be.\n @dev Value is expected to be > 0."
            },
            "functionSelector": "b830f4a4",
            "id": 4338,
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "id": 4318,
                "kind": "modifierInvocation",
                "modifierName": {
                  "id": 4317,
                  "name": "onlyOwner",
                  "nameLocations": [
                    "6524:9:10"
                  ],
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 31,
                  "src": "6524:9:10"
                },
                "nodeType": "ModifierInvocation",
                "src": "6524:9:10"
              },
              {
                "id": 4320,
                "kind": "modifierInvocation",
                "modifierName": {
                  "id": 4319,
                  "name": "onlyL1",
                  "nameLocations": [
                    "6534:6:10"
                  ],
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 4613,
                  "src": "6534:6:10"
                },
                "nodeType": "ModifierInvocation",
                "src": "6534:6:10"
              }
            ],
            "name": "setGasPriceMinimumFloor",
            "nameLocation": "6462:23:10",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 4316,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 4315,
                  "mutability": "mutable",
                  "name": "_gasPriceMinimumFloor",
                  "nameLocation": "6494:21:10",
                  "nodeType": "VariableDeclaration",
                  "scope": 4338,
                  "src": "6486:29:10",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 4314,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "6486:7:10",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "6485:31:10"
            },
            "returnParameters": {
              "id": 4321,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "6541:0:10"
            },
            "scope": 4599,
            "src": "6453:304:10",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 4362,
              "nodeType": "Block",
              "src": "6917:225:10",
              "statements": [
                {
                  "condition": {
                    "commonType": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    },
                    "id": 4353,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "commonType": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "id": 4348,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "leftExpression": {
                        "id": 4346,
                        "name": "deprecated_baseFeeOpCodeActivationBlock",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 4086,
                        "src": "6934:39:10",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "nodeType": "BinaryOperation",
                      "operator": ">",
                      "rightExpression": {
                        "hexValue": "30",
                        "id": 4347,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "6976:1:10",
                        "typeDescriptions": {
                          "typeIdentifier": "t_rational_0_by_1",
                          "typeString": "int_const 0"
                        },
                        "value": "0"
                      },
                      "src": "6934:43:10",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "&&",
                    "rightExpression": {
                      "commonType": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "id": 4352,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "leftExpression": {
                        "expression": {
                          "id": 4349,
                          "name": "block",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 4294967292,
                          "src": "6987:5:10",
                          "typeDescriptions": {
                            "typeIdentifier": "t_magic_block",
                            "typeString": "block"
                          }
                        },
                        "id": 4350,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberLocation": "6993:6:10",
                        "memberName": "number",
                        "nodeType": "MemberAccess",
                        "src": "6987:12:10",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "nodeType": "BinaryOperation",
                      "operator": ">=",
                      "rightExpression": {
                        "id": 4351,
                        "name": "deprecated_baseFeeOpCodeActivationBlock",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 4086,
                        "src": "7003:39:10",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "src": "6987:55:10",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "src": "6934:108:10",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "falseBody": {
                    "id": 4360,
                    "nodeType": "Block",
                    "src": "7090:48:10",
                    "statements": [
                      {
                        "expression": {
                          "id": 4358,
                          "name": "deprecated_gasPriceMinimum",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 4076,
                          "src": "7105:26:10",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "functionReturnParameters": 4345,
                        "id": 4359,
                        "nodeType": "Return",
                        "src": "7098:33:10"
                      }
                    ]
                  },
                  "id": 4361,
                  "nodeType": "IfStatement",
                  "src": "6923:215:10",
                  "trueBody": {
                    "id": 4357,
                    "nodeType": "Block",
                    "src": "7049:35:10",
                    "statements": [
                      {
                        "expression": {
                          "expression": {
                            "id": 4354,
                            "name": "block",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 4294967292,
                            "src": "7064:5:10",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_block",
                              "typeString": "block"
                            }
                          },
                          "id": 4355,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberLocation": "7070:7:10",
                          "memberName": "basefee",
                          "nodeType": "MemberAccess",
                          "src": "7064:13:10",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "functionReturnParameters": 4345,
                        "id": 4356,
                        "nodeType": "Return",
                        "src": "7057:20:10"
                      }
                    ]
                  }
                }
              ]
            },
            "documentation": {
              "id": 4339,
              "nodeType": "StructuredDocumentation",
              "src": "6761:89:10",
              "text": " @notice Returns the gas price minimum.\n @return The gas price minimum."
            },
            "functionSelector": "36945c2d",
            "id": 4363,
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "id": 4342,
                "kind": "modifierInvocation",
                "modifierName": {
                  "id": 4341,
                  "name": "onlyL1",
                  "nameLocations": [
                    "6892:6:10"
                  ],
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 4613,
                  "src": "6892:6:10"
                },
                "nodeType": "ModifierInvocation",
                "src": "6892:6:10"
              }
            ],
            "name": "gasPriceMinimum",
            "nameLocation": "6862:15:10",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 4340,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "6877:2:10"
            },
            "returnParameters": {
              "id": 4345,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 4344,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 4363,
                  "src": "6908:7:10",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 4343,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "6908:7:10",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "6907:9:10"
            },
            "scope": 4599,
            "src": "6853:289:10",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 4460,
              "nodeType": "Block",
              "src": "7728:937:10",
              "statements": [
                {
                  "assignments": [
                    4379
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 4379,
                      "mutability": "mutable",
                      "name": "blockDensity",
                      "nameLocation": "7762:12:10",
                      "nodeType": "VariableDeclaration",
                      "scope": 4460,
                      "src": "7734:40:10",
                      "stateVariable": false,
                      "storageLocation": "memory",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_Fraction_$16296_memory_ptr",
                        "typeString": "struct FixidityLib.Fraction"
                      },
                      "typeName": {
                        "id": 4378,
                        "nodeType": "UserDefinedTypeName",
                        "pathNode": {
                          "id": 4377,
                          "name": "FixidityLib.Fraction",
                          "nameLocations": [
                            "7734:11:10",
                            "7746:8:10"
                          ],
                          "nodeType": "IdentifierPath",
                          "referencedDeclaration": 16296,
                          "src": "7734:20:10"
                        },
                        "referencedDeclaration": 16296,
                        "src": "7734:20:10",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_Fraction_$16296_storage_ptr",
                          "typeString": "struct FixidityLib.Fraction"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 4385,
                  "initialValue": {
                    "arguments": [
                      {
                        "id": 4382,
                        "name": "blockGasTotal",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 4366,
                        "src": "7813:13:10",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "id": 4383,
                        "name": "blockGasLimit",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 4368,
                        "src": "7834:13:10",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "expression": {
                        "id": 4380,
                        "name": "FixidityLib",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 16955,
                        "src": "7777:11:10",
                        "typeDescriptions": {
                          "typeIdentifier": "t_type$_t_contract$_FixidityLib_$16955_$",
                          "typeString": "type(library FixidityLib)"
                        }
                      },
                      "id": 4381,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberLocation": "7789:16:10",
                      "memberName": "newFixedFraction",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 16435,
                      "src": "7777:28:10",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_struct$_Fraction_$16296_memory_ptr_$",
                        "typeString": "function (uint256,uint256) pure returns (struct FixidityLib.Fraction memory)"
                      }
                    },
                    "id": 4384,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "7777:76:10",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_Fraction_$16296_memory_ptr",
                      "typeString": "struct FixidityLib.Fraction memory"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "7734:119:10"
                },
                {
                  "assignments": [
                    4387
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 4387,
                      "mutability": "mutable",
                      "name": "densityGreaterThanTarget",
                      "nameLocation": "7864:24:10",
                      "nodeType": "VariableDeclaration",
                      "scope": 4460,
                      "src": "7859:29:10",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      },
                      "typeName": {
                        "id": 4386,
                        "name": "bool",
                        "nodeType": "ElementaryTypeName",
                        "src": "7859:4:10",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 4392,
                  "initialValue": {
                    "arguments": [
                      {
                        "id": 4390,
                        "name": "deprecated_targetDensity",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 4081,
                        "src": "7907:24:10",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_Fraction_$16296_storage",
                          "typeString": "struct FixidityLib.Fraction storage ref"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_struct$_Fraction_$16296_storage",
                          "typeString": "struct FixidityLib.Fraction storage ref"
                        }
                      ],
                      "expression": {
                        "id": 4388,
                        "name": "blockDensity",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 4379,
                        "src": "7891:12:10",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_Fraction_$16296_memory_ptr",
                          "typeString": "struct FixidityLib.Fraction memory"
                        }
                      },
                      "id": 4389,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberLocation": "7904:2:10",
                      "memberName": "gt",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 16862,
                      "src": "7891:15:10",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_pure$_t_struct$_Fraction_$16296_memory_ptr_$_t_struct$_Fraction_$16296_memory_ptr_$returns$_t_bool_$attached_to$_t_struct$_Fraction_$16296_memory_ptr_$",
                        "typeString": "function (struct FixidityLib.Fraction memory,struct FixidityLib.Fraction memory) pure returns (bool)"
                      }
                    },
                    "id": 4391,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "7891:41:10",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "7859:73:10"
                },
                {
                  "assignments": [
                    4397
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 4397,
                      "mutability": "mutable",
                      "name": "densityDelta",
                      "nameLocation": "7966:12:10",
                      "nodeType": "VariableDeclaration",
                      "scope": 4460,
                      "src": "7938:40:10",
                      "stateVariable": false,
                      "storageLocation": "memory",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_Fraction_$16296_memory_ptr",
                        "typeString": "struct FixidityLib.Fraction"
                      },
                      "typeName": {
                        "id": 4396,
                        "nodeType": "UserDefinedTypeName",
                        "pathNode": {
                          "id": 4395,
                          "name": "FixidityLib.Fraction",
                          "nameLocations": [
                            "7938:11:10",
                            "7950:8:10"
                          ],
                          "nodeType": "IdentifierPath",
                          "referencedDeclaration": 16296,
                          "src": "7938:20:10"
                        },
                        "referencedDeclaration": 16296,
                        "src": "7938:20:10",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_Fraction_$16296_storage_ptr",
                          "typeString": "struct FixidityLib.Fraction"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 4408,
                  "initialValue": {
                    "condition": {
                      "id": 4398,
                      "name": "densityGreaterThanTarget",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 4387,
                      "src": "7981:24:10",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "falseExpression": {
                      "arguments": [
                        {
                          "id": 4405,
                          "name": "blockDensity",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 4379,
                          "src": "8104:12:10",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_Fraction_$16296_memory_ptr",
                            "typeString": "struct FixidityLib.Fraction memory"
                          }
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_struct$_Fraction_$16296_memory_ptr",
                            "typeString": "struct FixidityLib.Fraction memory"
                          }
                        ],
                        "expression": {
                          "id": 4403,
                          "name": "deprecated_targetDensity",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 4081,
                          "src": "8070:24:10",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_Fraction_$16296_storage",
                            "typeString": "struct FixidityLib.Fraction storage ref"
                          }
                        },
                        "id": 4404,
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberLocation": "8095:8:10",
                        "memberName": "subtract",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 16545,
                        "src": "8070:33:10",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_internal_pure$_t_struct$_Fraction_$16296_memory_ptr_$_t_struct$_Fraction_$16296_memory_ptr_$returns$_t_struct$_Fraction_$16296_memory_ptr_$attached_to$_t_struct$_Fraction_$16296_memory_ptr_$",
                          "typeString": "function (struct FixidityLib.Fraction memory,struct FixidityLib.Fraction memory) pure returns (struct FixidityLib.Fraction memory)"
                        }
                      },
                      "id": 4406,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "nameLocations": [],
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "8070:47:10",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_Fraction_$16296_memory_ptr",
                        "typeString": "struct FixidityLib.Fraction memory"
                      }
                    },
                    "id": 4407,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "Conditional",
                    "src": "7981:136:10",
                    "trueExpression": {
                      "arguments": [
                        {
                          "id": 4401,
                          "name": "deprecated_targetDensity",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 4081,
                          "src": "8036:24:10",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_Fraction_$16296_storage",
                            "typeString": "struct FixidityLib.Fraction storage ref"
                          }
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_struct$_Fraction_$16296_storage",
                            "typeString": "struct FixidityLib.Fraction storage ref"
                          }
                        ],
                        "expression": {
                          "id": 4399,
                          "name": "blockDensity",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 4379,
                          "src": "8014:12:10",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_Fraction_$16296_memory_ptr",
                            "typeString": "struct FixidityLib.Fraction memory"
                          }
                        },
                        "id": 4400,
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberLocation": "8027:8:10",
                        "memberName": "subtract",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 16545,
                        "src": "8014:21:10",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_internal_pure$_t_struct$_Fraction_$16296_memory_ptr_$_t_struct$_Fraction_$16296_memory_ptr_$returns$_t_struct$_Fraction_$16296_memory_ptr_$attached_to$_t_struct$_Fraction_$16296_memory_ptr_$",
                          "typeString": "function (struct FixidityLib.Fraction memory,struct FixidityLib.Fraction memory) pure returns (struct FixidityLib.Fraction memory)"
                        }
                      },
                      "id": 4402,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "nameLocations": [],
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "8014:47:10",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_Fraction_$16296_memory_ptr",
                        "typeString": "struct FixidityLib.Fraction memory"
                      }
                    },
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_Fraction_$16296_memory_ptr",
                      "typeString": "struct FixidityLib.Fraction memory"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "7938:179:10"
                },
                {
                  "assignments": [
                    4413
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 4413,
                      "mutability": "mutable",
                      "name": "adjustment",
                      "nameLocation": "8151:10:10",
                      "nodeType": "VariableDeclaration",
                      "scope": 4460,
                      "src": "8123:38:10",
                      "stateVariable": false,
                      "storageLocation": "memory",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_Fraction_$16296_memory_ptr",
                        "typeString": "struct FixidityLib.Fraction"
                      },
                      "typeName": {
                        "id": 4412,
                        "nodeType": "UserDefinedTypeName",
                        "pathNode": {
                          "id": 4411,
                          "name": "FixidityLib.Fraction",
                          "nameLocations": [
                            "8123:11:10",
                            "8135:8:10"
                          ],
                          "nodeType": "IdentifierPath",
                          "referencedDeclaration": 16296,
                          "src": "8123:20:10"
                        },
                        "referencedDeclaration": 16296,
                        "src": "8123:20:10",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_Fraction_$16296_storage_ptr",
                          "typeString": "struct FixidityLib.Fraction"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 4434,
                  "initialValue": {
                    "condition": {
                      "id": 4414,
                      "name": "densityGreaterThanTarget",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 4387,
                      "src": "8164:24:10",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "falseExpression": {
                      "arguments": [
                        {
                          "arguments": [
                            {
                              "id": 4430,
                              "name": "densityDelta",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 4397,
                              "src": "8347:12:10",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_Fraction_$16296_memory_ptr",
                                "typeString": "struct FixidityLib.Fraction memory"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_struct$_Fraction_$16296_memory_ptr",
                                "typeString": "struct FixidityLib.Fraction memory"
                              }
                            ],
                            "expression": {
                              "id": 4428,
                              "name": "deprecated_adjustmentSpeed",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 4084,
                              "src": "8311:26:10",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_Fraction_$16296_storage",
                                "typeString": "struct FixidityLib.Fraction storage ref"
                              }
                            },
                            "id": 4429,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberLocation": "8338:8:10",
                            "memberName": "multiply",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 16768,
                            "src": "8311:35:10",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_pure$_t_struct$_Fraction_$16296_memory_ptr_$_t_struct$_Fraction_$16296_memory_ptr_$returns$_t_struct$_Fraction_$16296_memory_ptr_$attached_to$_t_struct$_Fraction_$16296_memory_ptr_$",
                              "typeString": "function (struct FixidityLib.Fraction memory,struct FixidityLib.Fraction memory) pure returns (struct FixidityLib.Fraction memory)"
                            }
                          },
                          "id": 4431,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "8311:49:10",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_Fraction_$16296_memory_ptr",
                            "typeString": "struct FixidityLib.Fraction memory"
                          }
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_struct$_Fraction_$16296_memory_ptr",
                            "typeString": "struct FixidityLib.Fraction memory"
                          }
                        ],
                        "expression": {
                          "arguments": [],
                          "expression": {
                            "argumentTypes": [],
                            "expression": {
                              "id": 4424,
                              "name": "FixidityLib",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 16955,
                              "src": "8281:11:10",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_contract$_FixidityLib_$16955_$",
                                "typeString": "type(library FixidityLib)"
                              }
                            },
                            "id": 4425,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberLocation": "8293:6:10",
                            "memberName": "fixed1",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 16320,
                            "src": "8281:18:10",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_pure$__$returns$_t_struct$_Fraction_$16296_memory_ptr_$",
                              "typeString": "function () pure returns (struct FixidityLib.Fraction memory)"
                            }
                          },
                          "id": 4426,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "8281:20:10",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_Fraction_$16296_memory_ptr",
                            "typeString": "struct FixidityLib.Fraction memory"
                          }
                        },
                        "id": 4427,
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberLocation": "8302:8:10",
                        "memberName": "subtract",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 16545,
                        "src": "8281:29:10",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_internal_pure$_t_struct$_Fraction_$16296_memory_ptr_$_t_struct$_Fraction_$16296_memory_ptr_$returns$_t_struct$_Fraction_$16296_memory_ptr_$attached_to$_t_struct$_Fraction_$16296_memory_ptr_$",
                          "typeString": "function (struct FixidityLib.Fraction memory,struct FixidityLib.Fraction memory) pure returns (struct FixidityLib.Fraction memory)"
                        }
                      },
                      "id": 4432,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "nameLocations": [],
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "8281:80:10",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_Fraction_$16296_memory_ptr",
                        "typeString": "struct FixidityLib.Fraction memory"
                      }
                    },
                    "id": 4433,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "Conditional",
                    "src": "8164:197:10",
                    "trueExpression": {
                      "arguments": [
                        {
                          "arguments": [
                            {
                              "id": 4421,
                              "name": "densityDelta",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 4397,
                              "src": "8258:12:10",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_Fraction_$16296_memory_ptr",
                                "typeString": "struct FixidityLib.Fraction memory"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_struct$_Fraction_$16296_memory_ptr",
                                "typeString": "struct FixidityLib.Fraction memory"
                              }
                            ],
                            "expression": {
                              "id": 4419,
                              "name": "deprecated_adjustmentSpeed",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 4084,
                              "src": "8222:26:10",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_Fraction_$16296_storage",
                                "typeString": "struct FixidityLib.Fraction storage ref"
                              }
                            },
                            "id": 4420,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberLocation": "8249:8:10",
                            "memberName": "multiply",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 16768,
                            "src": "8222:35:10",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_pure$_t_struct$_Fraction_$16296_memory_ptr_$_t_struct$_Fraction_$16296_memory_ptr_$returns$_t_struct$_Fraction_$16296_memory_ptr_$attached_to$_t_struct$_Fraction_$16296_memory_ptr_$",
                              "typeString": "function (struct FixidityLib.Fraction memory,struct FixidityLib.Fraction memory) pure returns (struct FixidityLib.Fraction memory)"
                            }
                          },
                          "id": 4422,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "8222:49:10",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_Fraction_$16296_memory_ptr",
                            "typeString": "struct FixidityLib.Fraction memory"
                          }
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_struct$_Fraction_$16296_memory_ptr",
                            "typeString": "struct FixidityLib.Fraction memory"
                          }
                        ],
                        "expression": {
                          "arguments": [],
                          "expression": {
                            "argumentTypes": [],
                            "expression": {
                              "id": 4415,
                              "name": "FixidityLib",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 16955,
                              "src": "8197:11:10",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_contract$_FixidityLib_$16955_$",
                                "typeString": "type(library FixidityLib)"
                              }
                            },
                            "id": 4416,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberLocation": "8209:6:10",
                            "memberName": "fixed1",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 16320,
                            "src": "8197:18:10",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_pure$__$returns$_t_struct$_Fraction_$16296_memory_ptr_$",
                              "typeString": "function () pure returns (struct FixidityLib.Fraction memory)"
                            }
                          },
                          "id": 4417,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "8197:20:10",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_Fraction_$16296_memory_ptr",
                            "typeString": "struct FixidityLib.Fraction memory"
                          }
                        },
                        "id": 4418,
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberLocation": "8218:3:10",
                        "memberName": "add",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 16514,
                        "src": "8197:24:10",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_internal_pure$_t_struct$_Fraction_$16296_memory_ptr_$_t_struct$_Fraction_$16296_memory_ptr_$returns$_t_struct$_Fraction_$16296_memory_ptr_$attached_to$_t_struct$_Fraction_$16296_memory_ptr_$",
                          "typeString": "function (struct FixidityLib.Fraction memory,struct FixidityLib.Fraction memory) pure returns (struct FixidityLib.Fraction memory)"
                        }
                      },
                      "id": 4423,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "nameLocations": [],
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "8197:75:10",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_Fraction_$16296_memory_ptr",
                        "typeString": "struct FixidityLib.Fraction memory"
                      }
                    },
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_Fraction_$16296_memory_ptr",
                      "typeString": "struct FixidityLib.Fraction memory"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "8123:238:10"
                },
                {
                  "assignments": [
                    4436
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 4436,
                      "mutability": "mutable",
                      "name": "newGasPriceMinimum",
                      "nameLocation": "8376:18:10",
                      "nodeType": "VariableDeclaration",
                      "scope": 4460,
                      "src": "8368:26:10",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 4435,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "8368:7:10",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 4452,
                  "initialValue": {
                    "arguments": [],
                    "expression": {
                      "argumentTypes": [],
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [],
                            "expression": {
                              "argumentTypes": [],
                              "expression": {
                                "id": 4446,
                                "name": "FixidityLib",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 16955,
                                "src": "8476:11:10",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_type$_t_contract$_FixidityLib_$16955_$",
                                  "typeString": "type(library FixidityLib)"
                                }
                              },
                              "id": 4447,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberLocation": "8488:6:10",
                              "memberName": "fixed1",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 16320,
                              "src": "8476:18:10",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_internal_pure$__$returns$_t_struct$_Fraction_$16296_memory_ptr_$",
                                "typeString": "function () pure returns (struct FixidityLib.Fraction memory)"
                              }
                            },
                            "id": 4448,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "nameLocations": [],
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "8476:20:10",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_Fraction_$16296_memory_ptr",
                              "typeString": "struct FixidityLib.Fraction memory"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_struct$_Fraction_$16296_memory_ptr",
                              "typeString": "struct FixidityLib.Fraction memory"
                            }
                          ],
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "arguments": [],
                                    "expression": {
                                      "argumentTypes": [],
                                      "id": 4441,
                                      "name": "gasPriceMinimum",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 4363,
                                      "src": "8445:15:10",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_function_internal_view$__$returns$_t_uint256_$",
                                        "typeString": "function () view returns (uint256)"
                                      }
                                    },
                                    "id": 4442,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "kind": "functionCall",
                                    "lValueRequested": false,
                                    "nameLocations": [],
                                    "names": [],
                                    "nodeType": "FunctionCall",
                                    "src": "8445:17:10",
                                    "tryCall": false,
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  ],
                                  "expression": {
                                    "id": 4439,
                                    "name": "FixidityLib",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 16955,
                                    "src": "8424:11:10",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_type$_t_contract$_FixidityLib_$16955_$",
                                      "typeString": "type(library FixidityLib)"
                                    }
                                  },
                                  "id": 4440,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberLocation": "8436:8:10",
                                  "memberName": "newFixed",
                                  "nodeType": "MemberAccess",
                                  "referencedDeclaration": 16389,
                                  "src": "8424:20:10",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_struct$_Fraction_$16296_memory_ptr_$",
                                    "typeString": "function (uint256) pure returns (struct FixidityLib.Fraction memory)"
                                  }
                                },
                                "id": 4443,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "kind": "functionCall",
                                "lValueRequested": false,
                                "nameLocations": [],
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "8424:39:10",
                                "tryCall": false,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_struct$_Fraction_$16296_memory_ptr",
                                  "typeString": "struct FixidityLib.Fraction memory"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_struct$_Fraction_$16296_memory_ptr",
                                  "typeString": "struct FixidityLib.Fraction memory"
                                }
                              ],
                              "expression": {
                                "id": 4437,
                                "name": "adjustment",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 4413,
                                "src": "8397:10:10",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_struct$_Fraction_$16296_memory_ptr",
                                  "typeString": "struct FixidityLib.Fraction memory"
                                }
                              },
                              "id": 4438,
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberLocation": "8415:8:10",
                              "memberName": "multiply",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 16768,
                              "src": "8397:26:10",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_internal_pure$_t_struct$_Fraction_$16296_memory_ptr_$_t_struct$_Fraction_$16296_memory_ptr_$returns$_t_struct$_Fraction_$16296_memory_ptr_$attached_to$_t_struct$_Fraction_$16296_memory_ptr_$",
                                "typeString": "function (struct FixidityLib.Fraction memory,struct FixidityLib.Fraction memory) pure returns (struct FixidityLib.Fraction memory)"
                              }
                            },
                            "id": 4444,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "nameLocations": [],
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "8397:67:10",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_Fraction_$16296_memory_ptr",
                              "typeString": "struct FixidityLib.Fraction memory"
                            }
                          },
                          "id": 4445,
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberLocation": "8472:3:10",
                          "memberName": "add",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 16514,
                          "src": "8397:78:10",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_pure$_t_struct$_Fraction_$16296_memory_ptr_$_t_struct$_Fraction_$16296_memory_ptr_$returns$_t_struct$_Fraction_$16296_memory_ptr_$attached_to$_t_struct$_Fraction_$16296_memory_ptr_$",
                            "typeString": "function (struct FixidityLib.Fraction memory,struct FixidityLib.Fraction memory) pure returns (struct FixidityLib.Fraction memory)"
                          }
                        },
                        "id": 4449,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "nameLocations": [],
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "8397:100:10",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_Fraction_$16296_memory_ptr",
                          "typeString": "struct FixidityLib.Fraction memory"
                        }
                      },
                      "id": 4450,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberLocation": "8505:9:10",
                      "memberName": "fromFixed",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 16404,
                      "src": "8397:117:10",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_pure$_t_struct$_Fraction_$16296_memory_ptr_$returns$_t_uint256_$attached_to$_t_struct$_Fraction_$16296_memory_ptr_$",
                        "typeString": "function (struct FixidityLib.Fraction memory) pure returns (uint256)"
                      }
                    },
                    "id": 4451,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "8397:119:10",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "8368:148:10"
                },
                {
                  "expression": {
                    "condition": {
                      "commonType": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "id": 4455,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "leftExpression": {
                        "id": 4453,
                        "name": "newGasPriceMinimum",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 4436,
                        "src": "8536:18:10",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "nodeType": "BinaryOperation",
                      "operator": ">=",
                      "rightExpression": {
                        "id": 4454,
                        "name": "deprecated_gasPriceMinimumFloor",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 4078,
                        "src": "8558:31:10",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "src": "8536:53:10",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "falseExpression": {
                      "id": 4457,
                      "name": "deprecated_gasPriceMinimumFloor",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 4078,
                      "src": "8629:31:10",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "id": 4458,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "Conditional",
                    "src": "8536:124:10",
                    "trueExpression": {
                      "id": 4456,
                      "name": "newGasPriceMinimum",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 4436,
                      "src": "8600:18:10",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "functionReturnParameters": 4374,
                  "id": 4459,
                  "nodeType": "Return",
                  "src": "8523:137:10"
                }
              ]
            },
            "documentation": {
              "id": 4364,
              "nodeType": "StructuredDocumentation",
              "src": "7146:449:10",
              "text": " @notice Calculates the gas price minimum based on governable parameters\n and block congestion.\n @param blockGasTotal The amount of gas in the most recent block.\n @param blockGasLimit The maxBlockGasLimit of the past block.\n @return result of the calculation (new gas price minimum)\n @dev Calculate using the following formula:\n oldGasPriceMinimum * (1 + (adjustmentSpeed * (blockDensity - targetDensity))) + 1."
            },
            "functionSelector": "ef712c5b",
            "id": 4461,
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "id": 4371,
                "kind": "modifierInvocation",
                "modifierName": {
                  "id": 4370,
                  "name": "onlyL1",
                  "nameLocations": [
                    "7703:6:10"
                  ],
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 4613,
                  "src": "7703:6:10"
                },
                "nodeType": "ModifierInvocation",
                "src": "7703:6:10"
              }
            ],
            "name": "getUpdatedGasPriceMinimum",
            "nameLocation": "7607:25:10",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 4369,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 4366,
                  "mutability": "mutable",
                  "name": "blockGasTotal",
                  "nameLocation": "7646:13:10",
                  "nodeType": "VariableDeclaration",
                  "scope": 4461,
                  "src": "7638:21:10",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 4365,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "7638:7:10",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 4368,
                  "mutability": "mutable",
                  "name": "blockGasLimit",
                  "nameLocation": "7673:13:10",
                  "nodeType": "VariableDeclaration",
                  "scope": 4461,
                  "src": "7665:21:10",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 4367,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "7665:7:10",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "7632:58:10"
            },
            "returnParameters": {
              "id": 4374,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 4373,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 4461,
                  "src": "7719:7:10",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 4372,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "7719:7:10",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "7718:9:10"
            },
            "scope": 4599,
            "src": "7598:1067:10",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 4471,
              "nodeType": "Block",
              "src": "8844:49:10",
              "statements": [
                {
                  "expression": {
                    "id": 4469,
                    "name": "deprecated_gasPriceMinimumFloor",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 4078,
                    "src": "8857:31:10",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "functionReturnParameters": 4468,
                  "id": 4470,
                  "nodeType": "Return",
                  "src": "8850:38:10"
                }
              ]
            },
            "documentation": {
              "id": 4462,
              "nodeType": "StructuredDocumentation",
              "src": "8669:101:10",
              "text": " @notice Returns the gas price minimum floor.\n @return The gas price minimum floor."
            },
            "functionSelector": "ceff0bd6",
            "id": 4472,
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "id": 4465,
                "kind": "modifierInvocation",
                "modifierName": {
                  "id": 4464,
                  "name": "onlyL1",
                  "nameLocations": [
                    "8819:6:10"
                  ],
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 4613,
                  "src": "8819:6:10"
                },
                "nodeType": "ModifierInvocation",
                "src": "8819:6:10"
              }
            ],
            "name": "gasPriceMinimumFloor",
            "nameLocation": "8782:20:10",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 4463,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "8802:2:10"
            },
            "returnParameters": {
              "id": 4468,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 4467,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 4472,
                  "src": "8835:7:10",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 4466,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "8835:7:10",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "8834:9:10"
            },
            "scope": 4599,
            "src": "8773:120:10",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "body": {
              "id": 4484,
              "nodeType": "Block",
              "src": "9047:51:10",
              "statements": [
                {
                  "expression": {
                    "arguments": [],
                    "expression": {
                      "argumentTypes": [],
                      "expression": {
                        "id": 4480,
                        "name": "deprecated_targetDensity",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 4081,
                        "src": "9060:24:10",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_Fraction_$16296_storage",
                          "typeString": "struct FixidityLib.Fraction storage ref"
                        }
                      },
                      "id": 4481,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberLocation": "9085:6:10",
                      "memberName": "unwrap",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 16347,
                      "src": "9060:31:10",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_pure$_t_struct$_Fraction_$16296_memory_ptr_$returns$_t_uint256_$attached_to$_t_struct$_Fraction_$16296_memory_ptr_$",
                        "typeString": "function (struct FixidityLib.Fraction memory) pure returns (uint256)"
                      }
                    },
                    "id": 4482,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "9060:33:10",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "functionReturnParameters": 4479,
                  "id": 4483,
                  "nodeType": "Return",
                  "src": "9053:40:10"
                }
              ]
            },
            "documentation": {
              "id": 4473,
              "nodeType": "StructuredDocumentation",
              "src": "8897:83:10",
              "text": " @notice Returns the target density.\n @return The target density."
            },
            "functionSelector": "4a3d5fe2",
            "id": 4485,
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "id": 4476,
                "kind": "modifierInvocation",
                "modifierName": {
                  "id": 4475,
                  "name": "onlyL1",
                  "nameLocations": [
                    "9022:6:10"
                  ],
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 4613,
                  "src": "9022:6:10"
                },
                "nodeType": "ModifierInvocation",
                "src": "9022:6:10"
              }
            ],
            "name": "targetDensity",
            "nameLocation": "8992:13:10",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 4474,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "9005:2:10"
            },
            "returnParameters": {
              "id": 4479,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 4478,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 4485,
                  "src": "9038:7:10",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 4477,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "9038:7:10",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "9037:9:10"
            },
            "scope": 4599,
            "src": "8983:115:10",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "body": {
              "id": 4497,
              "nodeType": "Block",
              "src": "9258:53:10",
              "statements": [
                {
                  "expression": {
                    "arguments": [],
                    "expression": {
                      "argumentTypes": [],
                      "expression": {
                        "id": 4493,
                        "name": "deprecated_adjustmentSpeed",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 4084,
                        "src": "9271:26:10",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_Fraction_$16296_storage",
                          "typeString": "struct FixidityLib.Fraction storage ref"
                        }
                      },
                      "id": 4494,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberLocation": "9298:6:10",
                      "memberName": "unwrap",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 16347,
                      "src": "9271:33:10",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_pure$_t_struct$_Fraction_$16296_memory_ptr_$returns$_t_uint256_$attached_to$_t_struct$_Fraction_$16296_memory_ptr_$",
                        "typeString": "function (struct FixidityLib.Fraction memory) pure returns (uint256)"
                      }
                    },
                    "id": 4495,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "9271:35:10",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "functionReturnParameters": 4492,
                  "id": 4496,
                  "nodeType": "Return",
                  "src": "9264:42:10"
                }
              ]
            },
            "documentation": {
              "id": 4486,
              "nodeType": "StructuredDocumentation",
              "src": "9102:87:10",
              "text": " @notice Returns the adjustment speed.\n @return The adjustment speed."
            },
            "functionSelector": "a68f548e",
            "id": 4498,
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "id": 4489,
                "kind": "modifierInvocation",
                "modifierName": {
                  "id": 4488,
                  "name": "onlyL1",
                  "nameLocations": [
                    "9233:6:10"
                  ],
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 4613,
                  "src": "9233:6:10"
                },
                "nodeType": "ModifierInvocation",
                "src": "9233:6:10"
              }
            ],
            "name": "adjustmentSpeed",
            "nameLocation": "9201:15:10",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 4487,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "9216:2:10"
            },
            "returnParameters": {
              "id": 4492,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 4491,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 4498,
                  "src": "9249:7:10",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 4490,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "9249:7:10",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "9248:9:10"
            },
            "scope": 4599,
            "src": "9192:119:10",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "body": {
              "id": 4508,
              "nodeType": "Block",
              "src": "9514:57:10",
              "statements": [
                {
                  "expression": {
                    "id": 4506,
                    "name": "deprecated_baseFeeOpCodeActivationBlock",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 4086,
                    "src": "9527:39:10",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "functionReturnParameters": 4505,
                  "id": 4507,
                  "nodeType": "Return",
                  "src": "9520:46:10"
                }
              ]
            },
            "documentation": {
              "id": 4499,
              "nodeType": "StructuredDocumentation",
              "src": "9315:117:10",
              "text": " @notice Returns the basefee opcode activation block.\n @return The basefee opcode activation block."
            },
            "functionSelector": "8efd92ca",
            "id": 4509,
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "id": 4502,
                "kind": "modifierInvocation",
                "modifierName": {
                  "id": 4501,
                  "name": "onlyL1",
                  "nameLocations": [
                    "9489:6:10"
                  ],
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 4613,
                  "src": "9489:6:10"
                },
                "nodeType": "ModifierInvocation",
                "src": "9489:6:10"
              }
            ],
            "name": "baseFeeOpCodeActivationBlock",
            "nameLocation": "9444:28:10",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 4500,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "9472:2:10"
            },
            "returnParameters": {
              "id": 4505,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 4504,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 4509,
                  "src": "9505:7:10",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 4503,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "9505:7:10",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "9504:9:10"
            },
            "scope": 4599,
            "src": "9435:136:10",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "body": {
              "id": 4536,
              "nodeType": "Block",
              "src": "9907:295:10",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "id": 4524,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "id": 4520,
                          "name": "allowZero",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 4514,
                          "src": "9928:9:10",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "||",
                        "rightExpression": {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 4523,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 4521,
                            "name": "_baseFeeOpCodeActivationBlock",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 4512,
                            "src": "9941:29:10",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": ">",
                          "rightExpression": {
                            "hexValue": "30",
                            "id": 4522,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "9973:1:10",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            },
                            "value": "0"
                          },
                          "src": "9941:33:10",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "src": "9928:46:10",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "62617365466565206f70436f64652061637469766174696f6e20626c6f636b206d7573742062652067726561746572207468616e207a65726f",
                        "id": 4525,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "9982:59:10",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_d9d51394b275342b564f39c329f58641636f622b7ee20b0abef6182e70e4bf06",
                          "typeString": "literal_string \"baseFee opCode activation block must be greater than zero\""
                        },
                        "value": "baseFee opCode activation block must be greater than zero"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_d9d51394b275342b564f39c329f58641636f622b7ee20b0abef6182e70e4bf06",
                          "typeString": "literal_string \"baseFee opCode activation block must be greater than zero\""
                        }
                      ],
                      "id": 4519,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        4294967278,
                        4294967278
                      ],
                      "referencedDeclaration": 4294967278,
                      "src": "9913:7:10",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 4526,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "9913:134:10",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 4527,
                  "nodeType": "ExpressionStatement",
                  "src": "9913:134:10"
                },
                {
                  "expression": {
                    "id": 4530,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 4528,
                      "name": "deprecated_baseFeeOpCodeActivationBlock",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 4086,
                      "src": "10053:39:10",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "id": 4529,
                      "name": "_baseFeeOpCodeActivationBlock",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 4512,
                      "src": "10095:29:10",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "10053:71:10",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 4531,
                  "nodeType": "ExpressionStatement",
                  "src": "10053:71:10"
                },
                {
                  "eventCall": {
                    "arguments": [
                      {
                        "id": 4533,
                        "name": "_baseFeeOpCodeActivationBlock",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 4512,
                        "src": "10167:29:10",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 4532,
                      "name": "BaseFeeOpCodeActivationBlockSet",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 4109,
                      "src": "10135:31:10",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_event_nonpayable$_t_uint256_$returns$__$",
                        "typeString": "function (uint256)"
                      }
                    },
                    "id": 4534,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "10135:62:10",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 4535,
                  "nodeType": "EmitStatement",
                  "src": "10130:67:10"
                }
              ]
            },
            "documentation": {
              "id": 4510,
              "nodeType": "StructuredDocumentation",
              "src": "9575:202:10",
              "text": " @notice Set the activation block of the baseFee opCode.\n @param _baseFeeOpCodeActivationBlock Block number where the baseFee opCode is activated\n @dev Value is expected to be > 0."
            },
            "id": 4537,
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "id": 4517,
                "kind": "modifierInvocation",
                "modifierName": {
                  "id": 4516,
                  "name": "onlyOwner",
                  "nameLocations": [
                    "9897:9:10"
                  ],
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 31,
                  "src": "9897:9:10"
                },
                "nodeType": "ModifierInvocation",
                "src": "9897:9:10"
              }
            ],
            "name": "_setBaseFeeOpCodeActivationBlock",
            "nameLocation": "9789:32:10",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 4515,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 4512,
                  "mutability": "mutable",
                  "name": "_baseFeeOpCodeActivationBlock",
                  "nameLocation": "9835:29:10",
                  "nodeType": "VariableDeclaration",
                  "scope": 4537,
                  "src": "9827:37:10",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 4511,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "9827:7:10",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 4514,
                  "mutability": "mutable",
                  "name": "allowZero",
                  "nameLocation": "9875:9:10",
                  "nodeType": "VariableDeclaration",
                  "scope": 4537,
                  "src": "9870:14:10",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 4513,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "9870:4:10",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "9821:67:10"
            },
            "returnParameters": {
              "id": 4518,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "9907:0:10"
            },
            "scope": 4599,
            "src": "9780:422:10",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "private"
          },
          {
            "body": {
              "id": 4597,
              "nodeType": "Block",
              "src": "10288:520:10",
              "statements": [
                {
                  "condition": {
                    "commonType": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    },
                    "id": 4556,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "commonType": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "id": 4549,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "leftExpression": {
                        "id": 4544,
                        "name": "tokenAddress",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 4539,
                        "src": "10305:12:10",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "nodeType": "BinaryOperation",
                      "operator": "==",
                      "rightExpression": {
                        "arguments": [
                          {
                            "hexValue": "30",
                            "id": 4547,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "10329:1:10",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            },
                            "value": "0"
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            }
                          ],
                          "id": 4546,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "nodeType": "ElementaryTypeNameExpression",
                          "src": "10321:7:10",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_address_$",
                            "typeString": "type(address)"
                          },
                          "typeName": {
                            "id": 4545,
                            "name": "address",
                            "nodeType": "ElementaryTypeName",
                            "src": "10321:7:10",
                            "typeDescriptions": {}
                          }
                        },
                        "id": 4548,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "typeConversion",
                        "lValueRequested": false,
                        "nameLocations": [],
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "10321:10:10",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "src": "10305:26:10",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "||",
                    "rightExpression": {
                      "commonType": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "id": 4555,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "leftExpression": {
                        "id": 4550,
                        "name": "tokenAddress",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 4539,
                        "src": "10341:12:10",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "nodeType": "BinaryOperation",
                      "operator": "==",
                      "rightExpression": {
                        "arguments": [
                          {
                            "id": 4553,
                            "name": "CELO_TOKEN_REGISTRY_ID",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 6379,
                            "src": "10385:22:10",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes32",
                              "typeString": "bytes32"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_bytes32",
                              "typeString": "bytes32"
                            }
                          ],
                          "expression": {
                            "id": 4551,
                            "name": "registry",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 6422,
                            "src": "10357:8:10",
                            "typeDescriptions": {
                              "typeIdentifier": "t_contract$_IRegistry_$17608",
                              "typeString": "contract IRegistry"
                            }
                          },
                          "id": 4552,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberLocation": "10366:18:10",
                          "memberName": "getAddressForOrDie",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 17576,
                          "src": "10357:27:10",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_external_view$_t_bytes32_$returns$_t_address_$",
                            "typeString": "function (bytes32) view external returns (address)"
                          }
                        },
                        "id": 4554,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "nameLocations": [],
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "10357:51:10",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "src": "10341:67:10",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "src": "10305:103:10",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "falseBody": {
                    "id": 4595,
                    "nodeType": "Block",
                    "src": "10460:344:10",
                    "statements": [
                      {
                        "assignments": [
                          4563
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 4563,
                            "mutability": "mutable",
                            "name": "sortedOracles",
                            "nameLocation": "10483:13:10",
                            "nodeType": "VariableDeclaration",
                            "scope": 4595,
                            "src": "10468:28:10",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_contract$_ISortedOracles_$19333",
                              "typeString": "contract ISortedOracles"
                            },
                            "typeName": {
                              "id": 4562,
                              "nodeType": "UserDefinedTypeName",
                              "pathNode": {
                                "id": 4561,
                                "name": "ISortedOracles",
                                "nameLocations": [
                                  "10468:14:10"
                                ],
                                "nodeType": "IdentifierPath",
                                "referencedDeclaration": 19333,
                                "src": "10468:14:10"
                              },
                              "referencedDeclaration": 19333,
                              "src": "10468:14:10",
                              "typeDescriptions": {
                                "typeIdentifier": "t_contract$_ISortedOracles_$19333",
                                "typeString": "contract ISortedOracles"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 4570,
                        "initialValue": {
                          "arguments": [
                            {
                              "arguments": [
                                {
                                  "id": 4567,
                                  "name": "SORTED_ORACLES_REGISTRY_ID",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 6347,
                                  "src": "10551:26:10",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_bytes32",
                                    "typeString": "bytes32"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_bytes32",
                                    "typeString": "bytes32"
                                  }
                                ],
                                "expression": {
                                  "id": 4565,
                                  "name": "registry",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 6422,
                                  "src": "10523:8:10",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_contract$_IRegistry_$17608",
                                    "typeString": "contract IRegistry"
                                  }
                                },
                                "id": 4566,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberLocation": "10532:18:10",
                                "memberName": "getAddressForOrDie",
                                "nodeType": "MemberAccess",
                                "referencedDeclaration": 17576,
                                "src": "10523:27:10",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_external_view$_t_bytes32_$returns$_t_address_$",
                                  "typeString": "function (bytes32) view external returns (address)"
                                }
                              },
                              "id": 4568,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "nameLocations": [],
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "10523:55:10",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            ],
                            "id": 4564,
                            "name": "ISortedOracles",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 19333,
                            "src": "10499:14:10",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_contract$_ISortedOracles_$19333_$",
                              "typeString": "type(contract ISortedOracles)"
                            }
                          },
                          "id": 4569,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "typeConversion",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "10499:87:10",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_contract$_ISortedOracles_$19333",
                            "typeString": "contract ISortedOracles"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "10468:118:10"
                      },
                      {
                        "assignments": [
                          4572
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 4572,
                            "mutability": "mutable",
                            "name": "rateNumerator",
                            "nameLocation": "10602:13:10",
                            "nodeType": "VariableDeclaration",
                            "scope": 4595,
                            "src": "10594:21:10",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "typeName": {
                              "id": 4571,
                              "name": "uint256",
                              "nodeType": "ElementaryTypeName",
                              "src": "10594:7:10",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 4573,
                        "nodeType": "VariableDeclarationStatement",
                        "src": "10594:21:10"
                      },
                      {
                        "assignments": [
                          4575
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 4575,
                            "mutability": "mutable",
                            "name": "rateDenominator",
                            "nameLocation": "10631:15:10",
                            "nodeType": "VariableDeclaration",
                            "scope": 4595,
                            "src": "10623:23:10",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "typeName": {
                              "id": 4574,
                              "name": "uint256",
                              "nodeType": "ElementaryTypeName",
                              "src": "10623:7:10",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 4576,
                        "nodeType": "VariableDeclarationStatement",
                        "src": "10623:23:10"
                      },
                      {
                        "expression": {
                          "id": 4584,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "components": [
                              {
                                "id": 4577,
                                "name": "rateNumerator",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 4572,
                                "src": "10655:13:10",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              {
                                "id": 4578,
                                "name": "rateDenominator",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 4575,
                                "src": "10670:15:10",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              }
                            ],
                            "id": 4579,
                            "isConstant": false,
                            "isInlineArray": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "nodeType": "TupleExpression",
                            "src": "10654:32:10",
                            "typeDescriptions": {
                              "typeIdentifier": "t_tuple$_t_uint256_$_t_uint256_$",
                              "typeString": "tuple(uint256,uint256)"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "arguments": [
                              {
                                "id": 4582,
                                "name": "tokenAddress",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 4539,
                                "src": "10714:12:10",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              ],
                              "expression": {
                                "id": 4580,
                                "name": "sortedOracles",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 4563,
                                "src": "10689:13:10",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_contract$_ISortedOracles_$19333",
                                  "typeString": "contract ISortedOracles"
                                }
                              },
                              "id": 4581,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberLocation": "10703:10:10",
                              "memberName": "medianRate",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 19318,
                              "src": "10689:24:10",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_external_view$_t_address_$returns$_t_uint256_$_t_uint256_$",
                                "typeString": "function (address) view external returns (uint256,uint256)"
                              }
                            },
                            "id": 4583,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "nameLocations": [],
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "10689:38:10",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_tuple$_t_uint256_$_t_uint256_$",
                              "typeString": "tuple(uint256,uint256)"
                            }
                          },
                          "src": "10654:73:10",
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 4585,
                        "nodeType": "ExpressionStatement",
                        "src": "10654:73:10"
                      },
                      {
                        "expression": {
                          "components": [
                            {
                              "commonType": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "id": 4592,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "components": [
                                  {
                                    "commonType": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    },
                                    "id": 4589,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "leftExpression": {
                                      "arguments": [],
                                      "expression": {
                                        "argumentTypes": [],
                                        "id": 4586,
                                        "name": "gasPriceMinimum",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 4363,
                                        "src": "10744:15:10",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_function_internal_view$__$returns$_t_uint256_$",
                                          "typeString": "function () view returns (uint256)"
                                        }
                                      },
                                      "id": 4587,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "kind": "functionCall",
                                      "lValueRequested": false,
                                      "nameLocations": [],
                                      "names": [],
                                      "nodeType": "FunctionCall",
                                      "src": "10744:17:10",
                                      "tryCall": false,
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "nodeType": "BinaryOperation",
                                    "operator": "*",
                                    "rightExpression": {
                                      "id": 4588,
                                      "name": "rateNumerator",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 4572,
                                      "src": "10764:13:10",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "src": "10744:33:10",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  }
                                ],
                                "id": 4590,
                                "isConstant": false,
                                "isInlineArray": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "nodeType": "TupleExpression",
                                "src": "10743:35:10",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "/",
                              "rightExpression": {
                                "id": 4591,
                                "name": "rateDenominator",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 4575,
                                "src": "10781:15:10",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "src": "10743:53:10",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "id": 4593,
                          "isConstant": false,
                          "isInlineArray": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "TupleExpression",
                          "src": "10742:55:10",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "functionReturnParameters": 4543,
                        "id": 4594,
                        "nodeType": "Return",
                        "src": "10735:62:10"
                      }
                    ]
                  },
                  "id": 4596,
                  "nodeType": "IfStatement",
                  "src": "10294:510:10",
                  "trueBody": {
                    "id": 4560,
                    "nodeType": "Block",
                    "src": "10415:39:10",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [],
                          "expression": {
                            "argumentTypes": [],
                            "id": 4557,
                            "name": "gasPriceMinimum",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 4363,
                            "src": "10430:15:10",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_view$__$returns$_t_uint256_$",
                              "typeString": "function () view returns (uint256)"
                            }
                          },
                          "id": 4558,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "10430:17:10",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "functionReturnParameters": 4543,
                        "id": 4559,
                        "nodeType": "Return",
                        "src": "10423:24:10"
                      }
                    ]
                  }
                }
              ]
            },
            "id": 4598,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "_getGasPriceMinimum",
            "nameLocation": "10215:19:10",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 4540,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 4539,
                  "mutability": "mutable",
                  "name": "tokenAddress",
                  "nameLocation": "10243:12:10",
                  "nodeType": "VariableDeclaration",
                  "scope": 4598,
                  "src": "10235:20:10",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 4538,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "10235:7:10",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "10234:22:10"
            },
            "returnParameters": {
              "id": 4543,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 4542,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 4598,
                  "src": "10279:7:10",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 4541,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "10279:7:10",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "10278:9:10"
            },
            "scope": 4599,
            "src": "10206:602:10",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "private"
          }
        ],
        "scope": 4600,
        "src": "608:10202:10",
        "usedErrors": []
      }
    ],
    "src": "42:10769:10"
  },
  "compiler": {
    "name": "solc",
    "version": "0.8.19+commit.7dd6d404.Emscripten.clang"
  },
  "networks": {},
  "schemaVersion": "3.4.13",
  "updatedAt": "2025-05-05T17:49:34.139Z",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "adjustmentSpeed()": {
        "returns": {
          "_0": "The adjustment speed."
        }
      },
      "baseFeeOpCodeActivationBlock()": {
        "returns": {
          "_0": "The basefee opcode activation block."
        }
      },
      "constructor": {
        "params": {
          "test": "Set to true to skip implementation initialization"
        }
      },
      "gasPriceMinimum()": {
        "returns": {
          "_0": "The gas price minimum."
        }
      },
      "gasPriceMinimumFloor()": {
        "returns": {
          "_0": "The gas price minimum floor."
        }
      },
      "getGasPriceMinimum(address)": {
        "details": "This functions assumes one unit of token has 18 digits.",
        "params": {
          "tokenAddress": "The currency the gas price should be in (defaults to Celo)."
        },
        "returns": {
          "_0": "current gas price minimum in the requested currency"
        }
      },
      "getUpdatedGasPriceMinimum(uint256,uint256)": {
        "details": "Calculate using the following formula: oldGasPriceMinimum * (1 + (adjustmentSpeed * (blockDensity - targetDensity))) + 1.",
        "params": {
          "blockGasLimit": "The maxBlockGasLimit of the past block.",
          "blockGasTotal": "The amount of gas in the most recent block."
        },
        "returns": {
          "_0": "result of the calculation (new gas price minimum)"
        }
      },
      "getVersionNumber()": {
        "returns": {
          "_0": "Storage version of the contract.",
          "_1": "Major version of the contract.",
          "_2": "Minor version of the contract.",
          "_3": "Patch version of the contract."
        }
      },
      "initialize(address,uint256,uint256,uint256,uint256)": {
        "params": {
          "_adjustmentSpeed": "How quickly the minimum changes, expressed as a fixidity fraction.",
          "_baseFeeOpCodeActivationBlock": "Block number where the baseFee opCode is activated",
          "_gasPriceMinimumFloor": "The lowest value the gas price minimum can be.",
          "_registryAddress": "The address of the registry core smart contract.",
          "_targetDensity": "The target gas fullness of blocks, expressed as a fixidity fraction."
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "setAdjustmentSpeed(uint256)": {
        "details": "Value is expected to be < 1.",
        "params": {
          "_adjustmentSpeed": "How quickly the minimum changes, expressed as a fixidity fraction."
        }
      },
      "setBaseFeeOpCodeActivationBlock(uint256)": {
        "details": "Value is expected to be > 0.",
        "params": {
          "_baseFeeOpCodeActivationBlock": "Block number where the baseFee opCode is activated"
        }
      },
      "setGasPriceMinimumFloor(uint256)": {
        "details": "Value is expected to be > 0.",
        "params": {
          "_gasPriceMinimumFloor": "The lowest value the gas price minimum can be."
        }
      },
      "setRegistry(address)": {
        "params": {
          "registryAddress": "The address of a registry contract for routing to other contracts."
        }
      },
      "setTargetDensity(uint256)": {
        "details": "Value is expected to be < 1.",
        "params": {
          "_targetDensity": "The target gas fullness of blocks, expressed as a fixidity fraction."
        }
      },
      "targetDensity()": {
        "returns": {
          "_0": "The target density."
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "updateGasPriceMinimum(uint256,uint256)": {
        "params": {
          "blockGasLimit": "The maxBlockGasLimit of the past block.",
          "blockGasTotal": "The amount of gas in the most recent block."
        },
        "returns": {
          "_0": "result of the calculation (new gas price minimum)"
        }
      }
    },
    "title": "Stores and provides gas price minimum for various currencies.",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "adjustmentSpeed()": {
        "notice": "Returns the adjustment speed."
      },
      "baseFeeOpCodeActivationBlock()": {
        "notice": "Returns the basefee opcode activation block."
      },
      "constructor": {
        "notice": "Sets initialized == true on implementation contracts"
      },
      "gasPriceMinimum()": {
        "notice": "Returns the gas price minimum."
      },
      "gasPriceMinimumFloor()": {
        "notice": "Returns the gas price minimum floor."
      },
      "getGasPriceMinimum(address)": {
        "notice": "Retrieve the current gas price minimum for a currency. When caled for 0x0 or Celo address, it returns gasPriceMinimum(). For other addresses it returns gasPriceMinimum() mutiplied by the SortedOracles median of the token. It does not check tokenAddress is a valid fee currency. this function will never returns values less than ABSOLUTE_MINIMAL_GAS_PRICE. If Oracle rate doesn't exist, it returns ABSOLUTE_MINIMAL_GAS_PRICE."
      },
      "getUpdatedGasPriceMinimum(uint256,uint256)": {
        "notice": "Calculates the gas price minimum based on governable parameters and block congestion."
      },
      "getVersionNumber()": {
        "notice": "Returns the storage, major, minor, and patch version of the contract."
      },
      "initialize(address,uint256,uint256,uint256,uint256)": {
        "notice": "Used in place of the constructor to allow the contract to be upgradable via proxy."
      },
      "setAdjustmentSpeed(uint256)": {
        "notice": "Set a multiplier that impacts how quickly gas price minimum is adjusted."
      },
      "setBaseFeeOpCodeActivationBlock(uint256)": {
        "notice": "Set the activation block of the baseFee opCode."
      },
      "setGasPriceMinimumFloor(uint256)": {
        "notice": "Set the minimum gas price treshold."
      },
      "setRegistry(address)": {
        "notice": "Updates the address pointing to a Registry contract."
      },
      "setTargetDensity(uint256)": {
        "notice": "Set the block density targeted by the gas price minimum algorithm."
      },
      "targetDensity()": {
        "notice": "Returns the target density."
      },
      "updateGasPriceMinimum(uint256,uint256)": {
        "notice": "Adjust the gas price minimum based on governable parameters and block congestion."
      }
    },
    "version": 1
  }
}