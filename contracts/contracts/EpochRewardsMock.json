{
  "contractName": "EpochRewardsMock",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "partner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "fraction",
          "type": "uint256"
        }
      ],
      "name": "CarbonOffsettingFundSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "fraction",
          "type": "uint256"
        }
      ],
      "name": "CommunityRewardFractionSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "registryAddress",
          "type": "address"
        }
      ],
      "name": "RegistrySet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "max",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "underspendAdjustmentFactor",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "overspendAdjustmentFactor",
          "type": "uint256"
        }
      ],
      "name": "RewardsMultiplierParametersSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "payment",
          "type": "uint256"
        }
      ],
      "name": "TargetValidatorEpochPaymentSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "fraction",
          "type": "uint256"
        }
      ],
      "name": "TargetVotingGoldFractionSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "max",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "adjustmentFactor",
          "type": "uint256"
        }
      ],
      "name": "TargetVotingYieldParametersSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "target",
          "type": "uint256"
        }
      ],
      "name": "TargetVotingYieldSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "fraction",
          "type": "uint256"
        }
      ],
      "name": "TargetVotingYieldUpdated",
      "type": "event"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "calculateTargetEpochRewards",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "carbonOffsettingPartner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "blsKey",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "blsPop",
          "type": "bytes"
        }
      ],
      "name": "checkProofOfPossession",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "aNumerator",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "aDenominator",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "bNumerator",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "bDenominator",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "exponent",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_decimals",
          "type": "uint256"
        }
      ],
      "name": "fractionMulExp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "bytes",
          "name": "header",
          "type": "bytes"
        }
      ],
      "name": "getBlockNumberFromHeader",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "getCarbonOffsettingFraction",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "getCommunityRewardFraction",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "getEpochNumber",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "blockNumber",
          "type": "uint256"
        }
      ],
      "name": "getEpochNumberOfBlock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "getEpochSize",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "blockNumber",
          "type": "uint256"
        }
      ],
      "name": "getParentSealBitmap",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "getRewardsMultiplierParameters",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "getTargetGoldTotalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "getTargetTotalEpochPaymentsInGold",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "getTargetVoterRewards",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "getTargetVotingGoldFraction",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "getTargetVotingYieldParameters",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "bytes",
          "name": "header",
          "type": "bytes"
        }
      ],
      "name": "getVerifiedSealBitmapFromHeader",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "getVersionNumber",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "getVotingGoldFraction",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "bytes",
          "name": "header",
          "type": "bytes"
        }
      ],
      "name": "hashHeader",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "registryAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "targetVotingYieldInitial",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "targetVotingYieldMax",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "targetVotingYieldAdjustmentFactor",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "rewardsMultiplierMax",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "rewardsMultiplierUnderspendAdjustmentFactor",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "rewardsMultiplierOverspendAdjustmentFactor",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_targetVotingGoldFraction",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_targetValidatorEpochPayment",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_communityRewardFraction",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_carbonOffsettingPartner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_carbonOffsettingFraction",
          "type": "uint256"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "initialized",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "isOwner",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "isReserveLow",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "blockNumber",
          "type": "uint256"
        }
      ],
      "name": "minQuorumSize",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "minQuorumSizeInCurrentSet",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "blockNumber",
          "type": "uint256"
        }
      ],
      "name": "numberValidatorsInSet",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "registry",
      "outputs": [
        {
          "internalType": "contract IRegistry",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "partner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "setCarbonOffsettingFund",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "setCommunityRewardFraction",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "registryAddress",
          "type": "address"
        }
      ],
      "name": "setRegistry",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "max",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "underspendAdjustmentFactor",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "overspendAdjustmentFactor",
          "type": "uint256"
        }
      ],
      "name": "setRewardsMultiplierParameters",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "setTargetValidatorEpochPayment",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "setTargetVotingGoldFraction",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "targetVotingYield",
          "type": "uint256"
        }
      ],
      "name": "setTargetVotingYield",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "max",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "adjustmentFactor",
          "type": "uint256"
        }
      ],
      "name": "setTargetVotingYieldParameters",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "startTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "targetValidatorEpochPayment",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [],
      "name": "updateTargetVotingYield",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "validatorAddressFromCurrentSet",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "validatorSignerAddressFromCurrentSet",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "blockNumber",
          "type": "uint256"
        }
      ],
      "name": "validatorSignerAddressFromSet",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "setNumberValidatorsInCurrentSet",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "getRewardsMultiplier",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "targetGoldTotalSupplyIncrease",
          "type": "uint256"
        }
      ],
      "name": "getRewardsMultiplier",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "numberValidatorsInCurrentSet",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "metadata": "{\"compiler\":{\"version\":\"0.5.13+commit.5b0b510c\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"partner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fraction\",\"type\":\"uint256\"}],\"name\":\"CarbonOffsettingFundSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fraction\",\"type\":\"uint256\"}],\"name\":\"CommunityRewardFractionSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"registryAddress\",\"type\":\"address\"}],\"name\":\"RegistrySet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"max\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"underspendAdjustmentFactor\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"overspendAdjustmentFactor\",\"type\":\"uint256\"}],\"name\":\"RewardsMultiplierParametersSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"payment\",\"type\":\"uint256\"}],\"name\":\"TargetValidatorEpochPaymentSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fraction\",\"type\":\"uint256\"}],\"name\":\"TargetVotingGoldFractionSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"max\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"adjustmentFactor\",\"type\":\"uint256\"}],\"name\":\"TargetVotingYieldParametersSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"target\",\"type\":\"uint256\"}],\"name\":\"TargetVotingYieldSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fraction\",\"type\":\"uint256\"}],\"name\":\"TargetVotingYieldUpdated\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[],\"name\":\"calculateTargetEpochRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"carbonOffsettingPartner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"blsKey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"blsPop\",\"type\":\"bytes\"}],\"name\":\"checkProofOfPossession\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"aNumerator\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"aDenominator\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bNumerator\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bDenominator\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"exponent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_decimals\",\"type\":\"uint256\"}],\"name\":\"fractionMulExp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"header\",\"type\":\"bytes\"}],\"name\":\"getBlockNumberFromHeader\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCarbonOffsettingFraction\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCommunityRewardFraction\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getEpochNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"getEpochNumberOfBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getEpochSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"getParentSealBitmap\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getRewardsMultiplier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"targetGoldTotalSupplyIncrease\",\"type\":\"uint256\"}],\"name\":\"getRewardsMultiplier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getRewardsMultiplierParameters\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTargetGoldTotalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTargetTotalEpochPaymentsInGold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTargetVoterRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTargetVotingGoldFraction\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTargetVotingYieldParameters\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"header\",\"type\":\"bytes\"}],\"name\":\"getVerifiedSealBitmapFromHeader\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getVersionNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getVotingGoldFraction\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"header\",\"type\":\"bytes\"}],\"name\":\"hashHeader\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"registryAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"targetVotingYieldInitial\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"targetVotingYieldMax\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"targetVotingYieldAdjustmentFactor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardsMultiplierMax\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardsMultiplierUnderspendAdjustmentFactor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardsMultiplierOverspendAdjustmentFactor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_targetVotingGoldFraction\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_targetValidatorEpochPayment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_communityRewardFraction\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_carbonOffsettingPartner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_carbonOffsettingFraction\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"initialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isReserveLow\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"minQuorumSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minQuorumSizeInCurrentSet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"numberValidatorsInCurrentSet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"numberValidatorsInSet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"registry\",\"outputs\":[{\"internalType\":\"contract IRegistry\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"partner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"setCarbonOffsettingFund\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"setCommunityRewardFraction\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"setNumberValidatorsInCurrentSet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"registryAddress\",\"type\":\"address\"}],\"name\":\"setRegistry\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"max\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"underspendAdjustmentFactor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"overspendAdjustmentFactor\",\"type\":\"uint256\"}],\"name\":\"setRewardsMultiplierParameters\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"setTargetValidatorEpochPayment\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"setTargetVotingGoldFraction\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"targetVotingYield\",\"type\":\"uint256\"}],\"name\":\"setTargetVotingYield\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"max\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"adjustmentFactor\",\"type\":\"uint256\"}],\"name\":\"setTargetVotingYieldParameters\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"targetValidatorEpochPayment\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"updateTargetVotingYield\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"validatorAddressFromCurrentSet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"validatorSignerAddressFromCurrentSet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"validatorSignerAddressFromSet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"methods\":{\"calculateTargetEpochRewards()\":{\"return\":\"The per validator epoch reward.The total rewards to voters.The total community reward.The total carbon offsetting partner reward.\"},\"checkProofOfPossession(address,bytes,bytes)\":{\"details\":\"This function will be deprecated in L2.\",\"params\":{\"blsKey\":\"The BLS public key that the validator is using for consensus, should pass proof  of possession. 48 bytes.\",\"blsPop\":\"The BLS public key proof-of-possession, which consists of a signature on the  account address. 96 bytes.\",\"sender\":\"The address signed by the BLS key to generate the proof of possession.\"},\"return\":\"True upon success.\"},\"fractionMulExp(uint256,uint256,uint256,uint256,uint256,uint256)\":{\"details\":\"This function will be deprecated in L2.\",\"params\":{\"_decimals\":\"precision\",\"aDenominator\":\"Denominator of first fraction\",\"aNumerator\":\"Numerator of first fraction\",\"bDenominator\":\"Denominator of exponentiated fraction\",\"bNumerator\":\"Numerator of exponentiated fraction\",\"exponent\":\"exponent to raise b to\"},\"return\":\"Numerator of the computed quantity (not reduced).Denominator of the computed quantity (not reduced).\"},\"getBlockNumberFromHeader(bytes)\":{\"details\":\"This function will be deprecated in L2.\",\"params\":{\"header\":\"RLP encoded header\"},\"return\":\"Block number.\"},\"getCarbonOffsettingFraction()\":{\"return\":\"The percentage of total reward which goes to the carbon offsetting partner.\"},\"getCommunityRewardFraction()\":{\"return\":\"The percentage of total reward which goes to the community funds.\"},\"getEpochNumber()\":{\"return\":\"Current epoch number.\"},\"getEpochNumberOfBlock(uint256)\":{\"params\":{\"blockNumber\":\"Block number where epoch number is calculated.\"},\"return\":\"Epoch number.\"},\"getEpochSize()\":{\"details\":\"This function will be deprecated in L2.\",\"return\":\"The current epoch size in blocks.\"},\"getParentSealBitmap(uint256)\":{\"details\":\"This function will be deprecated in L2.\",\"params\":{\"blockNumber\":\"Block number to retrieve. Must be within 4 epochs of the current number.\"},\"return\":\"Bitmap parent seal with set bits at indices corresponding to signing validators.\"},\"getRewardsMultiplier()\":{\"return\":\"The rewards multiplier based on the current and target Gold supplies.\"},\"getRewardsMultiplierParameters()\":{\"return\":\"The max multiplier.The underspend adjustment factors.The overspend adjustment factors.\"},\"getTargetGoldTotalSupply()\":{\"return\":\"The target Gold supply according to the epoch rewards target schedule.\"},\"getTargetTotalEpochPaymentsInGold()\":{\"return\":\"The total target epoch payments to validators, converted to Gold.\"},\"getTargetVoterRewards()\":{\"return\":\"the total target epoch rewards for voters.\"},\"getTargetVotingGoldFraction()\":{\"return\":\"The percentage of floating Gold voting to target.\"},\"getTargetVotingYieldParameters()\":{\"return\":\"The target factor for target voting yield.The max factor for target voting yield.The adjustment factor for target voting yield.\"},\"getVerifiedSealBitmapFromHeader(bytes)\":{\"details\":\"This function will be deprecated in L2.\",\"params\":{\"header\":\"RLP encoded header\"},\"return\":\"Bitmap parent seal with set bits at indices correspoinding to signing validators.\"},\"getVersionNumber()\":{\"return\":\"Storage version of the contract.Major version of the contract.Minor version of the contract.Patch version of the contract.\"},\"getVotingGoldFraction()\":{\"return\":\"The fraction of floating Gold being used for voting in validator elections.\"},\"hashHeader(bytes)\":{\"details\":\"This function will be deprecated in L2.\",\"params\":{\"header\":\"RLP encoded header\"},\"return\":\"Header hash.\"},\"initialize(address,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,address,uint256)\":{\"details\":\"Should be called only once.\",\"params\":{\"_carbonOffsettingFraction\":\"The percentage of rewards going to carbon offsetting partner.\",\"_carbonOffsettingPartner\":\"The address of the carbon offsetting partner.\",\"_communityRewardFraction\":\"The percentage of rewards that go the community funds.\",\"_targetValidatorEpochPayment\":\"The target validator epoch payment.\",\"_targetVotingGoldFraction\":\"The percentage of floating Gold voting to target.\",\"registryAddress\":\"The address of the registry contract.\",\"rewardsMultiplierMax\":\"The max multiplier on target epoch rewards.\",\"rewardsMultiplierOverspendAdjustmentFactor\":\"Adjusts the multiplier on target epoch  rewards when the protocol is running ahead of the target Gold supply.\",\"rewardsMultiplierUnderspendAdjustmentFactor\":\"Adjusts the multiplier on target epoch  rewards when the protocol is running behind the target Gold supply.\",\"targetVotingYieldAdjustmentFactor\":\"The target block reward adjustment factor for voters.\",\"targetVotingYieldInitial\":\"The initial relative target block reward for voters.\",\"targetVotingYieldMax\":\"The max relative target block reward for voters.\"}},\"isOwner()\":{\"details\":\"Returns true if the caller is the current owner.\"},\"minQuorumSize(uint256)\":{\"details\":\"Computed in celo-blockchain as int(math.Ceil(float64(2*valSet.Size()) / 3))This function will be deprecated in L2.\"},\"minQuorumSizeInCurrentSet()\":{\"details\":\"This function will be deprecated in L2.\",\"return\":\"Byzantine quorum of validators.\"},\"numberValidatorsInSet(uint256)\":{\"details\":\"This function will be deprecated in L2.\",\"params\":{\"blockNumber\":\"Block number to retrieve the validator set from.\"},\"return\":\"Size of the validator set.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner.     * NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setCarbonOffsettingFund(address,uint256)\":{\"params\":{\"partner\":\"The address of the carbon offsetting partner.\",\"value\":\"The percentage of the total reward to be sent to the carbon offsetting partner.\"},\"return\":\"True upon success.\"},\"setCommunityRewardFraction(uint256)\":{\"params\":{\"value\":\"The percentage of the total reward to be sent to the community funds.\"},\"return\":\"True upon success.\"},\"setRegistry(address)\":{\"params\":{\"registryAddress\":\"The address of a registry contract for routing to other contracts.\"}},\"setRewardsMultiplierParameters(uint256,uint256,uint256)\":{\"params\":{\"max\":\"The max multiplier on target epoch rewards.\",\"overspendAdjustmentFactor\":\"Adjusts the multiplier on target epoch rewards when the  protocol is running ahead of the target Gold supply.\",\"underspendAdjustmentFactor\":\"Adjusts the multiplier on target epoch rewards when the  protocol is running behind the target Gold supply.\"},\"return\":\"True upon success.\"},\"setTargetValidatorEpochPayment(uint256)\":{\"params\":{\"value\":\"The value in Celo Dollars.\"},\"return\":\"True upon success.\"},\"setTargetVotingGoldFraction(uint256)\":{\"params\":{\"value\":\"The percentage of floating Gold voting to target.\"},\"return\":\"True upon success.\"},\"setTargetVotingYield(uint256)\":{\"params\":{\"targetVotingYield\":\"The relative target block reward for voters.\"},\"return\":\"True upon success.\"},\"setTargetVotingYieldParameters(uint256,uint256)\":{\"params\":{\"adjustmentFactor\":\"The target block reward adjustment factor for voters.\",\"max\":\"The max relative target block reward for voters.\"},\"return\":\"True upon success.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"updateTargetVotingYield()\":{\"details\":\"Only called directly by the protocol.\"},\"validatorAddressFromCurrentSet(uint256)\":{\"params\":{\"index\":\"Index of requested validator in the validator set.\"},\"return\":\"Address of validator at the requested index.\"},\"validatorSignerAddressFromCurrentSet(uint256)\":{\"params\":{\"index\":\"Index of requested validator in the validator set.\"},\"return\":\"Address of validator signer at the requested index.\"},\"validatorSignerAddressFromSet(uint256,uint256)\":{\"details\":\"This function will be deprecated in L2.\",\"params\":{\"blockNumber\":\"Block number to retrieve the validator set from.\",\"index\":\"Index of requested validator in the validator set.\"},\"return\":\"Address of validator signer at the requested index.\"}},\"title\":\"A wrapper around EpochRewards that exposes internal functions for testing.\"},\"userdoc\":{\"methods\":{\"calculateTargetEpochRewards()\":{\"notice\":\"Calculates the per validator epoch payment and the total rewards to voters.\"},\"checkProofOfPossession(address,bytes,bytes)\":{\"notice\":\"Checks a BLS proof of possession.\"},\"fractionMulExp(uint256,uint256,uint256,uint256,uint256,uint256)\":{\"notice\":\"calculate a * b^x for fractions a, b to `decimals` precision\"},\"getBlockNumberFromHeader(bytes)\":{\"notice\":\"Parses block number out of header.\"},\"getCarbonOffsettingFraction()\":{\"notice\":\"Returns the carbon offsetting partner reward fraction.\"},\"getCommunityRewardFraction()\":{\"notice\":\"Returns the community reward fraction.\"},\"getEpochNumber()\":{\"notice\":\"Returns the epoch number at a block.\"},\"getEpochNumberOfBlock(uint256)\":{\"notice\":\"Returns the epoch number at a block.\"},\"getEpochSize()\":{\"notice\":\"Returns the current epoch size in blocks.\"},\"getParentSealBitmap(uint256)\":{\"notice\":\"Gets the parent seal bitmap from the header at the given block number.\"},\"getRewardsMultiplier()\":{\"notice\":\"Returns the rewards multiplier based on the current and target Gold supplies.\"},\"getRewardsMultiplierParameters()\":{\"notice\":\"Returns the rewards multiplier parameters.\"},\"getTargetGoldTotalSupply()\":{\"notice\":\"Returns the target Gold supply according to the epoch rewards target schedule.\"},\"getTargetTotalEpochPaymentsInGold()\":{\"notice\":\"Returns the total target epoch payments to validators, converted to Gold.\"},\"getTargetVoterRewards()\":{\"notice\":\"Returns the total target epoch rewards for voters.\"},\"getTargetVotingGoldFraction()\":{\"notice\":\"Returns the target voting Gold fraction.\"},\"getTargetVotingYieldParameters()\":{\"notice\":\"Returns the target voting yield parameters.\"},\"getVerifiedSealBitmapFromHeader(bytes)\":{\"notice\":\"Verifies the BLS signature on the header and returns the seal bitmap. The validator set used for verification is retrieved based on the parent hash field of the header.  If the parent hash is not in the blockchain, verification fails.\"},\"getVersionNumber()\":{\"notice\":\"Returns the storage, major, minor, and patch version of the contract.\"},\"getVotingGoldFraction()\":{\"notice\":\"Returns the fraction of floating Gold being used for voting in validator elections.\"},\"hashHeader(bytes)\":{\"notice\":\"Computes hash of header.\"},\"initialize(address,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,address,uint256)\":{\"notice\":\"Used in place of the constructor to allow the contract to be upgradable via proxy.\"},\"isReserveLow()\":{\"notice\":\"Determines if the reserve is low enough to demand a diversion from   the community reward. Targets initial critical ratio of 2 with a linear   decline until 25 years have passed where the critical ratio will be 1.\"},\"minQuorumSize(uint256)\":{\"notice\":\"Returns the minimum number of required signers for a given block number.\"},\"minQuorumSizeInCurrentSet()\":{\"notice\":\"Computes byzantine quorum from current validator set size\"},\"numberValidatorsInSet(uint256)\":{\"notice\":\"Gets the size of the validator set that must sign the given block number.\"},\"setCarbonOffsettingFund(address,uint256)\":{\"notice\":\"Sets the carbon offsetting fund.\"},\"setCommunityRewardFraction(uint256)\":{\"notice\":\"Sets the community reward percentage\"},\"setRegistry(address)\":{\"notice\":\"Updates the address pointing to a Registry contract.\"},\"setRewardsMultiplierParameters(uint256,uint256,uint256)\":{\"notice\":\"Sets the rewards multiplier parameters.\"},\"setTargetValidatorEpochPayment(uint256)\":{\"notice\":\"Sets the target per-epoch payment in Celo Dollars for validators.\"},\"setTargetVotingGoldFraction(uint256)\":{\"notice\":\"Sets the target voting Gold fraction.\"},\"setTargetVotingYield(uint256)\":{\"notice\":\"Sets the target voting yield.  Uses fixed point arithmetic for protection against overflow.\"},\"setTargetVotingYieldParameters(uint256,uint256)\":{\"notice\":\"Sets the target voting yield parameters.\"},\"updateTargetVotingYield()\":{\"notice\":\"Updates the target voting yield based on the difference between the target and current  voting Gold fraction.\"},\"validatorAddressFromCurrentSet(uint256)\":{\"notice\":\"Gets a validator address from the current validator set.\"},\"validatorSignerAddressFromCurrentSet(uint256)\":{\"notice\":\"Gets a validator signer address from the current validator set.\"},\"validatorSignerAddressFromSet(uint256,uint256)\":{\"notice\":\"Gets a validator signer address from the validator set at the given block number.\"}}}},\"settings\":{\"compilationTarget\":{\"project:/contracts/governance/test/EpochRewardsMock.sol\":\"EpochRewardsMock\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"openzeppelin-solidity/contracts/GSN/Context.sol\":{\"content\":\"pragma solidity ^0.5.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\ncontract Context {\\n    // Empty internal constructor, to prevent people from mistakenly deploying\\n    // an instance of this contract, which should be used via inheritance.\\n    constructor () internal { }\\n    // solhint-disable-previous-line no-empty-blocks\\n\\n    function _msgSender() internal view returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x90a3995645af7562d84b9d69363ffa5ae7217714ab61e951bf7bc450f40e4061\"},\"openzeppelin-solidity/contracts/math/SafeMath.sol\":{\"content\":\"pragma solidity ^0.5.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        // Solidity only automatically asserts when dividing by 0\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0x640b6dee7a4b830bdfd52b5031a07fc2b12209f5b2e29e5d364a7d37f69d8076\"},\"openzeppelin-solidity/contracts/ownership/Ownable.sol\":{\"content\":\"pragma solidity ^0.5.0;\\n\\nimport \\\"../GSN/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\ncontract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(isOwner(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the caller is the current owner.\\n     */\\n    function isOwner() public view returns (bool) {\\n        return _msgSender() == _owner;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public onlyOwner {\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     */\\n    function _transferOwnership(address newOwner) internal {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x6fb9d7889769d7cc161225f9ef7a90e468ba9788b253816f8d8b6894d3472c24\"},\"openzeppelin-solidity/contracts/token/ERC20/IERC20.sol\":{\"content\":\"pragma solidity ^0.5.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\\n * the optional functions; to access them see {ERC20Detailed}.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xe5bb0f57cff3e299f360052ba50f1ea0fff046df2be070b6943e0e3c3fdad8a9\"},\"project:/contracts-0.8/common/IsL2Check.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.5.13 <0.8.20;\\n\\n/**\\n * @title Based on predeploy returns whether this is L1 or L2.\\n */\\ncontract IsL2Check {\\n  address constant proxyAdminAddress = 0x4200000000000000000000000000000000000018;\\n\\n  /**\\n   * @notice Throws if called on L2.\\n   */\\n  modifier onlyL1() {\\n    allowOnlyL1();\\n    _;\\n  }\\n\\n  /**\\n   * @notice Throws if called on L1.\\n   */\\n  modifier onlyL2() {\\n    if (!isL2()) {\\n      revert(\\\"This method is not supported in L1.\\\");\\n    }\\n    _;\\n  }\\n\\n  /**\\n   * @notice Checks to see if current network is Celo L2.\\n   * @return Whether or not the current network is a Celo L2.\\n   */\\n  function isL2() internal view returns (bool) {\\n    uint32 size;\\n    address _addr = proxyAdminAddress;\\n    assembly {\\n      size := extcodesize(_addr)\\n    }\\n    return (size > 0);\\n  }\\n\\n  /**\\n   * @notice Used to restrict usage of the parent function to L1 execution.\\n   * @dev Reverts if called on a Celo L2 network.\\n   */\\n  function allowOnlyL1() internal view {\\n    if (isL2()) {\\n      revert(\\\"This method is no longer supported in L2.\\\");\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x4629a6f2c4364780f5a6a5e2ad5c3675c0a1d3bea35cfd4426eeaebca60cac37\"},\"project:/contracts/common/FixidityLib.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.5.13 <0.9.0;\\n\\n/**\\n * @title FixidityLib\\n * @author Gadi Guy, Alberto Cuesta Canada\\n * @notice This library provides fixed point arithmetic with protection against\\n * overflow.\\n * All operations are done with uint256 and the operands must have been created\\n * with any of the newFrom* functions, which shift the comma digits() to the\\n * right and check for limits, or with wrap() which expects a number already\\n * in the internal representation of a fraction.\\n * When using this library be sure to use maxNewFixed() as the upper limit for\\n * creation of fixed point numbers.\\n * @dev All contained functions are pure and thus marked internal to be inlined\\n * on consuming contracts at compile time for gas efficiency.\\n */\\nlibrary FixidityLib {\\n  struct Fraction {\\n    uint256 value;\\n  }\\n\\n  uint256 private constant FIXED1_UINT = 1000000000000000000000000;\\n\\n  /**\\n   * @notice Number of positions that the comma is shifted to the right.\\n   */\\n  function digits() internal pure returns (uint8) {\\n    return 24;\\n  }\\n\\n  /**\\n   * @notice This is 1 in the fixed point units used in this library.\\n   * @dev Test fixed1() equals 10^digits()\\n   * Hardcoded to 24 digits.\\n   */\\n  function fixed1() internal pure returns (Fraction memory) {\\n    return Fraction(FIXED1_UINT);\\n  }\\n\\n  /**\\n   * @notice Wrap a uint256 that represents a 24-decimal fraction in a Fraction\\n   * struct.\\n   * @param x Number that already represents a 24-decimal fraction.\\n   * @return A Fraction struct with contents x.\\n   */\\n  function wrap(uint256 x) internal pure returns (Fraction memory) {\\n    return Fraction(x);\\n  }\\n\\n  /**\\n   * @notice Unwraps the uint256 inside of a Fraction struct.\\n   */\\n  function unwrap(Fraction memory x) internal pure returns (uint256) {\\n    return x.value;\\n  }\\n\\n  /**\\n   * @notice The amount of decimals lost on each multiplication operand.\\n   * @dev Test mulPrecision() equals sqrt(fixed1)\\n   */\\n  function mulPrecision() internal pure returns (uint256) {\\n    return 1000000000000;\\n  }\\n\\n  /**\\n   * @notice Maximum value that can be converted to fixed point. Optimize for deployment.\\n   * @dev\\n   * Test maxNewFixed() equals maxUint256() / fixed1()\\n   */\\n  function maxNewFixed() internal pure returns (uint256) {\\n    return 115792089237316195423570985008687907853269984665640564;\\n  }\\n\\n  /**\\n   * @notice Converts a uint256 to fixed point Fraction\\n   * @dev Test newFixed(0) returns 0\\n   * Test newFixed(1) returns fixed1()\\n   * Test newFixed(maxNewFixed()) returns maxNewFixed() * fixed1()\\n   * Test newFixed(maxNewFixed()+1) fails\\n   */\\n  function newFixed(uint256 x) internal pure returns (Fraction memory) {\\n    require(x <= maxNewFixed(), \\\"can't create fixidity number larger than maxNewFixed()\\\");\\n    return Fraction(x * FIXED1_UINT);\\n  }\\n\\n  /**\\n   * @notice Converts a uint256 in the fixed point representation of this\\n   * library to a non decimal. All decimal digits will be truncated.\\n   */\\n  function fromFixed(Fraction memory x) internal pure returns (uint256) {\\n    return x.value / FIXED1_UINT;\\n  }\\n\\n  /**\\n   * @notice Converts two uint256 representing a fraction to fixed point units,\\n   * equivalent to multiplying dividend and divisor by 10^digits().\\n   * @param numerator numerator must be <= maxNewFixed()\\n   * @param denominator denominator must be <= maxNewFixed() and denominator can't be 0\\n   * @dev\\n   * Test newFixedFraction(1,0) fails\\n   * Test newFixedFraction(0,1) returns 0\\n   * Test newFixedFraction(1,1) returns fixed1()\\n   * Test newFixedFraction(1,fixed1()) returns 1\\n   */\\n  function newFixedFraction(\\n    uint256 numerator,\\n    uint256 denominator\\n  ) internal pure returns (Fraction memory) {\\n    Fraction memory convertedNumerator = newFixed(numerator);\\n    Fraction memory convertedDenominator = newFixed(denominator);\\n    return divide(convertedNumerator, convertedDenominator);\\n  }\\n\\n  /**\\n   * @notice Returns the integer part of a fixed point number.\\n   * @dev\\n   * Test integer(0) returns 0\\n   * Test integer(fixed1()) returns fixed1()\\n   * Test integer(newFixed(maxNewFixed())) returns maxNewFixed()*fixed1()\\n   */\\n  function integer(Fraction memory x) internal pure returns (Fraction memory) {\\n    return Fraction((x.value / FIXED1_UINT) * FIXED1_UINT); // Can't overflow\\n  }\\n\\n  /**\\n   * @notice Returns the fractional part of a fixed point number.\\n   * In the case of a negative number the fractional is also negative.\\n   * @dev\\n   * Test fractional(0) returns 0\\n   * Test fractional(fixed1()) returns 0\\n   * Test fractional(fixed1()-1) returns 10^24-1\\n   */\\n  function fractional(Fraction memory x) internal pure returns (Fraction memory) {\\n    return Fraction(x.value - (x.value / FIXED1_UINT) * FIXED1_UINT); // Can't overflow\\n  }\\n\\n  /**\\n   * @notice x+y.\\n   * @dev The maximum value that can be safely used as an addition operator is defined as\\n   * maxFixedAdd = maxUint256()-1 / 2, or\\n   * 57896044618658097711785492504343953926634992332820282019728792003956564819967.\\n   * Test add(maxFixedAdd,maxFixedAdd) equals maxFixedAdd + maxFixedAdd\\n   * Test add(maxFixedAdd+1,maxFixedAdd+1) throws\\n   */\\n  function add(Fraction memory x, Fraction memory y) internal pure returns (Fraction memory) {\\n    uint256 z = x.value + y.value;\\n    require(z >= x.value, \\\"add overflow detected\\\");\\n    return Fraction(z);\\n  }\\n\\n  /**\\n   * @notice x-y.\\n   * @dev\\n   * Test subtract(6, 10) fails\\n   */\\n  function subtract(Fraction memory x, Fraction memory y) internal pure returns (Fraction memory) {\\n    require(x.value >= y.value, \\\"substraction underflow detected\\\");\\n    return Fraction(x.value - y.value);\\n  }\\n\\n  /**\\n   * @notice x*y. If any of the operators is higher than the max multiplier value it\\n   * might overflow.\\n   * @dev The maximum value that can be safely used as a multiplication operator\\n   * (maxFixedMul) is calculated as sqrt(maxUint256()*fixed1()),\\n   * or 340282366920938463463374607431768211455999999999999\\n   * Test multiply(0,0) returns 0\\n   * Test multiply(maxFixedMul,0) returns 0\\n   * Test multiply(0,maxFixedMul) returns 0\\n   * Test multiply(fixed1()/mulPrecision(),fixed1()*mulPrecision()) returns fixed1()\\n   * Test multiply(maxFixedMul,maxFixedMul) is around maxUint256()\\n   * Test multiply(maxFixedMul+1,maxFixedMul+1) fails\\n   */\\n  function multiply(Fraction memory x, Fraction memory y) internal pure returns (Fraction memory) {\\n    if (x.value == 0 || y.value == 0) return Fraction(0);\\n    if (y.value == FIXED1_UINT) return x;\\n    if (x.value == FIXED1_UINT) return y;\\n\\n    // Separate into integer and fractional parts\\n    // x = x1 + x2, y = y1 + y2\\n    uint256 x1 = integer(x).value / FIXED1_UINT;\\n    uint256 x2 = fractional(x).value;\\n    uint256 y1 = integer(y).value / FIXED1_UINT;\\n    uint256 y2 = fractional(y).value;\\n\\n    // (x1 + x2) * (y1 + y2) = (x1 * y1) + (x1 * y2) + (x2 * y1) + (x2 * y2)\\n    uint256 x1y1 = x1 * y1;\\n    if (x1 != 0) require(x1y1 / x1 == y1, \\\"overflow x1y1 detected\\\");\\n\\n    // x1y1 needs to be multiplied back by fixed1\\n    // solium-disable-next-line mixedcase\\n    uint256 fixed_x1y1 = x1y1 * FIXED1_UINT;\\n    if (x1y1 != 0) require(fixed_x1y1 / x1y1 == FIXED1_UINT, \\\"overflow x1y1 * fixed1 detected\\\");\\n    x1y1 = fixed_x1y1;\\n\\n    uint256 x2y1 = x2 * y1;\\n    if (x2 != 0) require(x2y1 / x2 == y1, \\\"overflow x2y1 detected\\\");\\n\\n    uint256 x1y2 = x1 * y2;\\n    if (x1 != 0) require(x1y2 / x1 == y2, \\\"overflow x1y2 detected\\\");\\n\\n    x2 = x2 / mulPrecision();\\n    y2 = y2 / mulPrecision();\\n    uint256 x2y2 = x2 * y2;\\n    if (x2 != 0) require(x2y2 / x2 == y2, \\\"overflow x2y2 detected\\\");\\n\\n    // result = fixed1() * x1 * y1 + x1 * y2 + x2 * y1 + x2 * y2 / fixed1();\\n    Fraction memory result = Fraction(x1y1);\\n    result = add(result, Fraction(x2y1)); // Add checks for overflow\\n    result = add(result, Fraction(x1y2)); // Add checks for overflow\\n    result = add(result, Fraction(x2y2)); // Add checks for overflow\\n    return result;\\n  }\\n\\n  /**\\n   * @notice 1/x\\n   * @dev\\n   * Test reciprocal(0) fails\\n   * Test reciprocal(fixed1()) returns fixed1()\\n   * Test reciprocal(fixed1()*fixed1()) returns 1 // Testing how the fractional is truncated\\n   * Test reciprocal(1+fixed1()*fixed1()) returns 0 // Testing how the fractional is truncated\\n   * Test reciprocal(newFixedFraction(1, 1e24)) returns newFixed(1e24)\\n   */\\n  function reciprocal(Fraction memory x) internal pure returns (Fraction memory) {\\n    require(x.value != 0, \\\"can't call reciprocal(0)\\\");\\n    return Fraction((FIXED1_UINT * FIXED1_UINT) / x.value); // Can't overflow\\n  }\\n\\n  /**\\n   * @notice x/y. If the dividend is higher than the max dividend value, it\\n   * might overflow. You can use multiply(x,reciprocal(y)) instead.\\n   * @dev The maximum value that can be safely used as a dividend (maxNewFixed) is defined as\\n   * divide(maxNewFixed,newFixedFraction(1,fixed1())) is around maxUint256().\\n   * This yields the value 115792089237316195423570985008687907853269984665640564.\\n   * Test maxNewFixed equals maxUint256()/fixed1()\\n   * Test divide(maxNewFixed,1) equals maxNewFixed*(fixed1)\\n   * Test divide(maxNewFixed+1,multiply(mulPrecision(),mulPrecision())) throws\\n   * Test divide(fixed1(),0) fails\\n   * Test divide(maxNewFixed,1) = maxNewFixed*(10^digits())\\n   * Test divide(maxNewFixed+1,1) throws\\n   */\\n  function divide(Fraction memory x, Fraction memory y) internal pure returns (Fraction memory) {\\n    require(y.value != 0, \\\"can't divide by 0\\\");\\n    uint256 X = x.value * FIXED1_UINT;\\n    require(X / FIXED1_UINT == x.value, \\\"overflow at divide\\\");\\n    return Fraction(X / y.value);\\n  }\\n\\n  /**\\n   * @notice x > y\\n   */\\n  function gt(Fraction memory x, Fraction memory y) internal pure returns (bool) {\\n    return x.value > y.value;\\n  }\\n\\n  /**\\n   * @notice x >= y\\n   */\\n  function gte(Fraction memory x, Fraction memory y) internal pure returns (bool) {\\n    return x.value >= y.value;\\n  }\\n\\n  /**\\n   * @notice x < y\\n   */\\n  function lt(Fraction memory x, Fraction memory y) internal pure returns (bool) {\\n    return x.value < y.value;\\n  }\\n\\n  /**\\n   * @notice x <= y\\n   */\\n  function lte(Fraction memory x, Fraction memory y) internal pure returns (bool) {\\n    return x.value <= y.value;\\n  }\\n\\n  /**\\n   * @notice x == y\\n   */\\n  function equals(Fraction memory x, Fraction memory y) internal pure returns (bool) {\\n    return x.value == y.value;\\n  }\\n\\n  /**\\n   * @notice x <= 1\\n   */\\n  function isProperFraction(Fraction memory x) internal pure returns (bool) {\\n    return lte(x, fixed1());\\n  }\\n}\\n\",\"keccak256\":\"0x546944b106cf70ad6f793e71dffd41733bec3e03ca820a3d08213fc795c042b0\"},\"project:/contracts/common/Freezable.sol\":{\"content\":\"pragma solidity ^0.5.13;\\n\\nimport \\\"./UsingRegistry.sol\\\";\\n\\ncontract Freezable is UsingRegistry {\\n  // onlyWhenNotFrozen functions can only be called when `frozen` is false, otherwise they will\\n  // revert.\\n  modifier onlyWhenNotFrozen() {\\n    require(!getFreezer().isFrozen(address(this)), \\\"can't call when contract is frozen\\\");\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0x2d264574f693b31cdf1ef1fe44dd07f4ddd60c1979e79fc84b6f3019ceda9ac6\"},\"project:/contracts/common/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.5.13 <0.9.0;\\n\\n/**\\n * @title Used with proxied contracts that have an `initialize` function.\\n * @notice Ensures the `initialize` function:\\n *         - gets called only once\\n *         - cannot be called on the logic contract.\\n */\\ncontract Initializable {\\n  bool public initialized;\\n\\n  /**\\n   * @notice Ensures the initializer function cannot be called more than once.\\n   */\\n  modifier initializer() {\\n    require(!initialized, \\\"contract already initialized\\\");\\n    initialized = true;\\n    _;\\n  }\\n\\n  /**\\n   * @notice By default, ensures that the `initialize` function cannot be called\\n   * on the logic contract.\\n   * @param testingDeployment When set to true, allows the `initialize` function\\n   * to be called, which is useful in testing when not setting up with a Proxy.\\n   */\\n  constructor(bool testingDeployment) public {\\n    if (!testingDeployment) {\\n      initialized = true;\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x8de2ab8706668982998c5a995bdc3d8ff20a1ec8519bf49cec9e464f62c57bb9\"},\"project:/contracts/common/PrecompilesOverride.sol\":{\"content\":\"pragma solidity ^0.5.13;\\n\\nimport \\\"./interfaces/ICeloVersionedContract.sol\\\";\\nimport \\\"../../contracts-0.8/common/IsL2Check.sol\\\";\\nimport \\\"./UsingRegistry.sol\\\";\\n\\nimport \\\"./UsingPrecompiles.sol\\\";\\n\\n/**\\n * @title PrecompilesOverride Contract\\n * @notice This contract allows for a smoother transition from L1 to L2\\n * by abstracting away the usingPrecompile contract, and taking care of the L1 to L2 switching logic.\\n **/\\ncontract PrecompilesOverride is UsingPrecompiles, UsingRegistry {\\n  /**\\n   * @notice Returns the epoch number at a block.\\n   * @param blockNumber Block number where epoch number is calculated.\\n   * @return Epoch number.\\n   */\\n  function getEpochNumberOfBlock(uint256 blockNumber) public view returns (uint256) {\\n    if (isL2()) {\\n      return getEpochManager().getEpochNumberOfBlock(blockNumber);\\n    } else {\\n      return epochNumberOfBlock(blockNumber, getEpochSize());\\n    }\\n  }\\n\\n  /**\\n   * @notice Returns the epoch number at a block.\\n   * @return Current epoch number.\\n   */\\n  function getEpochNumber() public view returns (uint256) {\\n    return getEpochNumberOfBlock(block.number);\\n  }\\n\\n  /**\\n   * @notice Gets a validator signer address from the current validator set.\\n   * @param index Index of requested validator in the validator set.\\n   * @return Address of validator signer at the requested index.\\n   */\\n  function validatorSignerAddressFromCurrentSet(uint256 index) public view returns (address) {\\n    if (isL2()) {\\n      return getEpochManager().getElectedSignerByIndex(index);\\n    } else {\\n      return super.validatorSignerAddressFromCurrentSet(index);\\n    }\\n  }\\n\\n  /**\\n   * @notice Gets a validator address from the current validator set.\\n   * @param index Index of requested validator in the validator set.\\n   * @return Address of validator at the requested index.\\n   */\\n  function validatorAddressFromCurrentSet(uint256 index) public view onlyL2 returns (address) {\\n    return getEpochManager().getElectedAccountByIndex(index);\\n  }\\n\\n  /**\\n   * @notice Gets the size of the current elected validator set.\\n   * @return Size of the current elected validator set.\\n   */\\n  function numberValidatorsInCurrentSet() public view returns (uint256) {\\n    if (isL2()) {\\n      return getEpochManager().numberOfElectedInCurrentSet();\\n    } else {\\n      return super.numberValidatorsInCurrentSet();\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0xf32b8f4e5f15b3152db6b63515592aeeee4211f63ff7906a5a4f3684241b69c2\"},\"project:/contracts/common/UsingPrecompiles.sol\":{\"content\":\"pragma solidity ^0.5.13;\\n\\nimport \\\"openzeppelin-solidity/contracts/math/SafeMath.sol\\\";\\nimport \\\"../common/interfaces/ICeloVersionedContract.sol\\\";\\nimport \\\"../common/interfaces/IEpochManager.sol\\\";\\nimport \\\"../../contracts-0.8/common/IsL2Check.sol\\\";\\n\\ncontract UsingPrecompiles is IsL2Check {\\n  using SafeMath for uint256;\\n\\n  address constant TRANSFER = address(0xff - 2);\\n  address constant FRACTION_MUL = address(0xff - 3);\\n  address constant PROOF_OF_POSSESSION = address(0xff - 4);\\n  address constant GET_VALIDATOR = address(0xff - 5);\\n  address constant NUMBER_VALIDATORS = address(0xff - 6);\\n  address constant EPOCH_SIZE = address(0xff - 7);\\n  address constant BLOCK_NUMBER_FROM_HEADER = address(0xff - 8);\\n  address constant HASH_HEADER = address(0xff - 9);\\n  address constant GET_PARENT_SEAL_BITMAP = address(0xff - 10);\\n  address constant GET_VERIFIED_SEAL_BITMAP = address(0xff - 11);\\n  uint256 constant DAY = 86400;\\n\\n  /**\\n   * @notice calculate a * b^x for fractions a, b to `decimals` precision\\n   * @param aNumerator Numerator of first fraction\\n   * @param aDenominator Denominator of first fraction\\n   * @param bNumerator Numerator of exponentiated fraction\\n   * @param bDenominator Denominator of exponentiated fraction\\n   * @param exponent exponent to raise b to\\n   * @param _decimals precision\\n   * @return Numerator of the computed quantity (not reduced).\\n   * @return Denominator of the computed quantity (not reduced).\\n   * @dev This function will be deprecated in L2.\\n   */\\n  function fractionMulExp(\\n    uint256 aNumerator,\\n    uint256 aDenominator,\\n    uint256 bNumerator,\\n    uint256 bDenominator,\\n    uint256 exponent,\\n    uint256 _decimals\\n  ) public view onlyL1 returns (uint256, uint256) {\\n    require(aDenominator != 0 && bDenominator != 0, \\\"a denominator is zero\\\");\\n    uint256 returnNumerator;\\n    uint256 returnDenominator;\\n    bool success;\\n    bytes memory out;\\n    (success, out) = FRACTION_MUL.staticcall(\\n      abi.encodePacked(aNumerator, aDenominator, bNumerator, bDenominator, exponent, _decimals)\\n    );\\n    require(success, \\\"error calling fractionMulExp precompile\\\");\\n    returnNumerator = getUint256FromBytes(out, 0);\\n    returnDenominator = getUint256FromBytes(out, 32);\\n    return (returnNumerator, returnDenominator);\\n  }\\n\\n  /**\\n   * @notice Returns the current epoch size in blocks.\\n   * @return The current epoch size in blocks.\\n   * @dev This function will be deprecated in L2.\\n   */\\n  function getEpochSize() public view onlyL1 returns (uint256) {\\n    bytes memory out;\\n    bool success;\\n    (success, out) = EPOCH_SIZE.staticcall(abi.encodePacked(true));\\n    require(success, \\\"error calling getEpochSize precompile\\\");\\n    return getUint256FromBytes(out, 0);\\n  }\\n\\n  /**\\n   * @notice Returns the epoch number at a block.\\n   * @param blockNumber Block number where epoch number is calculated.\\n   * @return Epoch number.\\n   * @dev This function will be deprecated in L2.\\n   */\\n  function getEpochNumberOfBlock(uint256 blockNumber) public view onlyL1 returns (uint256) {\\n    return epochNumberOfBlock(blockNumber, getEpochSize());\\n  }\\n\\n  /**\\n   * @notice Returns the epoch number at a block.\\n   * @return Current epoch number.\\n   * @dev This function will be deprecated in L2.\\n   */\\n  function getEpochNumber() public view onlyL1 returns (uint256) {\\n    return getEpochNumberOfBlock(block.number);\\n  }\\n\\n  /**\\n   * @notice Gets a validator signer address from the current validator set.\\n   * @param index Index of requested validator in the validator set.\\n   * @return Address of validator signer at the requested index.\\n   * @dev This function will be deprecated in L2.\\n   */\\n  function validatorSignerAddressFromCurrentSet(\\n    uint256 index\\n  ) public view onlyL1 returns (address) {\\n    bytes memory out;\\n    bool success;\\n    (success, out) = GET_VALIDATOR.staticcall(abi.encodePacked(index, uint256(block.number)));\\n    require(success, \\\"error calling validatorSignerAddressFromCurrentSet precompile\\\");\\n    return address(uint160(getUint256FromBytes(out, 0)));\\n  }\\n\\n  /**\\n   * @notice Gets a validator signer address from the validator set at the given block number.\\n   * @param index Index of requested validator in the validator set.\\n   * @param blockNumber Block number to retrieve the validator set from.\\n   * @return Address of validator signer at the requested index.\\n   * @dev This function will be deprecated in L2.\\n   */\\n  function validatorSignerAddressFromSet(\\n    uint256 index,\\n    uint256 blockNumber\\n  ) public view onlyL1 returns (address) {\\n    bytes memory out;\\n    bool success;\\n    (success, out) = GET_VALIDATOR.staticcall(abi.encodePacked(index, blockNumber));\\n    require(success, \\\"error calling validatorSignerAddressFromSet precompile\\\");\\n    return address(uint160(getUint256FromBytes(out, 0)));\\n  }\\n\\n  /**\\n   * @notice Gets the size of the current elected validator set.\\n   * @return Size of the current elected validator set.\\n   * @dev This function will be deprecated in L2.\\n   */\\n  function numberValidatorsInCurrentSet() public view onlyL1 returns (uint256) {\\n    bytes memory out;\\n    bool success;\\n    (success, out) = NUMBER_VALIDATORS.staticcall(abi.encodePacked(uint256(block.number)));\\n    require(success, \\\"error calling numberValidatorsInCurrentSet precompile\\\");\\n    return getUint256FromBytes(out, 0);\\n  }\\n\\n  /**\\n   * @notice Gets the size of the validator set that must sign the given block number.\\n   * @param blockNumber Block number to retrieve the validator set from.\\n   * @return Size of the validator set.\\n   * @dev This function will be deprecated in L2.\\n   */\\n  function numberValidatorsInSet(uint256 blockNumber) public view onlyL1 returns (uint256) {\\n    bytes memory out;\\n    bool success;\\n    (success, out) = NUMBER_VALIDATORS.staticcall(abi.encodePacked(blockNumber));\\n    require(success, \\\"error calling numberValidatorsInSet precompile\\\");\\n    return getUint256FromBytes(out, 0);\\n  }\\n\\n  /**\\n   * @notice Checks a BLS proof of possession.\\n   * @param sender The address signed by the BLS key to generate the proof of possession.\\n   * @param blsKey The BLS public key that the validator is using for consensus, should pass proof\\n   *   of possession. 48 bytes.\\n   * @param blsPop The BLS public key proof-of-possession, which consists of a signature on the\\n   *   account address. 96 bytes.\\n   * @return True upon success.\\n   * @dev This function will be deprecated in L2.\\n   */\\n  function checkProofOfPossession(\\n    address sender,\\n    bytes memory blsKey,\\n    bytes memory blsPop\\n  ) public view onlyL1 returns (bool) {\\n    bool success;\\n    (success, ) = PROOF_OF_POSSESSION.staticcall(abi.encodePacked(sender, blsKey, blsPop));\\n    return success;\\n  }\\n\\n  /**\\n   * @notice Parses block number out of header.\\n   * @param header RLP encoded header\\n   * @return Block number.\\n   * @dev This function will be deprecated in L2.\\n   */\\n  function getBlockNumberFromHeader(bytes memory header) public view onlyL1 returns (uint256) {\\n    bytes memory out;\\n    bool success;\\n    (success, out) = BLOCK_NUMBER_FROM_HEADER.staticcall(abi.encodePacked(header));\\n    require(success, \\\"error calling getBlockNumberFromHeader precompile\\\");\\n    return getUint256FromBytes(out, 0);\\n  }\\n\\n  /**\\n   * @notice Computes hash of header.\\n   * @param header RLP encoded header\\n   * @return Header hash.\\n   * @dev This function will be deprecated in L2.\\n   */\\n  function hashHeader(bytes memory header) public view onlyL1 returns (bytes32) {\\n    bytes memory out;\\n    bool success;\\n    (success, out) = HASH_HEADER.staticcall(abi.encodePacked(header));\\n    require(success, \\\"error calling hashHeader precompile\\\");\\n    return getBytes32FromBytes(out, 0);\\n  }\\n\\n  /**\\n   * @notice Gets the parent seal bitmap from the header at the given block number.\\n   * @param blockNumber Block number to retrieve. Must be within 4 epochs of the current number.\\n   * @return Bitmap parent seal with set bits at indices corresponding to signing validators.\\n   * @dev This function will be deprecated in L2.\\n   */\\n  function getParentSealBitmap(uint256 blockNumber) public view onlyL1 returns (bytes32) {\\n    bytes memory out;\\n    bool success;\\n    (success, out) = GET_PARENT_SEAL_BITMAP.staticcall(abi.encodePacked(blockNumber));\\n    require(success, \\\"error calling getParentSealBitmap precompile\\\");\\n    return getBytes32FromBytes(out, 0);\\n  }\\n\\n  /**\\n   * @notice Verifies the BLS signature on the header and returns the seal bitmap.\\n   * The validator set used for verification is retrieved based on the parent hash field of the\\n   * header.  If the parent hash is not in the blockchain, verification fails.\\n   * @param header RLP encoded header\\n   * @return Bitmap parent seal with set bits at indices correspoinding to signing validators.\\n   * @dev This function will be deprecated in L2.\\n   */\\n  function getVerifiedSealBitmapFromHeader(\\n    bytes memory header\\n  ) public view onlyL1 returns (bytes32) {\\n    bytes memory out;\\n    bool success;\\n    (success, out) = GET_VERIFIED_SEAL_BITMAP.staticcall(abi.encodePacked(header));\\n    require(success, \\\"error calling getVerifiedSealBitmapFromHeader precompile\\\");\\n    return getBytes32FromBytes(out, 0);\\n  }\\n\\n  /**\\n   * @notice Returns the minimum number of required signers for a given block number.\\n   * @dev Computed in celo-blockchain as int(math.Ceil(float64(2*valSet.Size()) / 3))\\n   * @dev This function will be deprecated in L2.\\n   */\\n  function minQuorumSize(uint256 blockNumber) public view onlyL1 returns (uint256) {\\n    return numberValidatorsInSet(blockNumber).mul(2).add(2).div(3);\\n  }\\n\\n  /**\\n   * @notice Computes byzantine quorum from current validator set size\\n   * @return Byzantine quorum of validators.\\n   * @dev This function will be deprecated in L2.\\n   */\\n  function minQuorumSizeInCurrentSet() public view onlyL1 returns (uint256) {\\n    return minQuorumSize(block.number);\\n  }\\n\\n  /**\\n   * @notice Returns the epoch number at a block.\\n   * @param blockNumber Block number where epoch number is calculated.\\n   * @param epochSize The epoch size in blocks.\\n   * @return Epoch number.\\n   */\\n  function epochNumberOfBlock(\\n    uint256 blockNumber,\\n    uint256 epochSize\\n  ) internal pure returns (uint256) {\\n    // Follows GetEpochNumber from celo-blockchain/blob/master/consensus/istanbul/utils.go\\n    uint256 epochNumber = blockNumber / epochSize;\\n    if (blockNumber % epochSize == 0) {\\n      return epochNumber;\\n    } else {\\n      return epochNumber.add(1);\\n    }\\n  }\\n\\n  /**\\n   * @notice Converts bytes to uint256.\\n   * @param bs byte[] data\\n   * @param start offset into byte data to convert\\n   * @return uint256 data\\n   */\\n  function getUint256FromBytes(bytes memory bs, uint256 start) internal pure returns (uint256) {\\n    return uint256(getBytes32FromBytes(bs, start));\\n  }\\n\\n  /**\\n   * @notice Converts bytes to bytes32.\\n   * @param bs byte[] data\\n   * @param start offset into byte data to convert\\n   * @return bytes32 data\\n   */\\n  function getBytes32FromBytes(bytes memory bs, uint256 start) internal pure returns (bytes32) {\\n    require(bs.length >= start.add(32), \\\"slicing out of range\\\");\\n    bytes32 x;\\n    assembly {\\n      x := mload(add(bs, add(start, 32)))\\n    }\\n    return x;\\n  }\\n}\\n\",\"keccak256\":\"0x05d97764c5c59d311b7b9d8ccb48f73f4942602feb277bdcca39075cb022621f\"},\"project:/contracts/common/UsingRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity ^0.5.13;\\n\\nimport \\\"openzeppelin-solidity/contracts/ownership/Ownable.sol\\\";\\nimport \\\"openzeppelin-solidity/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport \\\"./interfaces/IAccounts.sol\\\";\\nimport \\\"./interfaces/IEpochManager.sol\\\";\\nimport \\\"./interfaces/IFeeCurrencyWhitelist.sol\\\";\\nimport \\\"./interfaces/IFreezer.sol\\\";\\nimport \\\"./interfaces/IRegistry.sol\\\";\\nimport \\\"./interfaces/ICeloUnreleasedTreasury.sol\\\";\\n\\nimport \\\"../governance/interfaces/IElection.sol\\\";\\nimport \\\"../governance/interfaces/IEpochRewards.sol\\\";\\nimport \\\"../governance/interfaces/IGovernance.sol\\\";\\nimport \\\"../governance/interfaces/ILockedGold.sol\\\";\\nimport \\\"../governance/interfaces/ILockedCelo.sol\\\";\\nimport \\\"../governance/interfaces/IValidators.sol\\\";\\n\\nimport \\\"../identity/interfaces/IRandom.sol\\\";\\nimport \\\"../identity/interfaces/IAttestations.sol\\\";\\n\\nimport \\\"../../lib/mento-core/contracts/interfaces/IExchange.sol\\\";\\nimport \\\"../../lib/mento-core/contracts/interfaces/IReserve.sol\\\";\\nimport \\\"../../lib/mento-core/contracts/interfaces/IStableToken.sol\\\";\\nimport \\\"../stability/interfaces/ISortedOracles.sol\\\";\\n\\ncontract UsingRegistry is Ownable {\\n  // solhint-disable state-visibility\\n  bytes32 constant ACCOUNTS_REGISTRY_ID = keccak256(abi.encodePacked(\\\"Accounts\\\"));\\n  bytes32 constant ATTESTATIONS_REGISTRY_ID = keccak256(abi.encodePacked(\\\"Attestations\\\"));\\n  bytes32 constant DOWNTIME_SLASHER_REGISTRY_ID = keccak256(abi.encodePacked(\\\"DowntimeSlasher\\\"));\\n  bytes32 constant DOUBLE_SIGNING_SLASHER_REGISTRY_ID =\\n    keccak256(abi.encodePacked(\\\"DoubleSigningSlasher\\\"));\\n  bytes32 constant ELECTION_REGISTRY_ID = keccak256(abi.encodePacked(\\\"Election\\\"));\\n  bytes32 constant EXCHANGE_REGISTRY_ID = keccak256(abi.encodePacked(\\\"Exchange\\\"));\\n  bytes32 constant FEE_CURRENCY_WHITELIST_REGISTRY_ID =\\n    keccak256(abi.encodePacked(\\\"FeeCurrencyWhitelist\\\"));\\n  bytes32 constant FREEZER_REGISTRY_ID = keccak256(abi.encodePacked(\\\"Freezer\\\"));\\n  bytes32 constant GOLD_TOKEN_REGISTRY_ID = keccak256(abi.encodePacked(\\\"GoldToken\\\"));\\n  bytes32 constant GOVERNANCE_REGISTRY_ID = keccak256(abi.encodePacked(\\\"Governance\\\"));\\n  bytes32 constant GOVERNANCE_SLASHER_REGISTRY_ID =\\n    keccak256(abi.encodePacked(\\\"GovernanceSlasher\\\"));\\n  bytes32 constant LOCKED_GOLD_REGISTRY_ID = keccak256(abi.encodePacked(\\\"LockedGold\\\"));\\n  bytes32 constant RESERVE_REGISTRY_ID = keccak256(abi.encodePacked(\\\"Reserve\\\"));\\n  bytes32 constant RANDOM_REGISTRY_ID = keccak256(abi.encodePacked(\\\"Random\\\"));\\n  bytes32 constant SORTED_ORACLES_REGISTRY_ID = keccak256(abi.encodePacked(\\\"SortedOracles\\\"));\\n  bytes32 constant STABLE_TOKEN_REGISTRY_ID = keccak256(abi.encodePacked(\\\"StableToken\\\"));\\n  bytes32 constant VALIDATORS_REGISTRY_ID = keccak256(abi.encodePacked(\\\"Validators\\\"));\\n\\n  bytes32 constant CELO_TOKEN_REGISTRY_ID = keccak256(abi.encodePacked(\\\"CeloToken\\\"));\\n  bytes32 constant LOCKED_CELO_REGISTRY_ID = keccak256(abi.encodePacked(\\\"LockedCelo\\\"));\\n  bytes32 constant CELO_UNRELEASED_TREASURY_REGISTRY_ID =\\n    keccak256(abi.encodePacked(\\\"CeloUnreleasedTreasury\\\"));\\n  bytes32 constant EPOCH_REWARDS_REGISTRY_ID = keccak256(abi.encodePacked(\\\"EpochRewards\\\"));\\n  bytes32 constant EPOCH_MANAGER_ENABLER_REGISTRY_ID =\\n    keccak256(abi.encodePacked(\\\"EpochManagerEnabler\\\"));\\n  bytes32 constant EPOCH_MANAGER_REGISTRY_ID = keccak256(abi.encodePacked(\\\"EpochManager\\\"));\\n  // solhint-enable state-visibility\\n\\n  IRegistry public registry;\\n\\n  event RegistrySet(address indexed registryAddress);\\n\\n  modifier onlyRegisteredContract(bytes32 identifierHash) {\\n    require(registry.getAddressForOrDie(identifierHash) == msg.sender, \\\"only registered contract\\\");\\n    _;\\n  }\\n\\n  modifier onlyRegisteredContracts(bytes32[] memory identifierHashes) {\\n    require(registry.isOneOf(identifierHashes, msg.sender), \\\"only registered contracts\\\");\\n    _;\\n  }\\n\\n  /**\\n   * @notice Updates the address pointing to a Registry contract.\\n   * @param registryAddress The address of a registry contract for routing to other contracts.\\n   */\\n  function setRegistry(address registryAddress) public onlyOwner {\\n    require(registryAddress != address(0), \\\"Cannot register the null address\\\");\\n    registry = IRegistry(registryAddress);\\n    emit RegistrySet(registryAddress);\\n  }\\n\\n  function getAccounts() internal view returns (IAccounts) {\\n    return IAccounts(registry.getAddressForOrDie(ACCOUNTS_REGISTRY_ID));\\n  }\\n\\n  function getAttestations() internal view returns (IAttestations) {\\n    return IAttestations(registry.getAddressForOrDie(ATTESTATIONS_REGISTRY_ID));\\n  }\\n\\n  function getElection() internal view returns (IElection) {\\n    return IElection(registry.getAddressForOrDie(ELECTION_REGISTRY_ID));\\n  }\\n\\n  function getExchange() internal view returns (IExchange) {\\n    return IExchange(registry.getAddressForOrDie(EXCHANGE_REGISTRY_ID));\\n  }\\n\\n  function getFeeCurrencyWhitelistRegistry() internal view returns (IFeeCurrencyWhitelist) {\\n    return IFeeCurrencyWhitelist(registry.getAddressForOrDie(FEE_CURRENCY_WHITELIST_REGISTRY_ID));\\n  }\\n\\n  function getFreezer() internal view returns (IFreezer) {\\n    return IFreezer(registry.getAddressForOrDie(FREEZER_REGISTRY_ID));\\n  }\\n\\n  function getGoldToken() internal view returns (IERC20) {\\n    return IERC20(registry.getAddressForOrDie(GOLD_TOKEN_REGISTRY_ID));\\n  }\\n  function getCeloToken() internal view returns (IERC20) {\\n    return IERC20(registry.getAddressForOrDie(CELO_TOKEN_REGISTRY_ID));\\n  }\\n\\n  function getGovernance() internal view returns (IGovernance) {\\n    return IGovernance(registry.getAddressForOrDie(GOVERNANCE_REGISTRY_ID));\\n  }\\n\\n  function getLockedGold() internal view returns (ILockedGold) {\\n    return ILockedGold(registry.getAddressForOrDie(LOCKED_GOLD_REGISTRY_ID));\\n  }\\n  function getLockedCelo() internal view returns (ILockedCelo) {\\n    return ILockedCelo(registry.getAddressForOrDie(LOCKED_CELO_REGISTRY_ID));\\n  }\\n\\n  function getRandom() internal view returns (IRandom) {\\n    return IRandom(registry.getAddressForOrDie(RANDOM_REGISTRY_ID));\\n  }\\n\\n  function getReserve() internal view returns (IReserve) {\\n    return IReserve(registry.getAddressForOrDie(RESERVE_REGISTRY_ID));\\n  }\\n\\n  function getSortedOracles() internal view returns (ISortedOracles) {\\n    return ISortedOracles(registry.getAddressForOrDie(SORTED_ORACLES_REGISTRY_ID));\\n  }\\n\\n  function getStableToken() internal view returns (IStableToken) {\\n    return IStableToken(registry.getAddressForOrDie(STABLE_TOKEN_REGISTRY_ID));\\n  }\\n\\n  function getValidators() internal view returns (IValidators) {\\n    return IValidators(registry.getAddressForOrDie(VALIDATORS_REGISTRY_ID));\\n  }\\n\\n  function getCeloUnreleasedTreasury() internal view returns (ICeloUnreleasedTreasury) {\\n    return\\n      ICeloUnreleasedTreasury(registry.getAddressForOrDie(CELO_UNRELEASED_TREASURY_REGISTRY_ID));\\n  }\\n\\n  function getEpochRewards() internal view returns (IEpochRewards) {\\n    return IEpochRewards(registry.getAddressForOrDie(EPOCH_REWARDS_REGISTRY_ID));\\n  }\\n\\n  function getEpochManager() internal view returns (IEpochManager) {\\n    return IEpochManager(registry.getAddressForOrDie(EPOCH_MANAGER_REGISTRY_ID));\\n  }\\n}\\n\",\"keccak256\":\"0x222b1e45ff35146f456cde2a44ab2990aaa303c8df848934a78f87af2776ccda\"},\"project:/contracts/common/interfaces/IAccounts.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.5.13 <0.9.0;\\n\\ninterface IAccounts {\\n  function setAccountDataEncryptionKey(bytes calldata) external;\\n  function setMetadataURL(string calldata) external;\\n  function setName(string calldata) external;\\n  function setWalletAddress(address, uint8, bytes32, bytes32) external;\\n  function setAccount(string calldata, bytes calldata, address, uint8, bytes32, bytes32) external;\\n\\n  function authorizeVoteSigner(address, uint8, bytes32, bytes32) external;\\n  function authorizeValidatorSigner(address, uint8, bytes32, bytes32) external;\\n  function authorizeValidatorSignerWithPublicKey(\\n    address,\\n    uint8,\\n    bytes32,\\n    bytes32,\\n    bytes calldata\\n  ) external;\\n  function authorizeValidatorSignerWithKeys(\\n    address,\\n    uint8,\\n    bytes32,\\n    bytes32,\\n    bytes calldata,\\n    bytes calldata,\\n    bytes calldata\\n  ) external;\\n  function authorizeAttestationSigner(address, uint8, bytes32, bytes32) external;\\n  function setEip712DomainSeparator() external;\\n  function createAccount() external returns (bool);\\n\\n  function setPaymentDelegation(address, uint256) external;\\n\\n  function isAccount(address) external view returns (bool);\\n  function voteSignerToAccount(address) external view returns (address);\\n  function validatorSignerToAccount(address) external view returns (address);\\n  function attestationSignerToAccount(address) external view returns (address);\\n  function signerToAccount(address) external view returns (address);\\n  function getAttestationSigner(address) external view returns (address);\\n  function getValidatorSigner(address) external view returns (address);\\n  function getVoteSigner(address) external view returns (address);\\n  function hasAuthorizedVoteSigner(address) external view returns (bool);\\n  function hasAuthorizedValidatorSigner(address) external view returns (bool);\\n  function hasAuthorizedAttestationSigner(address) external view returns (bool);\\n\\n  function batchGetMetadataURL(\\n    address[] calldata\\n  ) external view returns (uint256[] memory, bytes memory);\\n\\n  function getDataEncryptionKey(address) external view returns (bytes memory);\\n  function getWalletAddress(address) external view returns (address);\\n  function getMetadataURL(address) external view returns (string memory);\\n\\n  function getName(address) external view returns (string memory);\\n\\n  function getPaymentDelegation(address) external view returns (address, uint256);\\n  function isSigner(address, address, bytes32) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xd316739cfeeed50b89bd45a4596abf71fac174f10c2a24dbf352a53b2bab2dc1\"},\"project:/contracts/common/interfaces/ICeloToken.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.5.13 <0.9.0;\\n\\n/**\\n * @title This interface describes the non- ERC20 shared interface for all Celo Tokens, and\\n * in the absence of interface inheritance is intended as a companion to IERC20.sol.\\n */\\ninterface ICeloToken {\\n  function initialize(address) external;\\n  function transferWithComment(address, uint256, string calldata) external returns (bool);\\n  function burn(uint256 value) external returns (bool);\\n  function mint(address to, uint256 value) external returns (bool);\\n  function name() external view returns (string memory);\\n  function symbol() external view returns (string memory);\\n  function decimals() external view returns (uint8);\\n  function allocatedSupply() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x594fdb5964b6165035e0f626d39ee45f4cfb0d32929dfcca91ebfdfa9a8b28e1\"},\"project:/contracts/common/interfaces/ICeloUnreleasedTreasury.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.5.13 <0.9.0;\\n\\ninterface ICeloUnreleasedTreasury {\\n  /**\\n   * @notice Releases the Celo to the specified address.\\n   * @param to The address to release the amount to.\\n   * @param amount The amount to release.\\n   */\\n  function release(address to, uint256 amount) external;\\n\\n  function getRemainingBalanceToRelease() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x41f4cda8fd14ba24261d9e6ef9c2f62ac15432ac78107e74045d2a880b50df82\"},\"project:/contracts/common/interfaces/ICeloVersionedContract.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.5.13 <0.9.0;\\n\\ninterface ICeloVersionedContract {\\n  /**\\n   * @notice Returns the storage, major, minor, and patch version of the contract.\\n   * @return Storage version of the contract.\\n   * @return Major version of the contract.\\n   * @return Minor version of the contract.\\n   * @return Patch version of the contract.\\n   */\\n  function getVersionNumber() external pure returns (uint256, uint256, uint256, uint256);\\n}\\n\",\"keccak256\":\"0x3ce622e646f0bd7cce110045bf6cde1fd84242e9c8ee73a27e56956f0b1fb128\"},\"project:/contracts/common/interfaces/IEpochManager.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.5.13 <0.9.0;\\n\\ninterface IEpochManager {\\n  function initializeSystem(\\n    uint256 firstEpochNumber,\\n    uint256 firstEpochBlock,\\n    address[] calldata firstElected\\n  ) external;\\n  function startNextEpochProcess() external;\\n  function finishNextEpochProcess(\\n    address[] calldata groups,\\n    address[] calldata lessers,\\n    address[] calldata greaters\\n  ) external;\\n  function setToProcessGroups() external;\\n  function processGroup(address group, address lesser, address greater) external;\\n  function sendValidatorPayment(address) external;\\n  function getCurrentEpoch() external view returns (uint256, uint256, uint256, uint256);\\n  function getEpochByNumber(\\n    uint256 epochNumber\\n  ) external view returns (uint256, uint256, uint256, uint256);\\n  function getEpochByBlockNumber(\\n    uint256 blockNumber\\n  ) external view returns (uint256, uint256, uint256, uint256);\\n  function getEpochNumberOfBlock(uint256) external view returns (uint256);\\n  function getCurrentEpochNumber() external view returns (uint256);\\n  function numberOfElectedInCurrentSet() external view returns (uint256);\\n  function getElectedAccounts() external view returns (address[] memory);\\n  function getElectedAccountByIndex(uint256 index) external view returns (address);\\n  function getElectedSigners() external view returns (address[] memory);\\n  function getElectedSignerByIndex(uint256 index) external view returns (address);\\n  function epochDuration() external view returns (uint256);\\n  function firstKnownEpoch() external view returns (uint256);\\n  function getEpochProcessingState()\\n    external\\n    view\\n    returns (uint256, uint256, uint256, uint256, uint256);\\n  function systemAlreadyInitialized() external view returns (bool);\\n  function isBlocked() external view returns (bool);\\n  function isTimeForNextEpoch() external view returns (bool);\\n  function isOnEpochProcess() external view returns (bool);\\n  function getFirstBlockAtEpoch(uint256) external view returns (uint256);\\n  function getLastBlockAtEpoch(uint256) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xc019958b7b5281fbfcd3c31b49d6ab29192ab4138de175a404bf0c17cccf9350\"},\"project:/contracts/common/interfaces/IFeeCurrencyWhitelist.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.5.13 <0.9.0;\\n\\ninterface IFeeCurrencyWhitelist {\\n  function initialize() external;\\n  function addToken(address) external;\\n  function getWhitelist() external view returns (address[] memory);\\n}\\n\",\"keccak256\":\"0xa732071c691bf1ba84774ac5301fa5b18e1ecf6ea6f6210ecac00f5130341621\"},\"project:/contracts/common/interfaces/IFreezer.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.5.13 <0.9.0;\\n\\ninterface IFreezer {\\n  function freeze(address target) external;\\n  function unfreeze(address target) external;\\n  function isFrozen(address) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x31cee67b005413c61d6aa90d2899e6a37257cd4c026d8422249b397131a10755\"},\"project:/contracts/common/interfaces/IRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.5.13 <0.9.0;\\n\\ninterface IRegistry {\\n  function setAddressFor(string calldata, address) external;\\n  function getAddressForOrDie(bytes32) external view returns (address);\\n  function getAddressFor(bytes32) external view returns (address);\\n  function getAddressForStringOrDie(string calldata identifier) external view returns (address);\\n  function getAddressForString(string calldata identifier) external view returns (address);\\n  function isOneOf(bytes32[] calldata, address) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x7737cbda6f3519bf6a4108e07b2c991a655e8731a4c040a3681e9629cfc4b52d\"},\"project:/contracts/governance/EpochRewards.sol\":{\"content\":\"pragma solidity ^0.5.13;\\n\\nimport \\\"openzeppelin-solidity/contracts/math/SafeMath.sol\\\";\\nimport \\\"openzeppelin-solidity/contracts/ownership/Ownable.sol\\\";\\n\\nimport \\\"./interfaces/IEpochRewards.sol\\\";\\nimport \\\"../common/FixidityLib.sol\\\";\\nimport \\\"../common/Freezable.sol\\\";\\nimport \\\"../common/Initializable.sol\\\";\\nimport \\\"../common/UsingRegistry.sol\\\";\\nimport \\\"../common/PrecompilesOverride.sol\\\";\\nimport \\\"../common/interfaces/ICeloToken.sol\\\";\\nimport \\\"../common/interfaces/ICeloVersionedContract.sol\\\";\\n\\n/**\\n * @title Contract for calculating epoch rewards.\\n */\\ncontract EpochRewards is\\n  ICeloVersionedContract,\\n  IEpochRewards,\\n  Ownable,\\n  Initializable,\\n  UsingRegistry,\\n  PrecompilesOverride,\\n  Freezable\\n{\\n  using FixidityLib for FixidityLib.Fraction;\\n  using SafeMath for uint256;\\n\\n  // This struct governs how the rewards multiplier should deviate from 1.0 based on the ratio of\\n  // supply remaining to target supply remaining.\\n  struct RewardsMultiplierAdjustmentFactors {\\n    FixidityLib.Fraction underspend;\\n    FixidityLib.Fraction overspend;\\n  }\\n\\n  // This struct governs the multiplier on the target rewards to give out in a given epoch due to\\n  // potential deviations in the actual Gold total supply from the target total supply.\\n  // In the case where the actual exceeds the target (i.e. the protocol has \\\"overspent\\\" with\\n  // respect to epoch rewards and payments) the rewards multiplier will be less than one.\\n  // In the case where the actual is less than the target (i.e. the protocol has \\\"underspent\\\" with\\n  // respect to epoch rewards and payments) the rewards multiplier will be greater than one.\\n  struct RewardsMultiplierParameters {\\n    RewardsMultiplierAdjustmentFactors adjustmentFactors;\\n    // The maximum rewards multiplier.\\n    FixidityLib.Fraction max;\\n  }\\n\\n  // This struct governs the target yield awarded to voters in validator elections.\\n  struct TargetVotingYieldParameters {\\n    // The target yield awarded to users voting in validator elections.\\n    FixidityLib.Fraction target;\\n    // Governs the adjustment of the target yield based on the deviation of the percentage of\\n    // Gold voting in validator elections from the `targetVotingGoldFraction`.\\n    FixidityLib.Fraction adjustmentFactor;\\n    // The maximum target yield awarded to users voting in validator elections.\\n    FixidityLib.Fraction max;\\n  }\\n\\n  uint256 constant GENESIS_GOLD_SUPPLY = 600000000 ether; // 600 million Gold\\n  uint256 constant GOLD_SUPPLY_CAP = 1000000000 ether; // 1 billion Gold\\n  uint256 constant YEARS_LINEAR = 15;\\n  uint256 constant SECONDS_LINEAR = YEARS_LINEAR * 365 * 1 days;\\n\\n  uint256 public startTime = 0;\\n  RewardsMultiplierParameters private rewardsMultiplierParams;\\n  TargetVotingYieldParameters private targetVotingYieldParams;\\n  FixidityLib.Fraction private targetVotingGoldFraction;\\n  FixidityLib.Fraction private communityRewardFraction;\\n  FixidityLib.Fraction private carbonOffsettingFraction;\\n  address public carbonOffsettingPartner;\\n  uint256 public targetValidatorEpochPayment;\\n\\n  event TargetVotingGoldFractionSet(uint256 fraction);\\n  event CommunityRewardFractionSet(uint256 fraction);\\n  event CarbonOffsettingFundSet(address indexed partner, uint256 fraction);\\n  event TargetValidatorEpochPaymentSet(uint256 payment);\\n  event TargetVotingYieldParametersSet(uint256 max, uint256 adjustmentFactor);\\n  event TargetVotingYieldSet(uint256 target);\\n  event RewardsMultiplierParametersSet(\\n    uint256 max,\\n    uint256 underspendAdjustmentFactor,\\n    uint256 overspendAdjustmentFactor\\n  );\\n\\n  event TargetVotingYieldUpdated(uint256 fraction);\\n\\n  modifier onlyVmOrPermitted(address permittedAddress) {\\n    if (isL2()) require(msg.sender == permittedAddress, \\\"Only permitted address can call\\\");\\n    else {\\n      require(msg.sender == address(0), \\\"Only VM can call\\\");\\n    }\\n    _;\\n  }\\n\\n  /**\\n   * @notice Sets initialized == true on implementation contracts\\n   * @param test Set to true to skip implementation initialization\\n   */\\n  constructor(bool test) public Initializable(test) {}\\n\\n  /**\\n   * @notice Used in place of the constructor to allow the contract to be upgradable via proxy.\\n   * @param registryAddress The address of the registry contract.\\n   * @param targetVotingYieldInitial The initial relative target block reward for voters.\\n   * @param targetVotingYieldMax The max relative target block reward for voters.\\n   * @param targetVotingYieldAdjustmentFactor The target block reward adjustment factor for voters.\\n   * @param rewardsMultiplierMax The max multiplier on target epoch rewards.\\n   * @param rewardsMultiplierUnderspendAdjustmentFactor Adjusts the multiplier on target epoch\\n   *   rewards when the protocol is running behind the target Gold supply.\\n   * @param rewardsMultiplierOverspendAdjustmentFactor Adjusts the multiplier on target epoch\\n   *   rewards when the protocol is running ahead of the target Gold supply.\\n   * @param _targetVotingGoldFraction The percentage of floating Gold voting to target.\\n   * @param _targetValidatorEpochPayment The target validator epoch payment.\\n   * @param _communityRewardFraction The percentage of rewards that go the community funds.\\n   * @param _carbonOffsettingPartner The address of the carbon offsetting partner.\\n   * @param _carbonOffsettingFraction The percentage of rewards going to carbon offsetting partner.\\n   * @dev Should be called only once.\\n   */\\n  function initialize(\\n    address registryAddress,\\n    uint256 targetVotingYieldInitial,\\n    uint256 targetVotingYieldMax,\\n    uint256 targetVotingYieldAdjustmentFactor,\\n    uint256 rewardsMultiplierMax,\\n    uint256 rewardsMultiplierUnderspendAdjustmentFactor,\\n    uint256 rewardsMultiplierOverspendAdjustmentFactor,\\n    uint256 _targetVotingGoldFraction,\\n    uint256 _targetValidatorEpochPayment,\\n    uint256 _communityRewardFraction,\\n    address _carbonOffsettingPartner,\\n    uint256 _carbonOffsettingFraction\\n  ) external initializer {\\n    _transferOwnership(msg.sender);\\n    setRegistry(registryAddress);\\n    setTargetVotingYieldParameters(targetVotingYieldMax, targetVotingYieldAdjustmentFactor);\\n    setRewardsMultiplierParameters(\\n      rewardsMultiplierMax,\\n      rewardsMultiplierUnderspendAdjustmentFactor,\\n      rewardsMultiplierOverspendAdjustmentFactor\\n    );\\n    setTargetVotingGoldFraction(_targetVotingGoldFraction);\\n    setTargetValidatorEpochPayment(_targetValidatorEpochPayment);\\n    setCommunityRewardFraction(_communityRewardFraction);\\n    setCarbonOffsettingFund(_carbonOffsettingPartner, _carbonOffsettingFraction);\\n    setTargetVotingYield(targetVotingYieldInitial);\\n    startTime = now;\\n  }\\n\\n  /**\\n   * @notice Updates the target voting yield based on the difference between the target and current\\n   *   voting Gold fraction.\\n   * @dev Only called directly by the protocol.\\n   */\\n  function updateTargetVotingYield()\\n    external\\n    onlyVmOrPermitted(registry.getAddressFor(EPOCH_MANAGER_REGISTRY_ID))\\n    onlyWhenNotFrozen\\n  {\\n    _updateTargetVotingYield();\\n  }\\n\\n  /**\\n   * @notice Determines if the reserve is low enough to demand a diversion from\\n   *    the community reward. Targets initial critical ratio of 2 with a linear\\n   *    decline until 25 years have passed where the critical ratio will be 1.\\n   */\\n  function isReserveLow() external view returns (bool) {\\n    // critical reserve ratio = 2 - time in second / 25 years\\n    FixidityLib.Fraction memory timeSinceInitialization = FixidityLib.newFixed(now.sub(startTime));\\n    FixidityLib.Fraction memory m = FixidityLib.newFixed(25 * 365 * 1 days);\\n    FixidityLib.Fraction memory b = FixidityLib.newFixed(2);\\n    FixidityLib.Fraction memory criticalRatio;\\n    // Don't let the critical reserve ratio go under 1 after 25 years.\\n    if (timeSinceInitialization.gte(m)) {\\n      criticalRatio = FixidityLib.fixed1();\\n    } else {\\n      criticalRatio = b.subtract(timeSinceInitialization.divide(m));\\n    }\\n    FixidityLib.Fraction memory ratio = FixidityLib.wrap(getReserve().getReserveRatio());\\n    return ratio.lte(criticalRatio);\\n  }\\n\\n  /**\\n   * @notice Calculates the per validator epoch payment and the total rewards to voters.\\n   * @return The per validator epoch reward.\\n   * @return The total rewards to voters.\\n   * @return The total community reward.\\n   * @return The total carbon offsetting partner reward.\\n   */\\n  function calculateTargetEpochRewards()\\n    external\\n    view\\n    returns (uint256, uint256, uint256, uint256)\\n  {\\n    uint256 targetVoterReward = getTargetVoterRewards();\\n    uint256 targetGoldSupplyIncrease = _getTargetGoldSupplyIncrease();\\n    FixidityLib.Fraction memory rewardsMultiplier = _getRewardsMultiplier(targetGoldSupplyIncrease);\\n    return (\\n      FixidityLib.newFixed(targetValidatorEpochPayment).multiply(rewardsMultiplier).fromFixed(),\\n      FixidityLib.newFixed(targetVoterReward).multiply(rewardsMultiplier).fromFixed(),\\n      FixidityLib\\n        .newFixed(targetGoldSupplyIncrease)\\n        .multiply(communityRewardFraction)\\n        .multiply(rewardsMultiplier)\\n        .fromFixed(),\\n      FixidityLib\\n        .newFixed(targetGoldSupplyIncrease)\\n        .multiply(carbonOffsettingFraction)\\n        .multiply(rewardsMultiplier)\\n        .fromFixed()\\n    );\\n  }\\n\\n  /**\\n   * @notice Returns the target voting yield parameters.\\n   * @return The target factor for target voting yield.\\n   * @return The max factor for target voting yield.\\n   * @return The adjustment factor for target voting yield.\\n   */\\n  function getTargetVotingYieldParameters() external view returns (uint256, uint256, uint256) {\\n    TargetVotingYieldParameters storage params = targetVotingYieldParams;\\n    return (params.target.unwrap(), params.max.unwrap(), params.adjustmentFactor.unwrap());\\n  }\\n\\n  /**\\n   * @notice Returns the rewards multiplier parameters.\\n   * @return The max multiplier.\\n   * @return The underspend adjustment factors.\\n   * @return The overspend adjustment factors.\\n   */\\n  function getRewardsMultiplierParameters() external view returns (uint256, uint256, uint256) {\\n    RewardsMultiplierParameters storage params = rewardsMultiplierParams;\\n    return (\\n      params.max.unwrap(),\\n      params.adjustmentFactors.underspend.unwrap(),\\n      params.adjustmentFactors.overspend.unwrap()\\n    );\\n  }\\n\\n  /**\\n   * @notice Returns the community reward fraction.\\n   * @return The percentage of total reward which goes to the community funds.\\n   */\\n  function getCommunityRewardFraction() external view returns (uint256) {\\n    return communityRewardFraction.unwrap();\\n  }\\n\\n  /**\\n   * @notice Returns the carbon offsetting partner reward fraction.\\n   * @return The percentage of total reward which goes to the carbon offsetting partner.\\n   */\\n  function getCarbonOffsettingFraction() external view returns (uint256) {\\n    return carbonOffsettingFraction.unwrap();\\n  }\\n\\n  /**\\n   * @notice Returns the target voting Gold fraction.\\n   * @return The percentage of floating Gold voting to target.\\n   */\\n  function getTargetVotingGoldFraction() external view returns (uint256) {\\n    return targetVotingGoldFraction.unwrap();\\n  }\\n\\n  /**\\n   * @notice Returns the rewards multiplier based on the current and target Gold supplies.\\n   * @return The rewards multiplier based on the current and target Gold supplies.\\n   */\\n  function getRewardsMultiplier() external view returns (uint256) {\\n    return _getRewardsMultiplier(_getTargetGoldSupplyIncrease()).unwrap();\\n  }\\n\\n  /**\\n   * @notice Returns the storage, major, minor, and patch version of the contract.\\n   * @return Storage version of the contract.\\n   * @return Major version of the contract.\\n   * @return Minor version of the contract.\\n   * @return Patch version of the contract.\\n   */\\n  function getVersionNumber() external pure returns (uint256, uint256, uint256, uint256) {\\n    return (1, 1, 2, 0);\\n  }\\n\\n  /**\\n   * @notice Sets the community reward percentage\\n   * @param value The percentage of the total reward to be sent to the community funds.\\n   * @return True upon success.\\n   */\\n  function setCommunityRewardFraction(uint256 value) public onlyOwner returns (bool) {\\n    require(\\n      value != communityRewardFraction.unwrap() && value < FixidityLib.fixed1().unwrap(),\\n      \\\"Value must be different from existing community reward fraction and less than 1\\\"\\n    );\\n    communityRewardFraction = FixidityLib.wrap(value);\\n    emit CommunityRewardFractionSet(value);\\n    return true;\\n  }\\n\\n  /**\\n   * @notice Sets the carbon offsetting fund.\\n   * @param partner The address of the carbon offsetting partner.\\n   * @param value The percentage of the total reward to be sent to the carbon offsetting partner.\\n   * @return True upon success.\\n   */\\n  function setCarbonOffsettingFund(address partner, uint256 value) public onlyOwner returns (bool) {\\n    require(\\n      partner != carbonOffsettingPartner || value != carbonOffsettingFraction.unwrap(),\\n      \\\"Partner and value must be different from existing carbon offsetting fund\\\"\\n    );\\n    require(value < FixidityLib.fixed1().unwrap(), \\\"Value must be less than 1\\\");\\n    carbonOffsettingPartner = partner;\\n    carbonOffsettingFraction = FixidityLib.wrap(value);\\n    emit CarbonOffsettingFundSet(partner, value);\\n    return true;\\n  }\\n\\n  /**\\n   * @notice Sets the target voting Gold fraction.\\n   * @param value The percentage of floating Gold voting to target.\\n   * @return True upon success.\\n   */\\n  function setTargetVotingGoldFraction(uint256 value) public onlyOwner returns (bool) {\\n    require(value != targetVotingGoldFraction.unwrap(), \\\"Target voting gold fraction unchanged\\\");\\n    require(\\n      value < FixidityLib.fixed1().unwrap(),\\n      \\\"Target voting gold fraction cannot be larger than 1\\\"\\n    );\\n    targetVotingGoldFraction = FixidityLib.wrap(value);\\n    emit TargetVotingGoldFractionSet(value);\\n    return true;\\n  }\\n\\n  /**\\n   * @notice Sets the target per-epoch payment in Celo Dollars for validators.\\n   * @param value The value in Celo Dollars.\\n   * @return True upon success.\\n   */\\n  function setTargetValidatorEpochPayment(uint256 value) public onlyOwner returns (bool) {\\n    require(value != targetValidatorEpochPayment, \\\"Target validator epoch payment unchanged\\\");\\n    targetValidatorEpochPayment = value;\\n    emit TargetValidatorEpochPaymentSet(value);\\n    return true;\\n  }\\n\\n  /**\\n   * @notice Sets the rewards multiplier parameters.\\n   * @param max The max multiplier on target epoch rewards.\\n   * @param underspendAdjustmentFactor Adjusts the multiplier on target epoch rewards when the\\n   *   protocol is running behind the target Gold supply.\\n   * @param overspendAdjustmentFactor Adjusts the multiplier on target epoch rewards when the\\n   *   protocol is running ahead of the target Gold supply.\\n   * @return True upon success.\\n   */\\n  function setRewardsMultiplierParameters(\\n    uint256 max,\\n    uint256 underspendAdjustmentFactor,\\n    uint256 overspendAdjustmentFactor\\n  ) public onlyOwner returns (bool) {\\n    require(\\n      max != rewardsMultiplierParams.max.unwrap() ||\\n        overspendAdjustmentFactor != rewardsMultiplierParams.adjustmentFactors.overspend.unwrap() ||\\n        underspendAdjustmentFactor != rewardsMultiplierParams.adjustmentFactors.underspend.unwrap(),\\n      \\\"Bad rewards multiplier parameters\\\"\\n    );\\n    rewardsMultiplierParams = RewardsMultiplierParameters(\\n      RewardsMultiplierAdjustmentFactors(\\n        FixidityLib.wrap(underspendAdjustmentFactor),\\n        FixidityLib.wrap(overspendAdjustmentFactor)\\n      ),\\n      FixidityLib.wrap(max)\\n    );\\n    emit RewardsMultiplierParametersSet(max, underspendAdjustmentFactor, overspendAdjustmentFactor);\\n    return true;\\n  }\\n\\n  /**\\n   * @notice Sets the target voting yield parameters.\\n   * @param max The max relative target block reward for voters.\\n   * @param adjustmentFactor The target block reward adjustment factor for voters.\\n   * @return True upon success.\\n   */\\n  function setTargetVotingYieldParameters(\\n    uint256 max,\\n    uint256 adjustmentFactor\\n  ) public onlyOwner returns (bool) {\\n    require(\\n      max != targetVotingYieldParams.max.unwrap() ||\\n        adjustmentFactor != targetVotingYieldParams.adjustmentFactor.unwrap(),\\n      \\\"Bad target voting yield parameters\\\"\\n    );\\n    targetVotingYieldParams.max = FixidityLib.wrap(max);\\n    targetVotingYieldParams.adjustmentFactor = FixidityLib.wrap(adjustmentFactor);\\n    require(\\n      targetVotingYieldParams.max.lt(FixidityLib.fixed1()),\\n      \\\"Max target voting yield must be lower than 100%\\\"\\n    );\\n    emit TargetVotingYieldParametersSet(max, adjustmentFactor);\\n    return true;\\n  }\\n\\n  /**\\n   * @notice Sets the target voting yield.  Uses fixed point arithmetic\\n   * for protection against overflow.\\n   * @param targetVotingYield The relative target block reward for voters.\\n   * @return True upon success.\\n   */\\n  function setTargetVotingYield(uint256 targetVotingYield) public onlyOwner returns (bool) {\\n    FixidityLib.Fraction memory target = FixidityLib.wrap(targetVotingYield);\\n    require(\\n      target.lte(targetVotingYieldParams.max),\\n      \\\"Target voting yield must be less than or equal to max\\\"\\n    );\\n    targetVotingYieldParams.target = target;\\n    emit TargetVotingYieldSet(targetVotingYield);\\n    return true;\\n  }\\n\\n  /**\\n   * @notice Returns the target Gold supply according to the epoch rewards target schedule.\\n   * @return The target Gold supply according to the epoch rewards target schedule.\\n   */\\n  function getTargetGoldTotalSupply() public view returns (uint256) {\\n    uint256 timeSinceInitialization = now.sub(startTime);\\n    if (timeSinceInitialization < SECONDS_LINEAR) {\\n      // Pay out half of all block rewards linearly.\\n      uint256 linearRewards = GOLD_SUPPLY_CAP.sub(GENESIS_GOLD_SUPPLY).div(2);\\n      uint256 targetRewards = linearRewards.mul(timeSinceInitialization).div(SECONDS_LINEAR);\\n      return targetRewards.add(GENESIS_GOLD_SUPPLY);\\n    } else {\\n      require(false, \\\"Block reward calculation for years 15-30 unimplemented\\\");\\n      return 0;\\n    }\\n  }\\n\\n  /**\\n   * @notice Returns the total target epoch rewards for voters.\\n   * @return the total target epoch rewards for voters.\\n   */\\n  function getTargetVoterRewards() public view returns (uint256) {\\n    return\\n      FixidityLib\\n        .newFixed(getElection().getActiveVotes())\\n        .multiply(targetVotingYieldParams.target)\\n        .fromFixed();\\n  }\\n\\n  /**\\n   * @notice Returns the total target epoch payments to validators, converted to Gold.\\n   * @return The total target epoch payments to validators, converted to Gold.\\n   */\\n  function getTargetTotalEpochPaymentsInGold() public view returns (uint256) {\\n    address stableTokenAddress = registry.getAddressForOrDie(STABLE_TOKEN_REGISTRY_ID);\\n    (uint256 numerator, uint256 denominator) = getSortedOracles().medianRate(stableTokenAddress);\\n    if (isL2()) {\\n      return\\n        getEpochManager()\\n          .numberOfElectedInCurrentSet()\\n          .mul(targetValidatorEpochPayment)\\n          .mul(denominator)\\n          .div(numerator);\\n    }\\n    return\\n      numberValidatorsInCurrentSet().mul(targetValidatorEpochPayment).mul(denominator).div(\\n        numerator\\n      );\\n  }\\n\\n  /**\\n   * @notice Returns the fraction of floating Gold being used for voting in validator elections.\\n   * @return The fraction of floating Gold being used for voting in validator elections.\\n   */\\n  function getVotingGoldFraction() public view returns (uint256) {\\n    uint256 liquidGold = ICeloToken(address(getCeloToken())).allocatedSupply().sub(\\n      getReserve().getReserveGoldBalance()\\n    );\\n    uint256 votingGold = getElection().getTotalVotes();\\n    return FixidityLib.newFixed(votingGold).divide(FixidityLib.newFixed(liquidGold)).unwrap();\\n  }\\n\\n  /**\\n   * @notice Updates the target voting yield based on the difference between the target and current\\n   *   voting Gold fraction.\\n   */\\n  function _updateTargetVotingYield() internal onlyWhenNotFrozen {\\n    FixidityLib.Fraction memory votingGoldFraction = FixidityLib.wrap(getVotingGoldFraction());\\n    if (votingGoldFraction.gt(targetVotingGoldFraction)) {\\n      FixidityLib.Fraction memory votingGoldFractionDelta = votingGoldFraction.subtract(\\n        targetVotingGoldFraction\\n      );\\n      FixidityLib.Fraction memory targetVotingYieldDelta = votingGoldFractionDelta.multiply(\\n        targetVotingYieldParams.adjustmentFactor\\n      );\\n      if (targetVotingYieldDelta.gte(targetVotingYieldParams.target)) {\\n        targetVotingYieldParams.target = FixidityLib.newFixed(0);\\n      } else {\\n        targetVotingYieldParams.target = targetVotingYieldParams.target.subtract(\\n          targetVotingYieldDelta\\n        );\\n      }\\n    } else if (votingGoldFraction.lt(targetVotingGoldFraction)) {\\n      FixidityLib.Fraction memory votingGoldFractionDelta = targetVotingGoldFraction.subtract(\\n        votingGoldFraction\\n      );\\n      FixidityLib.Fraction memory targetVotingYieldDelta = votingGoldFractionDelta.multiply(\\n        targetVotingYieldParams.adjustmentFactor\\n      );\\n      targetVotingYieldParams.target = targetVotingYieldParams.target.add(targetVotingYieldDelta);\\n      if (targetVotingYieldParams.target.gt(targetVotingYieldParams.max)) {\\n        targetVotingYieldParams.target = targetVotingYieldParams.max;\\n      }\\n    }\\n    emit TargetVotingYieldUpdated(targetVotingYieldParams.target.unwrap());\\n  }\\n\\n  /**\\n   * @notice Returns the rewards multiplier based on the current and target Gold supplies.\\n   * @param targetGoldSupplyIncrease The target increase in current Gold supply.\\n   * @return The rewards multiplier based on the current and target Gold supplies.\\n   */\\n  function _getRewardsMultiplier(\\n    uint256 targetGoldSupplyIncrease\\n  ) internal view returns (FixidityLib.Fraction memory) {\\n    uint256 targetSupply = getTargetGoldTotalSupply();\\n    uint256 allocatedSupply = ICeloToken(address(getCeloToken())).allocatedSupply();\\n    uint256 remainingSupply = GOLD_SUPPLY_CAP.sub(allocatedSupply.add(targetGoldSupplyIncrease));\\n    uint256 targetRemainingSupply = GOLD_SUPPLY_CAP.sub(targetSupply);\\n    FixidityLib.Fraction memory remainingToTargetRatio = FixidityLib\\n      .newFixed(remainingSupply)\\n      .divide(FixidityLib.newFixed(targetRemainingSupply));\\n    if (remainingToTargetRatio.gt(FixidityLib.fixed1())) {\\n      FixidityLib.Fraction memory delta = remainingToTargetRatio\\n        .subtract(FixidityLib.fixed1())\\n        .multiply(rewardsMultiplierParams.adjustmentFactors.underspend);\\n      FixidityLib.Fraction memory multiplier = FixidityLib.fixed1().add(delta);\\n      if (multiplier.lt(rewardsMultiplierParams.max)) {\\n        return multiplier;\\n      } else {\\n        return rewardsMultiplierParams.max;\\n      }\\n    } else if (remainingToTargetRatio.lt(FixidityLib.fixed1())) {\\n      FixidityLib.Fraction memory delta = FixidityLib\\n        .fixed1()\\n        .subtract(remainingToTargetRatio)\\n        .multiply(rewardsMultiplierParams.adjustmentFactors.overspend);\\n      if (delta.lt(FixidityLib.fixed1())) {\\n        return FixidityLib.fixed1().subtract(delta);\\n      } else {\\n        return FixidityLib.wrap(0);\\n      }\\n    } else {\\n      return FixidityLib.fixed1();\\n    }\\n  }\\n\\n  /**\\n   * @notice Returns the target gold supply increase used in calculating the rewards multiplier.\\n   * @return The target increase in gold w/out the rewards multiplier.\\n   */\\n  function _getTargetGoldSupplyIncrease() internal view returns (uint256) {\\n    uint256 targetEpochRewards = getTargetVoterRewards();\\n    uint256 targetTotalEpochPaymentsInGold = getTargetTotalEpochPaymentsInGold();\\n    uint256 targetGoldSupplyIncrease = targetEpochRewards.add(targetTotalEpochPaymentsInGold);\\n    // increase /= (1 - fraction) st the final community reward is fraction * increase\\n    targetGoldSupplyIncrease = FixidityLib\\n      .newFixed(targetGoldSupplyIncrease)\\n      .divide(\\n        FixidityLib.newFixed(1).subtract(communityRewardFraction).subtract(carbonOffsettingFraction)\\n      )\\n      .fromFixed();\\n    return targetGoldSupplyIncrease;\\n  }\\n}\\n\",\"keccak256\":\"0x010f2bfb80d30df980bdb98449c60dfd87ae84c9218740d82a876a628438d91f\"},\"project:/contracts/governance/interfaces/IElection.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.5.13 <0.9.0;\\n\\ninterface IElection {\\n  function vote(address, uint256, address, address) external returns (bool);\\n  function activate(address) external returns (bool);\\n  function revokeActive(address, uint256, address, address, uint256) external returns (bool);\\n  function revokeAllActive(address, address, address, uint256) external returns (bool);\\n  function revokePending(address, uint256, address, address, uint256) external returns (bool);\\n  function markGroupIneligible(address) external;\\n  function markGroupEligible(address, address, address) external;\\n  function allowedToVoteOverMaxNumberOfGroups(address) external returns (bool);\\n  function forceDecrementVotes(\\n    address,\\n    uint256,\\n    address[] calldata,\\n    address[] calldata,\\n    uint256[] calldata\\n  ) external returns (uint256);\\n  function setAllowedToVoteOverMaxNumberOfGroups(bool flag) external;\\n\\n  // only owner\\n  function setElectableValidators(uint256, uint256) external returns (bool);\\n  function setMaxNumGroupsVotedFor(uint256) external returns (bool);\\n  function setElectabilityThreshold(uint256) external returns (bool);\\n\\n  // only VM\\n  function distributeEpochRewards(address, uint256, address, address) external;\\n\\n  // view functions\\n  function electValidatorSigners() external view returns (address[] memory);\\n  function electValidatorAccounts() external view returns (address[] memory);\\n  function electNValidatorSigners(uint256, uint256) external view returns (address[] memory);\\n  function electNValidatorAccounts(uint256, uint256) external view returns (address[] memory);\\n  function getElectableValidators() external view returns (uint256, uint256);\\n  function getElectabilityThreshold() external view returns (uint256);\\n  function getNumVotesReceivable(address) external view returns (uint256);\\n  function getTotalVotes() external view returns (uint256);\\n  function getActiveVotes() external view returns (uint256);\\n  function getTotalVotesByAccount(address) external view returns (uint256);\\n  function getPendingVotesForGroupByAccount(address, address) external view returns (uint256);\\n  function getActiveVotesForGroupByAccount(address, address) external view returns (uint256);\\n  function getTotalVotesForGroupByAccount(address, address) external view returns (uint256);\\n  function getActiveVoteUnitsForGroupByAccount(address, address) external view returns (uint256);\\n  function getTotalVotesForGroup(address) external view returns (uint256);\\n  function getActiveVotesForGroup(address) external view returns (uint256);\\n  function getPendingVotesForGroup(address) external view returns (uint256);\\n  function getGroupEligibility(address) external view returns (bool);\\n  function getGroupEpochRewards(\\n    address,\\n    uint256,\\n    uint256[] calldata\\n  ) external view returns (uint256);\\n  function getGroupEpochRewardsBasedOnScore(\\n    address group,\\n    uint256 totalEpochRewards,\\n    uint256 groupScore\\n  ) external view returns (uint256);\\n  function getGroupsVotedForByAccount(address) external view returns (address[] memory);\\n  function getEligibleValidatorGroups() external view returns (address[] memory);\\n  function getTotalVotesForEligibleValidatorGroups()\\n    external\\n    view\\n    returns (address[] memory, uint256[] memory);\\n  function getCurrentValidatorSigners() external view returns (address[] memory);\\n  function canReceiveVotes(address, uint256) external view returns (bool);\\n  function hasActivatablePendingVotes(address, address) external view returns (bool);\\n  function validatorSignerAddressFromCurrentSet(uint256 index) external view returns (address);\\n  function numberValidatorsInCurrentSet() external view returns (uint256);\\n  function owner() external view returns (address);\\n}\\n\",\"keccak256\":\"0x598e1f22422d01cd2feccff34c5c276c388209058d7fab3d770e25fa8dec9e59\"},\"project:/contracts/governance/interfaces/IEpochRewards.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.5.13 <0.9.0;\\n\\ninterface IEpochRewards {\\n  function updateTargetVotingYield() external;\\n  function isReserveLow() external view returns (bool);\\n  function calculateTargetEpochRewards() external view returns (uint256, uint256, uint256, uint256);\\n  function getTargetVotingYieldParameters() external view returns (uint256, uint256, uint256);\\n  function getRewardsMultiplierParameters() external view returns (uint256, uint256, uint256);\\n  function getCommunityRewardFraction() external view returns (uint256);\\n  function getCarbonOffsettingFraction() external view returns (uint256);\\n  function getTargetVotingGoldFraction() external view returns (uint256);\\n  function getRewardsMultiplier() external view returns (uint256);\\n  function carbonOffsettingPartner() external view returns (address);\\n}\\n\",\"keccak256\":\"0xfa534a0dc188ffd55595c6edb28b2e4ac9f036022a644b3a61e6a12097e14788\"},\"project:/contracts/governance/interfaces/IGovernance.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.5.13 <0.9.0;\\n\\ninterface IGovernance {\\n  function removeVotesWhenRevokingDelegatedVotes(\\n    address account,\\n    uint256 maxAmountAllowed\\n  ) external;\\n  function votePartially(\\n    uint256 proposalId,\\n    uint256 index,\\n    uint256 yesVotes,\\n    uint256 noVotes,\\n    uint256 abstainVotes\\n  ) external returns (bool);\\n\\n  function setConstitution(address destination, bytes4 functionId, uint256 threshold) external;\\n\\n  function isVoting(address) external view returns (bool);\\n  function getAmountOfGoldUsedForVoting(address account) external view returns (uint256);\\n\\n  function getProposal(\\n    uint256 proposalId\\n  ) external view returns (address, uint256, uint256, uint256, string memory, uint256, bool);\\n\\n  function getReferendumStageDuration() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x8780295e0ecffc9870c59ed17fd4f50902117227157dd060db19d2ebbaaf3d2b\"},\"project:/contracts/governance/interfaces/ILockedCelo.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.5.13 <0.9.0;\\n\\ninterface ILockedCelo {\\n  function lock() external payable;\\n  function incrementNonvotingAccountBalance(address, uint256) external;\\n  function decrementNonvotingAccountBalance(address, uint256) external;\\n\\n  function unlock(uint256) external;\\n  function relock(uint256, uint256) external;\\n  function withdraw(uint256) external;\\n  function slash(\\n    address account,\\n    uint256 penalty,\\n    address reporter,\\n    uint256 reward,\\n    address[] calldata lessers,\\n    address[] calldata greaters,\\n    uint256[] calldata indices\\n  ) external;\\n  function addSlasher(string calldata slasherIdentifier) external;\\n\\n  function getAccountNonvotingLockedGold(address account) external view returns (uint256);\\n  function getAccountTotalLockedCelo(address) external view returns (uint256);\\n  function getTotalLockedCelo() external view returns (uint256);\\n  function getPendingWithdrawals(\\n    address\\n  ) external view returns (uint256[] memory, uint256[] memory);\\n  function getPendingWithdrawal(\\n    address account,\\n    uint256 index\\n  ) external view returns (uint256, uint256);\\n  function getTotalPendingWithdrawals(address) external view returns (uint256);\\n  function isSlasher(address) external view returns (bool);\\n\\n  function getAccountTotalDelegatedFraction(address account) external view returns (uint256);\\n\\n  function getAccountTotalGovernanceVotingPower(address account) external view returns (uint256);\\n  function unlockingPeriod() external view returns (uint256);\\n  function getAccountNonvotingLockedCelo(address account) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x41cd5970ccc5612c9cd9cdf89a299a3cff0d8984d0b16ffad14da7670424920b\"},\"project:/contracts/governance/interfaces/ILockedGold.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.5.13 <0.9.0;\\n\\ninterface ILockedGold {\\n  function lock() external payable;\\n  function incrementNonvotingAccountBalance(address, uint256) external;\\n  function decrementNonvotingAccountBalance(address, uint256) external;\\n\\n  function unlock(uint256) external;\\n  function relock(uint256, uint256) external;\\n  function withdraw(uint256) external;\\n  function slash(\\n    address account,\\n    uint256 penalty,\\n    address reporter,\\n    uint256 reward,\\n    address[] calldata lessers,\\n    address[] calldata greaters,\\n    uint256[] calldata indices\\n  ) external;\\n  function addSlasher(string calldata slasherIdentifier) external;\\n\\n  function getAccountTotalLockedGold(address) external view returns (uint256);\\n  function getTotalLockedGold() external view returns (uint256);\\n  function getPendingWithdrawals(\\n    address\\n  ) external view returns (uint256[] memory, uint256[] memory);\\n  function getPendingWithdrawal(\\n    address account,\\n    uint256 index\\n  ) external view returns (uint256, uint256);\\n  function getTotalPendingWithdrawals(address) external view returns (uint256);\\n  function isSlasher(address) external view returns (bool);\\n\\n  function getAccountTotalDelegatedFraction(address account) external view returns (uint256);\\n\\n  function getAccountTotalGovernanceVotingPower(address account) external view returns (uint256);\\n  function unlockingPeriod() external view returns (uint256);\\n  function getAccountNonvotingLockedGold(address account) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x4ab7ee32f3cbac55e91ef1087ba3e8bbdd784833faa2b9b7e1d66ff662800227\"},\"project:/contracts/governance/interfaces/IValidators.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.5.13 <0.9.0;\\n\\ninterface IValidators {\\n  function registerValidator(\\n    bytes calldata,\\n    bytes calldata,\\n    bytes calldata\\n  ) external returns (bool);\\n  function registerValidatorNoBls(bytes calldata ecdsaPublicKey) external returns (bool);\\n  function deregisterValidator(uint256) external returns (bool);\\n  function affiliate(address) external returns (bool);\\n  function deaffiliate() external returns (bool);\\n  function updateBlsPublicKey(bytes calldata, bytes calldata) external returns (bool);\\n  function registerValidatorGroup(uint256) external returns (bool);\\n  function deregisterValidatorGroup(uint256) external returns (bool);\\n  function addMember(address) external returns (bool);\\n  function addFirstMember(address, address, address) external returns (bool);\\n  function removeMember(address) external returns (bool);\\n  function reorderMember(address, address, address) external returns (bool);\\n  function updateCommission() external;\\n  function setNextCommissionUpdate(uint256) external;\\n  function resetSlashingMultiplier() external;\\n\\n  // only owner\\n  function setCommissionUpdateDelay(uint256) external;\\n  function setMaxGroupSize(uint256) external returns (bool);\\n  function setMembershipHistoryLength(uint256) external returns (bool);\\n  function setValidatorScoreParameters(uint256, uint256) external returns (bool);\\n  function setGroupLockedGoldRequirements(uint256, uint256) external returns (bool);\\n  function setValidatorLockedGoldRequirements(uint256, uint256) external returns (bool);\\n  function setSlashingMultiplierResetPeriod(uint256) external;\\n  function setDowntimeGracePeriod(uint256 value) external;\\n\\n  // only registered contract\\n  function updateEcdsaPublicKey(address, address, bytes calldata) external returns (bool);\\n  function updatePublicKeys(\\n    address,\\n    address,\\n    bytes calldata,\\n    bytes calldata,\\n    bytes calldata\\n  ) external returns (bool);\\n  function mintStableToEpochManager(uint256 amount) external;\\n\\n  // only VM\\n  function updateValidatorScoreFromSigner(address, uint256) external;\\n  function distributeEpochPaymentsFromSigner(address, uint256) external returns (uint256);\\n\\n  // only slasher\\n  function forceDeaffiliateIfValidator(address) external;\\n  function halveSlashingMultiplier(address) external;\\n\\n  // view functions\\n  function maxGroupSize() external view returns (uint256);\\n  function downtimeGracePeriod() external view returns (uint256);\\n  function getCommissionUpdateDelay() external view returns (uint256);\\n  function getValidatorScoreParameters() external view returns (uint256, uint256);\\n  function getMembershipHistory(\\n    address\\n  ) external view returns (uint256[] memory, address[] memory, uint256, uint256);\\n  function calculateEpochScore(uint256) external view returns (uint256);\\n  function calculateGroupEpochScore(uint256[] calldata) external view returns (uint256);\\n  function getAccountLockedGoldRequirement(address) external view returns (uint256);\\n  function meetsAccountLockedGoldRequirements(address) external view returns (bool);\\n  function getValidatorBlsPublicKeyFromSigner(address) external view returns (bytes memory);\\n  function getValidator(\\n    address account\\n  ) external view returns (bytes memory, bytes memory, address, uint256, address);\\n  function getValidatorsGroup(address account) external view returns (address affiliation);\\n  function getValidatorGroup(\\n    address\\n  )\\n    external\\n    view\\n    returns (address[] memory, uint256, uint256, uint256, uint256[] memory, uint256, uint256);\\n  function getGroupNumMembers(address) external view returns (uint256);\\n  function getTopGroupValidators(address, uint256) external view returns (address[] memory);\\n  function getTopGroupValidatorsAccounts(address, uint256) external view returns (address[] memory);\\n  function getGroupsNumMembers(\\n    address[] calldata accounts\\n  ) external view returns (uint256[] memory);\\n  function getNumRegisteredValidators() external view returns (uint256);\\n  function groupMembershipInEpoch(address, uint256, uint256) external view returns (address);\\n\\n  function getValidatorLockedGoldRequirements() external view returns (uint256, uint256);\\n  function getGroupLockedGoldRequirements() external view returns (uint256, uint256);\\n  function getRegisteredValidators() external view returns (address[] memory);\\n  function getRegisteredValidatorGroups() external view returns (address[] memory);\\n  function isValidatorGroup(address) external view returns (bool);\\n  function isValidator(address) external view returns (bool);\\n  function getValidatorGroupSlashingMultiplier(address) external view returns (uint256);\\n  function getMembershipInLastEpoch(address) external view returns (address);\\n  function getMembershipInLastEpochFromSigner(address) external view returns (address);\\n  function computeEpochReward(\\n    address account,\\n    uint256 score,\\n    uint256 maxPayment\\n  ) external view returns (uint256);\\n  function getMembershipHistoryLength() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x78a09c1b3e80fbb1a8fd907575a71e181d100a09d999ea5c032140efbeeeb90f\"},\"project:/contracts/governance/test/EpochRewardsMock.sol\":{\"content\":\"pragma solidity ^0.5.13;\\n\\nimport \\\"../EpochRewards.sol\\\";\\n\\n/**\\n * @title A wrapper around EpochRewards that exposes internal functions for testing.\\n */\\ncontract EpochRewardsMock is EpochRewards(true) {\\n  uint256 private numValidatorsInCurrentSet;\\n\\n  function setNumberValidatorsInCurrentSet(uint256 value) external {\\n    numValidatorsInCurrentSet = value;\\n  }\\n\\n  function getRewardsMultiplier(\\n    uint256 targetGoldTotalSupplyIncrease\\n  ) external view returns (uint256) {\\n    return _getRewardsMultiplier(targetGoldTotalSupplyIncrease).unwrap();\\n  }\\n\\n  // mocks the precompile\\n  function numberValidatorsInCurrentSet() public view returns (uint256) {\\n    return numValidatorsInCurrentSet;\\n  }\\n}\\n\",\"keccak256\":\"0x674368e9546affcc4d90368f5676dd2c58060373f5554377f95ec16691189097\"},\"project:/contracts/identity/interfaces/IAttestations.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.5.13 <0.9.0;\\n\\ninterface IAttestations {\\n  function revoke(bytes32, uint256) external;\\n  function withdraw(address) external;\\n\\n  // only owner\\n  function setAttestationRequestFee(address, uint256) external;\\n  function setAttestationExpiryBlocks(uint256) external;\\n  function setSelectIssuersWaitBlocks(uint256) external;\\n  function setMaxAttestations(uint256) external;\\n\\n  // view functions\\n  function getUnselectedRequest(bytes32, address) external view returns (uint32, uint32, address);\\n  function getAttestationIssuers(bytes32, address) external view returns (address[] memory);\\n  function getAttestationStats(bytes32, address) external view returns (uint32, uint32);\\n  function batchGetAttestationStats(\\n    bytes32[] calldata\\n  ) external view returns (uint256[] memory, address[] memory, uint64[] memory, uint64[] memory);\\n  function getAttestationState(\\n    bytes32,\\n    address,\\n    address\\n  ) external view returns (uint8, uint32, address);\\n  function getCompletableAttestations(\\n    bytes32,\\n    address\\n  ) external view returns (uint32[] memory, address[] memory, uint256[] memory, bytes memory);\\n  function getAttestationRequestFee(address) external view returns (uint256);\\n  function getMaxAttestations() external view returns (uint256);\\n  function validateAttestationCode(\\n    bytes32,\\n    address,\\n    uint8,\\n    bytes32,\\n    bytes32\\n  ) external view returns (address);\\n  function lookupAccountsForIdentifier(bytes32) external view returns (address[] memory);\\n  function requireNAttestationsRequested(bytes32, address, uint32) external view;\\n}\\n\",\"keccak256\":\"0x6afd5f303e153798b15448e0206ed5e645b6e2f2e46762cb17c5b665e256cdb2\"},\"project:/contracts/identity/interfaces/IRandom.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.5.13 <0.9.0;\\n\\ninterface IRandom {\\n  function revealAndCommit(bytes32, bytes32, address) external;\\n  function randomnessBlockRetentionWindow() external view returns (uint256);\\n  function random() external view returns (bytes32);\\n  function getBlockRandomness(uint256) external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xdb545530be6397d23692e4465f4514cf3c87c1d4f553323964694818c375c08d\"},\"project:/contracts/stability/interfaces/ISortedOracles.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.5.13 <0.9.0;\\n\\ninterface ISortedOracles {\\n  function addOracle(address, address) external;\\n  function removeOracle(address, address, uint256) external;\\n  function report(address, uint256, address, address) external;\\n  function removeExpiredReports(address, uint256) external;\\n  function isOldestReportExpired(address token) external view returns (bool, address);\\n  function numRates(address) external view returns (uint256);\\n  function medianRate(address) external view returns (uint256, uint256);\\n  function numTimestamps(address) external view returns (uint256);\\n  function medianTimestamp(address) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xc9d69b608b060effe4a0b246e7fad096b524b848aa51d8f4eccad36c1aa0479d\"},\"project:/lib/mento-core/contracts/interfaces/IExchange.sol\":{\"content\":\"pragma solidity ^0.5.13;\\n\\ninterface IExchange {\\n    function buy(\\n        uint256,\\n        uint256,\\n        bool\\n    ) external returns (uint256);\\n\\n    function sell(\\n        uint256,\\n        uint256,\\n        bool\\n    ) external returns (uint256);\\n\\n    function exchange(\\n        uint256,\\n        uint256,\\n        bool\\n    ) external returns (uint256);\\n\\n    function setUpdateFrequency(uint256) external;\\n\\n    function getBuyTokenAmount(uint256, bool) external view returns (uint256);\\n\\n    function getSellTokenAmount(uint256, bool) external view returns (uint256);\\n\\n    function getBuyAndSellBuckets(bool) external view returns (uint256, uint256);\\n}\\n\",\"keccak256\":\"0x320488022d1066ac81797b9e7a3dc303d1c8e9a48597972d4686e00f9554ade9\"},\"project:/lib/mento-core/contracts/interfaces/IReserve.sol\":{\"content\":\"pragma solidity ^0.5.13;\\n\\ninterface IReserve {\\n    function setTobinTaxStalenessThreshold(uint256) external;\\n\\n    function addToken(address) external returns (bool);\\n\\n    function removeToken(address, uint256) external returns (bool);\\n\\n    function transferGold(address payable, uint256) external returns (bool);\\n\\n    function transferExchangeGold(address payable, uint256) external returns (bool);\\n\\n    function getReserveGoldBalance() external view returns (uint256);\\n\\n    function getUnfrozenReserveGoldBalance() external view returns (uint256);\\n\\n    function getOrComputeTobinTax() external returns (uint256, uint256);\\n\\n    function getTokens() external view returns (address[] memory);\\n\\n    function getReserveRatio() external view returns (uint256);\\n\\n    function addExchangeSpender(address) external;\\n\\n    function removeExchangeSpender(address, uint256) external;\\n\\n    function addSpender(address) external;\\n\\n    function removeSpender(address) external;\\n}\\n\",\"keccak256\":\"0x9162b458dc21fe7e6cfc5d4722b3db3001b1c54ecdcefa703ff9d902084150b7\"},\"project:/lib/mento-core/contracts/interfaces/IStableToken.sol\":{\"content\":\"pragma solidity ^0.5.13;\\n\\n/**\\n * @title This interface describes the functions specific to Celo Stable Tokens, and in the\\n * absence of interface inheritance is intended as a companion to IERC20.sol and ICeloToken.sol.\\n */\\ninterface IStableToken {\\n    function mint(address, uint256) external returns (bool);\\n\\n    function burn(uint256) external returns (bool);\\n\\n    function setInflationParameters(uint256, uint256) external;\\n\\n    function valueToUnits(uint256) external view returns (uint256);\\n\\n    function unitsToValue(uint256) external view returns (uint256);\\n\\n    function getInflationParameters()\\n        external\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256\\n        );\\n\\n    // NOTE: duplicated with IERC20.sol, remove once interface inheritance is supported.\\n    function balanceOf(address) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xcb6440c9b161b26a5b062e6c74d6fd1ed9736f292161c757406a9c39e942d20a\"}},\"version\":1}",
  "bytecode": "0x6080604052600060025560018060006200001e620000e660201b60201c565b9050806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35080620000de576001600060146101000a81548160ff0219169083151502179055505b5050620000ee565b600033905090565b61654f80620000fe6000396000f3fe608060405234801561001057600080fd5b50600436106102d65760003560e01c80637d164125116101825780639b2b592f116100e9578063d632994c116100a2578063e50e652d1161007c578063e50e652d14611009578063ec6830721461104b578063f2fde38b146110c6578063fae8db0a1461110a576102d6565b8063d632994c14610f9f578063df4da46114610fcd578063e185aaa814610feb576102d6565b80639b2b592f14610e51578063a1b9596214610e93578063a91ee0dc14610eb1578063ae098de214610ef5578063b63b4a2314610f13578063cd52782e14610f59576102d6565b806392ecd7451161013b57806392ecd74514610d5d5780639402838414610d6757806396c3d2fd14610dad5780639917907f14610df35780639a7b3be714610e115780639ad0cce714610e2f576102d6565b80637d16412514610b8c5780638331c1d714610baa57806387ee8a0f14610c045780638a88362614610c225780638da5cb5b14610cf15780638f32d59b14610d3b576102d6565b80635049890f1161024157806367960e91116101fa57806376d92bd2116101d457806376d92bd214610a1957806378e9792514610a5b5780637b10399914610a795780637cca2a3c14610ac3576102d6565b806367960e9114610922578063715018a6146109f15780637385e5da146109fb576102d6565b80635049890f146107aa57806354255be0146107c85780635918bb58146107fb5780635d180adb1461084b5780635f396e48146108c357806364347043146108ef576102d6565b806323f0ab651161029357806323f0ab651461046d5780632848f9e3146105f75780633b1eb4bf14610615578063434c99c4146106575780634901c725146106bd5780634b2c2f44146106db576102d6565b80630203ab24146102db57806311fb9e84146102f9578063123633ea14610367578063158ef93e146103d5578063171af90f146103f757806322dae21f14610423575b600080fd5b6102e361114c565b6040518082815260200191505060405180910390f35b6103256004803603602081101561030f57600080fd5b810190808035906020019092919050505061116b565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6103936004803603602081101561037d57600080fd5b8101908080359060200190929190505050611264565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6103dd61131e565b604051808215151515815260200191505060405180910390f35b6103ff611331565b60405180848152602001838152602001828152602001935050505060405180910390f35b61042b6113aa565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6105dd6004803603606081101561048357600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001906401000000008111156104c057600080fd5b8201836020820111156104d257600080fd5b803590602001918460018302840111640100000000831117156104f457600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505091929192908035906020019064010000000081111561055757600080fd5b82018360208201111561056957600080fd5b8035906020019184600183028401116401000000008311171561058b57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505091929192905050506113d0565b604051808215151515815260200191505060405180910390f35b6105ff611592565b6040518082815260200191505060405180910390f35b6106416004803603602081101561062b57600080fd5b810190808035906020019092919050505061165c565b6040518082815260200191505060405180910390f35b6106a36004803603604081101561066d57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061171e565b604051808215151515815260200191505060405180910390f35b6106c561199f565b6040518082815260200191505060405180910390f35b610794600480360360208110156106f157600080fd5b810190808035906020019064010000000081111561070e57600080fd5b82018360208201111561072057600080fd5b8035906020019184600183028401116401000000008311171561074257600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290505050611c87565b6040518082815260200191505060405180910390f35b6107b2611e23565b6040518082815260200191505060405180910390f35b6107d0611f4d565b6040518085815260200184815260200183815260200182815260200194505050505060405180910390f35b6108316004803603604081101561081157600080fd5b810190808035906020019092919080359060200190929190505050611f74565b604051808215151515815260200191505060405180910390f35b6108816004803603604081101561086157600080fd5b81019080803590602001909291908035906020019092919050505061219d565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6108cb6122f7565b60405180848152602001838152602001828152602001935050505060405180910390f35b6108f7612376565b6040518085815260200184815260200183815260200182815260200194505050505060405180910390f35b6109db6004803603602081101561093857600080fd5b810190808035906020019064010000000081111561095557600080fd5b82018360208201111561096757600080fd5b8035906020019184600183028401116401000000008311171561098957600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290505050612496565b6040518082815260200191505060405180910390f35b6109f9612632565b005b610a0361276b565b6040518082815260200191505060405180910390f35b610a4560048036036020811015610a2f57600080fd5b8101908080359060200190929190505050612783565b6040518082815260200191505060405180910390f35b610a6361279d565b6040518082815260200191505060405180910390f35b610a816127a3565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b610b8a6004803603610180811015610ada57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291908035906020019092919080359060200190929190803590602001909291908035906020019092919080359060200190929190803590602001909291908035906020019092919080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506127c9565b005b610b946128d8565b6040518082815260200191505060405180910390f35b610bea60048036036060811015610bc057600080fd5b810190808035906020019092919080359060200190929190803590602001909291905050506128fe565b604051808215151515815260200191505060405180910390f35b610c0c612b34565b6040518082815260200191505060405180910390f35b610cdb60048036036020811015610c3857600080fd5b8101908080359060200190640100000000811115610c5557600080fd5b820183602082011115610c6757600080fd5b80359060200191846001830284011164010000000083111715610c8957600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290505050612b3e565b6040518082815260200191505060405180910390f35b610cf9612cda565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b610d43612d03565b604051808215151515815260200191505060405180910390f35b610d65612d61565b005b610d9360048036036020811015610d7d57600080fd5b81019080803590602001909291905050506130cb565b604051808215151515815260200191505060405180910390f35b610dd960048036036020811015610dc357600080fd5b810190808035906020019092919050505061327d565b604051808215151515815260200191505060405180910390f35b610dfb61339b565b6040518082815260200191505060405180910390f35b610e196133c1565b6040518082815260200191505060405180910390f35b610e376133d1565b604051808215151515815260200191505060405180910390f35b610e7d60048036036020811015610e6757600080fd5b8101908080359060200190929190505050613533565b6040518082815260200191505060405180910390f35b610e9b613684565b6040518082815260200191505060405180910390f35b610ef360048036036020811015610ec757600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050613868565b005b610efd613a0c565b6040518082815260200191505060405180910390f35b610f3f60048036036020811015610f2957600080fd5b8101908080359060200190929190505050613a32565b604051808215151515815260200191505060405180910390f35b610f8560048036036020811015610f6f57600080fd5b8101908080359060200190929190505050613b97565b604051808215151515815260200191505060405180910390f35b610fcb60048036036020811015610fb557600080fd5b8101908080359060200190929190505050613cfb565b005b610fd5613d05565b6040518082815260200191505060405180910390f35b610ff3613e5c565b6040518082815260200191505060405180910390f35b6110356004803603602081101561101f57600080fd5b8101908080359060200190929190505050613e62565b6040518082815260200191505060405180910390f35b6110a9600480360360c081101561106157600080fd5b81019080803590602001909291908035906020019092919080359060200190929190803590602001909291908035906020019092919080359060200190929190505050613eb5565b604051808381526020018281526020019250505060405180910390f35b611108600480360360208110156110dc57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506140d1565b005b6111366004803603602081101561112057600080fd5b8101908080359060200190929190505050614157565b6040518082815260200191505060405180910390f35b600061116661116161115c6142a8565b61435f565b614664565b905090565b6000611175614672565b6111ca576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602381526020018061645e6023913960400191505060405180910390fd5b6111d26146a3565b73ffffffffffffffffffffffffffffffffffffffff16638657f615836040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b15801561122257600080fd5b505afa158015611236573d6000803e3d6000fd5b505050506040513d602081101561124c57600080fd5b81019080805190602001909291905050509050919050565b600061126e614672565b1561130d5761127b6146a3565b73ffffffffffffffffffffffffffffffffffffffff16632ba47274836040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b1580156112cb57600080fd5b505afa1580156112df573d6000803e3d6000fd5b505050506040513d60208110156112f557600080fd5b81019080805190602001909291905050509050611319565b6113168261479e565b90505b919050565b600060149054906101000a900460ff1681565b6000806000806006905061135c81600001604051806020016040529081600082015481525050614664565b61137d82600201604051806020016040529081600082015481525050614664565b61139e83600101604051806020016040529081600082015481525050614664565b93509350935050909192565b600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60006113da6148f7565b600060fb73ffffffffffffffffffffffffffffffffffffffff16858585604051602001808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1660601b815260140183805190602001908083835b60208310611462578051825260208201915060208101905060208303925061143f565b6001836020036101000a03801982511681845116808217855250505050505090500182805190602001908083835b602083106114b35780518252602082019150602081019050602083039250611490565b6001836020036101000a03801982511681845116808217855250505050505090500193505050506040516020818303038152906040526040518082805190602001908083835b6020831061151c57805182526020820191506020810190506020830392506114f9565b6001836020036101000a038019825116818451168082178552505050505050905001915050600060405180830381855afa9150503d806000811461157c576040519150601f19603f3d011682016040523d82523d6000602084013e611581565b606091505b505080915050809150509392505050565b600061165761165260066000016040518060200160405290816000820154815250506116446115bf614957565b73ffffffffffffffffffffffffffffffffffffffff16631f6042436040518163ffffffff1660e01b815260040160206040518083038186803b15801561160457600080fd5b505afa158015611618573d6000803e3d6000fd5b505050506040513d602081101561162e57600080fd5b8101908080519060200190929190505050614a52565b614adc90919063ffffffff16565b614f3b565b905090565b6000611666614672565b15611705576116736146a3565b73ffffffffffffffffffffffffffffffffffffffff16633b1eb4bf836040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b1580156116c357600080fd5b505afa1580156116d7573d6000803e3d6000fd5b505050506040513d60208110156116ed57600080fd5b81019080805190602001909291905050509050611719565b61171682611711613d05565b614f5c565b90505b919050565b6000611728612d03565b61179a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415806118155750611811600b604051806020016040529081600082015481525050614664565b8214155b61186a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260488152602001806164b06048913960600191505060405180910390fd5b61187a611875614fa4565b614664565b82106118ee576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260198152602001807f56616c7565206d757374206265206c657373207468616e20310000000000000081525060200191505060405180910390fd5b82600c60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555061193882614fca565b600b600082015181600001559050508273ffffffffffffffffffffffffffffffffffffffff167fe296227209b47bb8f4a76768ebd564dcde1c44be325a5d262f27c1fd4fd4538b836040518082815260200191505060405180910390a26001905092915050565b600080600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663dcf0aaed60405160200180807f537461626c65546f6b656e000000000000000000000000000000000000000000815250600b019050604051602081830303815290604052805190602001206040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b158015611a5b57600080fd5b505afa158015611a6f573d6000803e3d6000fd5b505050506040513d6020811015611a8557600080fd5b81019080805190602001909291905050509050600080611aa3614fe8565b73ffffffffffffffffffffffffffffffffffffffff1663ef90e1b0846040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050604080518083038186803b158015611b1e57600080fd5b505afa158015611b32573d6000803e3d6000fd5b505050506040513d6040811015611b4857600080fd5b81019080805190602001909291908051906020019092919050505091509150611b6f614672565b15611c3e57611c3482611c2683611c18600d54611b8a6146a3565b73ffffffffffffffffffffffffffffffffffffffff1663639a84d36040518163ffffffff1660e01b815260040160206040518083038186803b158015611bcf57600080fd5b505afa158015611be3573d6000803e3d6000fd5b505050506040513d6020811015611bf957600080fd5b81019080805190602001909291905050506150e390919063ffffffff16565b6150e390919063ffffffff16565b61516990919063ffffffff16565b9350505050611c84565b611c7e82611c7083611c62600d54611c54612b34565b6150e390919063ffffffff16565b6150e390919063ffffffff16565b61516990919063ffffffff16565b93505050505b90565b6000611c916148f7565b6060600060f473ffffffffffffffffffffffffffffffffffffffff16846040516020018082805190602001908083835b60208310611ce45780518252602082019150602081019050602083039250611cc1565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040516020818303038152906040526040518082805190602001908083835b60208310611d4b5780518252602082019150602081019050602083039250611d28565b6001836020036101000a038019825116818451168082178552505050505050905001915050600060405180830381855afa9150503d8060008114611dab576040519150601f19603f3d011682016040523d82523d6000602084013e611db0565b606091505b50809350819250505080611e0f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260388152602001806162116038913960400191505060405180910390fd5b611e1a8260006151b3565b92505050919050565b600080611e3b6002544261525490919063ffffffff16565b90506201518061016d600f0202811015611eed576000611e8f6002611e816b01f04ef12cb04cf1580000006b033b2e3c9fd0803ce800000061525490919063ffffffff16565b61516990919063ffffffff16565b90506000611ec26201518061016d600f0202611eb485856150e390919063ffffffff16565b61516990919063ffffffff16565b9050611ee36b01f04ef12cb04cf1580000008261529e90919063ffffffff16565b9350505050611f4a565b6000611f44576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260368152602001806161db6036913960400191505060405180910390fd5b60009150505b90565b60008060008060018060026000839350829250819150809050935093509350935090919293565b6000611f7e612d03565b611ff0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b6120126006600201604051806020016040529081600082015481525050614664565b83141580612041575061203d6006600101604051806020016040529081600082015481525050614664565b8214155b612096576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260228152602001806162a16022913960400191505060405180910390fd5b61209f83614fca565b6006600201600082015181600001559050506120ba82614fca565b6006600101600082015181600001559050506120ff6120d7614fa4565b600660020160405180602001604052908160008201548152505061532690919063ffffffff16565b612154576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602f815260200180616481602f913960400191505060405180910390fd5b7f1b76e38f3fdd1f284ed4d47c9d50ff407748c516ff9761616ff638c2331076258383604051808381526020018281526020019250505060405180910390a16001905092915050565b60006121a76148f7565b6060600060fa73ffffffffffffffffffffffffffffffffffffffff16858560405160200180838152602001828152602001925050506040516020818303038152906040526040518082805190602001908083835b6020831061221e57805182526020820191506020810190506020830392506121fb565b6001836020036101000a038019825116818451168082178552505050505050905001915050600060405180830381855afa9150503d806000811461227e576040519150601f19603f3d011682016040523d82523d6000602084013e612283565b606091505b508093508192505050806122e2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252603681526020018061635e6036913960400191505060405180910390fd5b6122ed82600061533b565b9250505092915050565b6000806000806003905061232281600201604051806020016040529081600082015481525050614664565b61234682600001600001604051806020016040529081600082015481525050614664565b61236a83600001600101604051806020016040529081600082015481525050614664565b93509350935050909192565b6000806000806000612386611592565b905060006123926142a8565b905061239c616083565b6123a58261435f565b90506123cc6123c7826123b9600d54614a52565b614adc90919063ffffffff16565b614f3b565b6123ef6123ea836123dc87614a52565b614adc90919063ffffffff16565b614f3b565b61243a61243584612427600a60405180602001604052908160008201548152505061241989614a52565b614adc90919063ffffffff16565b614adc90919063ffffffff16565b614f3b565b61248561248085612472600b6040518060200160405290816000820154815250506124648a614a52565b614adc90919063ffffffff16565b614adc90919063ffffffff16565b614f3b565b965096509650965050505090919293565b60006124a06148f7565b6060600060f673ffffffffffffffffffffffffffffffffffffffff16846040516020018082805190602001908083835b602083106124f357805182526020820191506020810190506020830392506124d0565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040516020818303038152906040526040518082805190602001908083835b6020831061255a5780518252602082019150602081019050602083039250612537565b6001836020036101000a038019825116818451168082178552505050505050905001915050600060405180830381855afa9150503d80600081146125ba576040519150601f19603f3d011682016040523d82523d6000602084013e6125bf565b606091505b5080935081925050508061261e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260238152602001806164f86023913960400191505060405180910390fd5b6126298260006151b3565b92505050919050565b61263a612d03565b6126ac576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a360008060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b60006127756148f7565b61277e43613e62565b905090565b60006127966127918361435f565b614664565b9050919050565b60025481565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600060149054906101000a900460ff161561284c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601c8152602001807f636f6e747261637420616c726561647920696e697469616c697a65640000000081525060200191505060405180910390fd5b6001600060146101000a81548160ff02191690831515021790555061287033615352565b6128798c613868565b6128838a8a611f74565b5061288f8888886128fe565b50612899856130cb565b506128a38461327d565b506128ad83613a32565b506128b8828261171e565b506128c28b613b97565b5042600281905550505050505050505050505050565b60006128f9600b604051806020016040529081600082015481525050614664565b905090565b6000612908612d03565b61297a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b61299c6003600201604051806020016040529081600082015481525050614664565b841415806129ce57506129ca6003600001600101604051806020016040529081600082015481525050614664565b8214155b806129fd57506129f96003600001600001604051806020016040529081600082015481525050614664565b8314155b612a52576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602181526020018061613c6021913960400191505060405180910390fd5b60405180604001604052806040518060400160405280612a7187614fca565b8152602001612a7f86614fca565b8152508152602001612a9086614fca565b815250600360008201518160000160008201518160000160008201518160000155505060208201518160010160008201518160000155505050506020820151816002016000820151816000015550509050507f191445ee0115396c9725b9c642b985d63820ca57d54e42e5eb38faec4022f05d84848460405180848152602001838152602001828152602001935050505060405180910390a1600190509392505050565b6000600e54905090565b6000612b486148f7565b6060600060f773ffffffffffffffffffffffffffffffffffffffff16846040516020018082805190602001908083835b60208310612b9b5780518252602082019150602081019050602083039250612b78565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040516020818303038152906040526040518082805190602001908083835b60208310612c025780518252602082019150602081019050602083039250612bdf565b6001836020036101000a038019825116818451168082178552505050505050905001915050600060405180830381855afa9150503d8060008114612c62576040519150601f19603f3d011682016040523d82523d6000602084013e612c67565b606091505b50809350819250505080612cc6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252603181526020018061642d6031913960400191505060405180910390fd5b612cd182600061533b565b92505050919050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16612d45615496565b73ffffffffffffffffffffffffffffffffffffffff1614905090565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663dd92723360405160200180807f45706f63684d616e616765720000000000000000000000000000000000000000815250600c019050604051602081830303815290604052805190602001206040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b158015612e1a57600080fd5b505afa158015612e2e573d6000803e3d6000fd5b505050506040513d6020811015612e4457600080fd5b8101908080519060200190929190505050612e5d614672565b15612f08578073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614612f03576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601f8152602001807f4f6e6c79207065726d697474656420616464726573732063616e2063616c6c0081525060200191505060405180910390fd5b612fab565b600073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614612faa576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260108152602001807f4f6e6c7920564d2063616e2063616c6c0000000000000000000000000000000081525060200191505060405180910390fd5b5b612fb361549e565b73ffffffffffffffffffffffffffffffffffffffff1663e5839836306040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b15801561302f57600080fd5b505afa158015613043573d6000803e3d6000fd5b505050506040513d602081101561305957600080fd5b8101908080519060200190929190505050156130c0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260228152602001806162496022913960400191505060405180910390fd5b6130c8615599565b50565b60006130d5612d03565b613147576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b6131666009604051806020016040529081600082015481525050614664565b8214156131be576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602581526020018061615d6025913960400191505060405180910390fd5b6131ce6131c9614fa4565b614664565b8210613225576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260338152602001806161a86033913960400191505060405180910390fd5b61322e82614fca565b6009600082015181600001559050507fbae2f33c70949fbc7325c98655f3039e5e1c7f774874c99fd4f31ec5f432b159826040518082815260200191505060405180910390a160019050919050565b6000613287612d03565b6132f9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b600d54821415613354576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260288152602001806160e66028913960400191505060405180910390fd5b81600d819055507fa21d141963bb2c1064b5376f762d22d3e9c4c51617edcf105bcec0f14e36800c826040518082815260200191505060405180910390a160019050919050565b60006133bc600a604051806020016040529081600082015481525050614664565b905090565b60006133cc4361165c565b905090565b60006133db616083565b6133f86133f36002544261525490919063ffffffff16565b614a52565b9050613402616083565b61340f632efe0780614a52565b9050613419616083565b6134236002614a52565b905061342d616083565b613440838561598d90919063ffffffff16565b156134545761344d614fa4565b905061347c565b61347961346a84866159a390919063ffffffff16565b83615aec90919063ffffffff16565b90505b613484616083565b61351461348f615b93565b73ffffffffffffffffffffffffffffffffffffffff166356b6d0d56040518163ffffffff1660e01b815260040160206040518083038186803b1580156134d457600080fd5b505afa1580156134e8573d6000803e3d6000fd5b505050506040513d60208110156134fe57600080fd5b8101908080519060200190929190505050614fca565b90506135298282615c8e90919063ffffffff16565b9550505050505090565b600061353d6148f7565b6060600060f973ffffffffffffffffffffffffffffffffffffffff1684604051602001808281526020019150506040516020818303038152906040526040518082805190602001908083835b602083106135ac5780518252602082019150602081019050602083039250613589565b6001836020036101000a038019825116818451168082178552505050505050905001915050600060405180830381855afa9150503d806000811461360c576040519150601f19603f3d011682016040523d82523d6000602084013e613611565b606091505b50809350819250505080613670576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602e81526020018061610e602e913960400191505060405180910390fd5b61367b82600061533b565b92505050919050565b6000806137a8613692615b93565b73ffffffffffffffffffffffffffffffffffffffff16638d9a5e6f6040518163ffffffff1660e01b815260040160206040518083038186803b1580156136d757600080fd5b505afa1580156136eb573d6000803e3d6000fd5b505050506040513d602081101561370157600080fd5b810190808051906020019092919050505061371a615ca4565b73ffffffffffffffffffffffffffffffffffffffff16633a70a5ca6040518163ffffffff1660e01b815260040160206040518083038186803b15801561375f57600080fd5b505afa158015613773573d6000803e3d6000fd5b505050506040513d602081101561378957600080fd5b810190808051906020019092919050505061525490919063ffffffff16565b905060006137b4614957565b73ffffffffffffffffffffffffffffffffffffffff16639a0e7d666040518163ffffffff1660e01b815260040160206040518083038186803b1580156137f957600080fd5b505afa15801561380d573d6000803e3d6000fd5b505050506040513d602081101561382357600080fd5b8101908080519060200190929190505050905061386161385c61384584614a52565b61384e84614a52565b6159a390919063ffffffff16565b614664565b9250505090565b613870612d03565b6138e2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415613985576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f43616e6e6f7420726567697374657220746865206e756c6c206164647265737381525060200191505060405180910390fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff167f27fe5f0c1c3b1ed427cc63d0f05759ffdecf9aec9e18d31ef366fc8a6cb5dc3b60405160405180910390a250565b6000613a2d6009604051806020016040529081600082015481525050614664565b905090565b6000613a3c612d03565b613aae576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b613acd600a604051806020016040529081600082015481525050614664565b8214158015613aea5750613ae7613ae2614fa4565b614664565b82105b613b3f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252604f815260200180616097604f913960600191505060405180910390fd5b613b4882614fca565b600a600082015181600001559050507fe6c1b64ad7e601924731051286b7b408b1a6f3ae96dcd6d2d9cd82578372ef9e826040518082815260200191505060405180910390a160019050919050565b6000613ba1612d03565b613c13576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b613c1b616083565b613c2483614fca565b9050613c52600660020160405180602001604052908160008201548152505082615c8e90919063ffffffff16565b613ca7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260358152602001806163006035913960400191505060405180910390fd5b806006600001600082015181600001559050507f152c3fc1e1cd415804bc9ae15876b37e62d8909358b940e6f4847ca927f46637836040518082815260200191505060405180910390a16001915050919050565b80600e8190555050565b6000613d0f6148f7565b6060600060f873ffffffffffffffffffffffffffffffffffffffff16600160405160200180821515151560f81b81526001019150506040516020818303038152906040526040518082805190602001908083835b60208310613d865780518252602082019150602081019050602083039250613d63565b6001836020036101000a038019825116818451168082178552505050505050905001915050600060405180830381855afa9150503d8060008114613de6576040519150601f19603f3d011682016040523d82523d6000602084013e613deb565b606091505b50809350819250505080613e4a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260258152602001806163dc6025913960400191505060405180910390fd5b613e5582600061533b565b9250505090565b600d5481565b6000613e6c6148f7565b613eae6003613ea06002613e926002613e8488613533565b6150e390919063ffffffff16565b61529e90919063ffffffff16565b61516990919063ffffffff16565b9050919050565b600080613ec06148f7565b60008714158015613ed2575060008514155b613f44576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260158152602001807f612064656e6f6d696e61746f72206973207a65726f000000000000000000000081525060200191505060405180910390fd5b6000806000606060fc73ffffffffffffffffffffffffffffffffffffffff168c8c8c8c8c8c6040516020018087815260200186815260200185815260200184815260200183815260200182815260200196505050505050506040516020818303038152906040526040518082805190602001908083835b60208310613fde5780518252602082019150602081019050602083039250613fbb565b6001836020036101000a038019825116818451168082178552505050505050905001915050600060405180830381855afa9150503d806000811461403e576040519150601f19603f3d011682016040523d82523d6000602084013e614043565b606091505b508092508193505050816140a2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260278152602001806163b56027913960400191505060405180910390fd5b6140ad81600061533b565b93506140ba81602061533b565b925083839550955050505050965096945050505050565b6140d9612d03565b61414b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b61415481615352565b50565b60006141616148f7565b6060600060f573ffffffffffffffffffffffffffffffffffffffff1684604051602001808281526020019150506040516020818303038152906040526040518082805190602001908083835b602083106141d057805182526020820191506020810190506020830392506141ad565b6001836020036101000a038019825116818451168082178552505050505050905001915050600060405180830381855afa9150503d8060008114614230576040519150601f19603f3d011682016040523d82523d6000602084013e614235565b606091505b50809350819250505080614294576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602c815260200180616401602c913960400191505060405180910390fd5b61429f8260006151b3565b92505050919050565b6000806142b3611592565b905060006142bf61199f565b905060006142d6828461529e90919063ffffffff16565b905061435461434f614338600b60405180602001604052908160008201548152505061432a600a60405180602001604052908160008201548152505061431c6001614a52565b615aec90919063ffffffff16565b615aec90919063ffffffff16565b61434184614a52565b6159a390919063ffffffff16565b614f3b565b905080935050505090565b614367616083565b6000614371611e23565b9050600061437d615ca4565b73ffffffffffffffffffffffffffffffffffffffff16633a70a5ca6040518163ffffffff1660e01b815260040160206040518083038186803b1580156143c257600080fd5b505afa1580156143d6573d6000803e3d6000fd5b505050506040513d60208110156143ec57600080fd5b810190808051906020019092919050505090506000614432614417868461529e90919063ffffffff16565b6b033b2e3c9fd0803ce800000061525490919063ffffffff16565b90506000614455846b033b2e3c9fd0803ce800000061525490919063ffffffff16565b905061445f616083565b61448261446b83614a52565b61447485614a52565b6159a390919063ffffffff16565b905061449e61448f614fa4565b82615d9f90919063ffffffff16565b15614581576144ab616083565b6144f360036000016000016040518060200160405290816000820154815250506144e56144d6614fa4565b85615aec90919063ffffffff16565b614adc90919063ffffffff16565b90506144fd616083565b61451782614509614fa4565b615db490919063ffffffff16565b905061454560036002016040518060200160405290816000820154815250508261532690919063ffffffff16565b15614559578097505050505050505061465f565b600360020160405180602001604052908160008201548152505097505050505050505061465f565b61459b61458c614fa4565b8261532690919063ffffffff16565b1561464f576145a8616083565b6145f060036000016001016040518060200160405290816000820154815250506145e2846145d4614fa4565b615aec90919063ffffffff16565b614adc90919063ffffffff16565b905061460c6145fd614fa4565b8261532690919063ffffffff16565b156146385761462b8161461d614fa4565b615aec90919063ffffffff16565b965050505050505061465f565b6146426000614fca565b965050505050505061465f565b614657614fa4565b955050505050505b919050565b600081600001519050919050565b60008060007342000000000000000000000000000000000000189050803b915060008263ffffffff16119250505090565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663dcf0aaed60405160200180807f45706f63684d616e616765720000000000000000000000000000000000000000815250600c019050604051602081830303815290604052805190602001206040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b15801561475e57600080fd5b505afa158015614772573d6000803e3d6000fd5b505050506040513d602081101561478857600080fd5b8101908080519060200190929190505050905090565b60006147a86148f7565b6060600060fa73ffffffffffffffffffffffffffffffffffffffff16844360405160200180838152602001828152602001925050506040516020818303038152906040526040518082805190602001908083835b6020831061481f57805182526020820191506020810190506020830392506147fc565b6001836020036101000a038019825116818451168082178552505050505050905001915050600060405180830381855afa9150503d806000811461487f576040519150601f19603f3d011682016040523d82523d6000602084013e614884565b606091505b508093508192505050806148e3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252603d8152602001806162c3603d913960400191505060405180910390fd5b6148ee82600061533b565b92505050919050565b6148ff614672565b15614955576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260298152602001806163356029913960400191505060405180910390fd5b565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663dcf0aaed60405160200180807f456c656374696f6e0000000000000000000000000000000000000000000000008152506008019050604051602081830303815290604052805190602001206040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b158015614a1257600080fd5b505afa158015614a26573d6000803e3d6000fd5b505050506040513d6020811015614a3c57600080fd5b8101908080519060200190929190505050905090565b614a5a616083565b614a62615e5d565b821115614aba576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252603681526020018061626b6036913960400191505060405180910390fd5b604051806020016040528069d3c21bcecceda100000084028152509050919050565b614ae4616083565b600083600001511480614afb575060008260000151145b15614b1757604051806020016040528060008152509050614f35565b69d3c21bcecceda100000082600001511415614b3557829050614f35565b69d3c21bcecceda100000083600001511415614b5357819050614f35565b600069d3c21bcecceda1000000614b6985615e7c565b6000015181614b7457fe5b0490506000614b8285615eb3565b600001519050600069d3c21bcecceda1000000614b9e86615e7c565b6000015181614ba957fe5b0490506000614bb786615eb3565b6000015190506000828502905060008514614c4b5782858281614bd657fe5b0414614c4a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260168152602001807f6f766572666c6f7720783179312064657465637465640000000000000000000081525060200191505060405180910390fd5b5b600069d3c21bcecceda10000008202905060008214614ced5769d3c21bcecceda1000000828281614c7857fe5b0414614cec576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601f8152602001807f6f766572666c6f772078317931202a206669786564312064657465637465640081525060200191505060405180910390fd5b5b8091506000848602905060008614614d7e5784868281614d0957fe5b0414614d7d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260168152602001807f6f766572666c6f7720783279312064657465637465640000000000000000000081525060200191505060405180910390fd5b5b6000848802905060008814614e0c5784888281614d9757fe5b0414614e0b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260168152602001807f6f766572666c6f7720783179322064657465637465640000000000000000000081525060200191505060405180910390fd5b5b614e14615ef0565b8781614e1c57fe5b049650614e27615ef0565b8581614e2f57fe5b0494506000858802905060008814614ec05785888281614e4b57fe5b0414614ebf576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260168152602001807f6f766572666c6f7720783279322064657465637465640000000000000000000081525060200191505060405180910390fd5b5b614ec8616083565b6040518060200160405280878152509050614ef181604051806020016040528087815250615db4565b9050614f0b81604051806020016040528086815250615db4565b9050614f2581604051806020016040528085815250615db4565b9050809a50505050505050505050505b92915050565b600069d3c21bcecceda1000000826000015181614f5457fe5b049050919050565b600080828481614f6857fe5b0490506000838581614f7657fe5b061415614f865780915050614f9e565b614f9a60018261529e90919063ffffffff16565b9150505b92915050565b614fac616083565b604051806020016040528069d3c21bcecceda1000000815250905090565b614fd2616083565b6040518060200160405280838152509050919050565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663dcf0aaed60405160200180807f536f727465644f7261636c657300000000000000000000000000000000000000815250600d019050604051602081830303815290604052805190602001206040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b1580156150a357600080fd5b505afa1580156150b7573d6000803e3d6000fd5b505050506040513d60208110156150cd57600080fd5b8101908080519060200190929190505050905090565b6000808314156150f65760009050615163565b600082840290508284828161510757fe5b041461515e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260218152602001806163946021913960400191505060405180910390fd5b809150505b92915050565b60006151ab83836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f000000000000815250615efd565b905092915050565b60006151c960208361529e90919063ffffffff16565b8351101561523f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260148152602001807f736c6963696e67206f7574206f662072616e676500000000000000000000000081525060200191505060405180910390fd5b60006020830184015190508091505092915050565b600061529683836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250615fc3565b905092915050565b60008082840190508381101561531c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601b8152602001807f536166654d6174683a206164646974696f6e206f766572666c6f77000000000081525060200191505060405180910390fd5b8091505092915050565b60008160000151836000015110905092915050565b600061534783836151b3565b60001c905092915050565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156153d8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260268152602001806161826026913960400191505060405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600033905090565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663dcf0aaed60405160200180807f467265657a6572000000000000000000000000000000000000000000000000008152506007019050604051602081830303815290604052805190602001206040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b15801561555957600080fd5b505afa15801561556d573d6000803e3d6000fd5b505050506040513d602081101561558357600080fd5b8101908080519060200190929190505050905090565b6155a161549e565b73ffffffffffffffffffffffffffffffffffffffff1663e5839836306040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b15801561561d57600080fd5b505afa158015615631573d6000803e3d6000fd5b505050506040513d602081101561564757600080fd5b8101908080519060200190929190505050156156ae576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260228152602001806162496022913960400191505060405180910390fd5b6156b6616083565b6156c66156c1613684565b614fca565b90506156f1600960405180602001604052908160008201548152505082615d9f90919063ffffffff16565b156157f7576156fe616083565b615727600960405180602001604052908160008201548152505083615aec90919063ffffffff16565b9050615731616083565b61575d600660010160405180602001604052908160008201548152505083614adc90919063ffffffff16565b905061578b60066000016040518060200160405290816000820154815250508261598d90919063ffffffff16565b156157b15761579a6000614a52565b6006600001600082015181600001559050506157f0565b6157dd816006600001604051806020016040529081600082015481525050615aec90919063ffffffff16565b6006600001600082015181600001559050505b5050615932565b61582060096040518060200160405290816000820154815250508261532690919063ffffffff16565b156159315761582d616083565b615856826009604051806020016040529081600082015481525050615aec90919063ffffffff16565b9050615860616083565b61588c600660010160405180602001604052908160008201548152505083614adc90919063ffffffff16565b90506158ba816006600001604051806020016040529081600082015481525050615db490919063ffffffff16565b60066000016000820151816000015590505061591160066002016040518060200160405290816000820154815250506006600001604051806020016040529081600082015481525050615d9f90919063ffffffff16565b1561592e5760066002016006600001600082015481600001559050505b50505b5b7f49d8cdfe05bae61517c234f65f4088454013bafe561115126a8fe0074dc7700e6159756006600001604051806020016040529081600082015481525050614664565b6040518082815260200191505060405180910390a150565b6000816000015183600001511015905092915050565b6159ab616083565b600082600001511415615a26576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f63616e277420646976696465206279203000000000000000000000000000000081525060200191505060405180910390fd5b600069d3c21bcecceda10000008460000151029050836000015169d3c21bcecceda10000008281615a5357fe5b0414615ac7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260128152602001807f6f766572666c6f7720617420646976696465000000000000000000000000000081525060200191505060405180910390fd5b604051806020016040528084600001518381615adf57fe5b0481525091505092915050565b615af4616083565b816000015183600001511015615b72576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601f8152602001807f737562737472616374696f6e20756e646572666c6f772064657465637465640081525060200191505060405180910390fd5b60405180602001604052808360000151856000015103815250905092915050565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663dcf0aaed60405160200180807f52657365727665000000000000000000000000000000000000000000000000008152506007019050604051602081830303815290604052805190602001206040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b158015615c4e57600080fd5b505afa158015615c62573d6000803e3d6000fd5b505050506040513d6020811015615c7857600080fd5b8101908080519060200190929190505050905090565b6000816000015183600001511115905092915050565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663dcf0aaed60405160200180807f43656c6f546f6b656e00000000000000000000000000000000000000000000008152506009019050604051602081830303815290604052805190602001206040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b158015615d5f57600080fd5b505afa158015615d73573d6000803e3d6000fd5b505050506040513d6020811015615d8957600080fd5b8101908080519060200190929190505050905090565b60008160000151836000015111905092915050565b615dbc616083565b6000826000015184600001510190508360000151811015615e45576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260158152602001807f616464206f766572666c6f77206465746563746564000000000000000000000081525060200191505060405180910390fd5b60405180602001604052808281525091505092915050565b60007601357c299a88ea76a58924d52ce4f26a85af186c2b9e74905090565b615e84616083565b604051806020016040528069d3c21bcecceda100000080856000015181615ea757fe5b04028152509050919050565b615ebb616083565b604051806020016040528069d3c21bcecceda100000080856000015181615ede57fe5b04028460000151038152509050919050565b600064e8d4a51000905090565b60008083118290615fa9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b83811015615f6e578082015181840152602081019050615f53565b50505050905090810190601f168015615f9b5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b506000838581615fb557fe5b049050809150509392505050565b6000838311158290616070576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561603557808201518184015260208101905061601a565b50505050905090810190601f1680156160625780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b5060008385039050809150509392505050565b604051806020016040528060008152509056fe56616c7565206d75737420626520646966666572656e742066726f6d206578697374696e6720636f6d6d756e69747920726577617264206672616374696f6e20616e64206c657373207468616e20315461726765742076616c696461746f722065706f6368207061796d656e7420756e6368616e6765646572726f722063616c6c696e67206e756d62657256616c696461746f7273496e53657420707265636f6d70696c654261642072657761726473206d756c7469706c69657220706172616d657465727354617267657420766f74696e6720676f6c64206672616374696f6e20756e6368616e6765644f776e61626c653a206e6577206f776e657220697320746865207a65726f206164647265737354617267657420766f74696e6720676f6c64206672616374696f6e2063616e6e6f74206265206c6172676572207468616e2031426c6f636b207265776172642063616c63756c6174696f6e20666f722079656172732031352d333020756e696d706c656d656e7465646572726f722063616c6c696e672067657456657269666965645365616c4269746d617046726f6d48656164657220707265636f6d70696c6563616e27742063616c6c207768656e20636f6e74726163742069732066726f7a656e63616e277420637265617465206669786964697479206e756d626572206c6172676572207468616e206d61784e6577466978656428294261642074617267657420766f74696e67207969656c6420706172616d65746572736572726f722063616c6c696e672076616c696461746f725369676e65724164647265737346726f6d43757272656e7453657420707265636f6d70696c6554617267657420766f74696e67207969656c64206d757374206265206c657373207468616e206f7220657175616c20746f206d617854686973206d6574686f64206973206e6f206c6f6e67657220737570706f7274656420696e204c322e6572726f722063616c6c696e672076616c696461746f725369676e65724164647265737346726f6d53657420707265636f6d70696c65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f776572726f722063616c6c696e67206672616374696f6e4d756c45787020707265636f6d70696c656572726f722063616c6c696e672067657445706f636853697a6520707265636f6d70696c656572726f722063616c6c696e6720676574506172656e745365616c4269746d617020707265636f6d70696c656572726f722063616c6c696e6720676574426c6f636b4e756d62657246726f6d48656164657220707265636f6d70696c6554686973206d6574686f64206973206e6f7420737570706f7274656420696e204c312e4d61782074617267657420766f74696e67207969656c64206d757374206265206c6f776572207468616e2031303025506172746e657220616e642076616c7565206d75737420626520646966666572656e742066726f6d206578697374696e6720636172626f6e206f666673657474696e672066756e646572726f722063616c6c696e67206861736848656164657220707265636f6d70696c65a265627a7a723158203c4b26dc3bf7fd1d39f7579b5dca69c4f5eabfa012424233011f683dc9b87ab864736f6c634300050d0032",
  "deployedBytecode": "",
  "sourceMap": "150:544:152:-;;;2619:1:114;2592:28;;192:4:152;3998::114;698:17:4;718:12;:10;;;:12;;:::i;:::-;698:32;;749:9;740:6;;:18;;;;;;;;;;;;;;;;;;806:9;773:43;;802:1;773:43;;;;;;;;;;;;664:159;896:17:28;891:57;;937:4;923:11;;:18;;;;;;;;;;;;;;;;;;891:57;842:110;3954:52:114;150:544:152;;788:96:0;833:15;867:10;860:17;;788:96;:::o;150:544:152:-;;;;;;;",
  "deployedSourceMap": "150:544:152:-;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;150:544:152;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;11173:144:114;;;:::i;:::-;;;;;;;;;;;;;;;;;;;1805:159:32;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;1805:159:32;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;1332:260;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;1332:260:32;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;319:23:28;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;9383:263:114;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2920:38;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;6380:275:40;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;6380:275:40;;;;;;;;;;;;;;;;;;;;;21:11:-1;8;5:28;2:2;;;46:1;43;36:12;2:2;6380:275:40;;35:9:-1;28:4;12:14;8:25;5:40;2:2;;;58:1;55;48:12;2:2;6380:275:40;;;;;;100:9:-1;95:1;81:12;77:20;67:8;63:35;60:50;39:11;25:12;22:29;11:107;8:2;;;131:1;128;121:12;8:2;6380:275:40;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;30:3:-1;22:6;14;1:33;99:1;93:3;85:6;81:16;74:27;137:4;133:9;126:4;121:3;117:14;113:30;106:37;;169:3;161:6;157:16;147:26;;6380:275:40;;;;;;;;;;;;;;;;;21:11:-1;8;5:28;2:2;;;46:1;43;36:12;2:2;6380:275:40;;35:9:-1;28:4;12:14;8:25;5:40;2:2;;;58:1;55;48:12;2:2;6380:275:40;;;;;;100:9:-1;95:1;81:12;77:20;67:8;63:35;60:50;39:11;25:12;22:29;11:107;8:2;;;131:1;128;121:12;8:2;6380:275:40;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;30:3:-1;22:6;14;1:33;99:1;93:3;85:6;81:16;74:27;137:4;133:9;126:4;121:3;117:14;113:30;106:37;;169:3;161:6;157:16;147:26;;6380:275:40;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;17963:219:114;;;:::i;:::-;;;;;;;;;;;;;;;;;;;642:253:32;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;642:253:32;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;12557:534:114;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;12557:534:114;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;18364:599;;;:::i;:::-;;;;;;;;;;;;;;;;;;;8760:358:40;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;8760:358:40;;;;;;;;;;21:11:-1;8;5:28;2:2;;;46:1;43;36:12;2:2;8760:358:40;;35:9:-1;28:4;12:14;8:25;5:40;2:2;;;58:1;55;48:12;2:2;8760:358:40;;;;;;100:9:-1;95:1;81:12;77:20;67:8;63:35;60:50;39:11;25:12;22:29;11:107;8:2;;;131:1;128;121:12;8:2;8760:358:40;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;30:3:-1;22:6;14;1:33;99:1;93:3;85:6;81:16;74:27;137:4;133:9;126:4;121:3;117:14;113:30;106:37;;169:3;161:6;157:16;147:26;;8760:358:40;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;17252:575:114;;;:::i;:::-;;;;;;;;;;;;;;;;;;;11594:117;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;15734:680;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;15734:680:114;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;4378:392:40;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;4378:392:40;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;9846:320:114;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8263:878;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;7338:295:40;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;7338:295:40;;;;;;;;;;21:11:-1;8;5:28;2:2;;;46:1;43;36:12;2:2;7338:295:40;;35:9:-1;28:4;12:14;8:25;5:40;2:2;;;58:1;55;48:12;2:2;7338:295:40;;;;;;100:9:-1;95:1;81:12;77:20;67:8;63:35;60:50;39:11;25:12;22:29;11:107;8:2;;;131:1;128;121:12;8:2;7338:295:40;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;30:3:-1;22:6;14;1:33;99:1;93:3;85:6;81:16;74:27;137:4;133:9;126:4;121:3;117:14;113:30;106:37;;169:3;161:6;157:16;147:26;;7338:295:40;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;1684:137:4;;;:::i;:::-;;9692:119:40;;;:::i;:::-;;;;;;;;;;;;;;;;;;;361:188:152;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;361:188:152;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;2592:28:114;;;:::i;:::-;;;;;;;;;;;;;;;;;;;3352:25:41;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;5352:1214:114;;;;;;13:3:-1;8;5:12;2:2;;;30:1;27;20:12;2:2;5352:1214:114;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;10606:122;;;:::i;:::-;;;;;;;;;;;;;;;;;;;14621:863;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;14621:863:114;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;579:113:152;;;:::i;:::-;;;;;;;;;;;;;;;;;;;6834:336:40;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;6834:336:40;;;;;;;;;;21:11:-1;8;5:28;2:2;;;46:1;43;36:12;2:2;6834:336:40;;35:9:-1;28:4;12:14;8:25;5:40;2:2;;;58:1;55;48:12;2:2;6834:336:40;;;;;;100:9:-1;95:1;81:12;77:20;67:8;63:35;60:50;39:11;25:12;22:29;11:107;8:2;;;131:1;128;121:12;8:2;6834:336:40;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;30:3:-1;22:6;14;1:33;99:1;93:3;85:6;81:16;74:27;137:4;133:9;126:4;121:3;117:14;113:30;106:37;;169:3;161:6;157:16;147:26;;6834:336:40;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;899:77:4;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;1250:92;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;6759:182:114;;;:::i;:::-;;13258:430;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;13258:430:114;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;13860:293;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;13860:293:114;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;10313:120;;;:::i;:::-;;;;;;;;;;;;;;;;;;;996:109:32;;;:::i;:::-;;;;;;;;;;;;;;;;;;;7196:777:114;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;5556:328:40;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;5556:328:40;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;19165:353:114;;;:::i;:::-;;;;;;;;;;;;;;;;;;;3956:230:41;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;3956:230:41;;;;;;;;;;;;;;;;;;;:::i;:::-;;10861:122:114;;;:::i;:::-;;;;;;;;;;;;;;;;;;;11897:402;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;11897:402:114;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;16647:413;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;16647:413:114;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;248:109:152;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;248:109:152;;;;;;;;;;;;;;;;;:::i;:::-;;2430:277:40;;;:::i;:::-;;;;;;;;;;;;;;;;;;;2962:42:114;;;:::i;:::-;;;;;;;;;;;;;;;;;;;9356:154:40;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;9356:154:40;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;1492:770;;;;;;13:3:-1;8;5:12;2:2;;;30:1;27;20:12;2:2;1492:770:40;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;1970:107:4;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;1970:107:4;;;;;;;;;;;;;;;;;;;:::i;:::-;;7974:329:40;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;7974:329:40;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;11173:144:114;11228:7;11250:62;:53;11272:30;:28;:30::i;:::-;11250:21;:53::i;:::-;:60;:62::i;:::-;11243:69;;11173:144;:::o;1805:159:32:-;1888:7;435:6:11;:4;:6::i;:::-;430:73;;451:45;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;430:73;1910:17:32;:15;:17::i;:::-;:42;;;1953:5;1910:49;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1910:49:32;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;1910:49:32;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;1910:49:32;;;;;;;;;;;;;;;;1903:56;;1805:159;;;:::o;1332:260::-;1414:7;1433:6;:4;:6::i;:::-;1429:159;;;1456:17;:15;:17::i;:::-;:41;;;1498:5;1456:48;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1456:48:32;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;1456:48:32;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;1456:48:32;;;;;;;;;;;;;;;;1449:55;;;;1429:159;1532:49;1575:5;1532:42;:49::i;:::-;1525:56;;1332:260;;;;:::o;319:23:28:-;;;;;;;;;;;;;:::o;9383:263:114:-;9448:7;9457;9466;9481:42;9526:23;9481:68;;9563:22;:6;:13;;:20;;;;;;;;;;;;;;;;;;:22::i;:::-;9587:19;:6;:10;;:17;;;;;;;;;;;;;;;;;;:19::i;:::-;9608:32;:6;:23;;:30;;;;;;;;;;;;;;;;;;:32::i;:::-;9555:86;;;;;;;9383:263;;;:::o;2920:38::-;;;;;;;;;;;;;:::o;6380:275:40:-;6514:4;328:13:11;:11;:13::i;:::-;6526:12:40;468:8;6558:30;;6606:6;6614;6622;6589:40;;;;;;;;;;;;;;;;;;;;;;;;;;36:153:-1;66:2;61:3;58:11;36:153;;182:3;176:10;171:3;164:23;98:2;93:3;89:12;82:19;;123:2;118:3;114:12;107:19;;148:2;143:3;139:12;132:19;;36:153;;;274:1;267:3;263:2;259:12;254:3;250:22;246:30;315:4;311:9;305:3;299:10;295:26;356:4;350:3;344:10;340:21;389:7;380;377:20;372:3;365:33;3:399;;;6589:40:40;;;;;;;;;;;;;;;;36:153:-1;66:2;61:3;58:11;36:153;;182:3;176:10;171:3;164:23;98:2;93:3;89:12;82:19;;123:2;118:3;114:12;107:19;;148:2;143:3;139:12;132:19;;36:153;;;274:1;267:3;263:2;259:12;254:3;250:22;246:30;315:4;311:9;305:3;299:10;295:26;356:4;350:3;344:10;340:21;389:7;380;377:20;372:3;365:33;3:399;;;6589:40:40;;;;;;;;;;;;;49:4:-1;39:7;30;26:21;22:32;13:7;6:49;6589:40:40;;;6558:72;;;;;;;;;;;;;36:153:-1;66:2;61:3;58:11;36:153;;182:3;176:10;171:3;164:23;98:2;93:3;89:12;82:19;;123:2;118:3;114:12;107:19;;148:2;143:3;139:12;132:19;;36:153;;;274:1;267:3;263:2;259:12;254:3;250:22;246:30;315:4;311:9;305:3;299:10;295:26;356:4;350:3;344:10;340:21;389:7;380;377:20;372:3;365:33;3:399;;;6558:72:40;;;;;;;;;;;;;;;;;;;;;;;14:1:-1;21;16:31;;;;75:4;69:11;64:16;;144:4;140:9;133:4;115:16;111:27;107:43;104:1;100:51;94:4;87:65;169:16;166:1;159:27;225:16;222:1;215:4;212:1;208:12;193:49;7:242;;16:31;36:4;31:9;;7:242;;6544:86:40;;;;;6643:7;6636:14;;;6380:275;;;;;:::o;17963:219:114:-;18017:7;18045:132;:111;18125:23;:30;;18045:111;;;;;;;;;;;;;;;;;:61;18075:13;:11;:13::i;:::-;:28;;;:30;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;18075:30:114;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;18075:30:114;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;18075:30:114;;;;;;;;;;;;;;;;18045:29;:61::i;:::-;:79;;:111;;;;:::i;:::-;:130;:132::i;:::-;18032:145;;17963:219;:::o;642:253:32:-;715:7;734:6;:4;:6::i;:::-;730:161;;;757:17;:15;:17::i;:::-;:39;;;797:11;757:52;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;757:52:32;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;757:52:32;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;757:52:32;;;;;;;;;;;;;;;;750:59;;;;730:161;837:47;856:11;869:14;:12;:14::i;:::-;837:18;:47::i;:::-;830:54;;642:253;;;;:::o;12557:534:114:-;12648:4;1103:9:4;:7;:9::i;:::-;1095:54;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;12686:23:114;;;;;;;;;;;12675:34;;:7;:34;;;;:80;;;;12722:33;:24;:31;;;;;;;;;;;;;;;;;;:33::i;:::-;12713:5;:42;;12675:80;12660:183;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;12865:29;:20;:18;:20::i;:::-;:27;:29::i;:::-;12857:5;:37;12849:75;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;12956:7;12930:23;;:33;;;;;;;;;;;;;;;;;;12996:23;13013:5;12996:16;:23::i;:::-;12969:24;:50;;;;;;;;;;;13054:7;13030:39;;;13063:5;13030:39;;;;;;;;;;;;;;;;;;13082:4;13075:11;;12557:534;;;;:::o;18364:599::-;18430:7;18445:26;18474:8;;;;;;;;;;;:27;;;2604:31:41;;;;;;;;;;;;;;;;49:4:-1;39:7;30;26:21;22:32;13:7;6:49;2604:31:41;;;2594:42;;;;;;18474:53:114;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;18474:53:114;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;18474:53:114;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;18474:53:114;;;;;;;;;;;;;;;;18445:82;;18534:17;18553:19;18576:18;:16;:18::i;:::-;:29;;;18606:18;18576:49;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;18576:49:114;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;18576:49:114;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;18576:49:114;;;;;;;;;;;;;;;;;;;;;;;;;18533:92;;;;18635:6;:4;:6::i;:::-;18631:198;;;18666:156;18812:9;18666:130;18784:11;18666:102;18740:27;;18666:17;:15;:17::i;:::-;:56;;;:58;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;18666:58:114;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;18666:58:114;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;18666:58:114;;;;;;;;;;;;;;;;:73;;:102;;;;:::i;:::-;:117;;:130;;;;:::i;:::-;:145;;:156;;;;:::i;:::-;18651:171;;;;;;;18631:198;18847:111;18941:9;18847:80;18915:11;18847:63;18882:27;;18847:30;:28;:30::i;:::-;:34;;:63;;;;:::i;:::-;:67;;:80;;;;:::i;:::-;:84;;:111;;;;:::i;:::-;18834:124;;;;;18364:599;;:::o;8760:358:40:-;8858:7;328:13:11;:11;:13::i;:::-;8873:16:40;8895:12;877:9;8930:35;;8983:6;8966:24;;;;;;;;;;;;;;;36:153:-1;66:2;61:3;58:11;36:153;;182:3;176:10;171:3;164:23;98:2;93:3;89:12;82:19;;123:2;118:3;114:12;107:19;;148:2;143:3;139:12;132:19;;36:153;;;274:1;267:3;263:2;259:12;254:3;250:22;246:30;315:4;311:9;305:3;299:10;295:26;356:4;350:3;344:10;340:21;389:7;380;377:20;372:3;365:33;3:399;;;8966:24:40;;;;;;;;;;;49:4:-1;39:7;30;26:21;22:32;13:7;6:49;8966:24:40;;;8930:61;;;;;;;;;;;;;36:153:-1;66:2;61:3;58:11;36:153;;182:3;176:10;171:3;164:23;98:2;93:3;89:12;82:19;;123:2;118:3;114:12;107:19;;148:2;143:3;139:12;132:19;;36:153;;;274:1;267:3;263:2;259:12;254:3;250:22;246:30;315:4;311:9;305:3;299:10;295:26;356:4;350:3;344:10;340:21;389:7;380;377:20;372:3;365:33;3:399;;;8930:61:40;;;;;;;;;;;;;;;;;;;;;;;14:1:-1;21;16:31;;;;75:4;69:11;64:16;;144:4;140:9;133:4;115:16;111:27;107:43;104:1;100:51;94:4;87:65;169:16;166:1;159:27;225:16;222:1;215:4;212:1;208:12;193:49;7:242;;16:31;36:4;31:9;;7:242;;8913:78:40;;;;;;;;9005:7;8997:76;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;9086:27;9106:3;9111:1;9086:19;:27::i;:::-;9079:34;;;;8760:358;;;:::o;17252:575:114:-;17309:7;17324:31;17358:18;17366:9;;17358:3;:7;;:18;;;;:::i;:::-;17324:52;;2581:6;2575:3;2520:2;2560:18;:27;17386:23;:40;17382:441;;;17489:21;17513:47;17558:1;17513:40;2376:15;2450:16;17513:19;;:40;;;;:::i;:::-;:44;;:47;;;;:::i;:::-;17489:71;;17568:21;17592:62;2581:6;2575:3;2520:2;2560:18;:27;17592:42;17610:23;17592:13;:17;;:42;;;;:::i;:::-;:46;;:62;;;;:::i;:::-;17568:86;;17669:38;2376:15;17669:13;:17;;:38;;;;:::i;:::-;17662:45;;;;;;;17382:441;17736:5;17728:72;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;17815:1;17808:8;;;17252:575;;:::o;11594:117::-;11645:7;11654;11663;11672;11695:1;11698;11701;11704;11687:19;;;;;;;;;;;;;;;;;;;;11594:117;;;;:::o;15734:680::-;15851:4;1103:9:4;:7;:9::i;:::-;1095:54;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;15885:36:114;:23;:27;;:34;;;;;;;;;;;;;;;;;;:36::i;:::-;15878:3;:43;;:124;;;;15953:49;:23;:40;;:47;;;;;;;;;;;;;;;;;;:49::i;:::-;15933:16;:69;;15878:124;15863:189;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;16088:21;16105:3;16088:16;:21::i;:::-;16058:23;:27;;:51;;;;;;;;;;;16158:34;16175:16;16158;:34::i;:::-;16115:23;:40;;:77;;;;;;;;;;;16213:52;16244:20;:18;:20::i;:::-;16213:23;:27;;:30;;;;;;;;;;;;;;;;;;;:52;;;;:::i;:::-;16198:130;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;16339:53;16370:3;16375:16;16339:53;;;;;;;;;;;;;;;;;;;;;;;;16405:4;16398:11;;15734:680;;;;:::o;4378:392:40:-;4493:7;328:13:11;:11;:13::i;:::-;4508:16:40;4530:12;522:8;4565:24;;4607:5;4614:11;4590:36;;;;;;;;;;;;;;;;;;;;;49:4:-1;39:7;30;26:21;22:32;13:7;6:49;4590:36:40;;;4565:62;;;;;;;;;;;;;36:153:-1;66:2;61:3;58:11;36:153;;182:3;176:10;171:3;164:23;98:2;93:3;89:12;82:19;;123:2;118:3;114:12;107:19;;148:2;143:3;139:12;132:19;;36:153;;;274:1;267:3;263:2;259:12;254:3;250:22;246:30;315:4;311:9;305:3;299:10;295:26;356:4;350:3;344:10;340:21;389:7;380;377:20;372:3;365:33;3:399;;;4565:62:40;;;;;;;;;;;;;;;;;;;;;;;14:1:-1;21;16:31;;;;75:4;69:11;64:16;;144:4;140:9;133:4;115:16;111:27;107:43;104:1;100:51;94:4;87:65;169:16;166:1;159:27;225:16;222:1;215:4;212:1;208:12;193:49;7:242;;16:31;36:4;31:9;;7:242;;4548:79:40;;;;;;;;4641:7;4633:74;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4736:27;4756:3;4761:1;4736:19;:27::i;:::-;4713:52;;;;4378:392;;;;:::o;9846:320:114:-;9911:7;9920;9929;9944:42;9989:23;9944:68;;10033:19;:6;:10;;:17;;;;;;;;;;;;;;;;;;:19::i;:::-;10060:44;:6;:24;;:35;;:42;;;;;;;;;;;;;;;;;;:44::i;:::-;10112:43;:6;:24;;:34;;:41;;;;;;;;;;;;;;;;;;:43::i;:::-;10018:143;;;;;;;9846:320;;;:::o;8263:878::-;8337:7;8346;8355;8364;8381:25;8409:23;:21;:23::i;:::-;8381:51;;8438:32;8473:30;:28;:30::i;:::-;8438:65;;8509:45;;:::i;:::-;8557:47;8579:24;8557:21;:47::i;:::-;8509:95;;8625:89;:77;8684:17;8625:49;8646:27;;8625:20;:49::i;:::-;:58;;:77;;;;:::i;:::-;:87;:89::i;:::-;8722:79;:67;8771:17;8722:39;8743:17;8722:20;:39::i;:::-;:48;;:67;;;;:::i;:::-;:77;:79::i;:::-;8809:156;:135;8926:17;8809:98;8883:23;8809:98;;;;;;;;;;;;;;;;;:55;8839:24;8809:29;:55::i;:::-;:73;;:98;;;;:::i;:::-;:116;;:135;;;;:::i;:::-;:154;:156::i;:::-;8973:157;:136;9091:17;8973:99;9047:24;8973:99;;;;;;;;;;;;;;;;;:55;9003:24;8973:29;:55::i;:::-;:73;;:99;;;;:::i;:::-;:117;;:136;;;;:::i;:::-;:155;:157::i;:::-;8610:526;;;;;;;;;;;8263:878;;;;:::o;7338:295:40:-;7407:7;328:13:11;:11;:13::i;:::-;7422:16:40;7444:12;748:8;7479:22;;7519:6;7502:24;;;;;;;;;;;;;;;36:153:-1;66:2;61:3;58:11;36:153;;182:3;176:10;171:3;164:23;98:2;93:3;89:12;82:19;;123:2;118:3;114:12;107:19;;148:2;143:3;139:12;132:19;;36:153;;;274:1;267:3;263:2;259:12;254:3;250:22;246:30;315:4;311:9;305:3;299:10;295:26;356:4;350:3;344:10;340:21;389:7;380;377:20;372:3;365:33;3:399;;;7502:24:40;;;;;;;;;;;49:4:-1;39:7;30;26:21;22:32;13:7;6:49;7502:24:40;;;7479:48;;;;;;;;;;;;;36:153:-1;66:2;61:3;58:11;36:153;;182:3;176:10;171:3;164:23;98:2;93:3;89:12;82:19;;123:2;118:3;114:12;107:19;;148:2;143:3;139:12;132:19;;36:153;;;274:1;267:3;263:2;259:12;254:3;250:22;246:30;315:4;311:9;305:3;299:10;295:26;356:4;350:3;344:10;340:21;389:7;380;377:20;372:3;365:33;3:399;;;7479:48:40;;;;;;;;;;;;;;;;;;;;;;;14:1:-1;21;16:31;;;;75:4;69:11;64:16;;144:4;140:9;133:4;115:16;111:27;107:43;104:1;100:51;94:4;87:65;169:16;166:1;159:27;225:16;222:1;215:4;212:1;208:12;193:49;7:242;;16:31;36:4;31:9;;7:242;;7462:65:40;;;;;;;;7541:7;7533:55;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;7601:27;7621:3;7626:1;7601:19;:27::i;:::-;7594:34;;;;7338:295;;;:::o;1684:137:4:-;1103:9;:7;:9::i;:::-;1095:54;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1782:1;1745:40;;1766:6;;;;;;;;;;;1745:40;;;;;;;;;;;;1812:1;1795:6;;:19;;;;;;;;;;;;;;;;;;1684:137::o;9692:119:40:-;9757:7;328:13:11;:11;:13::i;:::-;9779:27:40;9793:12;9779:13;:27::i;:::-;9772:34;;9692:119;:::o;361:188:152:-;461:7;483:61;:52;505:29;483:21;:52::i;:::-;:59;:61::i;:::-;476:68;;361:188;;;:::o;2592:28:114:-;;;;:::o;3352:25:41:-;;;;;;;;;;;;;:::o;5352:1214:114:-;476:11:28;;;;;;;;;;;475:12;467:53;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;540:4;526:11;;:18;;;;;;;;;;;;;;;;;;5894:30:114;5913:10;5894:18;:30::i;:::-;5930:28;5942:15;5930:11;:28::i;:::-;5964:87;5995:20;6017:33;5964:30;:87::i;:::-;;6057:165;6095:20;6123:43;6174:42;6057:30;:165::i;:::-;;6228:54;6256:25;6228:27;:54::i;:::-;;6288:60;6319:28;6288:30;:60::i;:::-;;6354:52;6381:24;6354:26;:52::i;:::-;;6412:76;6436:24;6462:25;6412:23;:76::i;:::-;;6494:46;6515:24;6494:20;:46::i;:::-;;6558:3;6546:9;:15;;;;5352:1214;;;;;;;;;;;;:::o;10606:122::-;10668:7;10690:33;:24;:31;;;;;;;;;;;;;;;;;;:33::i;:::-;10683:40;;10606:122;:::o;14621:863::-;14787:4;1103:9:4;:7;:9::i;:::-;1095:54;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;14821:36:114;:23;:27;;:34;;;;;;;;;;;;;;;;;;:36::i;:::-;14814:3;:43;;:144;;;;14898:60;:23;:41;;:51;;:58;;;;;;;;;;;;;;;;;;:60::i;:::-;14869:25;:89;;14814:144;:247;;;;15000:61;:23;:41;;:52;;:59;;;;;;;;;;;;;;;;;;:61::i;:::-;14970:26;:91;;14814:247;14799:311;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;15142:219;;;;;;;;15177:149;;;;;;;;15221:44;15238:26;15221:16;:44::i;:::-;15177:149;;;;15275:43;15292:25;15275:16;:43::i;:::-;15177:149;;;15142:219;;;;15334:21;15351:3;15334:16;:21::i;:::-;15142:219;;;15116:23;:245;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;15372:90;15403:3;15408:26;15436:25;15372:90;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;15475:4;15468:11;;14621:863;;;;;:::o;579:113:152:-;640:7;662:25;;655:32;;579:113;:::o;6834:336:40:-;6917:7;328:13:11;:11;:13::i;:::-;6932:16:40;6954:12;696:8;6989:35;;7042:6;7025:24;;;;;;;;;;;;;;;36:153:-1;66:2;61:3;58:11;36:153;;182:3;176:10;171:3;164:23;98:2;93:3;89:12;82:19;;123:2;118:3;114:12;107:19;;148:2;143:3;139:12;132:19;;36:153;;;274:1;267:3;263:2;259:12;254:3;250:22;246:30;315:4;311:9;305:3;299:10;295:26;356:4;350:3;344:10;340:21;389:7;380;377:20;372:3;365:33;3:399;;;7025:24:40;;;;;;;;;;;49:4:-1;39:7;30;26:21;22:32;13:7;6:49;7025:24:40;;;6989:61;;;;;;;;;;;;;36:153:-1;66:2;61:3;58:11;36:153;;182:3;176:10;171:3;164:23;98:2;93:3;89:12;82:19;;123:2;118:3;114:12;107:19;;148:2;143:3;139:12;132:19;;36:153;;;274:1;267:3;263:2;259:12;254:3;250:22;246:30;315:4;311:9;305:3;299:10;295:26;356:4;350:3;344:10;340:21;389:7;380;377:20;372:3;365:33;3:399;;;6989:61:40;;;;;;;;;;;;;;;;;;;;;;;14:1:-1;21;16:31;;;;75:4;69:11;64:16;;144:4;140:9;133:4;115:16;111:27;107:43;104:1;100:51;94:4;87:65;169:16;166:1;159:27;225:16;222:1;215:4;212:1;208:12;193:49;7:242;;16:31;36:4;31:9;;7:242;;6972:78:40;;;;;;;;7064:7;7056:69;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;7138:27;7158:3;7163:1;7138:19;:27::i;:::-;7131:34;;;;6834:336;;;:::o;899:77:4:-;937:7;963:6;;;;;;;;;;;956:13;;899:77;:::o;1250:92::-;1290:4;1329:6;;;;;;;;;;;1313:22;;:12;:10;:12::i;:::-;:22;;;1306:29;;1250:92;:::o;6759:182:114:-;6829:8;;;;;;;;;;;:22;;;3277:32:41;;;;;;;;;;;;;;;;49:4:-1;39:7;30;26:21;22:32;13:7;6:49;3277:32:41;;;3267:43;;;;;;6829:49:114;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;6829:49:114;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;6829:49:114;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;6829:49:114;;;;;;;;;;;;;;;;3633:6;:4;:6::i;:::-;3629:165;;;3663:16;3649:30;;:10;:30;;;3641:74;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3629:165;;;3764:1;3742:24;;:10;:24;;;3734:53;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3629:165;250:12:25;:10;:12::i;:::-;:21;;;280:4;250:36;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;250:36:25;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;250:36:25;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;250:36:25;;;;;;;;;;;;;;;;249:37;241:84;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6910:26:114;:24;:26::i;:::-;6759:182;:::o;13258:430::-;13336:4;1103:9:4;:7;:9::i;:::-;1095:54;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;13365:33:114;:24;:31;;;;;;;;;;;;;;;;;;:33::i;:::-;13356:5;:42;;13348:92;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;13469:29;:20;:18;:20::i;:::-;:27;:29::i;:::-;13461:5;:37;13446:119;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;13598:23;13615:5;13598:16;:23::i;:::-;13571:24;:50;;;;;;;;;;;13632:34;13660:5;13632:34;;;;;;;;;;;;;;;;;;13679:4;13672:11;;13258:430;;;:::o;13860:293::-;13941:4;1103:9:4;:7;:9::i;:::-;1095:54;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;13970:27:114;;13961:5;:36;;13953:89;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;14078:5;14048:27;:35;;;;14094:37;14125:5;14094:37;;;;;;;;;;;;;;;;;;14144:4;14137:11;;13860:293;;;:::o;10313:120::-;10374:7;10396:32;:23;:30;;;;;;;;;;;;;;;;;;:32::i;:::-;10389:39;;10313:120;:::o;996:109:32:-;1043:7;1065:35;1087:12;1065:21;:35::i;:::-;1058:42;;996:109;:::o;7196:777:114:-;7243:4;7317:51;;:::i;:::-;7371:40;7392:18;7400:9;;7392:3;:7;;:18;;;;:::i;:::-;7371:20;:40::i;:::-;7317:94;;7417:29;;:::i;:::-;7449:39;7470:17;7449:20;:39::i;:::-;7417:71;;7494:29;;:::i;:::-;7526:23;7547:1;7526:20;:23::i;:::-;7494:55;;7555:41;;:::i;:::-;7677:30;7705:1;7677:23;:27;;:30;;;;:::i;:::-;7673:169;;;7733:20;:18;:20::i;:::-;7717:36;;7673:169;;;7790:45;7801:33;7832:1;7801:23;:30;;:33;;;;:::i;:::-;7790:1;:10;;:45;;;;:::i;:::-;7774:61;;7673:169;7847:33;;:::i;:::-;7883:48;7900:12;:10;:12::i;:::-;:28;;;:30;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;7900:30:114;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;7900:30:114;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;7900:30:114;;;;;;;;;;;;;;;;7883:16;:48::i;:::-;7847:84;;7944:24;7954:13;7944:5;:9;;:24;;;;:::i;:::-;7937:31;;;;;;;7196:777;:::o;5556:328:40:-;5636:7;328:13:11;:11;:13::i;:::-;5651:16:40;5673:12;580:8;5708:28;;5754:11;5737:29;;;;;;;;;;;;;;;49:4:-1;39:7;30;26:21;22:32;13:7;6:49;5737:29:40;;;5708:59;;;;;;;;;;;;;36:153:-1;66:2;61:3;58:11;36:153;;182:3;176:10;171:3;164:23;98:2;93:3;89:12;82:19;;123:2;118:3;114:12;107:19;;148:2;143:3;139:12;132:19;;36:153;;;274:1;267:3;263:2;259:12;254:3;250:22;246:30;315:4;311:9;305:3;299:10;295:26;356:4;350:3;344:10;340:21;389:7;380;377:20;372:3;365:33;3:399;;;5708:59:40;;;;;;;;;;;;;;;;;;;;;;;14:1:-1;21;16:31;;;;75:4;69:11;64:16;;144:4;140:9;133:4;115:16;111:27;107:43;104:1;100:51;94:4;87:65;169:16;166:1;159:27;225:16;222:1;215:4;212:1;208:12;193:49;7:242;;16:31;36:4;31:9;;7:242;;5691:76:40;;;;;;;;5781:7;5773:66;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5852:27;5872:3;5877:1;5852:19;:27::i;:::-;5845:34;;;;5556:328;;;:::o;19165:353:114:-;19219:7;19234:18;19255:107;19320:12;:10;:12::i;:::-;:34;;;:36;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;19320:36:114;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;19320:36:114;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;19320:36:114;;;;;;;;;;;;;;;;19274:14;:12;:14::i;:::-;19255:51;;;:53;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;19255:53:114;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;19255:53:114;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;19255:53:114;;;;;;;;;;;;;;;;:57;;:107;;;;:::i;:::-;19234:128;;19368:18;19389:13;:11;:13::i;:::-;:27;;;:29;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;19389:29:114;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;19389:29:114;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;19389:29:114;;;;;;;;;;;;;;;;19368:50;;19431:82;:73;19471:32;19492:10;19471:20;:32::i;:::-;19431;19452:10;19431:20;:32::i;:::-;:39;;:73;;;;:::i;:::-;:80;:82::i;:::-;19424:89;;;;19165:353;:::o;3956:230:41:-;1103:9:4;:7;:9::i;:::-;1095:54;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4060:1:41;4033:29;;:15;:29;;;;4025:74;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4126:15;4105:8;;:37;;;;;;;;;;;;;;;;;;4165:15;4153:28;;;;;;;;;;;;3956:230;:::o;10861:122:114:-;10923:7;10945:33;:24;:31;;;;;;;;;;;;;;;;;;:33::i;:::-;10938:40;;10861:122;:::o;11897:402::-;11974:4;1103:9:4;:7;:9::i;:::-;1095:54;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;12010:32:114;:23;:30;;;;;;;;;;;;;;;;;;:32::i;:::-;12001:5;:41;;:82;;;;;12054:29;:20;:18;:20::i;:::-;:27;:29::i;:::-;12046:5;:37;12001:82;11986:192;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;12210:23;12227:5;12210:16;:23::i;:::-;12184;:49;;;;;;;;;;;12244:33;12271:5;12244:33;;;;;;;;;;;;;;;;;;12290:4;12283:11;;11897:402;;;:::o;16647:413::-;16730:4;1103:9:4;:7;:9::i;:::-;1095:54;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;16742:34:114;;:::i;:::-;16779:35;16796:17;16779:16;:35::i;:::-;16742:72;;16835:39;16846:23;:27;;16835:39;;;;;;;;;;;;;;;;;:6;:10;;:39;;;;:::i;:::-;16820:123;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;16982:6;16949:23;:30;;:39;;;;;;;;;;;16999;17020:17;16999:39;;;;;;;;;;;;;;;;;;17051:4;17044:11;;;16647:413;;;:::o;248:109:152:-;347:5;319:25;:33;;;;248:109;:::o;2430:277:40:-;2482:7;328:13:11;:11;:13::i;:::-;2497:16:40;2519:12;631:8;2554:21;;2593:4;2576:22;;;;;;;;;;;;;;;;;;;;;49:4:-1;39:7;30;26:21;22:32;13:7;6:49;2576:22:40;;;2554:45;;;;;;;;;;;;;36:153:-1;66:2;61:3;58:11;36:153;;182:3;176:10;171:3;164:23;98:2;93:3;89:12;82:19;;123:2;118:3;114:12;107:19;;148:2;143:3;139:12;132:19;;36:153;;;274:1;267:3;263:2;259:12;254:3;250:22;246:30;315:4;311:9;305:3;299:10;295:26;356:4;350:3;344:10;340:21;389:7;380;377:20;372:3;365:33;3:399;;;2554:45:40;;;;;;;;;;;;;;;;;;;;;;;14:1:-1;21;16:31;;;;75:4;69:11;64:16;;144:4;140:9;133:4;115:16;111:27;107:43;104:1;100:51;94:4;87:65;169:16;166:1;159:27;225:16;222:1;215:4;212:1;208:12;193:49;7:242;;16:31;36:4;31:9;;7:242;;2537:62:40;;;;;;;;2613:7;2605:57;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2675:27;2695:3;2700:1;2675:19;:27::i;:::-;2668:34;;;;2430:277;:::o;2962:42:114:-;;;;:::o;9356:154:40:-;9428:7;328:13:11;:11;:13::i;:::-;9450:55:40;9503:1;9450:48;9496:1;9450:41;9489:1;9450:34;9472:11;9450:21;:34::i;:::-;:38;;:41;;;;:::i;:::-;:45;;:48;;;;:::i;:::-;:52;;:55;;;;:::i;:::-;9443:62;;9356:154;;;:::o;1492:770::-;1693:7;1702;328:13:11;:11;:13::i;:::-;1741:1:40;1725:12;:17;;:38;;;;;1762:1;1746:12;:17;;1725:38;1717:72;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1795:23;1824:25;1855:12;1873:16;408:8;1912:23;;1960:10;1972:12;1986:10;1998:12;2012:8;2022:9;1943:89;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;49:4:-1;39:7;30;26:21;22:32;13:7;6:49;1943:89:40;;;1912:126;;;;;;;;;;;;;36:153:-1;66:2;61:3;58:11;36:153;;182:3;176:10;171:3;164:23;98:2;93:3;89:12;82:19;;123:2;118:3;114:12;107:19;;148:2;143:3;139:12;132:19;;36:153;;;274:1;267:3;263:2;259:12;254:3;250:22;246:30;315:4;311:9;305:3;299:10;295:26;356:4;350:3;344:10;340:21;389:7;380;377:20;372:3;365:33;3:399;;;1912:126:40;;;;;;;;;;;;;;;;;;;;;;;14:1:-1;21;16:31;;;;75:4;69:11;64:16;;144:4;140:9;133:4;115:16;111:27;107:43;104:1;100:51;94:4;87:65;169:16;166:1;159:27;225:16;222:1;215:4;212:1;208:12;193:49;7:242;;16:31;36:4;31:9;;7:242;;1895:143:40;;;;;;;;2052:7;2044:59;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2127:27;2147:3;2152:1;2127:19;:27::i;:::-;2109:45;;2180:28;2200:3;2205:2;2180:19;:28::i;:::-;2160:48;;2222:15;2239:17;2214:43;;;;;;;;1492:770;;;;;;;;;:::o;1970:107:4:-;1103:9;:7;:9::i;:::-;1095:54;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2042:28;2061:8;2042:18;:28::i;:::-;1970:107;:::o;7974:329:40:-;8052:7;328:13:11;:11;:13::i;:::-;8067:16:40;8089:12;811:9;8124:33;;8175:11;8158:29;;;;;;;;;;;;;;;49:4:-1;39:7;30;26:21;22:32;13:7;6:49;8158:29:40;;;8124:64;;;;;;;;;;;;;36:153:-1;66:2;61:3;58:11;36:153;;182:3;176:10;171:3;164:23;98:2;93:3;89:12;82:19;;123:2;118:3;114:12;107:19;;148:2;143:3;139:12;132:19;;36:153;;;274:1;267:3;263:2;259:12;254:3;250:22;246:30;315:4;311:9;305:3;299:10;295:26;356:4;350:3;344:10;340:21;389:7;380;377:20;372:3;365:33;3:399;;;8124:64:40;;;;;;;;;;;;;;;;;;;;;;;14:1:-1;21;16:31;;;;75:4;69:11;64:16;;144:4;140:9;133:4;115:16;111:27;107:43;104:1;100:51;94:4;87:65;169:16;166:1;159:27;225:16;222:1;215:4;212:1;208:12;193:49;7:242;;16:31;36:4;31:9;;7:242;;8107:81:40;;;;;;;;8202:7;8194:64;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8271:27;8291:3;8296:1;8271:19;:27::i;:::-;8264:34;;;;7974:329;;;:::o;23123:665:114:-;23186:7;23201:26;23230:23;:21;:23::i;:::-;23201:52;;23259:38;23300:35;:33;:35::i;:::-;23259:76;;23341:32;23376:54;23399:30;23376:18;:22;;:54;;;;:::i;:::-;23341:89;;23550:196;:177;23627:92;23694:24;23627:92;;;;;;;;;;;;;;;;;:57;23660:23;23627:57;;;;;;;;;;;;;;;;;:23;23648:1;23627:20;:23::i;:::-;:32;;:57;;;;:::i;:::-;:66;;:92;;;;:::i;:::-;23550:53;23578:24;23550:27;:53::i;:::-;:67;;:177;;;;:::i;:::-;:194;:196::i;:::-;23523:223;;23759:24;23752:31;;;;;23123:665;:::o;21409:1530::-;21505:27;;:::i;:::-;21540:20;21563:26;:24;:26::i;:::-;21540:49;;21595:23;21640:14;:12;:14::i;:::-;21621:51;;;:53;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;21621:53:114;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;21621:53:114;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;21621:53:114;;;;;;;;;;;;;;;;21595:79;;21680:23;21706:66;21726:45;21746:24;21726:15;:19;;:45;;;;:::i;:::-;2450:16;21706:19;;:66;;;;:::i;:::-;21680:92;;21778:29;21810:33;21830:12;2450:16;21810:19;;:33;;;;:::i;:::-;21778:65;;21849:50;;:::i;:::-;21902:103;21961:43;21982:21;21961:20;:43::i;:::-;21902:44;21930:15;21902:27;:44::i;:::-;:58;;:103;;;;:::i;:::-;21849:156;;22015:47;22041:20;:18;:20::i;:::-;22015:22;:25;;:47;;;;:::i;:::-;22011:924;;;22072:33;;:::i;:::-;22108:134;22189:23;:41;;:52;;22108:134;;;;;;;;;;;;;;;;;:62;22149:20;:18;:20::i;:::-;22108:22;:40;;:62;;;;:::i;:::-;:80;;:134;;;;:::i;:::-;22072:170;;22250:38;;:::i;:::-;22291:31;22316:5;22291:20;:18;:20::i;:::-;:24;;:31;;;;:::i;:::-;22250:72;;22334:42;22348:23;:27;;22334:42;;;;;;;;;;;;;;;;;:10;:13;;:42;;;;:::i;:::-;22330:143;;;22395:10;22388:17;;;;;;;;;;;22330:143;22437:23;:27;;22430:34;;;;;;;;;;;;;;;;;;;;;;;;;;;;22011:924;22489:47;22515:20;:18;:20::i;:::-;22489:22;:25;;:47;;;;:::i;:::-;22485:450;;;22546:33;;:::i;:::-;22582:142;22672:23;:41;;:51;;22582:142;;;;;;;;;;;;;;;;;:71;22630:22;22582:29;:27;:29::i;:::-;:47;;:71;;;;:::i;:::-;:89;;:142;;;;:::i;:::-;22546:178;;22736:30;22745:20;:18;:20::i;:::-;22736:5;:8;;:30;;;;:::i;:::-;22732:149;;;22785:36;22815:5;22785:20;:18;:20::i;:::-;:29;;:36;;;;:::i;:::-;22778:43;;;;;;;;;;22732:149;22853:19;22870:1;22853:16;:19::i;:::-;22846:26;;;;;;;;;;22485:450;22908:20;:18;:20::i;:::-;22901:27;;;;;;;21409:1530;;;;:::o;1724:92:24:-;1782:7;1804:1;:7;;;1797:14;;1724:92;;;:::o;650:183:11:-;689:4;701:11;718:13;208:42;718:33;;794:5;782:18;774:26;;826:1;819:4;:8;;;811:17;;;;650:183;:::o;6891:152:41:-;6941:13;6983:8;;;;;;;;;;;:27;;;3277:32;;;;;;;;;;;;;;;;49:4:-1;39:7;30;26:21;22:32;13:7;6:49;3277:32:41;;;3267:43;;;;;;6983:54;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;6983:54:41;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;6983:54:41;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;6983:54:41;;;;;;;;;;;;;;;;6962:76;;6891:152;:::o;3619:391:40:-;3716:7;328:13:11;:11;:13::i;:::-;3731:16:40;3753:12;522:8;3788:24;;3830:5;3845:12;3813:46;;;;;;;;;;;;;;;;;;;;;49:4:-1;39:7;30;26:21;22:32;13:7;6:49;3813:46:40;;;3788:72;;;;;;;;;;;;;36:153:-1;66:2;61:3;58:11;36:153;;182:3;176:10;171:3;164:23;98:2;93:3;89:12;82:19;;123:2;118:3;114:12;107:19;;148:2;143:3;139:12;132:19;;36:153;;;274:1;267:3;263:2;259:12;254:3;250:22;246:30;315:4;311:9;305:3;299:10;295:26;356:4;350:3;344:10;340:21;389:7;380;377:20;372:3;365:33;3:399;;;3788:72:40;;;;;;;;;;;;;;;;;;;;;;;14:1:-1;21;16:31;;;;75:4;69:11;64:16;;144:4;140:9;133:4;115:16;111:27;107:43;104:1;100:51;94:4;87:65;169:16;166:1;159:27;225:16;222:1;215:4;212:1;208:12;193:49;7:242;;16:31;36:4;31:9;;7:242;;3771:89:40;;;;;;;;3874:7;3866:81;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3976:27;3996:3;4001:1;3976:19;:27::i;:::-;3953:52;;;;3619:391;;;:::o;975:125:11:-;1022:6;:4;:6::i;:::-;1018:78;;;1038:51;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1018:78;975:125::o;4484:135:41:-;4530:9;4564:8;;;;;;;;;;;:27;;;1619:28;;;;;;;;;;;;;;;;49:4:-1;39:7;30;26:21;22:32;13:7;6:49;1619:28:41;;;1609:39;;;;;;4564:49;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;4564:49:41;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;4564:49:41;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;4564:49:41;;;;;;;;;;;;;;;;4547:67;;4484:135;:::o;2597:203:24:-;2649:15;;:::i;:::-;2685:13;:11;:13::i;:::-;2680:1;:18;;2672:85;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2770:25;;;;;;;;889;2779:1;:15;2770:25;;;2763:32;;2597:203;;;:::o;6254:1636::-;6333:15;;:::i;:::-;6371:1;6360;:7;;;:12;:28;;;;6387:1;6376;:7;;;:12;6360:28;6356:52;;;6397:11;;;;;;;;6406:1;6397:11;;;6390:18;;;;6356:52;889:25;6418:1;:7;;;:22;6414:36;;;6449:1;6442:8;;;;6414:36;889:25;6460:1;:7;;;:22;6456:36;;;6491:1;6484:8;;;;6456:36;6581:10;889:25;6594:10;6602:1;6594:7;:10::i;:::-;:16;;;:30;;;;;;6581:43;;6630:10;6643:13;6654:1;6643:10;:13::i;:::-;:19;;;6630:32;;6668:10;889:25;6681:10;6689:1;6681:7;:10::i;:::-;:16;;;:30;;;;;;6668:43;;6717:10;6730:13;6741:1;6730:10;:13::i;:::-;:19;;;6717:32;;6833:12;6853:2;6848;:7;6833:22;;6871:1;6865:2;:7;6861:63;;6895:2;6889;6882:4;:9;;;;;;:15;6874:50;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6861:63;7023:18;889:25;7044:4;:18;7023:39;;7080:1;7072:4;:9;7068:91;;889:25;7104:4;7091:10;:17;;;;;;:32;7083:76;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;7068:91;7172:10;7165:17;;7189:12;7209:2;7204;:7;7189:22;;7227:1;7221:2;:7;7217:63;;7251:2;7245;7238:4;:9;;;;;;:15;7230:50;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;7217:63;7287:12;7307:2;7302;:7;7287:22;;7325:1;7319:2;:7;7315:63;;7349:2;7343;7336:4;:9;;;;;;:15;7328:50;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;7315:63;7395:14;:12;:14::i;:::-;7390:2;:19;;;;;;7385:24;;7425:14;:12;:14::i;:::-;7420:2;:19;;;;;;7415:24;;7445:12;7465:2;7460;:7;7445:22;;7483:1;7477:2;:7;7473:63;;7507:2;7501;7494:4;:9;;;;;;:15;7486:50;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;7473:63;7620:22;;:::i;:::-;7645:14;;;;;;;;7654:4;7645:14;;;7620:39;;7674:27;7678:6;7686:14;;;;;;;;7695:4;7686:14;;;7674:3;:27::i;:::-;7665:36;;7743:27;7747:6;7755:14;;;;;;;;7764:4;7755:14;;;7743:3;:27::i;:::-;7734:36;;7812:27;7816:6;7824:14;;;;;;;;7833:4;7824:14;;;7812:3;:27::i;:::-;7803:36;;7879:6;7872:13;;;;;;;;;;;;6254:1636;;;;;:::o;2959:109::-;3020:7;889:25;3042:1;:7;;;:21;;;;;;3035:28;;2959:109;;;:::o;10023:377:40:-;10126:7;10232:19;10268:9;10254:11;:23;;;;;;10232:45;;10314:1;10301:9;10287:11;:23;;;;;;:28;10283:113;;;10332:11;10325:18;;;;;10283:113;10371:18;10387:1;10371:11;:15;;:18;;;;:::i;:::-;10364:25;;;10023:377;;;;;:::o;1230:97:24:-;1271:15;;:::i;:::-;1301:21;;;;;;;;889:25;1301:21;;;1294:28;;1230:97;:::o;1552:94::-;1600:15;;:::i;:::-;1630:11;;;;;;;;1639:1;1630:11;;;1623:18;;1552:94;;;:::o;6073:156:41:-;6124:14;6168:8;;;;;;;;;;;:27;;;2512:33;;;;;;;;;;;;;;;;49:4:-1;39:7;30;26:21;22:32;13:7;6:49;2512:33:41;;;2502:44;;;;;;6168:55;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;6168:55:41;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;6168:55:41;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;6168:55:41;;;;;;;;;;;;;;;;6146:78;;6073:156;:::o;2159:459:3:-;2217:7;2463:1;2458;:6;2454:45;;;2487:1;2480:8;;;;2454:45;2509:9;2525:1;2521;:5;2509:17;;2553:1;2548;2544;:5;;;;;;:10;2536:56;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2610:1;2603:8;;;2159:459;;;;;:::o;3073:130::-;3131:7;3157:39;3161:1;3164;3157:39;;;;;;;;;;;;;;;;;:3;:39::i;:::-;3150:46;;3073:130;;;;:::o;10870:255:40:-;10954:7;10990:13;11000:2;10990:5;:9;;:13;;;;:::i;:::-;10977:2;:9;:26;;10969:59;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;11034:9;11096:2;11089:5;11085:14;11081:2;11077:23;11071:30;11066:35;;11119:1;11112:8;;;10870:255;;;;:::o;1274:134:3:-;1332:7;1358:43;1362:1;1365;1358:43;;;;;;;;;;;;;;;;;:3;:43::i;:::-;1351:50;;1274:134;;;;:::o;834:176::-;892:7;911:9;927:1;923;:5;911:17;;951:1;946;:6;;938:46;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1002:1;995:8;;;834:176;;;;:::o;9847:114:24:-;9920:4;9949:1;:7;;;9939:1;:7;;;:17;9932:24;;9847:114;;;;:::o;10560:150:40:-;10644:7;10674:30;10694:2;10698:5;10674:19;:30::i;:::-;10666:39;;10659:46;;10560:150;;;;:::o;2178:225:4:-;2271:1;2251:22;;:8;:22;;;;2243:73;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2360:8;2331:38;;2352:6;;;;;;;;;;;2331:38;;;;;;;;;;;;2388:8;2379:6;;:17;;;;;;;;;;;;;;;;;;2178:225;:::o;788:96:0:-;833:15;867:10;860:17;;788:96;:::o;4959:131:41:-;5004:8;5036;;;;;;;;;;;:27;;;1897;;;;;;;;;;;;;;;;49:4:-1;39:7;30;26:21;22:32;13:7;6:49;1897:27:41;;;1887:38;;;;;;5036:48;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;5036:48:41;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;5036:48:41;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;5036:48:41;;;;;;;;;;;;;;;;5020:65;;4959:131;:::o;19663:1475:114:-;250:12:25;:10;:12::i;:::-;:21;;;280:4;250:36;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;250:36:25;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;250:36:25;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;250:36:25;;;;;;;;;;;;;;;;249:37;241:84;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;19732:46:114;;:::i;:::-;19781:41;19798:23;:21;:23::i;:::-;19781:16;:41::i;:::-;19732:90;;19832:47;19854:24;19832:47;;;;;;;;;;;;;;;;;:18;:21;;:47;;;;:::i;:::-;19828:1230;;;19889:51;;:::i;:::-;19943:69;19980:24;19943:69;;;;;;;;;;;;;;;;;:18;:27;;:69;;;;:::i;:::-;19889:123;;20020:50;;:::i;:::-;20073:90;20115:23;:40;;20073:90;;;;;;;;;;;;;;;;;:23;:32;;:90;;;;:::i;:::-;20020:143;;20175:58;20202:23;:30;;20175:58;;;;;;;;;;;;;;;;;:22;:26;;:58;;;;:::i;:::-;20171:280;;;20278:23;20299:1;20278:20;:23::i;:::-;20245;:30;;:56;;;;;;;;;;;20171:280;;;20359:83;20410:22;20359:23;:30;;:39;;;;;;;;;;;;;;;;;;;:83;;;;:::i;:::-;20326:23;:30;;:116;;;;;;;;;;;20171:280;19828:1230;;;;;20467:47;20489:24;20467:47;;;;;;;;;;;;;;;;;:18;:21;;:47;;;;:::i;:::-;20463:595;;;20524:51;;:::i;:::-;20578:69;20621:18;20578:24;:33;;;;;;;;;;;;;;;;;;;:69;;;;:::i;:::-;20524:123;;20655:50;;:::i;:::-;20708:90;20750:23;:40;;20708:90;;;;;;;;;;;;;;;;;:23;:32;;:90;;;;:::i;:::-;20655:143;;20839:58;20874:22;20839:23;:30;;:34;;;;;;;;;;;;;;;;;;;:58;;;;:::i;:::-;20806:23;:30;;:91;;;;;;;;;;;20909:62;20943:23;:27;;20909:62;;;;;;;;;;;;;;;;;:23;:30;;:33;;;;;;;;;;;;;;;;;;;:62;;;;:::i;:::-;20905:147;;;21016:23;:27;;20983:23;:30;;:60;;;;;;;;;;;20905:147;20463:595;;;19828:1230;21068:65;21093:39;:23;:30;;:37;;;;;;;;;;;;;;;;;;:39::i;:::-;21068:65;;;;;;;;;;;;;;;;;;331:1:25;19663:1475:114:o;9696:116:24:-;9770:4;9800:1;:7;;;9789:1;:7;;;:18;;9782:25;;9696:116;;;;:::o;9228:283::-;9305:15;;:::i;:::-;9347:1;9336;:7;;;:12;;9328:42;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;9376:9;889:25;9388:1;:7;;;:21;9376:33;;9442:1;:7;;;889:25;9423:1;:15;;;;;;:26;9415:57;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;9485:21;;;;;;;;9498:1;:7;;;9494:1;:11;;;;;;9485:21;;;9478:28;;;9228:283;;;;:::o;5389:209::-;5468:15;;:::i;:::-;5510:1;:7;;;5499:1;:7;;;:18;;5491:62;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5566:27;;;;;;;;5585:1;:7;;;5575:1;:7;;;:17;5566:27;;;5559:34;;5389:209;;;;:::o;5938:131:41:-;5983:8;6015;;;;;;;;;;;:27;;;2345;;;;;;;;;;;;;;;;49:4:-1;39:7;30;26:21;22:32;13:7;6:49;2345:27:41;;;2335:38;;;;;;6015:48;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;6015:48:41;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;6015:48:41;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;6015:48:41;;;;;;;;;;;;;;;;5999:65;;5938:131;:::o;9997:116:24:-;10071:4;10101:1;:7;;;10090:1;:7;;;:18;;10083:25;;9997:116;;;;:::o;5229:132:41:-;5276:6;5304:8;;;;;;;;;;;:27;;;2780:29;;;;;;;;;;;;;;;;49:4:-1;39:7;30;26:21;22:32;13:7;6:49;2780:29:41;;;2770:40;;;;;;5304:51;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;5304:51:41;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;5304:51:41;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;5304:51:41;;;;;;;;;;;;;;;;5290:66;;5229:132;:::o;9546:114:24:-;9619:4;9648:1;:7;;;9638:1;:7;;;:17;9631:24;;9546:114;;;;:::o;5106:207::-;5180:15;;:::i;:::-;5203:9;5225:1;:7;;;5215:1;:7;;;:17;5203:29;;5251:1;:7;;;5246:1;:12;;5238:46;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5297:11;;;;;;;;5306:1;5297:11;;;5290:18;;;5106:207;;;;:::o;2213:127::-;2259:7;2281:54;2274:61;;2213:127;:::o;4116:159::-;4175:15;;:::i;:::-;4205:47;;;;;;;;889:25;;4215:1;:7;;;:21;;;;;;4214:37;4205:47;;;4198:54;;4116:159;;;:::o;4562:172::-;4624:15;;:::i;:::-;4654:57;;;;;;;;889:25;;4674:1;:7;;;:21;;;;;;4673:37;4663:1;:7;;;:47;4654:57;;;4647:64;;4562:172;;;:::o;1955:87::-;2002:7;2024:13;2017:20;;1955:87;:::o;3718:338:3:-;3804:7;3901:1;3897;:5;3904:12;3889:28;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;80:1;75:3;71:11;64:39;52:2;49:1;45:10;40:15;;8:100;;;12:14;3889:28:3;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3927:9;3943:1;3939;:5;;;;;;3927:17;;4048:1;4041:8;;;3718:338;;;;;:::o;1732:187::-;1818:7;1850:1;1845;:6;;1853:12;1837:29;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;80:1;75:3;71:11;64:39;52:2;49:1;45:10;40:15;;8:100;;;12:14;1837:29:3;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1876:9;1892:1;1888;:5;1876:17;;1911:1;1904:8;;;1732:187;;;;;:::o;150:544:152:-;;;;;;;;;;;;;;:::o",
  "source": "pragma solidity ^0.5.13;\n\nimport \"../EpochRewards.sol\";\n\n/**\n * @title A wrapper around EpochRewards that exposes internal functions for testing.\n */\ncontract EpochRewardsMock is EpochRewards(true) {\n  uint256 private numValidatorsInCurrentSet;\n\n  function setNumberValidatorsInCurrentSet(uint256 value) external {\n    numValidatorsInCurrentSet = value;\n  }\n\n  function getRewardsMultiplier(\n    uint256 targetGoldTotalSupplyIncrease\n  ) external view returns (uint256) {\n    return _getRewardsMultiplier(targetGoldTotalSupplyIncrease).unwrap();\n  }\n\n  // mocks the precompile\n  function numberValidatorsInCurrentSet() public view returns (uint256) {\n    return numValidatorsInCurrentSet;\n  }\n}\n",
  "sourcePath": "/Users/beaver/Development/temp/celo-monorepo/packages/protocol/contracts/governance/test/EpochRewardsMock.sol",
  "ast": {
    "absolutePath": "project:/contracts/governance/test/EpochRewardsMock.sol",
    "exportedSymbols": {
      "EpochRewardsMock": [
        44252
      ]
    },
    "id": 44253,
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 44213,
        "literals": [
          "solidity",
          "^",
          "0.5",
          ".13"
        ],
        "nodeType": "PragmaDirective",
        "src": "0:24:152"
      },
      {
        "absolutePath": "project:/contracts/governance/EpochRewards.sol",
        "file": "../EpochRewards.sol",
        "id": 44214,
        "nodeType": "ImportDirective",
        "scope": 44253,
        "sourceUnit": 32780,
        "src": "26:29:152",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "baseContracts": [
          {
            "arguments": [
              {
                "argumentTypes": null,
                "hexValue": "74727565",
                "id": 44216,
                "isConstant": false,
                "isLValue": false,
                "isPure": true,
                "kind": "bool",
                "lValueRequested": false,
                "nodeType": "Literal",
                "src": "192:4:152",
                "subdenomination": null,
                "typeDescriptions": {
                  "typeIdentifier": "t_bool",
                  "typeString": "bool"
                },
                "value": "true"
              }
            ],
            "baseName": {
              "contractScope": null,
              "id": 44215,
              "name": "EpochRewards",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 32779,
              "src": "179:12:152",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_EpochRewards_$32779",
                "typeString": "contract EpochRewards"
              }
            },
            "id": 44217,
            "nodeType": "InheritanceSpecifier",
            "src": "179:18:152"
          }
        ],
        "contractDependencies": [
          26,
          481,
          1630,
          8766,
          9570,
          11070,
          13059,
          13582,
          14594,
          32779,
          42975
        ],
        "contractKind": "contract",
        "documentation": "@title A wrapper around EpochRewards that exposes internal functions for testing.",
        "fullyImplemented": true,
        "id": 44252,
        "linearizedBaseContracts": [
          44252,
          32779,
          8766,
          11070,
          13582,
          9570,
          481,
          26,
          13059,
          1630,
          42975,
          14594
        ],
        "name": "EpochRewardsMock",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "constant": false,
            "id": 44219,
            "name": "numValidatorsInCurrentSet",
            "nodeType": "VariableDeclaration",
            "scope": 44252,
            "src": "202:41:152",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_uint256",
              "typeString": "uint256"
            },
            "typeName": {
              "id": 44218,
              "name": "uint256",
              "nodeType": "ElementaryTypeName",
              "src": "202:7:152",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            },
            "value": null,
            "visibility": "private"
          },
          {
            "body": {
              "id": 44228,
              "nodeType": "Block",
              "src": "313:44:152",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 44226,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "argumentTypes": null,
                      "id": 44224,
                      "name": "numValidatorsInCurrentSet",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 44219,
                      "src": "319:25:152",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "argumentTypes": null,
                      "id": 44225,
                      "name": "value",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 44221,
                      "src": "347:5:152",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "319:33:152",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 44227,
                  "nodeType": "ExpressionStatement",
                  "src": "319:33:152"
                }
              ]
            },
            "documentation": null,
            "id": 44229,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "setNumberValidatorsInCurrentSet",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 44222,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 44221,
                  "name": "value",
                  "nodeType": "VariableDeclaration",
                  "scope": 44229,
                  "src": "289:13:152",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 44220,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "289:7:152",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "288:15:152"
            },
            "returnParameters": {
              "id": 44223,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "313:0:152"
            },
            "scope": 44252,
            "src": "248:109:152",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "external"
          },
          {
            "body": {
              "id": 44242,
              "nodeType": "Block",
              "src": "470:79:152",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [],
                    "expression": {
                      "argumentTypes": [],
                      "expression": {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "id": 44237,
                            "name": "targetGoldTotalSupplyIncrease",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 44231,
                            "src": "505:29:152",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          ],
                          "id": 44236,
                          "name": "_getRewardsMultiplier",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 32732,
                          "src": "483:21:152",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_view$_t_uint256_$returns$_t_struct$_Fraction_$8145_memory_ptr_$",
                            "typeString": "function (uint256) view returns (struct FixidityLib.Fraction memory)"
                          }
                        },
                        "id": 44238,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "483:52:152",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_Fraction_$8145_memory_ptr",
                          "typeString": "struct FixidityLib.Fraction memory"
                        }
                      },
                      "id": 44239,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "unwrap",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 8189,
                      "src": "483:59:152",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_pure$_t_struct$_Fraction_$8145_memory_ptr_$returns$_t_uint256_$bound_to$_t_struct$_Fraction_$8145_memory_ptr_$",
                        "typeString": "function (struct FixidityLib.Fraction memory) pure returns (uint256)"
                      }
                    },
                    "id": 44240,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "483:61:152",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "functionReturnParameters": 44235,
                  "id": 44241,
                  "nodeType": "Return",
                  "src": "476:68:152"
                }
              ]
            },
            "documentation": null,
            "id": 44243,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "getRewardsMultiplier",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 44232,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 44231,
                  "name": "targetGoldTotalSupplyIncrease",
                  "nodeType": "VariableDeclaration",
                  "scope": 44243,
                  "src": "396:37:152",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 44230,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "396:7:152",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "390:47:152"
            },
            "returnParameters": {
              "id": 44235,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 44234,
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 44243,
                  "src": "461:7:152",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 44233,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "461:7:152",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "460:9:152"
            },
            "scope": 44252,
            "src": "361:188:152",
            "stateMutability": "view",
            "superFunction": null,
            "visibility": "external"
          },
          {
            "body": {
              "id": 44250,
              "nodeType": "Block",
              "src": "649:43:152",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 44248,
                    "name": "numValidatorsInCurrentSet",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 44219,
                    "src": "662:25:152",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "functionReturnParameters": 44247,
                  "id": 44249,
                  "nodeType": "Return",
                  "src": "655:32:152"
                }
              ]
            },
            "documentation": null,
            "id": 44251,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "numberValidatorsInCurrentSet",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 44244,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "616:2:152"
            },
            "returnParameters": {
              "id": 44247,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 44246,
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 44251,
                  "src": "640:7:152",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 44245,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "640:7:152",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "639:9:152"
            },
            "scope": 44252,
            "src": "579:113:152",
            "stateMutability": "view",
            "superFunction": 11069,
            "visibility": "public"
          }
        ],
        "scope": 44253,
        "src": "150:544:152"
      }
    ],
    "src": "0:695:152"
  },
  "legacyAST": {
    "attributes": {
      "absolutePath": "project:/contracts/governance/test/EpochRewardsMock.sol",
      "exportedSymbols": {
        "EpochRewardsMock": [
          44252
        ]
      }
    },
    "children": [
      {
        "attributes": {
          "literals": [
            "solidity",
            "^",
            "0.5",
            ".13"
          ]
        },
        "id": 44213,
        "name": "PragmaDirective",
        "src": "0:24:152"
      },
      {
        "attributes": {
          "SourceUnit": 32780,
          "absolutePath": "project:/contracts/governance/EpochRewards.sol",
          "file": "../EpochRewards.sol",
          "scope": 44253,
          "symbolAliases": [
            null
          ],
          "unitAlias": ""
        },
        "id": 44214,
        "name": "ImportDirective",
        "src": "26:29:152"
      },
      {
        "attributes": {
          "contractDependencies": [
            26,
            481,
            1630,
            8766,
            9570,
            11070,
            13059,
            13582,
            14594,
            32779,
            42975
          ],
          "contractKind": "contract",
          "documentation": "@title A wrapper around EpochRewards that exposes internal functions for testing.",
          "fullyImplemented": true,
          "linearizedBaseContracts": [
            44252,
            32779,
            8766,
            11070,
            13582,
            9570,
            481,
            26,
            13059,
            1630,
            42975,
            14594
          ],
          "name": "EpochRewardsMock",
          "scope": 44253
        },
        "children": [
          {
            "children": [
              {
                "attributes": {
                  "contractScope": null,
                  "name": "EpochRewards",
                  "referencedDeclaration": 32779,
                  "type": "contract EpochRewards"
                },
                "id": 44215,
                "name": "UserDefinedTypeName",
                "src": "179:12:152"
              },
              {
                "attributes": {
                  "argumentTypes": null,
                  "hexvalue": "74727565",
                  "isConstant": false,
                  "isLValue": false,
                  "isPure": true,
                  "lValueRequested": false,
                  "subdenomination": null,
                  "token": "bool",
                  "type": "bool",
                  "value": "true"
                },
                "id": 44216,
                "name": "Literal",
                "src": "192:4:152"
              }
            ],
            "id": 44217,
            "name": "InheritanceSpecifier",
            "src": "179:18:152"
          },
          {
            "attributes": {
              "constant": false,
              "name": "numValidatorsInCurrentSet",
              "scope": 44252,
              "stateVariable": true,
              "storageLocation": "default",
              "type": "uint256",
              "value": null,
              "visibility": "private"
            },
            "children": [
              {
                "attributes": {
                  "name": "uint256",
                  "type": "uint256"
                },
                "id": 44218,
                "name": "ElementaryTypeName",
                "src": "202:7:152"
              }
            ],
            "id": 44219,
            "name": "VariableDeclaration",
            "src": "202:41:152"
          },
          {
            "attributes": {
              "documentation": null,
              "implemented": true,
              "isConstructor": false,
              "kind": "function",
              "modifiers": [
                null
              ],
              "name": "setNumberValidatorsInCurrentSet",
              "scope": 44252,
              "stateMutability": "nonpayable",
              "superFunction": null,
              "visibility": "external"
            },
            "children": [
              {
                "children": [
                  {
                    "attributes": {
                      "constant": false,
                      "name": "value",
                      "scope": 44229,
                      "stateVariable": false,
                      "storageLocation": "default",
                      "type": "uint256",
                      "value": null,
                      "visibility": "internal"
                    },
                    "children": [
                      {
                        "attributes": {
                          "name": "uint256",
                          "type": "uint256"
                        },
                        "id": 44220,
                        "name": "ElementaryTypeName",
                        "src": "289:7:152"
                      }
                    ],
                    "id": 44221,
                    "name": "VariableDeclaration",
                    "src": "289:13:152"
                  }
                ],
                "id": 44222,
                "name": "ParameterList",
                "src": "288:15:152"
              },
              {
                "attributes": {
                  "parameters": [
                    null
                  ]
                },
                "children": [],
                "id": 44223,
                "name": "ParameterList",
                "src": "313:0:152"
              },
              {
                "children": [
                  {
                    "children": [
                      {
                        "attributes": {
                          "argumentTypes": null,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "operator": "=",
                          "type": "uint256"
                        },
                        "children": [
                          {
                            "attributes": {
                              "argumentTypes": null,
                              "overloadedDeclarations": [
                                null
                              ],
                              "referencedDeclaration": 44219,
                              "type": "uint256",
                              "value": "numValidatorsInCurrentSet"
                            },
                            "id": 44224,
                            "name": "Identifier",
                            "src": "319:25:152"
                          },
                          {
                            "attributes": {
                              "argumentTypes": null,
                              "overloadedDeclarations": [
                                null
                              ],
                              "referencedDeclaration": 44221,
                              "type": "uint256",
                              "value": "value"
                            },
                            "id": 44225,
                            "name": "Identifier",
                            "src": "347:5:152"
                          }
                        ],
                        "id": 44226,
                        "name": "Assignment",
                        "src": "319:33:152"
                      }
                    ],
                    "id": 44227,
                    "name": "ExpressionStatement",
                    "src": "319:33:152"
                  }
                ],
                "id": 44228,
                "name": "Block",
                "src": "313:44:152"
              }
            ],
            "id": 44229,
            "name": "FunctionDefinition",
            "src": "248:109:152"
          },
          {
            "attributes": {
              "documentation": null,
              "implemented": true,
              "isConstructor": false,
              "kind": "function",
              "modifiers": [
                null
              ],
              "name": "getRewardsMultiplier",
              "scope": 44252,
              "stateMutability": "view",
              "superFunction": null,
              "visibility": "external"
            },
            "children": [
              {
                "children": [
                  {
                    "attributes": {
                      "constant": false,
                      "name": "targetGoldTotalSupplyIncrease",
                      "scope": 44243,
                      "stateVariable": false,
                      "storageLocation": "default",
                      "type": "uint256",
                      "value": null,
                      "visibility": "internal"
                    },
                    "children": [
                      {
                        "attributes": {
                          "name": "uint256",
                          "type": "uint256"
                        },
                        "id": 44230,
                        "name": "ElementaryTypeName",
                        "src": "396:7:152"
                      }
                    ],
                    "id": 44231,
                    "name": "VariableDeclaration",
                    "src": "396:37:152"
                  }
                ],
                "id": 44232,
                "name": "ParameterList",
                "src": "390:47:152"
              },
              {
                "children": [
                  {
                    "attributes": {
                      "constant": false,
                      "name": "",
                      "scope": 44243,
                      "stateVariable": false,
                      "storageLocation": "default",
                      "type": "uint256",
                      "value": null,
                      "visibility": "internal"
                    },
                    "children": [
                      {
                        "attributes": {
                          "name": "uint256",
                          "type": "uint256"
                        },
                        "id": 44233,
                        "name": "ElementaryTypeName",
                        "src": "461:7:152"
                      }
                    ],
                    "id": 44234,
                    "name": "VariableDeclaration",
                    "src": "461:7:152"
                  }
                ],
                "id": 44235,
                "name": "ParameterList",
                "src": "460:9:152"
              },
              {
                "children": [
                  {
                    "attributes": {
                      "functionReturnParameters": 44235
                    },
                    "children": [
                      {
                        "attributes": {
                          "argumentTypes": null,
                          "arguments": [
                            null
                          ],
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "isStructConstructorCall": false,
                          "lValueRequested": false,
                          "names": [
                            null
                          ],
                          "type": "uint256",
                          "type_conversion": false
                        },
                        "children": [
                          {
                            "attributes": {
                              "argumentTypes": [
                                null
                              ],
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "member_name": "unwrap",
                              "referencedDeclaration": 8189,
                              "type": "function (struct FixidityLib.Fraction memory) pure returns (uint256)"
                            },
                            "children": [
                              {
                                "attributes": {
                                  "argumentTypes": null,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "isStructConstructorCall": false,
                                  "lValueRequested": false,
                                  "names": [
                                    null
                                  ],
                                  "type": "struct FixidityLib.Fraction memory",
                                  "type_conversion": false
                                },
                                "children": [
                                  {
                                    "attributes": {
                                      "argumentTypes": [
                                        {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        }
                                      ],
                                      "overloadedDeclarations": [
                                        null
                                      ],
                                      "referencedDeclaration": 32732,
                                      "type": "function (uint256) view returns (struct FixidityLib.Fraction memory)",
                                      "value": "_getRewardsMultiplier"
                                    },
                                    "id": 44236,
                                    "name": "Identifier",
                                    "src": "483:21:152"
                                  },
                                  {
                                    "attributes": {
                                      "argumentTypes": null,
                                      "overloadedDeclarations": [
                                        null
                                      ],
                                      "referencedDeclaration": 44231,
                                      "type": "uint256",
                                      "value": "targetGoldTotalSupplyIncrease"
                                    },
                                    "id": 44237,
                                    "name": "Identifier",
                                    "src": "505:29:152"
                                  }
                                ],
                                "id": 44238,
                                "name": "FunctionCall",
                                "src": "483:52:152"
                              }
                            ],
                            "id": 44239,
                            "name": "MemberAccess",
                            "src": "483:59:152"
                          }
                        ],
                        "id": 44240,
                        "name": "FunctionCall",
                        "src": "483:61:152"
                      }
                    ],
                    "id": 44241,
                    "name": "Return",
                    "src": "476:68:152"
                  }
                ],
                "id": 44242,
                "name": "Block",
                "src": "470:79:152"
              }
            ],
            "id": 44243,
            "name": "FunctionDefinition",
            "src": "361:188:152"
          },
          {
            "attributes": {
              "documentation": null,
              "implemented": true,
              "isConstructor": false,
              "kind": "function",
              "modifiers": [
                null
              ],
              "name": "numberValidatorsInCurrentSet",
              "scope": 44252,
              "stateMutability": "view",
              "superFunction": 11069,
              "visibility": "public"
            },
            "children": [
              {
                "attributes": {
                  "parameters": [
                    null
                  ]
                },
                "children": [],
                "id": 44244,
                "name": "ParameterList",
                "src": "616:2:152"
              },
              {
                "children": [
                  {
                    "attributes": {
                      "constant": false,
                      "name": "",
                      "scope": 44251,
                      "stateVariable": false,
                      "storageLocation": "default",
                      "type": "uint256",
                      "value": null,
                      "visibility": "internal"
                    },
                    "children": [
                      {
                        "attributes": {
                          "name": "uint256",
                          "type": "uint256"
                        },
                        "id": 44245,
                        "name": "ElementaryTypeName",
                        "src": "640:7:152"
                      }
                    ],
                    "id": 44246,
                    "name": "VariableDeclaration",
                    "src": "640:7:152"
                  }
                ],
                "id": 44247,
                "name": "ParameterList",
                "src": "639:9:152"
              },
              {
                "children": [
                  {
                    "attributes": {
                      "functionReturnParameters": 44247
                    },
                    "children": [
                      {
                        "attributes": {
                          "argumentTypes": null,
                          "overloadedDeclarations": [
                            null
                          ],
                          "referencedDeclaration": 44219,
                          "type": "uint256",
                          "value": "numValidatorsInCurrentSet"
                        },
                        "id": 44248,
                        "name": "Identifier",
                        "src": "662:25:152"
                      }
                    ],
                    "id": 44249,
                    "name": "Return",
                    "src": "655:32:152"
                  }
                ],
                "id": 44250,
                "name": "Block",
                "src": "649:43:152"
              }
            ],
            "id": 44251,
            "name": "FunctionDefinition",
            "src": "579:113:152"
          }
        ],
        "id": 44252,
        "name": "ContractDefinition",
        "src": "150:544:152"
      }
    ],
    "id": 44253,
    "name": "SourceUnit",
    "src": "0:695:152"
  },
  "compiler": {
    "name": "solc",
    "version": "0.5.13+commit.5b0b510c.Emscripten.clang"
  },
  "networks": {},
  "schemaVersion": "3.4.13",
  "updatedAt": "2025-05-05T17:49:51.464Z",
  "devdoc": {
    "methods": {
      "calculateTargetEpochRewards()": {
        "return": "The per validator epoch reward.The total rewards to voters.The total community reward.The total carbon offsetting partner reward."
      },
      "checkProofOfPossession(address,bytes,bytes)": {
        "details": "This function will be deprecated in L2.",
        "params": {
          "blsKey": "The BLS public key that the validator is using for consensus, should pass proof  of possession. 48 bytes.",
          "blsPop": "The BLS public key proof-of-possession, which consists of a signature on the  account address. 96 bytes.",
          "sender": "The address signed by the BLS key to generate the proof of possession."
        },
        "return": "True upon success."
      },
      "fractionMulExp(uint256,uint256,uint256,uint256,uint256,uint256)": {
        "details": "This function will be deprecated in L2.",
        "params": {
          "_decimals": "precision",
          "aDenominator": "Denominator of first fraction",
          "aNumerator": "Numerator of first fraction",
          "bDenominator": "Denominator of exponentiated fraction",
          "bNumerator": "Numerator of exponentiated fraction",
          "exponent": "exponent to raise b to"
        },
        "return": "Numerator of the computed quantity (not reduced).Denominator of the computed quantity (not reduced)."
      },
      "getBlockNumberFromHeader(bytes)": {
        "details": "This function will be deprecated in L2.",
        "params": {
          "header": "RLP encoded header"
        },
        "return": "Block number."
      },
      "getCarbonOffsettingFraction()": {
        "return": "The percentage of total reward which goes to the carbon offsetting partner."
      },
      "getCommunityRewardFraction()": {
        "return": "The percentage of total reward which goes to the community funds."
      },
      "getEpochNumber()": {
        "return": "Current epoch number."
      },
      "getEpochNumberOfBlock(uint256)": {
        "params": {
          "blockNumber": "Block number where epoch number is calculated."
        },
        "return": "Epoch number."
      },
      "getEpochSize()": {
        "details": "This function will be deprecated in L2.",
        "return": "The current epoch size in blocks."
      },
      "getParentSealBitmap(uint256)": {
        "details": "This function will be deprecated in L2.",
        "params": {
          "blockNumber": "Block number to retrieve. Must be within 4 epochs of the current number."
        },
        "return": "Bitmap parent seal with set bits at indices corresponding to signing validators."
      },
      "getRewardsMultiplier()": {
        "return": "The rewards multiplier based on the current and target Gold supplies."
      },
      "getRewardsMultiplierParameters()": {
        "return": "The max multiplier.The underspend adjustment factors.The overspend adjustment factors."
      },
      "getTargetGoldTotalSupply()": {
        "return": "The target Gold supply according to the epoch rewards target schedule."
      },
      "getTargetTotalEpochPaymentsInGold()": {
        "return": "The total target epoch payments to validators, converted to Gold."
      },
      "getTargetVoterRewards()": {
        "return": "the total target epoch rewards for voters."
      },
      "getTargetVotingGoldFraction()": {
        "return": "The percentage of floating Gold voting to target."
      },
      "getTargetVotingYieldParameters()": {
        "return": "The target factor for target voting yield.The max factor for target voting yield.The adjustment factor for target voting yield."
      },
      "getVerifiedSealBitmapFromHeader(bytes)": {
        "details": "This function will be deprecated in L2.",
        "params": {
          "header": "RLP encoded header"
        },
        "return": "Bitmap parent seal with set bits at indices correspoinding to signing validators."
      },
      "getVersionNumber()": {
        "return": "Storage version of the contract.Major version of the contract.Minor version of the contract.Patch version of the contract."
      },
      "getVotingGoldFraction()": {
        "return": "The fraction of floating Gold being used for voting in validator elections."
      },
      "hashHeader(bytes)": {
        "details": "This function will be deprecated in L2.",
        "params": {
          "header": "RLP encoded header"
        },
        "return": "Header hash."
      },
      "initialize(address,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,address,uint256)": {
        "details": "Should be called only once.",
        "params": {
          "_carbonOffsettingFraction": "The percentage of rewards going to carbon offsetting partner.",
          "_carbonOffsettingPartner": "The address of the carbon offsetting partner.",
          "_communityRewardFraction": "The percentage of rewards that go the community funds.",
          "_targetValidatorEpochPayment": "The target validator epoch payment.",
          "_targetVotingGoldFraction": "The percentage of floating Gold voting to target.",
          "registryAddress": "The address of the registry contract.",
          "rewardsMultiplierMax": "The max multiplier on target epoch rewards.",
          "rewardsMultiplierOverspendAdjustmentFactor": "Adjusts the multiplier on target epoch  rewards when the protocol is running ahead of the target Gold supply.",
          "rewardsMultiplierUnderspendAdjustmentFactor": "Adjusts the multiplier on target epoch  rewards when the protocol is running behind the target Gold supply.",
          "targetVotingYieldAdjustmentFactor": "The target block reward adjustment factor for voters.",
          "targetVotingYieldInitial": "The initial relative target block reward for voters.",
          "targetVotingYieldMax": "The max relative target block reward for voters."
        }
      },
      "isOwner()": {
        "details": "Returns true if the caller is the current owner."
      },
      "minQuorumSize(uint256)": {
        "details": "Computed in celo-blockchain as int(math.Ceil(float64(2*valSet.Size()) / 3))This function will be deprecated in L2."
      },
      "minQuorumSizeInCurrentSet()": {
        "details": "This function will be deprecated in L2.",
        "return": "Byzantine quorum of validators."
      },
      "numberValidatorsInSet(uint256)": {
        "details": "This function will be deprecated in L2.",
        "params": {
          "blockNumber": "Block number to retrieve the validator set from."
        },
        "return": "Size of the validator set."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner.     * NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "setCarbonOffsettingFund(address,uint256)": {
        "params": {
          "partner": "The address of the carbon offsetting partner.",
          "value": "The percentage of the total reward to be sent to the carbon offsetting partner."
        },
        "return": "True upon success."
      },
      "setCommunityRewardFraction(uint256)": {
        "params": {
          "value": "The percentage of the total reward to be sent to the community funds."
        },
        "return": "True upon success."
      },
      "setRegistry(address)": {
        "params": {
          "registryAddress": "The address of a registry contract for routing to other contracts."
        }
      },
      "setRewardsMultiplierParameters(uint256,uint256,uint256)": {
        "params": {
          "max": "The max multiplier on target epoch rewards.",
          "overspendAdjustmentFactor": "Adjusts the multiplier on target epoch rewards when the  protocol is running ahead of the target Gold supply.",
          "underspendAdjustmentFactor": "Adjusts the multiplier on target epoch rewards when the  protocol is running behind the target Gold supply."
        },
        "return": "True upon success."
      },
      "setTargetValidatorEpochPayment(uint256)": {
        "params": {
          "value": "The value in Celo Dollars."
        },
        "return": "True upon success."
      },
      "setTargetVotingGoldFraction(uint256)": {
        "params": {
          "value": "The percentage of floating Gold voting to target."
        },
        "return": "True upon success."
      },
      "setTargetVotingYield(uint256)": {
        "params": {
          "targetVotingYield": "The relative target block reward for voters."
        },
        "return": "True upon success."
      },
      "setTargetVotingYieldParameters(uint256,uint256)": {
        "params": {
          "adjustmentFactor": "The target block reward adjustment factor for voters.",
          "max": "The max relative target block reward for voters."
        },
        "return": "True upon success."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "updateTargetVotingYield()": {
        "details": "Only called directly by the protocol."
      },
      "validatorAddressFromCurrentSet(uint256)": {
        "params": {
          "index": "Index of requested validator in the validator set."
        },
        "return": "Address of validator at the requested index."
      },
      "validatorSignerAddressFromCurrentSet(uint256)": {
        "params": {
          "index": "Index of requested validator in the validator set."
        },
        "return": "Address of validator signer at the requested index."
      },
      "validatorSignerAddressFromSet(uint256,uint256)": {
        "details": "This function will be deprecated in L2.",
        "params": {
          "blockNumber": "Block number to retrieve the validator set from.",
          "index": "Index of requested validator in the validator set."
        },
        "return": "Address of validator signer at the requested index."
      }
    },
    "title": "A wrapper around EpochRewards that exposes internal functions for testing."
  },
  "userdoc": {
    "methods": {
      "calculateTargetEpochRewards()": {
        "notice": "Calculates the per validator epoch payment and the total rewards to voters."
      },
      "checkProofOfPossession(address,bytes,bytes)": {
        "notice": "Checks a BLS proof of possession."
      },
      "fractionMulExp(uint256,uint256,uint256,uint256,uint256,uint256)": {
        "notice": "calculate a * b^x for fractions a, b to `decimals` precision"
      },
      "getBlockNumberFromHeader(bytes)": {
        "notice": "Parses block number out of header."
      },
      "getCarbonOffsettingFraction()": {
        "notice": "Returns the carbon offsetting partner reward fraction."
      },
      "getCommunityRewardFraction()": {
        "notice": "Returns the community reward fraction."
      },
      "getEpochNumber()": {
        "notice": "Returns the epoch number at a block."
      },
      "getEpochNumberOfBlock(uint256)": {
        "notice": "Returns the epoch number at a block."
      },
      "getEpochSize()": {
        "notice": "Returns the current epoch size in blocks."
      },
      "getParentSealBitmap(uint256)": {
        "notice": "Gets the parent seal bitmap from the header at the given block number."
      },
      "getRewardsMultiplier()": {
        "notice": "Returns the rewards multiplier based on the current and target Gold supplies."
      },
      "getRewardsMultiplierParameters()": {
        "notice": "Returns the rewards multiplier parameters."
      },
      "getTargetGoldTotalSupply()": {
        "notice": "Returns the target Gold supply according to the epoch rewards target schedule."
      },
      "getTargetTotalEpochPaymentsInGold()": {
        "notice": "Returns the total target epoch payments to validators, converted to Gold."
      },
      "getTargetVoterRewards()": {
        "notice": "Returns the total target epoch rewards for voters."
      },
      "getTargetVotingGoldFraction()": {
        "notice": "Returns the target voting Gold fraction."
      },
      "getTargetVotingYieldParameters()": {
        "notice": "Returns the target voting yield parameters."
      },
      "getVerifiedSealBitmapFromHeader(bytes)": {
        "notice": "Verifies the BLS signature on the header and returns the seal bitmap. The validator set used for verification is retrieved based on the parent hash field of the header.  If the parent hash is not in the blockchain, verification fails."
      },
      "getVersionNumber()": {
        "notice": "Returns the storage, major, minor, and patch version of the contract."
      },
      "getVotingGoldFraction()": {
        "notice": "Returns the fraction of floating Gold being used for voting in validator elections."
      },
      "hashHeader(bytes)": {
        "notice": "Computes hash of header."
      },
      "initialize(address,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,address,uint256)": {
        "notice": "Used in place of the constructor to allow the contract to be upgradable via proxy."
      },
      "isReserveLow()": {
        "notice": "Determines if the reserve is low enough to demand a diversion from   the community reward. Targets initial critical ratio of 2 with a linear   decline until 25 years have passed where the critical ratio will be 1."
      },
      "minQuorumSize(uint256)": {
        "notice": "Returns the minimum number of required signers for a given block number."
      },
      "minQuorumSizeInCurrentSet()": {
        "notice": "Computes byzantine quorum from current validator set size"
      },
      "numberValidatorsInSet(uint256)": {
        "notice": "Gets the size of the validator set that must sign the given block number."
      },
      "setCarbonOffsettingFund(address,uint256)": {
        "notice": "Sets the carbon offsetting fund."
      },
      "setCommunityRewardFraction(uint256)": {
        "notice": "Sets the community reward percentage"
      },
      "setRegistry(address)": {
        "notice": "Updates the address pointing to a Registry contract."
      },
      "setRewardsMultiplierParameters(uint256,uint256,uint256)": {
        "notice": "Sets the rewards multiplier parameters."
      },
      "setTargetValidatorEpochPayment(uint256)": {
        "notice": "Sets the target per-epoch payment in Celo Dollars for validators."
      },
      "setTargetVotingGoldFraction(uint256)": {
        "notice": "Sets the target voting Gold fraction."
      },
      "setTargetVotingYield(uint256)": {
        "notice": "Sets the target voting yield.  Uses fixed point arithmetic for protection against overflow."
      },
      "setTargetVotingYieldParameters(uint256,uint256)": {
        "notice": "Sets the target voting yield parameters."
      },
      "updateTargetVotingYield()": {
        "notice": "Updates the target voting yield based on the difference between the target and current  voting Gold fraction."
      },
      "validatorAddressFromCurrentSet(uint256)": {
        "notice": "Gets a validator address from the current validator set."
      },
      "validatorSignerAddressFromCurrentSet(uint256)": {
        "notice": "Gets a validator signer address from the current validator set."
      },
      "validatorSignerAddressFromSet(uint256,uint256)": {
        "notice": "Gets a validator signer address from the validator set at the given block number."
      }
    }
  }
}