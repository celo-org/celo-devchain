{
  "contractName": "ReserveSpenderMultiSig",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "test",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "transactionId",
          "type": "uint256"
        }
      ],
      "name": "Confirmation",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "transactionId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "returnData",
          "type": "bytes"
        }
      ],
      "name": "Execution",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "internalRequired",
          "type": "uint256"
        }
      ],
      "name": "InternalRequirementChange",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnerAddition",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnerRemoval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "required",
          "type": "uint256"
        }
      ],
      "name": "RequirementChange",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "transactionId",
          "type": "uint256"
        }
      ],
      "name": "Revocation",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "transactionId",
          "type": "uint256"
        }
      ],
      "name": "Submission",
      "type": "event"
    },
    {
      "payable": true,
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "MAX_OWNER_COUNT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "addOwner",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_internalRequired",
          "type": "uint256"
        }
      ],
      "name": "changeInternalRequirement",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_required",
          "type": "uint256"
        }
      ],
      "name": "changeRequirement",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "transactionId",
          "type": "uint256"
        }
      ],
      "name": "confirmTransaction",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "confirmations",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "transactionId",
          "type": "uint256"
        }
      ],
      "name": "executeTransaction",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "transactionId",
          "type": "uint256"
        }
      ],
      "name": "getConfirmationCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "count",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "transactionId",
          "type": "uint256"
        }
      ],
      "name": "getConfirmations",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "_confirmations",
          "type": "address[]"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "getOwners",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "bool",
          "name": "pending",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "executed",
          "type": "bool"
        }
      ],
      "name": "getTransactionCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "count",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "from",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "to",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "pending",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "executed",
          "type": "bool"
        }
      ],
      "name": "getTransactionIds",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "_transactionIds",
          "type": "uint256[]"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_owners",
          "type": "address[]"
        },
        {
          "internalType": "uint256",
          "name": "_required",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_internalRequired",
          "type": "uint256"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "initialized",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "internalRequired",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "transactionId",
          "type": "uint256"
        }
      ],
      "name": "isConfirmed",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "isOwner",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "owners",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "removeOwner",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "replaceOwner",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "required",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "transactionId",
          "type": "uint256"
        }
      ],
      "name": "revokeConfirmation",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "destination",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "submitTransaction",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "transactionId",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "transactionCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "transactions",
      "outputs": [
        {
          "internalType": "address",
          "name": "destination",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        },
        {
          "internalType": "bool",
          "name": "executed",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "metadata": "{\"compiler\":{\"version\":\"0.5.13+commit.5b0b510c\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"test\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"transactionId\",\"type\":\"uint256\"}],\"name\":\"Confirmation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"transactionId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"returnData\",\"type\":\"bytes\"}],\"name\":\"Execution\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"internalRequired\",\"type\":\"uint256\"}],\"name\":\"InternalRequirementChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnerAddition\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnerRemoval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"required\",\"type\":\"uint256\"}],\"name\":\"RequirementChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"transactionId\",\"type\":\"uint256\"}],\"name\":\"Revocation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"transactionId\",\"type\":\"uint256\"}],\"name\":\"Submission\",\"type\":\"event\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAX_OWNER_COUNT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"addOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_internalRequired\",\"type\":\"uint256\"}],\"name\":\"changeInternalRequirement\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_required\",\"type\":\"uint256\"}],\"name\":\"changeRequirement\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"transactionId\",\"type\":\"uint256\"}],\"name\":\"confirmTransaction\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"confirmations\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"transactionId\",\"type\":\"uint256\"}],\"name\":\"executeTransaction\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"transactionId\",\"type\":\"uint256\"}],\"name\":\"getConfirmationCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"transactionId\",\"type\":\"uint256\"}],\"name\":\"getConfirmations\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"_confirmations\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getOwners\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bool\",\"name\":\"pending\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"executed\",\"type\":\"bool\"}],\"name\":\"getTransactionCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"from\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"to\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"pending\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"executed\",\"type\":\"bool\"}],\"name\":\"getTransactionIds\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_transactionIds\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_owners\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"_required\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_internalRequired\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"initialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"internalRequired\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"transactionId\",\"type\":\"uint256\"}],\"name\":\"isConfirmed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"owners\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"removeOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"replaceOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"required\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"transactionId\",\"type\":\"uint256\"}],\"name\":\"revokeConfirmation\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"submitTransaction\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"transactionId\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"transactionCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"transactions\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"bool\",\"name\":\"executed\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"methods\":{\"addOwner(address)\":{\"details\":\"Allows to add a new owner. Transaction has to be sent by wallet.\",\"params\":{\"owner\":\"Address of new owner.\"}},\"changeInternalRequirement(uint256)\":{\"details\":\"Allows to change the number of required confirmations. Transaction has to be sent by wallet.\",\"params\":{\"_internalRequired\":\"Number of required confirmations for interal txs.\"}},\"changeRequirement(uint256)\":{\"details\":\"Allows to change the number of required confirmations. Transaction has to be sent by wallet.\",\"params\":{\"_required\":\"Number of required confirmations.\"}},\"confirmTransaction(uint256)\":{\"details\":\"Allows an owner to confirm a transaction.\",\"params\":{\"transactionId\":\"Transaction ID.\"}},\"constructor\":{\"params\":{\"test\":\"Set to true to skip implementation initialization\"}},\"executeTransaction(uint256)\":{\"details\":\"Allows anyone to execute a confirmed transaction.\",\"params\":{\"transactionId\":\"Transaction ID.\"}},\"getConfirmationCount(uint256)\":{\"details\":\"Returns number of confirmations of a transaction.\",\"params\":{\"transactionId\":\"Transaction ID.\"},\"return\":\"Number of confirmations.\"},\"getConfirmations(uint256)\":{\"details\":\"Returns array with owner addresses, which confirmed transaction.\",\"params\":{\"transactionId\":\"Transaction ID.\"},\"return\":\"Returns array of owner addresses.\"},\"getOwners()\":{\"details\":\"Returns list of owners.\",\"return\":\"List of owner addresses.\"},\"getTransactionCount(bool,bool)\":{\"details\":\"Returns total number of transactions after filters are applied.\",\"params\":{\"executed\":\"Include executed transactions.\",\"pending\":\"Include pending transactions.\"},\"return\":\"Total number of transactions after filters are applied.\"},\"getTransactionIds(uint256,uint256,bool,bool)\":{\"details\":\"Returns list of transaction IDs in defined range.\",\"params\":{\"executed\":\"Include executed transactions.\",\"from\":\"Index start position of transaction array.\",\"pending\":\"Include pending transactions.\",\"to\":\"Index end position of transaction array.\"},\"return\":\"Returns array of transaction IDs.\"},\"initialize(address[],uint256,uint256)\":{\"details\":\"Contract constructor sets initial owners and required number of confirmations.\",\"params\":{\"_internalRequired\":\"Number of required confirmations for internal transactions.\",\"_owners\":\"List of initial owners.\",\"_required\":\"Number of required confirmations for external transactions.\"}},\"isConfirmed(uint256)\":{\"details\":\"Returns the confirmation status of a transaction.\",\"params\":{\"transactionId\":\"Transaction ID.\"},\"return\":\"Confirmation status.\"},\"removeOwner(address)\":{\"details\":\"Allows to remove an owner. Transaction has to be sent by wallet.\",\"params\":{\"owner\":\"Address of owner.\"}},\"replaceOwner(address,address)\":{\"details\":\"Allows to replace an owner with a new owner. Transaction has to be sent by wallet.\",\"params\":{\"newOwner\":\"Address of new owner.\",\"owner\":\"Address of owner to be replaced.\"}},\"revokeConfirmation(uint256)\":{\"details\":\"Allows an owner to revoke a confirmation for a transaction.\",\"params\":{\"transactionId\":\"Transaction ID.\"}},\"submitTransaction(address,uint256,bytes)\":{\"details\":\"Allows an owner to submit and confirm a transaction.\",\"params\":{\"data\":\"Transaction data payload.\",\"destination\":\"Transaction target address.\",\"value\":\"Transaction ether value.\"},\"return\":\"Returns transaction ID.\"}}},\"userdoc\":{\"methods\":{\"constructor\":\"Sets initialized == true on implementation contracts\"}}},\"settings\":{\"compilationTarget\":{\"project:/lib/mento-core/contracts/ReserveSpenderMultiSig.sol\":\"ReserveSpenderMultiSig\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"openzeppelin-solidity/contracts/math/SafeMath.sol\":{\"content\":\"pragma solidity ^0.5.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        // Solidity only automatically asserts when dividing by 0\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0x640b6dee7a4b830bdfd52b5031a07fc2b12209f5b2e29e5d364a7d37f69d8076\"},\"openzeppelin-solidity/contracts/utils/Address.sol\":{\"content\":\"pragma solidity ^0.5.5;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following \\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\\n        // for accounts without code, i.e. `keccak256('')`\\n        bytes32 codehash;\\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { codehash := extcodehash(account) }\\n        return (codehash != accountHash && codehash != 0x0);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` into `address payable`. Note that this is\\n     * simply a type cast: the actual underlying value is not changed.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function toPayable(address account) internal pure returns (address payable) {\\n        return address(uint160(account));\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-call-value\\n        (bool success, ) = recipient.call.value(amount)(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x1a8e5072509c5ea7365eb1d48030b9be865140c8fb779968da0a459a0e174a11\"},\"project:/lib/mento-core/contracts/ReserveSpenderMultiSig.sol\":{\"content\":\"pragma solidity ^0.5.13;\\n\\nimport \\\"./common/MultiSig.sol\\\";\\n\\ncontract ReserveSpenderMultiSig is MultiSig {\\n    /**\\n     * @notice Sets initialized == true on implementation contracts\\n     * @param test Set to true to skip implementation initialization\\n     */\\n    constructor(bool test) public MultiSig(test) {}\\n}\\n\",\"keccak256\":\"0x3d5100df9ff3a90f256c166017a7f06393a3ae51d50853c1ced4d1b66a7be689\"},\"project:/lib/mento-core/contracts/common/ExternalCall.sol\":{\"content\":\"pragma solidity ^0.5.13;\\n\\nimport \\\"openzeppelin-solidity/contracts/utils/Address.sol\\\";\\n\\nlibrary ExternalCall {\\n    /**\\n     * @notice Executes external call.\\n     * @param destination The address to call.\\n     * @param value The CELO value to be sent.\\n     * @param data The data to be sent.\\n     * @return The call return value.\\n     */\\n    function execute(\\n        address destination,\\n        uint256 value,\\n        bytes memory data\\n    ) internal returns (bytes memory) {\\n        if (data.length > 0) require(Address.isContract(destination), \\\"Invalid contract address\\\");\\n        bool success;\\n        bytes memory returnData;\\n        (success, returnData) = destination.call.value(value)(data);\\n        require(success, \\\"Transaction execution failed.\\\");\\n        return returnData;\\n    }\\n}\\n\",\"keccak256\":\"0x79769afc18576ef86ba3d1a5439009164b9ff4852fd24fd7327a942648083bd7\"},\"project:/lib/mento-core/contracts/common/Initializable.sol\":{\"content\":\"pragma solidity ^0.5.13;\\n\\ncontract Initializable {\\n    bool public initialized;\\n\\n    constructor(bool testingDeployment) public {\\n        if (!testingDeployment) {\\n            initialized = true;\\n        }\\n    }\\n\\n    modifier initializer() {\\n        require(!initialized, \\\"contract already initialized\\\");\\n        initialized = true;\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0xb0ecb1e982724eea55f4fff68ae425db6a5cb34e7a76ebefc6c30ddf858f80d6\"},\"project:/lib/mento-core/contracts/common/MultiSig.sol\":{\"content\":\"pragma solidity ^0.5.13;\\n/* solhint-disable no-inline-assembly, avoid-low-level-calls, func-name-mixedcase, func-order */\\n\\nimport \\\"openzeppelin-solidity/contracts/math/SafeMath.sol\\\";\\n\\nimport \\\"./ExternalCall.sol\\\";\\nimport \\\"./Initializable.sol\\\";\\n\\n/**\\n * @title Multisignature wallet - Allows multiple parties to agree on transactions before\\n * execution.\\n * @author Stefan George - <stefan.george@consensys.net>\\n * @dev NOTE: This contract has its limitations and is not viable for every\\n * multi-signature setup. On a case by case basis, evaluate whether this is the\\n * correct contract for your use case.\\n * In particular, this contract doesn't have an atomic \\\"add owners and increase\\n * requirement\\\" operation.\\n * This can be tricky, for example, in a situation where a MultiSig starts out\\n * owned by a single owner. Safely increasing the owner set and requirement at\\n * the same time is not trivial. One way to work around this situation is to\\n * first add a second address controlled by the original owner, increase the\\n * requirement, and then replace the auxillary address with the intended second\\n * owner.\\n * Again, this is just one example, in general make sure to verify this contract\\n * will support your intended usage. The goal of this contract is to offer a\\n * simple, minimal multi-signature API that's easy to understand even for novice\\n * Solidity users.\\n */\\ncontract MultiSig is Initializable {\\n    using SafeMath for uint256;\\n    /*\\n     *  Events\\n     */\\n    event Confirmation(address indexed sender, uint256 indexed transactionId);\\n    event Revocation(address indexed sender, uint256 indexed transactionId);\\n    event Submission(uint256 indexed transactionId);\\n    event Execution(uint256 indexed transactionId, bytes returnData);\\n    event Deposit(address indexed sender, uint256 value);\\n    event OwnerAddition(address indexed owner);\\n    event OwnerRemoval(address indexed owner);\\n    event RequirementChange(uint256 required);\\n    event InternalRequirementChange(uint256 internalRequired);\\n\\n    /*\\n     *  Constants\\n     */\\n    uint256 public constant MAX_OWNER_COUNT = 50;\\n\\n    /*\\n     *  Storage\\n     */\\n    mapping(uint256 => Transaction) public transactions;\\n    mapping(uint256 => mapping(address => bool)) public confirmations;\\n    mapping(address => bool) public isOwner;\\n    address[] public owners;\\n    uint256 public required;\\n    uint256 public internalRequired;\\n    uint256 public transactionCount;\\n\\n    struct Transaction {\\n        address destination;\\n        uint256 value;\\n        bytes data;\\n        bool executed;\\n    }\\n\\n    /**\\n     * @notice Sets initialized == true on implementation contracts\\n     * @param test Set to true to skip implementation initialization\\n     */\\n    constructor(bool test) public Initializable(test) {}\\n\\n    /*\\n     *  Modifiers\\n     */\\n    modifier onlyWallet() {\\n        require(msg.sender == address(this), \\\"msg.sender was not multisig wallet\\\");\\n        _;\\n    }\\n\\n    modifier ownerDoesNotExist(address owner) {\\n        require(!isOwner[owner], \\\"owner already existed\\\");\\n        _;\\n    }\\n\\n    modifier ownerExists(address owner) {\\n        require(isOwner[owner], \\\"owner does not exist\\\");\\n        _;\\n    }\\n\\n    modifier transactionExists(uint256 transactionId) {\\n        require(transactions[transactionId].destination != address(0), \\\"transaction does not exist\\\");\\n        _;\\n    }\\n\\n    modifier confirmed(uint256 transactionId, address owner) {\\n        require(confirmations[transactionId][owner], \\\"transaction was not confirmed for owner\\\");\\n        _;\\n    }\\n\\n    modifier notConfirmed(uint256 transactionId, address owner) {\\n        require(!confirmations[transactionId][owner], \\\"transaction was already confirmed for owner\\\");\\n        _;\\n    }\\n\\n    modifier notExecuted(uint256 transactionId) {\\n        require(!transactions[transactionId].executed, \\\"transaction was executed already\\\");\\n        _;\\n    }\\n\\n    modifier notNull(address _address) {\\n        require(_address != address(0), \\\"address was null\\\");\\n        _;\\n    }\\n\\n    modifier validRequirement(uint256 ownerCount, uint256 _required) {\\n        require(\\n            ownerCount <= MAX_OWNER_COUNT && _required <= ownerCount && _required != 0 && ownerCount != 0,\\n            \\\"invalid requirement\\\"\\n        );\\n        _;\\n    }\\n\\n    /// @dev Fallback function allows to deposit ether.\\n    function() external payable {\\n        if (msg.value > 0) emit Deposit(msg.sender, msg.value);\\n    }\\n\\n    /*\\n     * Public functions\\n     */\\n    /// @dev Contract constructor sets initial owners and required number of confirmations.\\n    /// @param _owners List of initial owners.\\n    /// @param _required Number of required confirmations for external transactions.\\n    /// @param _internalRequired Number of required confirmations for internal transactions.\\n    function initialize(\\n        address[] calldata _owners,\\n        uint256 _required,\\n        uint256 _internalRequired\\n    )\\n        external\\n        initializer\\n        validRequirement(_owners.length, _required)\\n        validRequirement(_owners.length, _internalRequired)\\n    {\\n        for (uint256 i = 0; i < _owners.length; i = i.add(1)) {\\n            require(!isOwner[_owners[i]] && _owners[i] != address(0), \\\"owner was null or already given owner status\\\");\\n            isOwner[_owners[i]] = true;\\n        }\\n        owners = _owners;\\n        required = _required;\\n        internalRequired = _internalRequired;\\n    }\\n\\n    /// @dev Allows to add a new owner. Transaction has to be sent by wallet.\\n    /// @param owner Address of new owner.\\n    function addOwner(address owner)\\n        external\\n        onlyWallet\\n        ownerDoesNotExist(owner)\\n        notNull(owner)\\n        validRequirement(owners.length.add(1), internalRequired)\\n    {\\n        isOwner[owner] = true;\\n        owners.push(owner);\\n        emit OwnerAddition(owner);\\n    }\\n\\n    /// @dev Allows to remove an owner. Transaction has to be sent by wallet.\\n    /// @param owner Address of owner.\\n    function removeOwner(address owner) external onlyWallet ownerExists(owner) {\\n        isOwner[owner] = false;\\n        for (uint256 i = 0; i < owners.length.sub(1); i = i.add(1))\\n            if (owners[i] == owner) {\\n                owners[i] = owners[owners.length.sub(1)];\\n                break;\\n            }\\n        owners.length = owners.length.sub(1);\\n        if (required > owners.length) changeRequirement(owners.length);\\n        if (internalRequired > owners.length) changeInternalRequirement(owners.length);\\n        emit OwnerRemoval(owner);\\n    }\\n\\n    /// @dev Allows to replace an owner with a new owner. Transaction has to be sent by wallet.\\n    /// @param owner Address of owner to be replaced.\\n    /// @param newOwner Address of new owner.\\n    function replaceOwner(address owner, address newOwner)\\n        external\\n        onlyWallet\\n        ownerExists(owner)\\n        notNull(newOwner)\\n        ownerDoesNotExist(newOwner)\\n    {\\n        for (uint256 i = 0; i < owners.length; i = i.add(1))\\n            if (owners[i] == owner) {\\n                owners[i] = newOwner;\\n                break;\\n            }\\n        isOwner[owner] = false;\\n        isOwner[newOwner] = true;\\n        emit OwnerRemoval(owner);\\n        emit OwnerAddition(newOwner);\\n    }\\n\\n    /// @dev Allows to change the number of required confirmations. Transaction has to be sent by\\n    /// wallet.\\n    /// @param _required Number of required confirmations.\\n    function changeRequirement(uint256 _required) public onlyWallet validRequirement(owners.length, _required) {\\n        required = _required;\\n        emit RequirementChange(_required);\\n    }\\n\\n    /// @dev Allows to change the number of required confirmations. Transaction has to be sent by\\n    /// wallet.\\n    /// @param _internalRequired Number of required confirmations for interal txs.\\n    function changeInternalRequirement(uint256 _internalRequired)\\n        public\\n        onlyWallet\\n        validRequirement(owners.length, _internalRequired)\\n    {\\n        internalRequired = _internalRequired;\\n        emit InternalRequirementChange(_internalRequired);\\n    }\\n\\n    /// @dev Allows an owner to submit and confirm a transaction.\\n    /// @param destination Transaction target address.\\n    /// @param value Transaction ether value.\\n    /// @param data Transaction data payload.\\n    /// @return Returns transaction ID.\\n    function submitTransaction(\\n        address destination,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (uint256 transactionId) {\\n        transactionId = addTransaction(destination, value, data);\\n        confirmTransaction(transactionId);\\n    }\\n\\n    /// @dev Allows an owner to confirm a transaction.\\n    /// @param transactionId Transaction ID.\\n    function confirmTransaction(uint256 transactionId)\\n        public\\n        ownerExists(msg.sender)\\n        transactionExists(transactionId)\\n        notConfirmed(transactionId, msg.sender)\\n    {\\n        confirmations[transactionId][msg.sender] = true;\\n        emit Confirmation(msg.sender, transactionId);\\n        if (isConfirmed(transactionId)) {\\n            executeTransaction(transactionId);\\n        }\\n    }\\n\\n    /// @dev Allows an owner to revoke a confirmation for a transaction.\\n    /// @param transactionId Transaction ID.\\n    function revokeConfirmation(uint256 transactionId)\\n        external\\n        ownerExists(msg.sender)\\n        confirmed(transactionId, msg.sender)\\n        notExecuted(transactionId)\\n    {\\n        confirmations[transactionId][msg.sender] = false;\\n        emit Revocation(msg.sender, transactionId);\\n    }\\n\\n    /// @dev Allows anyone to execute a confirmed transaction.\\n    /// @param transactionId Transaction ID.\\n    function executeTransaction(uint256 transactionId)\\n        public\\n        ownerExists(msg.sender)\\n        confirmed(transactionId, msg.sender)\\n        notExecuted(transactionId)\\n    {\\n        require(isConfirmed(transactionId), \\\"Transaction not confirmed.\\\");\\n        Transaction storage txn = transactions[transactionId];\\n        txn.executed = true;\\n        bytes memory returnData = ExternalCall.execute(txn.destination, txn.value, txn.data);\\n        emit Execution(transactionId, returnData);\\n    }\\n\\n    /// @dev Returns the confirmation status of a transaction.\\n    /// @param transactionId Transaction ID.\\n    /// @return Confirmation status.\\n    function isConfirmed(uint256 transactionId) public view returns (bool) {\\n        uint256 count = 0;\\n        for (uint256 i = 0; i < owners.length; i = i.add(1)) {\\n            if (confirmations[transactionId][owners[i]]) count = count.add(1);\\n            bool isInternal = transactions[transactionId].destination == address(this);\\n            if ((isInternal && count == internalRequired) || (!isInternal && count == required)) return true;\\n        }\\n        return false;\\n    }\\n\\n    /*\\n     * Internal functions\\n     */\\n    /// @dev Adds a new transaction to the transaction mapping, if transaction does not exist yet.\\n    /// @param destination Transaction target address.\\n    /// @param value Transaction ether value.\\n    /// @param data Transaction data payload.\\n    /// @return Returns transaction ID.\\n    function addTransaction(\\n        address destination,\\n        uint256 value,\\n        bytes memory data\\n    ) internal notNull(destination) returns (uint256 transactionId) {\\n        transactionId = transactionCount;\\n        transactions[transactionId] = Transaction({\\n            destination: destination,\\n            value: value,\\n            data: data,\\n            executed: false\\n        });\\n        transactionCount = transactionCount.add(1);\\n        emit Submission(transactionId);\\n    }\\n\\n    /*\\n     * Web3 call functions\\n     */\\n    /// @dev Returns number of confirmations of a transaction.\\n    /// @param transactionId Transaction ID.\\n    /// @return Number of confirmations.\\n    function getConfirmationCount(uint256 transactionId) external view returns (uint256 count) {\\n        for (uint256 i = 0; i < owners.length; i = i.add(1))\\n            if (confirmations[transactionId][owners[i]]) count = count.add(1);\\n    }\\n\\n    /// @dev Returns total number of transactions after filters are applied.\\n    /// @param pending Include pending transactions.\\n    /// @param executed Include executed transactions.\\n    /// @return Total number of transactions after filters are applied.\\n    function getTransactionCount(bool pending, bool executed) external view returns (uint256 count) {\\n        for (uint256 i = 0; i < transactionCount; i = i.add(1))\\n            if ((pending && !transactions[i].executed) || (executed && transactions[i].executed)) count = count.add(1);\\n    }\\n\\n    /// @dev Returns list of owners.\\n    /// @return List of owner addresses.\\n    function getOwners() external view returns (address[] memory) {\\n        return owners;\\n    }\\n\\n    /// @dev Returns array with owner addresses, which confirmed transaction.\\n    /// @param transactionId Transaction ID.\\n    /// @return Returns array of owner addresses.\\n    function getConfirmations(uint256 transactionId) external view returns (address[] memory _confirmations) {\\n        address[] memory confirmationsTemp = new address[](owners.length);\\n        uint256 count = 0;\\n        uint256 i;\\n        for (i = 0; i < owners.length; i = i.add(1))\\n            if (confirmations[transactionId][owners[i]]) {\\n                confirmationsTemp[count] = owners[i];\\n                count = count.add(1);\\n            }\\n        _confirmations = new address[](count);\\n        for (i = 0; i < count; i = i.add(1)) _confirmations[i] = confirmationsTemp[i];\\n    }\\n\\n    /// @dev Returns list of transaction IDs in defined range.\\n    /// @param from Index start position of transaction array.\\n    /// @param to Index end position of transaction array.\\n    /// @param pending Include pending transactions.\\n    /// @param executed Include executed transactions.\\n    /// @return Returns array of transaction IDs.\\n    function getTransactionIds(\\n        uint256 from,\\n        uint256 to,\\n        bool pending,\\n        bool executed\\n    ) external view returns (uint256[] memory _transactionIds) {\\n        uint256[] memory transactionIdsTemp = new uint256[](transactionCount);\\n        uint256 count = 0;\\n        uint256 i;\\n        for (i = 0; i < transactionCount; i = i.add(1))\\n            if ((pending && !transactions[i].executed) || (executed && transactions[i].executed)) {\\n                transactionIdsTemp[count] = i;\\n                count = count.add(1);\\n            }\\n        _transactionIds = new uint256[](to.sub(from));\\n        for (i = from; i < to; i = i.add(1)) _transactionIds[i.sub(from)] = transactionIdsTemp[i];\\n    }\\n}\\n\",\"keccak256\":\"0x89dbff8d9ac8efe2820398c62b8046fdd81d131dfa7dd1cbf78fa3ee17ec20b6\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x6080604052600436106101665760003560e01c80639ace38c2116100d1578063ba51a6df1161008a578063d74f8edd11610064578063d74f8edd14610a2e578063dc8452cd14610a59578063e20056e614610a84578063ee22610b14610af557610166565b8063ba51a6df146108f4578063c01a8c841461092f578063c64274741461096a57610166565b80639ace38c2146105f7578063a0e67e2b146106f0578063a24efcdf1461075c578063a8abe69a14610787578063b5dc40c314610839578063b77bf600146108c957610166565b80633411c81c116101235780633411c81c1461039a578063547415251461040d5780635eae79591461046a5780637065cb4814610504578063784547a7146105555780638b51d13f146105a857610166565b8063025e7c27146101c0578063158ef93e1461023b578063173825d91461026a57806320ea8d86146102bb5780632e6c3721146102f65780632f54bf6e14610331575b60003411156101be573373ffffffffffffffffffffffffffffffffffffffff167fe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c346040518082815260200191505060405180910390a25b005b3480156101cc57600080fd5b506101f9600480360360208110156101e357600080fd5b8101908080359060200190929190505050610b30565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561024757600080fd5b50610250610b6c565b604051808215151515815260200191505060405180910390f35b34801561027657600080fd5b506102b96004803603602081101561028d57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610b7e565b005b3480156102c757600080fd5b506102f4600480360360208110156102de57600080fd5b8101908080359060200190929190505050610f1b565b005b34801561030257600080fd5b5061032f6004803603602081101561031957600080fd5b81019080803590602001909291905050506111dc565b005b34801561033d57600080fd5b506103806004803603602081101561035457600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611347565b604051808215151515815260200191505060405180910390f35b3480156103a657600080fd5b506103f3600480360360408110156103bd57600080fd5b8101908080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611367565b604051808215151515815260200191505060405180910390f35b34801561041957600080fd5b506104546004803603604081101561043057600080fd5b81019080803515159060200190929190803515159060200190929190505050611396565b6040518082815260200191505060405180910390f35b34801561047657600080fd5b506105026004803603606081101561048d57600080fd5b81019080803590602001906401000000008111156104aa57600080fd5b8201836020820111156104bc57600080fd5b803590602001918460208302840111640100000000831117156104de57600080fd5b90919293919293908035906020019092919080359060200190929190505050611448565b005b34801561051057600080fd5b506105536004803603602081101561052757600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061182b565b005b34801561056157600080fd5b5061058e6004803603602081101561057857600080fd5b8101908080359060200190929190505050611bd5565b604051808215151515815260200191505060405180910390f35b3480156105b457600080fd5b506105e1600480360360208110156105cb57600080fd5b8101908080359060200190929190505050611d66565b6040518082815260200191505060405180910390f35b34801561060357600080fd5b506106306004803603602081101561061a57600080fd5b8101908080359060200190929190505050611e4d565b604051808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018481526020018060200183151515158152602001828103825284818151815260200191508051906020019080838360005b838110156106b2578082015181840152602081019050610697565b50505050905090810190601f1680156106df5780820380516001836020036101000a031916815260200191505b509550505050505060405180910390f35b3480156106fc57600080fd5b50610705611f42565b6040518080602001828103825283818151815260200191508051906020019060200280838360005b8381101561074857808201518184015260208101905061072d565b505050509050019250505060405180910390f35b34801561076857600080fd5b50610771611fd0565b6040518082815260200191505060405180910390f35b34801561079357600080fd5b506107e2600480360360808110156107aa57600080fd5b810190808035906020019092919080359060200190929190803515159060200190929190803515159060200190929190505050611fd6565b6040518080602001828103825283818151815260200191508051906020019060200280838360005b8381101561082557808201518184015260208101905061080a565b505050509050019250505060405180910390f35b34801561084557600080fd5b506108726004803603602081101561085c57600080fd5b8101908080359060200190929190505050612188565b6040518080602001828103825283818151815260200191508051906020019060200280838360005b838110156108b557808201518184015260208101905061089a565b505050509050019250505060405180910390f35b3480156108d557600080fd5b506108de6123e0565b6040518082815260200191505060405180910390f35b34801561090057600080fd5b5061092d6004803603602081101561091757600080fd5b81019080803590602001909291905050506123e6565b005b34801561093b57600080fd5b506109686004803603602081101561095257600080fd5b8101908080359060200190929190505050612551565b005b34801561097657600080fd5b50610a186004803603606081101561098d57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190803590602001906401000000008111156109d457600080fd5b8201836020820111156109e657600080fd5b80359060200191846001830284011164010000000083111715610a0857600080fd5b909192939192939050505061286d565b6040518082815260200191505060405180910390f35b348015610a3a57600080fd5b50610a436128d1565b6040518082815260200191505060405180910390f35b348015610a6557600080fd5b50610a6e6128d6565b6040518082815260200191505060405180910390f35b348015610a9057600080fd5b50610af360048036036040811015610aa757600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506128dc565b005b348015610b0157600080fd5b50610b2e60048036036020811015610b1857600080fd5b8101908080359060200190929190505050612db7565b005b60048181548110610b3d57fe5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000809054906101000a900460ff1681565b3073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610c02576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260228152602001806139716022913960400191505060405180910390fd5b80600360008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16610cc2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260148152602001807f6f776e657220646f6573206e6f7420657869737400000000000000000000000081525060200191505060405180910390fd5b6000600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555060008090505b610d3960016004805490506131ec90919063ffffffff16565b811015610e70578273ffffffffffffffffffffffffffffffffffffffff1660048281548110610d6457fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415610e55576004610dc660016004805490506131ec90919063ffffffff16565b81548110610dd057fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1660048281548110610e0857fe5b9060005260206000200160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550610e70565b610e6960018261323690919063ffffffff16565b9050610d20565b50610e8a60016004805490506131ec90919063ffffffff16565b600481610e97919061376a565b506004805490506005541115610eb657610eb56004805490506123e6565b5b6004805490506006541115610ed457610ed36004805490506111dc565b5b8173ffffffffffffffffffffffffffffffffffffffff167f8001553a916ef2f495d26a907cc54d96ed840d7bda71e73194bf5a9df7a76b9060405160405180910390a25050565b33600360008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16610fdb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260148152602001807f6f776e657220646f6573206e6f7420657869737400000000000000000000000081525060200191505060405180910390fd5b81336002600083815260200190815260200160002060008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16611090576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602781526020018061394a6027913960400191505060405180910390fd5b836001600082815260200190815260200160002060030160009054906101000a900460ff1615611128576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f7472616e73616374696f6e2077617320657865637574656420616c726561647981525060200191505060405180910390fd5b60006002600087815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550843373ffffffffffffffffffffffffffffffffffffffff167ff6a317157440607f36269043eb55f1287a5a19ba2216afeab88cd46cbcfb88e960405160405180910390a35050505050565b3073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611260576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260228152602001806139716022913960400191505060405180910390fd5b60048054905081603282111580156112785750818111155b8015611285575060008114155b8015611292575060008214155b611304576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260138152602001807f696e76616c696420726571756972656d656e740000000000000000000000000081525060200191505060405180910390fd5b826006819055507fa07eff79ea50418b0e96ff7c01d65eb6c3a5a240ee91cd81c70c89503dd41239836040518082815260200191505060405180910390a1505050565b60036020528060005260406000206000915054906101000a900460ff1681565b60026020528160005260406000206020528060005260406000206000915091509054906101000a900460ff1681565b600080600090505b600754811015611441578380156113d657506001600082815260200190815260200160002060030160009054906101000a900460ff16155b8061140a575082801561140957506001600082815260200190815260200160002060030160009054906101000a900460ff165b5b156114265761142360018361323690919063ffffffff16565b91505b61143a60018261323690919063ffffffff16565b905061139e565b5092915050565b6000809054906101000a900460ff16156114ca576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601c8152602001807f636f6e747261637420616c726561647920696e697469616c697a65640000000081525060200191505060405180910390fd5b60016000806101000a81548160ff0219169083151502179055508383905082603282111580156114fa5750818111155b8015611507575060008114155b8015611514575060008214155b611586576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260138152602001807f696e76616c696420726571756972656d656e740000000000000000000000000081525060200191505060405180910390fd5b85859050836032821115801561159c5750818111155b80156115a9575060008114155b80156115b6575060008214155b611628576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260138152602001807f696e76616c696420726571756972656d656e740000000000000000000000000081525060200191505060405180910390fd5b60008090505b8888905081101561180057600360008a8a8481811061164957fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161580156117105750600073ffffffffffffffffffffffffffffffffffffffff168989838181106116da57fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614155b611765576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602c815260200180613993602c913960400191505060405180910390fd5b6001600360008b8b8581811061177757fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055506117f960018261323690919063ffffffff16565b905061162e565b50878760049190611812929190613796565b5085600581905550846006819055505050505050505050565b3073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146118af576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260228152602001806139716022913960400191505060405180910390fd5b80600360008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615611970576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260158152602001807f6f776e657220616c72656164792065786973746564000000000000000000000081525060200191505060405180910390fd5b81600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415611a14576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260108152602001807f6164647265737320776173206e756c6c0000000000000000000000000000000081525060200191505060405180910390fd5b611a2d600160048054905061323690919063ffffffff16565b60065460328211158015611a415750818111155b8015611a4e575060008114155b8015611a5b575060008214155b611acd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260138152602001807f696e76616c696420726571756972656d656e740000000000000000000000000081525060200191505060405180910390fd5b6001600360008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555060048590806001815401808255809150509060018203906000526020600020016000909192909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550508473ffffffffffffffffffffffffffffffffffffffff167ff39e6e1eb0edcf53c221607b54b00cd28f3196fed0a24994dc308b8f611b682d60405160405180910390a25050505050565b6000806000905060008090505b600480549050811015611d5a5760026000858152602001908152602001600020600060048381548110611c1157fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615611ca057611c9d60018361323690919063ffffffff16565b91505b60003073ffffffffffffffffffffffffffffffffffffffff166001600087815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16149050808015611d17575060065483145b80611d2d575080158015611d2c575060055483145b5b15611d3e5760019350505050611d61565b50611d5360018261323690919063ffffffff16565b9050611be2565b5060009150505b919050565b600080600090505b600480549050811015611e475760026000848152602001908152602001600020600060048381548110611d9d57fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615611e2c57611e2960018361323690919063ffffffff16565b91505b611e4060018261323690919063ffffffff16565b9050611d6e565b50919050565b60016020528060005260406000206000915090508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690806001015490806002018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015611f255780601f10611efa57610100808354040283529160200191611f25565b820191906000526020600020905b815481529060010190602001808311611f0857829003601f168201915b5050505050908060030160009054906101000a900460ff16905084565b60606004805480602002602001604051908101604052809291908181526020018280548015611fc657602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311611f7c575b5050505050905090565b60065481565b60608060075460405190808252806020026020018201604052801561200a5781602001602082028038833980820191505090505b509050600080905060008090505b6007548110156120d45785801561205057506001600082815260200190815260200160002060030160009054906101000a900460ff16155b80612084575084801561208357506001600082815260200190815260200160002060030160009054906101000a900460ff165b5b156120b9578083838151811061209657fe5b6020026020010181815250506120b660018361323690919063ffffffff16565b91505b6120cd60018261323690919063ffffffff16565b9050612018565b6120e788886131ec90919063ffffffff16565b6040519080825280602002602001820160405280156121155781602001602082028038833980820191505090505b5093508790505b8681101561217d5782818151811061213057fe5b60200260200101518461214c8a846131ec90919063ffffffff16565b8151811061215657fe5b60200260200101818152505061217660018261323690919063ffffffff16565b905061211c565b505050949350505050565b6060806004805490506040519080825280602002602001820160405280156121bf5781602001602082028038833980820191505090505b509050600080905060008090505b60048054905081101561232457600260008681526020019081526020016000206000600483815481106121fc57fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615612309576004818154811061228157fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168383815181106122b857fe5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505061230660018361323690919063ffffffff16565b91505b61231d60018261323690919063ffffffff16565b90506121cd565b816040519080825280602002602001820160405280156123535781602001602082028038833980820191505090505b509350600090505b818110156123d85782818151811061236f57fe5b602002602001015184828151811061238357fe5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250506123d160018261323690919063ffffffff16565b905061235b565b505050919050565b60075481565b3073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461246a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260228152602001806139716022913960400191505060405180910390fd5b60048054905081603282111580156124825750818111155b801561248f575060008114155b801561249c575060008214155b61250e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260138152602001807f696e76616c696420726571756972656d656e740000000000000000000000000081525060200191505060405180910390fd5b826005819055507fa3f1ee9126a074d9326c682f561767f710e927faa811f7a99829d49dc421797a836040518082815260200191505060405180910390a1505050565b33600360008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16612611576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260148152602001807f6f776e657220646f6573206e6f7420657869737400000000000000000000000081525060200191505060405180910390fd5b81600073ffffffffffffffffffffffffffffffffffffffff166001600083815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614156126eb576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601a8152602001807f7472616e73616374696f6e20646f6573206e6f7420657869737400000000000081525060200191505060405180910390fd5b82336002600083815260200190815260200160002060008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16156127a1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602b81526020018061391f602b913960400191505060405180910390fd5b60016002600087815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550843373ffffffffffffffffffffffffffffffffffffffff167f4a504a94899432a9846e1aa406dceb1bcfd538bb839071d49d1e5e23f5be30ef60405160405180910390a361285785611bd5565b156128665761286585612db7565b5b5050505050565b60006128be858585858080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050506132be565b90506128c981612551565b949350505050565b603281565b60055481565b3073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614612960576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260228152602001806139716022913960400191505060405180910390fd5b81600360008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16612a20576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260148152602001807f6f776e657220646f6573206e6f7420657869737400000000000000000000000081525060200191505060405180910390fd5b81600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415612ac4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260108152602001807f6164647265737320776173206e756c6c0000000000000000000000000000000081525060200191505060405180910390fd5b82600360008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615612b85576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260158152602001807f6f776e657220616c72656164792065786973746564000000000000000000000081525060200191505060405180910390fd5b60008090505b600480549050811015612c79578573ffffffffffffffffffffffffffffffffffffffff1660048281548110612bbc57fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415612c5e578460048281548110612c1157fe5b9060005260206000200160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550612c79565b612c7260018261323690919063ffffffff16565b9050612b8b565b506000600360008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055506001600360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508473ffffffffffffffffffffffffffffffffffffffff167f8001553a916ef2f495d26a907cc54d96ed840d7bda71e73194bf5a9df7a76b9060405160405180910390a28373ffffffffffffffffffffffffffffffffffffffff167ff39e6e1eb0edcf53c221607b54b00cd28f3196fed0a24994dc308b8f611b682d60405160405180910390a25050505050565b33600360008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16612e77576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260148152602001807f6f776e657220646f6573206e6f7420657869737400000000000000000000000081525060200191505060405180910390fd5b81336002600083815260200190815260200160002060008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16612f2c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602781526020018061394a6027913960400191505060405180910390fd5b836001600082815260200190815260200160002060030160009054906101000a900460ff1615612fc4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f7472616e73616374696f6e2077617320657865637574656420616c726561647981525060200191505060405180910390fd5b612fcd85611bd5565b61303f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601a8152602001807f5472616e73616374696f6e206e6f7420636f6e6669726d65642e00000000000081525060200191505060405180910390fd5b600060016000878152602001908152602001600020905060018160030160006101000a81548160ff02191690831515021790555060606131448260000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168360010154846002018054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561313a5780601f1061310f5761010080835404028352916020019161313a565b820191906000526020600020905b81548152906001019060200180831161311d57829003601f168201915b5050505050613498565b9050867f0c18aae526accb31b01cf9a15bdf435e70632ee31efc4c5c0752c4262ea45d2f826040518080602001828103825283818151815260200191508051906020019080838360005b838110156131a957808201518184015260208101905061318e565b50505050905090810190601f1680156131d65780820380516001836020036101000a031916815260200191505b509250505060405180910390a250505050505050565b600061322e83836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f77000081525061365f565b905092915050565b6000808284019050838110156132b4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601b8152602001807f536166654d6174683a206164646974696f6e206f766572666c6f77000000000081525060200191505060405180910390fd5b8091505092915050565b600083600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415613364576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260108152602001807f6164647265737320776173206e756c6c0000000000000000000000000000000081525060200191505060405180910390fd5b600754915060405180608001604052808673ffffffffffffffffffffffffffffffffffffffff168152602001858152602001848152602001600015158152506001600084815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550602082015181600101556040820151816002019080519060200190613423929190613836565b5060608201518160030160006101000a81548160ff02191690831515021790555090505061345d600160075461323690919063ffffffff16565b600781905550817fc0ba8fe4b176c1714197d43b9cc6bcf797a4a7461c5fe8d0ef6e184ae7601e5160405160405180910390a2509392505050565b6060600082511115613520576134ad8461371f565b61351f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260188152602001807f496e76616c696420636f6e74726163742061646472657373000000000000000081525060200191505060405180910390fd5b5b600060608573ffffffffffffffffffffffffffffffffffffffff1685856040518082805190602001908083835b60208310613570578051825260208201915060208101905060208303925061354d565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d80600081146135d2576040519150601f19603f3d011682016040523d82523d6000602084013e6135d7565b606091505b50809250819350505081613653576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601d8152602001807f5472616e73616374696f6e20657865637574696f6e206661696c65642e00000081525060200191505060405180910390fd5b80925050509392505050565b600083831115829061370c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b838110156136d15780820151818401526020810190506136b6565b50505050905090810190601f1680156136fe5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b5060008385039050809150509392505050565b60008060007fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a47060001b9050833f915080821415801561376157506000801b8214155b92505050919050565b8154818355818111156137915781836000526020600020918201910161379091906138b6565b5b505050565b828054828255906000526020600020908101928215613825579160200282015b8281111561382457823573ffffffffffffffffffffffffffffffffffffffff168260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550916020019190600101906137b6565b5b50905061383291906138db565b5090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061387757805160ff19168380011785556138a5565b828001600101855582156138a5579182015b828111156138a4578251825591602001919060010190613889565b5b5090506138b291906138b6565b5090565b6138d891905b808211156138d45760008160009055506001016138bc565b5090565b90565b61391b91905b8082111561391757600081816101000a81549073ffffffffffffffffffffffffffffffffffffffff0219169055506001016138e1565b5090565b9056fe7472616e73616374696f6e2077617320616c726561647920636f6e6669726d656420666f72206f776e65727472616e73616374696f6e20776173206e6f7420636f6e6669726d656420666f72206f776e65726d73672e73656e64657220776173206e6f74206d756c74697369672077616c6c65746f776e657220776173206e756c6c206f7220616c726561647920676976656e206f776e657220737461747573a265627a7a7231582027572d116b3414f4f77b98eabf22fad2b75b795be248016694ee55e747c087b764736f6c634300050d0032",
  "sourceMap": "59:252:11:-;;;262:47;8:9:-1;5:2;;;30:1;27;20:12;5:2;262:47:11;;;;;;;;;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;262:47:11;;;;;;;;;;;;;;;;301:4;2766::24;143:17:23;138:67;;190:4;176:11;;:18;;;;;;;;;;;;;;;;;;138:67;85:126;2722:52:24;262:47:11;59:252;;;;;;",
  "deployedSourceMap": "59:252:11:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4373:1:24;4361:9;:13;4357:54;;;4389:10;4381:30;;;4401:9;4381:30;;;;;;;;;;;;;;;;;;4357:54;59:252:11;2309:23:24;;8:9:-1;5:2;;;30:1;27;20:12;5:2;2309:23:24;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;2309:23:24;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;55::23;;8:9:-1;5:2;;;30:1;27;20:12;5:2;55:23:23;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;5944:555:24;;8:9:-1;5:2;;;30:1;27;20:12;5:2;5944:555:24;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;5944:555:24;;;;;;;;;;;;;;;;;;;:::i;:::-;;9212:301;;8:9:-1;5:2;;;30:1;27;20:12;5:2;9212:301:24;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;9212:301:24;;;;;;;;;;;;;;;;;:::i;:::-;;7773:271;;8:9:-1;5:2;;;30:1;27;20:12;5:2;7773:271:24;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;7773:271:24;;;;;;;;;;;;;;;;;:::i;:::-;;2264:39;;8:9:-1;5:2;;;30:1;27;20:12;5:2;2264:39:24;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;2264:39:24;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;2193:65;;8:9:-1;5:2;;;30:1;27;20:12;5:2;2193:65:24;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;2193:65:24;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;12279:287;;8:9:-1;5:2;;;30:1;27;20:12;5:2;12279:287:24;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;12279:287:24;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;4780:619;;8:9:-1;5:2;;;30:1;27;20:12;5:2;4780:619:24;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;4780:619:24;;;;;;;;;;21:11:-1;8;5:28;2:2;;;46:1;43;36:12;2:2;4780:619:24;;35:9:-1;28:4;12:14;8:25;5:40;2:2;;;58:1;55;48:12;2:2;4780:619:24;;;;;;101:9:-1;95:2;81:12;77:21;67:8;63:36;60:51;39:11;25:12;22:29;11:108;8:2;;;132:1;129;122:12;8:2;4780:619:24;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;5526:295;;8:9:-1;5:2;;;30:1;27;20:12;5:2;5526:295:24;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;5526:295:24;;;;;;;;;;;;;;;;;;;:::i;:::-;;10279:477;;8:9:-1;5:2;;;30:1;27;20:12;5:2;10279:477:24;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;10279:477:24;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;11778:238;;8:9:-1;5:2;;;30:1;27;20:12;5:2;11778:238:24;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;11778:238:24;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;2136:51;;8:9:-1;5:2;;;30:1;27;20:12;5:2;2136:51:24;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;2136:51:24;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;80:1;75:3;71:11;64:39;52:2;49:1;45:10;40:15;;8:100;;;12:14;2136:51:24;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;12650:92;;8:9:-1;5:2;;;30:1;27;20:12;5:2;12650:92:24;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;80:1;75:3;71:11;64:39;52:2;49:1;45:10;40:15;;8:100;;;12:14;12650:92:24;;;;;;;;;;;;;;;;;2367:31;;8:9:-1;5:2;;;30:1;27;20:12;5:2;2367:31:24;;;:::i;:::-;;;;;;;;;;;;;;;;;;;13855:718;;8:9:-1;5:2;;;30:1;27;20:12;5:2;13855:718:24;;;;;;13:3:-1;8;5:12;2:2;;;30:1;27;20:12;2:2;13855:718:24;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;80:1;75:3;71:11;64:39;52:2;49:1;45:10;40:15;;8:100;;;12:14;13855:718:24;;;;;;;;;;;;;;;;;12921:585;;8:9:-1;5:2;;;30:1;27;20:12;5:2;12921:585:24;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;12921:585:24;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;80:1;75:3;71:11;64:39;52:2;49:1;45:10;40:15;;8:100;;;12:14;12921:585:24;;;;;;;;;;;;;;;;;2404:31;;8:9:-1;5:2;;;30:1;27;20:12;5:2;2404:31:24;;;:::i;:::-;;;;;;;;;;;;;;;;;;;7383:187;;8:9:-1;5:2;;;30:1;27;20:12;5:2;7383:187:24;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;7383:187:24;;;;;;;;;;;;;;;;;:::i;:::-;;8680:408;;8:9:-1;5:2;;;30:1;27;20:12;5:2;8680:408:24;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;8680:408:24;;;;;;;;;;;;;;;;;:::i;:::-;;8303:271;;8:9:-1;5:2;;;30:1;27;20:12;5:2;8303:271:24;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;8303:271:24;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;21:11:-1;8;5:28;2:2;;;46:1;43;36:12;2:2;8303:271:24;;35:9:-1;28:4;12:14;8:25;5:40;2:2;;;58:1;55;48:12;2:2;8303:271:24;;;;;;100:9:-1;95:1;81:12;77:20;67:8;63:35;60:50;39:11;25:12;22:29;11:107;8:2;;;131:1;128;121:12;8:2;8303:271:24;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;2054:44;;8:9:-1;5:2;;;30:1;27;20:12;5:2;2054:44:24;;;:::i;:::-;;;;;;;;;;;;;;;;;;;2338:23;;8:9:-1;5:2;;;30:1;27;20:12;5:2;2338:23:24;;;:::i;:::-;;;;;;;;;;;;;;;;;;;6701:503;;8:9:-1;5:2;;;30:1;27;20:12;5:2;6701:503:24;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;6701:503:24;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;9627:501;;8:9:-1;5:2;;;30:1;27;20:12;5:2;9627:501:24;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;9627:501:24;;;;;;;;;;;;;;;;;:::i;:::-;;2309:23;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;55::23:-;;;;;;;;;;;;;:::o;5944:555:24:-;2875:4;2853:27;;:10;:27;;;2845:74;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6012:5;3122:7;:14;3130:5;3122:14;;;;;;;;;;;;;;;;;;;;;;;;;3114:47;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6046:5;6029:7;:14;6037:5;6029:14;;;;;;;;;;;;;;;;:22;;;;;;;;;;;;;;;;;;6066:9;6078:1;6066:13;;6061:192;6085:20;6103:1;6085:6;:13;;;;:17;;:20;;;;:::i;:::-;6081:1;:24;6061:192;;;6150:5;6137:18;;:6;6144:1;6137:9;;;;;;;;;;;;;;;;;;;;;;;;;:18;;;6133:120;;;6187:6;6194:20;6212:1;6194:6;:13;;;;:17;;:20;;;;:::i;:::-;6187:28;;;;;;;;;;;;;;;;;;;;;;;;;6175:6;6182:1;6175:9;;;;;;;;;;;;;;;;:40;;;;;;;;;;;;;;;;;;6233:5;;6133:120;6111:8;6117:1;6111;:5;;:8;;;;:::i;:::-;6107:12;;6061:192;;;;6278:20;6296:1;6278:6;:13;;;;:17;;:20;;;;:::i;:::-;6262:6;:36;;;;;:::i;:::-;;6323:6;:13;;;;6312:8;;:24;6308:62;;;6338:32;6356:6;:13;;;;6338:17;:32::i;:::-;6308:62;6403:6;:13;;;;6384:16;;:32;6380:78;;;6418:40;6444:6;:13;;;;6418:25;:40::i;:::-;6380:78;6486:5;6473:19;;;;;;;;;;;;2929:1;5944:555;:::o;9212:301::-;9300:10;3122:7;:14;3130:5;3122:14;;;;;;;;;;;;;;;;;;;;;;;;;3114:47;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;9330:13;9345:10;3436:13;:28;3450:13;3436:28;;;;;;;;;;;:35;3465:5;3436:35;;;;;;;;;;;;;;;;;;;;;;;;;3428:87;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;9377:13;3788:12;:27;3801:13;3788:27;;;;;;;;;;;:36;;;;;;;;;;;;3787:37;3779:82;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;9449:5;9406:13;:28;9420:13;9406:28;;;;;;;;;;;:40;9435:10;9406:40;;;;;;;;;;;;;;;;:48;;;;;;;;;;;;;;;;;;9492:13;9480:10;9469:37;;;;;;;;;;;;3525:1;3171;;9212:301;;:::o;7773:271::-;2875:4;2853:27;;:10;:27;;;2845:74;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;7894:6;:13;;;;7909:17;2096:2;4101:10;:29;;:56;;;;;4147:10;4134:9;:23;;4101:56;:74;;;;;4174:1;4161:9;:14;;4101:74;:93;;;;;4193:1;4179:10;:15;;4101:93;4080:159;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;7961:17;7942:16;:36;;;;7993:44;8019:17;7993:44;;;;;;;;;;;;;;;;;;2929:1;;7773:271;:::o;2264:39::-;;;;;;;;;;;;;;;;;;;;;;:::o;2193:65::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;12279:287::-;12360:13;12390:9;12402:1;12390:13;;12385:174;12409:16;;12405:1;:20;12385:174;;;12458:7;:36;;;;;12470:12;:15;12483:1;12470:15;;;;;;;;;;;:24;;;;;;;;;;;;12469:25;12458:36;12457:80;;;;12500:8;:36;;;;;12512:12;:15;12525:1;12512:15;;;;;;;;;;;:24;;;;;;;;;;;;12500:36;12457:80;12453:106;;;12547:12;12557:1;12547:5;:9;;:12;;;;:::i;:::-;12539:20;;12453:106;12431:8;12437:1;12431;:5;;:8;;;;:::i;:::-;12427:12;;12385:174;;;;12279:287;;;;:::o;4780:619::-;259:11:23;;;;;;;;;;;258:12;250:53;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;327:4;313:11;;:18;;;;;;;;;;;;;;;;;;4966:7:24;;:14;;4982:9;2096:2;4101:10;:29;;:56;;;;;4147:10;4134:9;:23;;4101:56;:74;;;;;4174:1;4161:9;:14;;4101:74;:93;;;;;4193:1;4179:10;:15;;4101:93;4080:159;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5018:7;;:14;;5034:17;2096:2;4101:10;:29;;:56;;;;;4147:10;4134:9;:23;;4101:56;:74;;;;;4174:1;4161:9;:14;;4101:74;:93;;;;;4193:1;4179:10;:15;;4101:93;4080:159;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5072:9;5084:1;5072:13;;5067:224;5091:7;;:14;;5087:1;:18;5067:224;;;5144:7;:19;5152:7;;5160:1;5152:10;;;;;;;;;;;;;;;5144:19;;;;;;;;;;;;;;;;;;;;;;;;;5143:20;:48;;;;;5189:1;5167:24;;:7;;5175:1;5167:10;;;;;;;;;;;;;;;:24;;;;5143:48;5135:105;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5276:4;5254:7;:19;5262:7;;5270:1;5262:10;;;;;;;;;;;;;;;5254:19;;;;;;;;;;;;;;;;:26;;;;;;;;;;;;;;;;;;5111:8;5117:1;5111;:5;;:8;;;;:::i;:::-;5107:12;;5067:224;;;;5309:7;;5300:6;:16;;;;;;;:::i;:::-;;5337:9;5326:8;:20;;;;5375:17;5356:16;:36;;;;4249:1;;341::23;;4780:619:24;;;;:::o;5526:295::-;2875:4;2853:27;;:10;:27;;;2845:74;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5621:5;3004:7;:14;3012:5;3004:14;;;;;;;;;;;;;;;;;;;;;;;;;3003:15;2995:49;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5644:5;3958:1;3938:22;;:8;:22;;;;3930:51;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5676:20;5694:1;5676:6;:13;;;;:17;;:20;;;;:::i;:::-;5698:16;;2096:2;4101:10;:29;;:56;;;;;4147:10;4134:9;:23;;4101:56;:74;;;;;4174:1;4161:9;:14;;4101:74;:93;;;;;4193:1;4179:10;:15;;4101:93;4080:159;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5747:4;5730:7;:14;5738:5;5730:14;;;;;;;;;;;;;;;;:21;;;;;;;;;;;;;;;;;;5761:6;5773:5;5761:18;;39:1:-1;33:3;27:10;23:18;57:10;52:3;45:23;79:10;72:17;;0:93;5761:18:24;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5808:5;5794:20;;;;;;;;;;;;3991:1;;3054;2929;5526:295;:::o;10279:477::-;10344:4;10360:13;10376:1;10360:17;;10392:9;10404:1;10392:13;;10387:341;10411:6;:13;;;;10407:1;:17;10387:341;;;10458:13;:28;10472:13;10458:28;;;;;;;;;;;:39;10487:6;10494:1;10487:9;;;;;;;;;;;;;;;;;;;;;;;;;10458:39;;;;;;;;;;;;;;;;;;;;;;;;;10454:65;;;10507:12;10517:1;10507:5;:9;;:12;;;;:::i;:::-;10499:20;;10454:65;10533:15;10602:4;10551:56;;:12;:27;10564:13;10551:27;;;;;;;;;;;:39;;;;;;;;;;;;:56;;;10533:74;;10626:10;:39;;;;;10649:16;;10640:5;:25;10626:39;10625:79;;;;10672:10;10671:11;:32;;;;;10695:8;;10686:5;:17;10671:32;10625:79;10621:96;;;10713:4;10706:11;;;;;;;10621:96;10387:341;10430:8;10436:1;10430;:5;;:8;;;;:::i;:::-;10426:12;;10387:341;;;;10744:5;10737:12;;;10279:477;;;;:::o;11778:238::-;11854:13;11884:9;11896:1;11884:13;;11879:130;11903:6;:13;;;;11899:1;:17;11879:130;;;11948:13;:28;11962:13;11948:28;;;;;;;;;;;:39;11977:6;11984:1;11977:9;;;;;;;;;;;;;;;;;;;;;;;;;11948:39;;;;;;;;;;;;;;;;;;;;;;;;;11944:65;;;11997:12;12007:1;11997:5;:9;;:12;;;;:::i;:::-;11989:20;;11944:65;11922:8;11928:1;11922;:5;;:8;;;;:::i;:::-;11918:12;;11879:130;;;;11778:238;;;:::o;2136:51::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;12650:92::-;12694:16;12729:6;12722:13;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;12650:92;:::o;2367:31::-;;;;:::o;13855:718::-;13998:32;14042:35;14094:16;;14080:31;;;;;;;;;;;;;;;;;;;;;;29:2:-1;21:6;17:15;117:4;105:10;97:6;88:34;148:4;140:6;136:17;126:27;;0:157;14080:31:24;;;;14042:69;;14121:13;14137:1;14121:17;;14148:9;14176:1;14172:5;;14167:246;14183:16;;14179:1;:20;14167:246;;;14232:7;:36;;;;;14244:12;:15;14257:1;14244:15;;;;;;;;;;;:24;;;;;;;;;;;;14243:25;14232:36;14231:80;;;;14274:8;:36;;;;;14286:12;:15;14299:1;14286:15;;;;;;;;;;;:24;;;;;;;;;;;;14274:36;14231:80;14227:186;;;14359:1;14331:18;14350:5;14331:25;;;;;;;;;;;;;:29;;;;;14386:12;14396:1;14386:5;:9;;:12;;;;:::i;:::-;14378:20;;14227:186;14205:8;14211:1;14205;:5;;:8;;;;:::i;:::-;14201:12;;14167:246;;;14454:12;14461:4;14454:2;:6;;:12;;;;:::i;:::-;14440:27;;;;;;;;;;;;;;;;;;;;;;29:2:-1;21:6;17:15;117:4;105:10;97:6;88:34;148:4;140:6;136:17;126:27;;0:157;14440:27:24;;;;14422:45;;14486:4;14482:8;;14477:89;14496:2;14492:1;:6;14477:89;;;14545:18;14564:1;14545:21;;;;;;;;;;;;;;14514:15;14530:11;14536:4;14530:1;:5;;:11;;;;:::i;:::-;14514:28;;;;;;;;;;;;;:52;;;;;14504:8;14510:1;14504;:5;;:8;;;;:::i;:::-;14500:12;;14477:89;;;13855:718;;;;;;;;;:::o;12921:585::-;12993:31;13036:34;13087:6;:13;;;;13073:28;;;;;;;;;;;;;;;;;;;;;;29:2:-1;21:6;17:15;117:4;105:10;97:6;88:34;148:4;140:6;136:17;126:27;;0:157;13073:28:24;;;;13036:65;;13111:13;13127:1;13111:17;;13138:9;13166:1;13162:5;;13157:209;13173:6;:13;;;;13169:1;:17;13157:209;;;13218:13;:28;13232:13;13218:28;;;;;;;;;;;:39;13247:6;13254:1;13247:9;;;;;;;;;;;;;;;;;;;;;;;;;13218:39;;;;;;;;;;;;;;;;;;;;;;;;;13214:152;;;13304:6;13311:1;13304:9;;;;;;;;;;;;;;;;;;;;;;;;;13277:17;13295:5;13277:24;;;;;;;;;;;;;:36;;;;;;;;;;;13339:12;13349:1;13339:5;:9;;:12;;;;:::i;:::-;13331:20;;13214:152;13192:8;13198:1;13192;:5;;:8;;;;:::i;:::-;13188:12;;13157:209;;;13406:5;13392:20;;;;;;;;;;;;;;;;;;;;;;29:2:-1;21:6;17:15;117:4;105:10;97:6;88:34;148:4;140:6;136:17;126:27;;0:157;13392:20:24;;;;13375:37;;13431:1;13427:5;;13422:77;13438:5;13434:1;:9;13422:77;;;13479:17;13497:1;13479:20;;;;;;;;;;;;;;13459:14;13474:1;13459:17;;;;;;;;;;;;;:40;;;;;;;;;;;13449:8;13455:1;13449;:5;;:8;;;;:::i;:::-;13445:12;;13422:77;;;12921:585;;;;;;:::o;2404:31::-;;;;:::o;7383:187::-;2875:4;2853:27;;:10;:27;;;2845:74;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;7464:6;:13;;;;7479:9;2096:2;4101:10;:29;;:56;;;;;4147:10;4134:9;:23;;4101:56;:74;;;;;4174:1;4161:9;:14;;4101:74;:93;;;;;4193:1;4179:10;:15;;4101:93;4080:159;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;7511:9;7500:8;:20;;;;7535:28;7553:9;7535:28;;;;;;;;;;;;;;;;;;2929:1;;7383:187;:::o;8680:408::-;8766:10;3122:7;:14;3130:5;3122:14;;;;;;;;;;;;;;;;;;;;;;;;;3114:47;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8804:13;3304:1;3253:53;;:12;:27;3266:13;3253:27;;;;;;;;;;;:39;;;;;;;;;;;;:53;;;;3245:92;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8840:13;8855:10;3618:13;:28;3632:13;3618:28;;;;;;;;;;;:35;3647:5;3618:35;;;;;;;;;;;;;;;;;;;;;;;;;3617:36;3609:92;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8924:4;8881:13;:28;8895:13;8881:28;;;;;;;;;;;:40;8910:10;8881:40;;;;;;;;;;;;;;;;:47;;;;;;;;;;;;;;;;;;8968:13;8956:10;8943:39;;;;;;;;;;;;8996:26;9008:13;8996:11;:26::i;:::-;8992:90;;;9038:33;9057:13;9038:18;:33::i;:::-;8992:90;3347:1;;3171;8680:408;;:::o;8303:271::-;8435:21;8484:40;8499:11;8512:5;8519:4;;8484:40;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;30:3:-1;22:6;14;1:33;99:1;93:3;85:6;81:16;74:27;137:4;133:9;126:4;121:3;117:14;113:30;106:37;;169:3;161:6;157:16;147:26;;8484:40:24;;;;;;:14;:40::i;:::-;8468:56;;8534:33;8553:13;8534:18;:33::i;:::-;8303:271;;;;;;:::o;2054:44::-;2096:2;2054:44;:::o;2338:23::-;;;;:::o;6701:503::-;2875:4;2853:27;;:10;:27;;;2845:74;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6812:5;3122:7;:14;3130:5;3122:14;;;;;;;;;;;;;;;;;;;;;;;;;3114:47;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6835:8;3958:1;3938:22;;:8;:22;;;;3930:51;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6871:8;3004:7;:14;3012:5;3004:14;;;;;;;;;;;;;;;;;;;;;;;;;3003:15;2995:49;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6900:9;6912:1;6900:13;;6895:165;6919:6;:13;;;;6915:1;:17;6895:165;;;6977:5;6964:18;;:6;6971:1;6964:9;;;;;;;;;;;;;;;;;;;;;;;;;:18;;;6960:100;;;7014:8;7002:6;7009:1;7002:9;;;;;;;;;;;;;;;;:20;;;;;;;;;;;;;;;;;;7040:5;;6960:100;6938:8;6944:1;6938;:5;;:8;;;;:::i;:::-;6934:12;;6895:165;;;;7086:5;7069:7;:14;7077:5;7069:14;;;;;;;;;;;;;;;;:22;;;;;;;;;;;;;;;;;;7121:4;7101:7;:17;7109:8;7101:17;;;;;;;;;;;;;;;;:24;;;;;;;;;;;;;;;;;;7153:5;7140:19;;;;;;;;;;;;7188:8;7174:23;;;;;;;;;;;;3991:1;3171;2929;6701:503;;:::o;9627:501::-;9713:10;3122:7;:14;3130:5;3122:14;;;;;;;;;;;;;;;;;;;;;;;;;3114:47;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;9743:13;9758:10;3436:13;:28;3450:13;3436:28;;;;;;;;;;;:35;3465:5;3436:35;;;;;;;;;;;;;;;;;;;;;;;;;3428:87;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;9790:13;3788:12;:27;3801:13;3788:27;;;;;;;;;;;:36;;;;;;;;;;;;3787:37;3779:82;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;9827:26;9839:13;9827:11;:26::i;:::-;9819:65;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;9894:23;9920:12;:27;9933:13;9920:27;;;;;;;;;;;9894:53;;9972:4;9957:3;:12;;;:19;;;;;;;;;;;;;;;;;;9986:23;10012:58;10033:3;:15;;;;;;;;;;;;10050:3;:9;;;10061:3;:8;;10012:58;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:20;:58::i;:::-;9986:84;;10095:13;10085:36;10110:10;10085:36;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;80:1;75:3;71:11;64:39;52:2;49:1;45:10;40:15;;8:100;;;12:14;10085:36:24;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3871:1;;3525;3171;;9627:501;;:::o;1274:134:2:-;1332:7;1358:43;1362:1;1365;1358:43;;;;;;;;;;;;;;;;;:3;:43::i;:::-;1351:50;;1274:134;;;;:::o;834:176::-;892:7;911:9;927:1;923;:5;911:17;;951:1;946;:6;;938:46;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1002:1;995:8;;;834:176;;;;:::o;11089:492:24:-;11237:21;11215:11;3958:1;3938:22;;:8;:22;;;;3930:51;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;11286:16;;11270:32;;11342:140;;;;;;;;11381:11;11342:140;;;;;;11413:5;11342:140;;;;11438:4;11342:140;;;;11466:5;11342:140;;;;;11312:12;:27;11325:13;11312:27;;;;;;;;;;;:170;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;11511:23;11532:1;11511:16;;:20;;:23;;;;:::i;:::-;11492:16;:42;;;;11560:13;11549:25;;;;;;;;;;11089:492;;;;;;:::o;341:450:18:-;461:12;503:1;489:4;:11;:15;485:89;;;514:31;533:11;514:18;:31::i;:::-;506:68;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;485:89;584:12;606:23;663:11;:16;;686:5;693:4;663:35;;;;;;;;;;;;;36:153:-1;66:2;61:3;58:11;36:153;;182:3;176:10;171:3;164:23;98:2;93:3;89:12;82:19;;123:2;118:3;114:12;107:19;;148:2;143:3;139:12;132:19;;36:153;;;274:1;267:3;263:2;259:12;254:3;250:22;246:30;315:4;311:9;305:3;299:10;295:26;356:4;350:3;344:10;340:21;389:7;380;377:20;372:3;365:33;3:399;;;663:35:18;;;;;;;;;;;;;;;;;;;;;;;;;14:1:-1;21;16:31;;;;75:4;69:11;64:16;;144:4;140:9;133:4;115:16;111:27;107:43;104:1;100:51;94:4;87:65;169:16;166:1;159:27;225:16;222:1;215:4;212:1;208:12;193:49;7:242;;16:31;36:4;31:9;;7:242;;639:59:18;;;;;;;;716:7;708:49;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;774:10;767:17;;;;341:450;;;;;:::o;1732:187:2:-;1818:7;1850:1;1845;:6;;1853:12;1837:29;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;80:1;75:3;71:11;64:39;52:2;49:1;45:10;40:15;;8:100;;;12:14;1837:29:2;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1876:9;1892:1;1888;:5;1876:17;;1911:1;1904:8;;;1732:187;;;;;:::o;686:610:5:-;746:4;1004:16;1030:19;1052:66;1030:88;;;;1219:7;1207:20;1195:32;;1258:11;1246:8;:23;;:42;;;;;1285:3;1273:15;;:8;:15;;1246:42;1238:51;;;;686:610;;;:::o;59:252:11:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o",
  "source": "pragma solidity ^0.5.13;\n\nimport \"./common/MultiSig.sol\";\n\ncontract ReserveSpenderMultiSig is MultiSig {\n    /**\n     * @notice Sets initialized == true on implementation contracts\n     * @param test Set to true to skip implementation initialization\n     */\n    constructor(bool test) public MultiSig(test) {}\n}\n",
  "sourcePath": "/Users/beaver/Development/celo/celo-monorepo/packages/protocol/lib/mento-core/contracts/ReserveSpenderMultiSig.sol",
  "ast": {
    "absolutePath": "project:/lib/mento-core/contracts/ReserveSpenderMultiSig.sol",
    "exportedSymbols": {
      "ReserveSpenderMultiSig": [
        4214
      ]
    },
    "id": 4215,
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 4201,
        "literals": [
          "solidity",
          "^",
          "0.5",
          ".13"
        ],
        "nodeType": "PragmaDirective",
        "src": "0:24:11"
      },
      {
        "absolutePath": "project:/lib/mento-core/contracts/common/MultiSig.sol",
        "file": "./common/MultiSig.sol",
        "id": 4202,
        "nodeType": "ImportDirective",
        "scope": 4215,
        "sourceUnit": 9414,
        "src": "26:31:11",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "baseContracts": [
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 4203,
              "name": "MultiSig",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 9413,
              "src": "94:8:11",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_MultiSig_$9413",
                "typeString": "contract MultiSig"
              }
            },
            "id": 4204,
            "nodeType": "InheritanceSpecifier",
            "src": "94:8:11"
          }
        ],
        "contractDependencies": [
          8252,
          9413
        ],
        "contractKind": "contract",
        "documentation": null,
        "fullyImplemented": true,
        "id": 4214,
        "linearizedBaseContracts": [
          4214,
          9413,
          8252
        ],
        "name": "ReserveSpenderMultiSig",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "body": {
              "id": 4212,
              "nodeType": "Block",
              "src": "307:2:11",
              "statements": []
            },
            "documentation": "@notice Sets initialized == true on implementation contracts\n@param test Set to true to skip implementation initialization",
            "id": 4213,
            "implemented": true,
            "kind": "constructor",
            "modifiers": [
              {
                "arguments": [
                  {
                    "argumentTypes": null,
                    "id": 4209,
                    "name": "test",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 4206,
                    "src": "301:4:11",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  }
                ],
                "id": 4210,
                "modifierName": {
                  "argumentTypes": null,
                  "id": 4208,
                  "name": "MultiSig",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 9413,
                  "src": "292:8:11",
                  "typeDescriptions": {
                    "typeIdentifier": "t_type$_t_contract$_MultiSig_$9413_$",
                    "typeString": "type(contract MultiSig)"
                  }
                },
                "nodeType": "ModifierInvocation",
                "src": "292:14:11"
              }
            ],
            "name": "",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 4207,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 4206,
                  "name": "test",
                  "nodeType": "VariableDeclaration",
                  "scope": 4213,
                  "src": "274:9:11",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 4205,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "274:4:11",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "273:11:11"
            },
            "returnParameters": {
              "id": 4211,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "307:0:11"
            },
            "scope": 4214,
            "src": "262:47:11",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          }
        ],
        "scope": 4215,
        "src": "59:252:11"
      }
    ],
    "src": "0:312:11"
  },
  "legacyAST": {
    "attributes": {
      "absolutePath": "project:/lib/mento-core/contracts/ReserveSpenderMultiSig.sol",
      "exportedSymbols": {
        "ReserveSpenderMultiSig": [
          4214
        ]
      }
    },
    "children": [
      {
        "attributes": {
          "literals": [
            "solidity",
            "^",
            "0.5",
            ".13"
          ]
        },
        "id": 4201,
        "name": "PragmaDirective",
        "src": "0:24:11"
      },
      {
        "attributes": {
          "SourceUnit": 9414,
          "absolutePath": "project:/lib/mento-core/contracts/common/MultiSig.sol",
          "file": "./common/MultiSig.sol",
          "scope": 4215,
          "symbolAliases": [
            null
          ],
          "unitAlias": ""
        },
        "id": 4202,
        "name": "ImportDirective",
        "src": "26:31:11"
      },
      {
        "attributes": {
          "contractDependencies": [
            8252,
            9413
          ],
          "contractKind": "contract",
          "documentation": null,
          "fullyImplemented": true,
          "linearizedBaseContracts": [
            4214,
            9413,
            8252
          ],
          "name": "ReserveSpenderMultiSig",
          "scope": 4215
        },
        "children": [
          {
            "attributes": {
              "arguments": null
            },
            "children": [
              {
                "attributes": {
                  "contractScope": null,
                  "name": "MultiSig",
                  "referencedDeclaration": 9413,
                  "type": "contract MultiSig"
                },
                "id": 4203,
                "name": "UserDefinedTypeName",
                "src": "94:8:11"
              }
            ],
            "id": 4204,
            "name": "InheritanceSpecifier",
            "src": "94:8:11"
          },
          {
            "attributes": {
              "documentation": "@notice Sets initialized == true on implementation contracts\n@param test Set to true to skip implementation initialization",
              "implemented": true,
              "isConstructor": true,
              "kind": "constructor",
              "name": "",
              "scope": 4214,
              "stateMutability": "nonpayable",
              "superFunction": null,
              "visibility": "public"
            },
            "children": [
              {
                "children": [
                  {
                    "attributes": {
                      "constant": false,
                      "name": "test",
                      "scope": 4213,
                      "stateVariable": false,
                      "storageLocation": "default",
                      "type": "bool",
                      "value": null,
                      "visibility": "internal"
                    },
                    "children": [
                      {
                        "attributes": {
                          "name": "bool",
                          "type": "bool"
                        },
                        "id": 4205,
                        "name": "ElementaryTypeName",
                        "src": "274:4:11"
                      }
                    ],
                    "id": 4206,
                    "name": "VariableDeclaration",
                    "src": "274:9:11"
                  }
                ],
                "id": 4207,
                "name": "ParameterList",
                "src": "273:11:11"
              },
              {
                "attributes": {
                  "parameters": [
                    null
                  ]
                },
                "children": [],
                "id": 4211,
                "name": "ParameterList",
                "src": "307:0:11"
              },
              {
                "children": [
                  {
                    "attributes": {
                      "argumentTypes": null,
                      "overloadedDeclarations": [
                        null
                      ],
                      "referencedDeclaration": 9413,
                      "type": "type(contract MultiSig)",
                      "value": "MultiSig"
                    },
                    "id": 4208,
                    "name": "Identifier",
                    "src": "292:8:11"
                  },
                  {
                    "attributes": {
                      "argumentTypes": null,
                      "overloadedDeclarations": [
                        null
                      ],
                      "referencedDeclaration": 4206,
                      "type": "bool",
                      "value": "test"
                    },
                    "id": 4209,
                    "name": "Identifier",
                    "src": "301:4:11"
                  }
                ],
                "id": 4210,
                "name": "ModifierInvocation",
                "src": "292:14:11"
              },
              {
                "attributes": {
                  "statements": [
                    null
                  ]
                },
                "children": [],
                "id": 4212,
                "name": "Block",
                "src": "307:2:11"
              }
            ],
            "id": 4213,
            "name": "FunctionDefinition",
            "src": "262:47:11"
          }
        ],
        "id": 4214,
        "name": "ContractDefinition",
        "src": "59:252:11"
      }
    ],
    "id": 4215,
    "name": "SourceUnit",
    "src": "0:312:11"
  },
  "compiler": {
    "name": "solc",
    "version": "0.5.13+commit.5b0b510c.Emscripten.clang"
  },
  "networks": {},
  "schemaVersion": "3.4.13",
  "updatedAt": "2024-03-05T15:18:03.865Z",
  "devdoc": {
    "methods": {
      "addOwner(address)": {
        "details": "Allows to add a new owner. Transaction has to be sent by wallet.",
        "params": {
          "owner": "Address of new owner."
        }
      },
      "changeInternalRequirement(uint256)": {
        "details": "Allows to change the number of required confirmations. Transaction has to be sent by wallet.",
        "params": {
          "_internalRequired": "Number of required confirmations for interal txs."
        }
      },
      "changeRequirement(uint256)": {
        "details": "Allows to change the number of required confirmations. Transaction has to be sent by wallet.",
        "params": {
          "_required": "Number of required confirmations."
        }
      },
      "confirmTransaction(uint256)": {
        "details": "Allows an owner to confirm a transaction.",
        "params": {
          "transactionId": "Transaction ID."
        }
      },
      "constructor": {
        "params": {
          "test": "Set to true to skip implementation initialization"
        }
      },
      "executeTransaction(uint256)": {
        "details": "Allows anyone to execute a confirmed transaction.",
        "params": {
          "transactionId": "Transaction ID."
        }
      },
      "getConfirmationCount(uint256)": {
        "details": "Returns number of confirmations of a transaction.",
        "params": {
          "transactionId": "Transaction ID."
        },
        "return": "Number of confirmations."
      },
      "getConfirmations(uint256)": {
        "details": "Returns array with owner addresses, which confirmed transaction.",
        "params": {
          "transactionId": "Transaction ID."
        },
        "return": "Returns array of owner addresses."
      },
      "getOwners()": {
        "details": "Returns list of owners.",
        "return": "List of owner addresses."
      },
      "getTransactionCount(bool,bool)": {
        "details": "Returns total number of transactions after filters are applied.",
        "params": {
          "executed": "Include executed transactions.",
          "pending": "Include pending transactions."
        },
        "return": "Total number of transactions after filters are applied."
      },
      "getTransactionIds(uint256,uint256,bool,bool)": {
        "details": "Returns list of transaction IDs in defined range.",
        "params": {
          "executed": "Include executed transactions.",
          "from": "Index start position of transaction array.",
          "pending": "Include pending transactions.",
          "to": "Index end position of transaction array."
        },
        "return": "Returns array of transaction IDs."
      },
      "initialize(address[],uint256,uint256)": {
        "details": "Contract constructor sets initial owners and required number of confirmations.",
        "params": {
          "_internalRequired": "Number of required confirmations for internal transactions.",
          "_owners": "List of initial owners.",
          "_required": "Number of required confirmations for external transactions."
        }
      },
      "isConfirmed(uint256)": {
        "details": "Returns the confirmation status of a transaction.",
        "params": {
          "transactionId": "Transaction ID."
        },
        "return": "Confirmation status."
      },
      "removeOwner(address)": {
        "details": "Allows to remove an owner. Transaction has to be sent by wallet.",
        "params": {
          "owner": "Address of owner."
        }
      },
      "replaceOwner(address,address)": {
        "details": "Allows to replace an owner with a new owner. Transaction has to be sent by wallet.",
        "params": {
          "newOwner": "Address of new owner.",
          "owner": "Address of owner to be replaced."
        }
      },
      "revokeConfirmation(uint256)": {
        "details": "Allows an owner to revoke a confirmation for a transaction.",
        "params": {
          "transactionId": "Transaction ID."
        }
      },
      "submitTransaction(address,uint256,bytes)": {
        "details": "Allows an owner to submit and confirm a transaction.",
        "params": {
          "data": "Transaction data payload.",
          "destination": "Transaction target address.",
          "value": "Transaction ether value."
        },
        "return": "Returns transaction ID."
      }
    }
  },
  "userdoc": {
    "methods": {
      "constructor": "Sets initialized == true on implementation contracts"
    }
  }
}