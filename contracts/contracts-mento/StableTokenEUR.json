{
  "contractName": "StableTokenEUR",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "test",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "factor",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "lastUpdated",
          "type": "uint256"
        }
      ],
      "name": "InflationFactorUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "rate",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "updatePeriod",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "lastUpdated",
          "type": "uint256"
        }
      ],
      "name": "InflationParametersUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "registryAddress",
          "type": "address"
        }
      ],
      "name": "RegistrySet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "comment",
          "type": "string"
        }
      ],
      "name": "TransferComment",
      "type": "event"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "accountOwner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "accountOwner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "blsKey",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "blsPop",
          "type": "bytes"
        }
      ],
      "name": "checkProofOfPossession",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "feeRecipient",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "gatewayFeeRecipient",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "communityFund",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "refund",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "tipTxFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "gatewayFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "baseTxFee",
          "type": "uint256"
        }
      ],
      "name": "creditGasFees",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "debitGasFees",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "decreaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "aNumerator",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "aDenominator",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "bNumerator",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "bDenominator",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "exponent",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_decimals",
          "type": "uint256"
        }
      ],
      "name": "fractionMulExp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "bytes",
          "name": "header",
          "type": "bytes"
        }
      ],
      "name": "getBlockNumberFromHeader",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "getEpochNumber",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "blockNumber",
          "type": "uint256"
        }
      ],
      "name": "getEpochNumberOfBlock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "getEpochSize",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "getExchangeRegistryId",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "getInflationParameters",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "blockNumber",
          "type": "uint256"
        }
      ],
      "name": "getParentSealBitmap",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "bytes",
          "name": "header",
          "type": "bytes"
        }
      ],
      "name": "getVerifiedSealBitmapFromHeader",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "bytes",
          "name": "header",
          "type": "bytes"
        }
      ],
      "name": "hashHeader",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "increaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_symbol",
          "type": "string"
        },
        {
          "internalType": "uint8",
          "name": "_decimals",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "registryAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "inflationRate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "inflationFactorUpdatePeriod",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "initialBalanceAddresses",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "initialBalanceValues",
          "type": "uint256[]"
        },
        {
          "internalType": "string",
          "name": "exchangeIdentifier",
          "type": "string"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "initialized",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "isOwner",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "blockNumber",
          "type": "uint256"
        }
      ],
      "name": "minQuorumSize",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "minQuorumSizeInCurrentSet",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "mint",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "numberValidatorsInCurrentSet",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "blockNumber",
          "type": "uint256"
        }
      ],
      "name": "numberValidatorsInSet",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "registry",
      "outputs": [
        {
          "internalType": "contract IRegistry",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "rate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "updatePeriod",
          "type": "uint256"
        }
      ],
      "name": "setInflationParameters",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "registryAddress",
          "type": "address"
        }
      ],
      "name": "setRegistry",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "comment",
          "type": "string"
        }
      ],
      "name": "transferWithComment",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "units",
          "type": "uint256"
        }
      ],
      "name": "unitsToValue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "validatorSignerAddressFromCurrentSet",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "blockNumber",
          "type": "uint256"
        }
      ],
      "name": "validatorSignerAddressFromSet",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "valueToUnits",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "getVersionNumber",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "metadata": "{\"compiler\":{\"version\":\"0.5.13+commit.5b0b510c\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"test\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"factor\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lastUpdated\",\"type\":\"uint256\"}],\"name\":\"InflationFactorUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"updatePeriod\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lastUpdated\",\"type\":\"uint256\"}],\"name\":\"InflationParametersUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"registryAddress\",\"type\":\"address\"}],\"name\":\"RegistrySet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"comment\",\"type\":\"string\"}],\"name\":\"TransferComment\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"accountOwner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"accountOwner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"blsKey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"blsPop\",\"type\":\"bytes\"}],\"name\":\"checkProofOfPossession\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"feeRecipient\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"gatewayFeeRecipient\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"communityFund\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"refund\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tipTxFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gatewayFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"baseTxFee\",\"type\":\"uint256\"}],\"name\":\"creditGasFees\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"debitGasFees\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"aNumerator\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"aDenominator\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bNumerator\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bDenominator\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"exponent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_decimals\",\"type\":\"uint256\"}],\"name\":\"fractionMulExp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"header\",\"type\":\"bytes\"}],\"name\":\"getBlockNumberFromHeader\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getEpochNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"getEpochNumberOfBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getEpochSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getExchangeRegistryId\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getInflationParameters\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"getParentSealBitmap\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"header\",\"type\":\"bytes\"}],\"name\":\"getVerifiedSealBitmapFromHeader\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getVersionNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"header\",\"type\":\"bytes\"}],\"name\":\"hashHeader\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"_decimals\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"registryAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"inflationRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"inflationFactorUpdatePeriod\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"initialBalanceAddresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"initialBalanceValues\",\"type\":\"uint256[]\"},{\"internalType\":\"string\",\"name\":\"exchangeIdentifier\",\"type\":\"string\"}],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"initialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"minQuorumSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minQuorumSizeInCurrentSet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"numberValidatorsInCurrentSet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"numberValidatorsInSet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"registry\",\"outputs\":[{\"internalType\":\"contract IRegistry\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"updatePeriod\",\"type\":\"uint256\"}],\"name\":\"setInflationParameters\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"registryAddress\",\"type\":\"address\"}],\"name\":\"setRegistry\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"comment\",\"type\":\"string\"}],\"name\":\"transferWithComment\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"units\",\"type\":\"uint256\"}],\"name\":\"unitsToValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"validatorSignerAddressFromCurrentSet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"validatorSignerAddressFromSet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"valueToUnits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"methods\":{\"allowance(address,address)\":{\"params\":{\"accountOwner\":\"The owner of the StableToken.\",\"spender\":\"The spender of the StableToken.\"},\"return\":\"The amount of StableToken owner is allowing spender to spend.\"},\"approve(address,uint256)\":{\"params\":{\"spender\":\"The address which is being approved to spend StableToken.\",\"value\":\"The amount of StableToken approved to the spender.\"},\"return\":\"True if the transaction succeeds.\"},\"balanceOf(address)\":{\"params\":{\"accountOwner\":\"The address to query the balance of.\"},\"return\":\"The balance of the specified address.\"},\"burn(uint256)\":{\"params\":{\"value\":\"The amount of StableToken to burn.\"}},\"checkProofOfPossession(address,bytes,bytes)\":{\"params\":{\"blsKey\":\"The BLS public key that the validator is using for consensus, should pass proof  of possession. 48 bytes.\",\"blsPop\":\"The BLS public key proof-of-possession, which consists of a signature on the  account address. 96 bytes.\",\"sender\":\"The address signed by the BLS key to generate the proof of possession.\"},\"return\":\"True upon success.\"},\"constructor\":{\"params\":{\"test\":\"Set to true to skip implementation initialization.\"}},\"creditGasFees(address,address,address,address,uint256,uint256,uint256,uint256)\":{\"details\":\"Note that this function is called by the protocol when paying for tx fees in this currency. Before the tx is executed, gas is debited from the sender via a call to `debitGasFees`. Note too that the events emitted by `creditGasFees` reflect the *net* gas fee payments for the transaction.\",\"params\":{\"baseTxFee\":\"Community fund fee\",\"communityFund\":\"Community fund address\",\"feeRecipient\":\"Coinbase address\",\"from\":\"The account to debit balance from\",\"gatewayFee\":\"Gateway fee\",\"gatewayFeeRecipient\":\"Gateway address\",\"tipTxFee\":\"Coinbase fee\"}},\"debitGasFees(address,uint256)\":{\"details\":\"Note that this function is called by the protocol when paying for tx fees in this currency. After the tx is executed, gas is refunded to the sender and credited to the various tx fee recipients via a call to `creditGasFees`. Note too that the events emitted by `creditGasFees` reflect the *net* gas fee payments for the transaction.\",\"params\":{\"from\":\"The account to reserve balance from\",\"value\":\"The amount of balance to reserve\"}},\"decimals()\":{\"return\":\"The number of decimal places to which StableToken is divisible.\"},\"decreaseAllowance(address,uint256)\":{\"params\":{\"spender\":\"The address which is being approved to spend StableToken.\",\"value\":\"The decrement of the amount of StableToken approved to the spender.\"},\"return\":\"True if the transaction succeeds.\"},\"fractionMulExp(uint256,uint256,uint256,uint256,uint256,uint256)\":{\"params\":{\"_decimals\":\"precision\",\"aDenominator\":\"Denominator of first fraction\",\"aNumerator\":\"Numerator of first fraction\",\"bDenominator\":\"Denominator of exponentiated fraction\",\"bNumerator\":\"Numerator of exponentiated fraction\",\"exponent\":\"exponent to raise b to\"},\"return\":\"Numerator of the computed quantity (not reduced).Denominator of the computed quantity (not reduced).\"},\"getBlockNumberFromHeader(bytes)\":{\"params\":{\"header\":\"RLP encoded header\"},\"return\":\"Block number.\"},\"getEpochNumber()\":{\"return\":\"Current epoch number.\"},\"getEpochNumberOfBlock(uint256)\":{\"params\":{\"blockNumber\":\"Block number where epoch number is calculated.\"},\"return\":\"Epoch number.\"},\"getEpochSize()\":{\"return\":\"The current epoch size in blocks.\"},\"getExchangeRegistryId()\":{\"details\":\"When this storage is uninitialized, it falls back to the default EXCHANGE_REGISTRY_ID. exchangeRegistryId was introduced after the initial release of cUSD's StableToken, so exchangeRegistryId will be uninitialized for that contract. If cUSD's StableToken exchangeRegistryId were to be correctly initialized, this function could be deprecated in favor of using exchangeRegistryId directly.\",\"return\":\"Registry id for the corresponding exchange.\"},\"getInflationParameters()\":{\"return\":\"ratefactorupdatePeriodfactorLastUpdated\"},\"getParentSealBitmap(uint256)\":{\"params\":{\"blockNumber\":\"Block number to retrieve. Must be within 4 epochs of the current number.\"},\"return\":\"Bitmap parent seal with set bits at indices corresponding to signing validators.\"},\"getVerifiedSealBitmapFromHeader(bytes)\":{\"params\":{\"header\":\"RLP encoded header\"},\"return\":\"Bitmap parent seal with set bits at indices correspoinding to signing validators.\"},\"getVersionNumber()\":{\"details\":\"This function is overloaded to maintain a distinct version from StableToken.sol.\",\"return\":\"Storage version of the contract.Major version of the contract.Minor version of the contract.Patch version of the contract.\"},\"hashHeader(bytes)\":{\"params\":{\"header\":\"RLP encoded header\"},\"return\":\"Header hash.\"},\"increaseAllowance(address,uint256)\":{\"params\":{\"spender\":\"The address which is being approved to spend StableToken.\",\"value\":\"The increment of the amount of StableToken approved to the spender.\"},\"return\":\"True if the transaction succeeds.\"},\"initialize(string,string,uint8,address,uint256,uint256,address[],uint256[],string)\":{\"params\":{\"_decimals\":\"Tokens are divisible to this many decimal places.\",\"_name\":\"The name of the stable token (English)\",\"_symbol\":\"A short symbol identifying the token (e.g. \\\"cUSD\\\")\",\"exchangeIdentifier\":\"String identifier of exchange in registry (for specific fiat pairs)\",\"inflationFactorUpdatePeriod\":\"How often the inflation factor is updated, in seconds.\",\"inflationRate\":\"Weekly inflation rate.\",\"initialBalanceAddresses\":\"Array of addresses with an initial balance.\",\"initialBalanceValues\":\"Array of balance values corresponding to initialBalanceAddresses.\",\"registryAddress\":\"Address of the Registry contract.\"}},\"isOwner()\":{\"details\":\"Returns true if the caller is the current owner.\"},\"minQuorumSize(uint256)\":{\"details\":\"Computed in celo-blockchain as int(math.Ceil(float64(2*valSet.Size()) / 3))\"},\"minQuorumSizeInCurrentSet()\":{\"return\":\"Byzantine quorum of validators.\"},\"mint(address,uint256)\":{\"params\":{\"to\":\"The account for which to mint tokens.\",\"value\":\"The amount of StableToken to mint.\"}},\"name()\":{\"return\":\"The name of the stable token.\"},\"numberValidatorsInCurrentSet()\":{\"return\":\"Size of the current elected validator set.\"},\"numberValidatorsInSet(uint256)\":{\"params\":{\"blockNumber\":\"Block number to retrieve the validator set from.\"},\"return\":\"Size of the validator set.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner.     * NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setInflationParameters(uint256,uint256)\":{\"params\":{\"rate\":\"New rate.\",\"updatePeriod\":\"How often inflationFactor is updated.\"}},\"setRegistry(address)\":{\"params\":{\"registryAddress\":\"The address of a registry contract for routing to other contracts.\"}},\"symbol()\":{\"return\":\"The symbol of the stable token.\"},\"totalSupply()\":{\"details\":\"Though totalSupply_ is stored in units, this returns value.\",\"return\":\"The total value of StableToken in existence\"},\"transfer(address,uint256)\":{\"params\":{\"to\":\"The address to transfer to.\",\"value\":\"The amount to be transferred.\"}},\"transferFrom(address,address,uint256)\":{\"params\":{\"from\":\"The address to transfer StableToken from.\",\"to\":\"The address to transfer StableToken to.\",\"value\":\"The amount of StableToken to transfer.\"},\"return\":\"True if the transaction succeeds.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"transferWithComment(address,uint256,string)\":{\"params\":{\"comment\":\"The transfer comment.\",\"to\":\"The address to transfer to.\",\"value\":\"The amount to be transferred.\"},\"return\":\"True if the transaction succeeds.\"},\"unitsToValue(uint256)\":{\"params\":{\"units\":\"The units to convert to value.\"},\"return\":\"The value corresponding to `units` given the current inflation factor.\"},\"validatorSignerAddressFromCurrentSet(uint256)\":{\"params\":{\"index\":\"Index of requested validator in the validator set.\"},\"return\":\"Address of validator at the requested index.\"},\"validatorSignerAddressFromSet(uint256,uint256)\":{\"params\":{\"blockNumber\":\"Block number to retrieve the validator set from.\",\"index\":\"Index of requested validator in the validator set.\"},\"return\":\"Address of validator at the requested index.\"},\"valueToUnits(uint256)\":{\"details\":\"We don't compute the updated inflationFactor here because we assume any function calling this will have updated the inflation factor.\",\"params\":{\"value\":\"The value to convert to units.\"},\"return\":\"The units corresponding to `value` given the current inflation factor.\"}}},\"userdoc\":{\"methods\":{\"allowance(address,address)\":{\"notice\":\"Gets the amount of owner's StableToken allowed to be spent by spender.\"},\"approve(address,uint256)\":{\"notice\":\"Approve a user to transfer StableToken on behalf of another user.\"},\"balanceOf(address)\":{\"notice\":\"Gets the balance of the specified address using the presently stored inflation factor.\"},\"burn(uint256)\":{\"notice\":\"Burns StableToken from the balance of msg.sender.\"},\"checkProofOfPossession(address,bytes,bytes)\":{\"notice\":\"Checks a BLS proof of possession.\"},\"constructor\":\"Sets initialized == true on implementation contracts.\",\"creditGasFees(address,address,address,address,uint256,uint256,uint256,uint256)\":{\"notice\":\"Alternative function to credit balance after making payments for gas in this StableToken currency.\"},\"debitGasFees(address,uint256)\":{\"notice\":\"Reserve balance for making payments for gas in this StableToken currency.\"},\"decreaseAllowance(address,uint256)\":{\"notice\":\"Decrease the allowance of another user.\"},\"fractionMulExp(uint256,uint256,uint256,uint256,uint256,uint256)\":{\"notice\":\"calculate a * b^x for fractions a, b to `decimals` precision\"},\"getBlockNumberFromHeader(bytes)\":{\"notice\":\"Parses block number out of header.\"},\"getEpochNumber()\":{\"notice\":\"Returns the epoch number at a block.\"},\"getEpochNumberOfBlock(uint256)\":{\"notice\":\"Returns the epoch number at a block.\"},\"getEpochSize()\":{\"notice\":\"Returns the current epoch size in blocks.\"},\"getExchangeRegistryId()\":{\"notice\":\"Returns the exchange id in the registry of the corresponding fiat pair exchange.\"},\"getInflationParameters()\":{\"notice\":\"gets inflation parameters.\"},\"getParentSealBitmap(uint256)\":{\"notice\":\"Gets the parent seal bitmap from the header at the given block number.\"},\"getVerifiedSealBitmapFromHeader(bytes)\":{\"notice\":\"Verifies the BLS signature on the header and returns the seal bitmap. The validator set used for verification is retrieved based on the parent hash field of the header.  If the parent hash is not in the blockchain, verification fails.\"},\"getVersionNumber()\":{\"notice\":\"Returns the storage, major, minor, and patch version of the contract.\"},\"hashHeader(bytes)\":{\"notice\":\"Computes hash of header.\"},\"increaseAllowance(address,uint256)\":{\"notice\":\"Increase the allowance of another user.\"},\"minQuorumSize(uint256)\":{\"notice\":\"Returns the minimum number of required signers for a given block number.\"},\"minQuorumSizeInCurrentSet()\":{\"notice\":\"Computes byzantine quorum from current validator set size\"},\"mint(address,uint256)\":{\"notice\":\"Mints new StableToken and gives it to 'to'.\"},\"numberValidatorsInCurrentSet()\":{\"notice\":\"Gets the size of the current elected validator set.\"},\"numberValidatorsInSet(uint256)\":{\"notice\":\"Gets the size of the validator set that must sign the given block number.\"},\"setInflationParameters(uint256,uint256)\":{\"notice\":\"Updates Inflation Parameters.\"},\"setRegistry(address)\":{\"notice\":\"Updates the address pointing to a Registry contract.\"},\"transfer(address,uint256)\":{\"notice\":\"Transfers `value` from `msg.sender` to `to`\"},\"transferFrom(address,address,uint256)\":{\"notice\":\"Transfers StableToken from one address to another on behalf of a user.\"},\"transferWithComment(address,uint256,string)\":{\"notice\":\"Transfer token for a specified address\"},\"unitsToValue(uint256)\":{\"notice\":\"Returns the value of a given number of units given the current inflation factor.\"},\"validatorSignerAddressFromCurrentSet(uint256)\":{\"notice\":\"Gets a validator address from the current validator set.\"},\"validatorSignerAddressFromSet(uint256,uint256)\":{\"notice\":\"Gets a validator address from the validator set at the given block number.\"},\"valueToUnits(uint256)\":{\"notice\":\"Returns the units for a given value given the current inflation factor.\"}}}},\"settings\":{\"compilationTarget\":{\"project:/lib/mento-core/contracts/StableTokenEUR.sol\":\"StableTokenEUR\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"openzeppelin-solidity/contracts/GSN/Context.sol\":{\"content\":\"pragma solidity ^0.5.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\ncontract Context {\\n    // Empty internal constructor, to prevent people from mistakenly deploying\\n    // an instance of this contract, which should be used via inheritance.\\n    constructor () internal { }\\n    // solhint-disable-previous-line no-empty-blocks\\n\\n    function _msgSender() internal view returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x90a3995645af7562d84b9d69363ffa5ae7217714ab61e951bf7bc450f40e4061\"},\"openzeppelin-solidity/contracts/math/SafeMath.sol\":{\"content\":\"pragma solidity ^0.5.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        // Solidity only automatically asserts when dividing by 0\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0x640b6dee7a4b830bdfd52b5031a07fc2b12209f5b2e29e5d364a7d37f69d8076\"},\"openzeppelin-solidity/contracts/ownership/Ownable.sol\":{\"content\":\"pragma solidity ^0.5.0;\\n\\nimport \\\"../GSN/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\ncontract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(isOwner(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the caller is the current owner.\\n     */\\n    function isOwner() public view returns (bool) {\\n        return _msgSender() == _owner;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public onlyOwner {\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     */\\n    function _transferOwnership(address newOwner) internal {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x6fb9d7889769d7cc161225f9ef7a90e468ba9788b253816f8d8b6894d3472c24\"},\"openzeppelin-solidity/contracts/token/ERC20/IERC20.sol\":{\"content\":\"pragma solidity ^0.5.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\\n * the optional functions; to access them see {ERC20Detailed}.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xe5bb0f57cff3e299f360052ba50f1ea0fff046df2be070b6943e0e3c3fdad8a9\"},\"project:/lib/mento-core/contracts/StableToken.sol\":{\"content\":\"pragma solidity ^0.5.13;\\n\\nimport \\\"openzeppelin-solidity/contracts/math/SafeMath.sol\\\";\\nimport \\\"openzeppelin-solidity/contracts/ownership/Ownable.sol\\\";\\nimport \\\"openzeppelin-solidity/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport \\\"./interfaces/IStableToken.sol\\\";\\nimport \\\"./interfaces/ICeloToken.sol\\\";\\nimport \\\"./common/interfaces/ICeloVersionedContract.sol\\\";\\nimport \\\"./common/CalledByVm.sol\\\";\\nimport \\\"./common/Initializable.sol\\\";\\nimport \\\"./common/FixidityLib.sol\\\";\\nimport \\\"./common/Freezable.sol\\\";\\nimport \\\"./common/UsingRegistry.sol\\\";\\nimport \\\"./common/UsingPrecompiles.sol\\\";\\n\\n/**\\n * @title An ERC20 compliant token with adjustable supply.\\n */\\n// solhint-disable-next-line max-line-length\\ncontract StableToken is\\n    ICeloVersionedContract,\\n    Ownable,\\n    Initializable,\\n    UsingRegistry,\\n    UsingPrecompiles,\\n    Freezable,\\n    CalledByVm,\\n    IStableToken,\\n    IERC20,\\n    ICeloToken\\n{\\n    using FixidityLib for FixidityLib.Fraction;\\n    using SafeMath for uint256;\\n\\n    event InflationFactorUpdated(uint256 factor, uint256 lastUpdated);\\n\\n    event InflationParametersUpdated(uint256 rate, uint256 updatePeriod, uint256 lastUpdated);\\n\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    event TransferComment(string comment);\\n\\n    bytes32 constant GRANDA_MENTO_REGISTRY_ID = keccak256(abi.encodePacked(\\\"GrandaMento\\\"));\\n\\n    string internal name_;\\n    string internal symbol_;\\n    uint8 internal decimals_;\\n\\n    // Stored as units. Value can be found using unitsToValue().\\n    mapping(address => uint256) internal balances;\\n    uint256 internal totalSupply_;\\n\\n    // Stored as values. Units can be found using valueToUnits().\\n    mapping(address => mapping(address => uint256)) internal allowed;\\n\\n    // STABILITY FEE PARAMETERS\\n\\n    // The `rate` is how much the `factor` is adjusted by per `updatePeriod`.\\n    // The `factor` describes units/value of StableToken, and is greater than or equal to 1.\\n    // The `updatePeriod` governs how often the `factor` is updated.\\n    // `factorLastUpdated` indicates when the inflation factor was last updated.\\n    struct InflationState {\\n        FixidityLib.Fraction rate;\\n        FixidityLib.Fraction factor;\\n        uint256 updatePeriod;\\n        uint256 factorLastUpdated;\\n    }\\n\\n    InflationState inflationState;\\n\\n    // The registry ID of the exchange contract with permission to mint and burn this token.\\n    // Unique per StableToken instance.\\n    bytes32 exchangeRegistryId;\\n\\n    /**\\n     * @notice Recomputes and updates inflation factor if more than `updatePeriod`\\n     * has passed since last update.\\n     */\\n    modifier updateInflationFactor() {\\n        FixidityLib.Fraction memory updatedInflationFactor;\\n        uint256 lastUpdated;\\n\\n        (updatedInflationFactor, lastUpdated) = getUpdatedInflationFactor();\\n\\n        if (lastUpdated != inflationState.factorLastUpdated) {\\n            inflationState.factor = updatedInflationFactor;\\n            inflationState.factorLastUpdated = lastUpdated;\\n            emit InflationFactorUpdated(inflationState.factor.unwrap(), inflationState.factorLastUpdated);\\n        }\\n        _;\\n    }\\n\\n    /**\\n     * @notice Returns the storage, major, minor, and patch version of the contract.\\n     * @return Storage version of the contract.\\n     * @return Major version of the contract.\\n     * @return Minor version of the contract.\\n     * @return Patch version of the contract.\\n     */\\n    function getVersionNumber()\\n        external\\n        pure\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256\\n        )\\n    {\\n        return (1, 2, 0, 1);\\n    }\\n\\n    /**\\n     * @notice Sets initialized == true on implementation contracts\\n     * @param test Set to true to skip implementation initialization\\n     */\\n    constructor(bool test) public Initializable(test) {}\\n\\n    /**\\n     * @param _name The name of the stable token (English)\\n     * @param _symbol A short symbol identifying the token (e.g. \\\"cUSD\\\")\\n     * @param _decimals Tokens are divisible to this many decimal places.\\n     * @param registryAddress Address of the Registry contract.\\n     * @param inflationRate Weekly inflation rate.\\n     * @param inflationFactorUpdatePeriod How often the inflation factor is updated, in seconds.\\n     * @param initialBalanceAddresses Array of addresses with an initial balance.\\n     * @param initialBalanceValues Array of balance values corresponding to initialBalanceAddresses.\\n     * @param exchangeIdentifier String identifier of exchange in registry (for specific fiat pairs)\\n     */\\n    function initialize(\\n        string calldata _name,\\n        string calldata _symbol,\\n        uint8 _decimals,\\n        address registryAddress,\\n        uint256 inflationRate,\\n        uint256 inflationFactorUpdatePeriod,\\n        address[] calldata initialBalanceAddresses,\\n        uint256[] calldata initialBalanceValues,\\n        string calldata exchangeIdentifier\\n    ) external initializer {\\n        require(inflationRate != 0, \\\"Must provide a non-zero inflation rate\\\");\\n        require(inflationFactorUpdatePeriod > 0, \\\"inflationFactorUpdatePeriod must be > 0\\\");\\n\\n        _transferOwnership(msg.sender);\\n\\n        totalSupply_ = 0;\\n        name_ = _name;\\n        symbol_ = _symbol;\\n        decimals_ = _decimals;\\n\\n        inflationState.rate = FixidityLib.wrap(inflationRate);\\n        inflationState.factor = FixidityLib.fixed1();\\n        inflationState.updatePeriod = inflationFactorUpdatePeriod;\\n        // solhint-disable-next-line not-rely-on-time\\n        inflationState.factorLastUpdated = now;\\n\\n        require(initialBalanceAddresses.length == initialBalanceValues.length, \\\"Array length mismatch\\\");\\n        for (uint256 i = 0; i < initialBalanceAddresses.length; i = i.add(1)) {\\n            _mint(initialBalanceAddresses[i], initialBalanceValues[i]);\\n        }\\n        setRegistry(registryAddress);\\n        exchangeRegistryId = keccak256(abi.encodePacked(exchangeIdentifier));\\n    }\\n\\n    /**\\n     * @notice Updates Inflation Parameters.\\n     * @param rate New rate.\\n     * @param updatePeriod How often inflationFactor is updated.\\n     */\\n    function setInflationParameters(uint256 rate, uint256 updatePeriod) external onlyOwner updateInflationFactor {\\n        require(rate != 0, \\\"Must provide a non-zero inflation rate.\\\");\\n        require(updatePeriod > 0, \\\"updatePeriod must be > 0\\\");\\n        inflationState.rate = FixidityLib.wrap(rate);\\n        inflationState.updatePeriod = updatePeriod;\\n\\n        emit InflationParametersUpdated(\\n            rate,\\n            updatePeriod,\\n            // solhint-disable-next-line not-rely-on-time\\n            now\\n        );\\n    }\\n\\n    /**\\n     * @notice Increase the allowance of another user.\\n     * @param spender The address which is being approved to spend StableToken.\\n     * @param value The increment of the amount of StableToken approved to the spender.\\n     * @return True if the transaction succeeds.\\n     */\\n    function increaseAllowance(address spender, uint256 value) external updateInflationFactor returns (bool) {\\n        require(spender != address(0), \\\"reserved address 0x0 cannot have allowance\\\");\\n        uint256 oldValue = allowed[msg.sender][spender];\\n        uint256 newValue = oldValue.add(value);\\n        allowed[msg.sender][spender] = newValue;\\n        emit Approval(msg.sender, spender, newValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Decrease the allowance of another user.\\n     * @param spender The address which is being approved to spend StableToken.\\n     * @param value The decrement of the amount of StableToken approved to the spender.\\n     * @return True if the transaction succeeds.\\n     */\\n    function decreaseAllowance(address spender, uint256 value) external updateInflationFactor returns (bool) {\\n        uint256 oldValue = allowed[msg.sender][spender];\\n        uint256 newValue = oldValue.sub(value);\\n        allowed[msg.sender][spender] = newValue;\\n        emit Approval(msg.sender, spender, newValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Approve a user to transfer StableToken on behalf of another user.\\n     * @param spender The address which is being approved to spend StableToken.\\n     * @param value The amount of StableToken approved to the spender.\\n     * @return True if the transaction succeeds.\\n     */\\n    function approve(address spender, uint256 value) external updateInflationFactor returns (bool) {\\n        require(spender != address(0), \\\"reserved address 0x0 cannot have allowance\\\");\\n        allowed[msg.sender][spender] = value;\\n        emit Approval(msg.sender, spender, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Mints new StableToken and gives it to 'to'.\\n     * @param to The account for which to mint tokens.\\n     * @param value The amount of StableToken to mint.\\n     */\\n    function mint(address to, uint256 value) external updateInflationFactor returns (bool) {\\n        require(\\n            msg.sender == registry.getAddressForOrDie(getExchangeRegistryId()) ||\\n                msg.sender == registry.getAddressFor(VALIDATORS_REGISTRY_ID) ||\\n                msg.sender == registry.getAddressFor(GRANDA_MENTO_REGISTRY_ID),\\n            \\\"Sender not authorized to mint\\\"\\n        );\\n        return _mint(to, value);\\n    }\\n\\n    /**\\n     * @notice Mints new StableToken and gives it to 'to'.\\n     * @param to The account for which to mint tokens.\\n     * @param value The amount of StableToken to mint.\\n     */\\n    function _mint(address to, uint256 value) private returns (bool) {\\n        require(to != address(0), \\\"0 is a reserved address\\\");\\n        if (value == 0) {\\n            return true;\\n        }\\n\\n        uint256 units = _valueToUnits(inflationState.factor, value);\\n        totalSupply_ = totalSupply_.add(units);\\n        balances[to] = balances[to].add(units);\\n        emit Transfer(address(0), to, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Transfer token for a specified address\\n     * @param to The address to transfer to.\\n     * @param value The amount to be transferred.\\n     * @param comment The transfer comment.\\n     * @return True if the transaction succeeds.\\n     */\\n    function transferWithComment(\\n        address to,\\n        uint256 value,\\n        string calldata comment\\n    ) external updateInflationFactor onlyWhenNotFrozen returns (bool) {\\n        bool succeeded = transfer(to, value);\\n        emit TransferComment(comment);\\n        return succeeded;\\n    }\\n\\n    /**\\n     * @notice Burns StableToken from the balance of msg.sender.\\n     * @param value The amount of StableToken to burn.\\n     */\\n    function burn(uint256 value) external updateInflationFactor returns (bool) {\\n        require(\\n            msg.sender == registry.getAddressForOrDie(getExchangeRegistryId()) ||\\n                msg.sender == registry.getAddressFor(GRANDA_MENTO_REGISTRY_ID),\\n            \\\"Sender not authorized to burn\\\"\\n        );\\n        uint256 units = _valueToUnits(inflationState.factor, value);\\n        require(units <= balances[msg.sender], \\\"value exceeded balance of sender\\\");\\n        totalSupply_ = totalSupply_.sub(units);\\n        balances[msg.sender] = balances[msg.sender].sub(units);\\n        emit Transfer(msg.sender, address(0), units);\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Transfers StableToken from one address to another on behalf of a user.\\n     * @param from The address to transfer StableToken from.\\n     * @param to The address to transfer StableToken to.\\n     * @param value The amount of StableToken to transfer.\\n     * @return True if the transaction succeeds.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 value\\n    ) external updateInflationFactor onlyWhenNotFrozen returns (bool) {\\n        uint256 units = _valueToUnits(inflationState.factor, value);\\n        require(to != address(0), \\\"transfer attempted to reserved address 0x0\\\");\\n        require(units <= balances[from], \\\"transfer value exceeded balance of sender\\\");\\n        require(value <= allowed[from][msg.sender], \\\"transfer value exceeded sender's allowance for recipient\\\");\\n\\n        balances[to] = balances[to].add(units);\\n        balances[from] = balances[from].sub(units);\\n        allowed[from][msg.sender] = allowed[from][msg.sender].sub(value);\\n        emit Transfer(from, to, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @return The name of the stable token.\\n     */\\n    function name() external view returns (string memory) {\\n        return name_;\\n    }\\n\\n    /**\\n     * @return The symbol of the stable token.\\n     */\\n    function symbol() external view returns (string memory) {\\n        return symbol_;\\n    }\\n\\n    /**\\n     * @return The number of decimal places to which StableToken is divisible.\\n     */\\n    function decimals() external view returns (uint8) {\\n        return decimals_;\\n    }\\n\\n    /**\\n     * @notice Gets the amount of owner's StableToken allowed to be spent by spender.\\n     * @param accountOwner The owner of the StableToken.\\n     * @param spender The spender of the StableToken.\\n     * @return The amount of StableToken owner is allowing spender to spend.\\n     */\\n    function allowance(address accountOwner, address spender) external view returns (uint256) {\\n        return allowed[accountOwner][spender];\\n    }\\n\\n    /**\\n     * @notice Gets the balance of the specified address using the presently stored inflation factor.\\n     * @param accountOwner The address to query the balance of.\\n     * @return The balance of the specified address.\\n     */\\n    function balanceOf(address accountOwner) external view returns (uint256) {\\n        return unitsToValue(balances[accountOwner]);\\n    }\\n\\n    /**\\n     * @return The total value of StableToken in existence\\n     * @dev Though totalSupply_ is stored in units, this returns value.\\n     */\\n    function totalSupply() external view returns (uint256) {\\n        return unitsToValue(totalSupply_);\\n    }\\n\\n    /**\\n     * @notice gets inflation parameters.\\n     * @return rate\\n     * @return factor\\n     * @return updatePeriod\\n     * @return factorLastUpdated\\n     */\\n    function getInflationParameters()\\n        external\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256\\n        )\\n    {\\n        return (\\n            inflationState.rate.unwrap(),\\n            inflationState.factor.unwrap(),\\n            inflationState.updatePeriod,\\n            inflationState.factorLastUpdated\\n        );\\n    }\\n\\n    /**\\n     * @notice Returns the units for a given value given the current inflation factor.\\n     * @param value The value to convert to units.\\n     * @return The units corresponding to `value` given the current inflation factor.\\n     * @dev We don't compute the updated inflationFactor here because\\n     * we assume any function calling this will have updated the inflation factor.\\n     */\\n    function valueToUnits(uint256 value) external view returns (uint256) {\\n        FixidityLib.Fraction memory updatedInflationFactor;\\n\\n        (updatedInflationFactor, ) = getUpdatedInflationFactor();\\n        return _valueToUnits(updatedInflationFactor, value);\\n    }\\n\\n    /**\\n     * @notice Returns the exchange id in the registry of the corresponding fiat pair exchange.\\n     * @dev When this storage is uninitialized, it falls back to the default EXCHANGE_REGISTRY_ID.\\n     * exchangeRegistryId was introduced after the initial release of cUSD's StableToken,\\n     * so exchangeRegistryId will be uninitialized for that contract. If cUSD's StableToken\\n     * exchangeRegistryId were to be correctly initialized, this function could be deprecated\\n     * in favor of using exchangeRegistryId directly.\\n     * @return Registry id for the corresponding exchange.\\n     */\\n    function getExchangeRegistryId() public view returns (bytes32) {\\n        if (exchangeRegistryId == bytes32(0)) {\\n            return EXCHANGE_REGISTRY_ID;\\n        } else {\\n            return exchangeRegistryId;\\n        }\\n    }\\n\\n    /**\\n     * @notice Returns the value of a given number of units given the current inflation factor.\\n     * @param units The units to convert to value.\\n     * @return The value corresponding to `units` given the current inflation factor.\\n     */\\n    function unitsToValue(uint256 units) public view returns (uint256) {\\n        FixidityLib.Fraction memory updatedInflationFactor;\\n\\n        (updatedInflationFactor, ) = getUpdatedInflationFactor();\\n\\n        // We're ok using FixidityLib.divide here because updatedInflationFactor is\\n        // not going to surpass maxFixedDivisor any time soon.\\n        // Quick upper-bound estimation: if annual inflation were 5% (an order of\\n        // magnitude more than the initial proposal of 0.5%), in 500 years, the\\n        // inflation factor would be on the order of 10**10, which is still a safe\\n        // divisor.\\n        return FixidityLib.newFixed(units).divide(updatedInflationFactor).fromFixed();\\n    }\\n\\n    /**\\n     * @notice Returns the units for a given value given the current inflation factor.\\n     * @param inflationFactor The current inflation factor.\\n     * @param value The value to convert to units.\\n     * @return The units corresponding to `value` given the current inflation factor.\\n     * @dev We assume any function calling this will have updated the inflation factor.\\n     */\\n    function _valueToUnits(FixidityLib.Fraction memory inflationFactor, uint256 value) private pure returns (uint256) {\\n        return inflationFactor.multiply(FixidityLib.newFixed(value)).fromFixed();\\n    }\\n\\n    /**\\n     * @notice Computes the up-to-date inflation factor.\\n     * @return Current inflation factor.\\n     * @return Last time when the returned inflation factor was updated.\\n     */\\n    function getUpdatedInflationFactor() private view returns (FixidityLib.Fraction memory, uint256) {\\n        /* solhint-disable not-rely-on-time */\\n        if (now < inflationState.factorLastUpdated.add(inflationState.updatePeriod)) {\\n            return (inflationState.factor, inflationState.factorLastUpdated);\\n        }\\n\\n        uint256 numerator;\\n        uint256 denominator;\\n\\n        // TODO: handle retroactive updates given decreases to updatePeriod\\n        uint256 timesToApplyInflation = now.sub(inflationState.factorLastUpdated).div(inflationState.updatePeriod);\\n\\n        (numerator, denominator) = fractionMulExp(\\n            inflationState.factor.unwrap(),\\n            FixidityLib.fixed1().unwrap(),\\n            inflationState.rate.unwrap(),\\n            FixidityLib.fixed1().unwrap(),\\n            timesToApplyInflation,\\n            decimals_\\n        );\\n\\n        // This should never happen. If something went wrong updating the\\n        // inflation factor, keep the previous factor\\n        if (numerator == 0 || denominator == 0) {\\n            return (inflationState.factor, inflationState.factorLastUpdated);\\n        }\\n\\n        FixidityLib.Fraction memory currentInflationFactor = FixidityLib.wrap(numerator).divide(\\n            FixidityLib.wrap(denominator)\\n        );\\n        uint256 lastUpdated = inflationState.factorLastUpdated.add(\\n            inflationState.updatePeriod.mul(timesToApplyInflation)\\n        );\\n\\n        return (currentInflationFactor, lastUpdated);\\n        /* solhint-enable not-rely-on-time */\\n    }\\n\\n    /**\\n     * @notice Transfers `value` from `msg.sender` to `to`\\n     * @param to The address to transfer to.\\n     * @param value The amount to be transferred.\\n     */\\n    // solhint-disable-next-line no-simple-event-func-name\\n    function transfer(address to, uint256 value) public updateInflationFactor onlyWhenNotFrozen returns (bool) {\\n        return _transfer(to, value);\\n    }\\n\\n    /**\\n     * @notice Transfers StableToken from one address to another\\n     * @param to The address to transfer StableToken to.\\n     * @param value The amount of StableToken to be transferred.\\n     */\\n    function _transfer(address to, uint256 value) internal returns (bool) {\\n        require(to != address(0), \\\"transfer attempted to reserved address 0x0\\\");\\n        uint256 units = _valueToUnits(inflationState.factor, value);\\n        require(balances[msg.sender] >= units, \\\"transfer value exceeded balance of sender\\\");\\n        balances[msg.sender] = balances[msg.sender].sub(units);\\n        balances[to] = balances[to].add(units);\\n        emit Transfer(msg.sender, to, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Reserve balance for making payments for gas in this StableToken currency.\\n     * @param from The account to reserve balance from\\n     * @param value The amount of balance to reserve\\n     * @dev Note that this function is called by the protocol when paying for tx fees in this\\n     * currency. After the tx is executed, gas is refunded to the sender and credited to the\\n     * various tx fee recipients via a call to `creditGasFees`. Note too that the events emitted\\n     * by `creditGasFees` reflect the *net* gas fee payments for the transaction.\\n     */\\n    function debitGasFees(address from, uint256 value) external onlyVm onlyWhenNotFrozen updateInflationFactor {\\n        uint256 units = _valueToUnits(inflationState.factor, value);\\n        balances[from] = balances[from].sub(units);\\n        totalSupply_ = totalSupply_.sub(units);\\n    }\\n\\n    /**\\n     * @notice Alternative function to credit balance after making payments\\n     * for gas in this StableToken currency.\\n     * @param from The account to debit balance from\\n     * @param feeRecipient Coinbase address\\n     * @param gatewayFeeRecipient Gateway address\\n     * @param communityFund Community fund address\\n     * @param tipTxFee Coinbase fee\\n     * @param baseTxFee Community fund fee\\n     * @param gatewayFee Gateway fee\\n     * @dev Note that this function is called by the protocol when paying for tx fees in this\\n     * currency. Before the tx is executed, gas is debited from the sender via a call to\\n     * `debitGasFees`. Note too that the events emitted by `creditGasFees` reflect the *net* gas fee\\n     * payments for the transaction.\\n     */\\n    function creditGasFees(\\n        address from,\\n        address feeRecipient,\\n        address gatewayFeeRecipient,\\n        address communityFund,\\n        uint256 refund,\\n        uint256 tipTxFee,\\n        uint256 gatewayFee,\\n        uint256 baseTxFee\\n    ) external onlyVm onlyWhenNotFrozen {\\n        uint256 units = _valueToUnits(inflationState.factor, refund);\\n        balances[from] = balances[from].add(units);\\n\\n        units = units.add(_creditGas(from, communityFund, baseTxFee));\\n        units = units.add(_creditGas(from, feeRecipient, tipTxFee));\\n        units = units.add(_creditGas(from, gatewayFeeRecipient, gatewayFee));\\n        totalSupply_ = totalSupply_.add(units);\\n    }\\n\\n    function _creditGas(\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal returns (uint256) {\\n        if (to == address(0)) {\\n            return 0;\\n        }\\n        uint256 units = _valueToUnits(inflationState.factor, value);\\n        balances[to] = balances[to].add(units);\\n        emit Transfer(from, to, value);\\n        return units;\\n    }\\n}\\n\",\"keccak256\":\"0x8af1422000721b7864fea81013791c6be672a3f3c92e67eb3f40134216eb1040\"},\"project:/lib/mento-core/contracts/StableTokenEUR.sol\":{\"content\":\"pragma solidity ^0.5.13;\\n\\nimport \\\"./StableToken.sol\\\";\\n\\ncontract StableTokenEUR is StableToken {\\n    /**\\n     * @notice Sets initialized == true on implementation contracts.\\n     * @param test Set to true to skip implementation initialization.\\n     */\\n    constructor(bool test) public StableToken(test) {}\\n\\n    /**\\n     * @notice Returns the storage, major, minor, and patch version of the contract.\\n     * @dev This function is overloaded to maintain a distinct version from StableToken.sol.\\n     * @return Storage version of the contract.\\n     * @return Major version of the contract.\\n     * @return Minor version of the contract.\\n     * @return Patch version of the contract.\\n     */\\n    function getVersionNumber()\\n        external\\n        pure\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256\\n        )\\n    {\\n        return (1, 1, 0, 1);\\n    }\\n}\\n\",\"keccak256\":\"0x9615ba3f0fd8e8bba5ac3ae7673ac79b98979d366b937e699303d4204570580f\"},\"project:/lib/mento-core/contracts/common/CalledByVm.sol\":{\"content\":\"pragma solidity ^0.5.13;\\n\\ncontract CalledByVm {\\n    modifier onlyVm() {\\n        require(msg.sender == address(0), \\\"Only VM can call\\\");\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0x014e90fdb1d94c82805dbe3304da05d48561ce99284ce8103a54a9784a2b52e6\"},\"project:/lib/mento-core/contracts/common/FixidityLib.sol\":{\"content\":\"pragma solidity ^0.5.13;\\n\\n/**\\n * @title FixidityLib\\n * @author Gadi Guy, Alberto Cuesta Canada\\n * @notice This library provides fixed point arithmetic with protection against\\n * overflow.\\n * All operations are done with uint256 and the operands must have been created\\n * with any of the newFrom* functions, which shift the comma digits() to the\\n * right and check for limits, or with wrap() which expects a number already\\n * in the internal representation of a fraction.\\n * When using this library be sure to use maxNewFixed() as the upper limit for\\n * creation of fixed point numbers.\\n * @dev All contained functions are pure and thus marked internal to be inlined\\n * on consuming contracts at compile time for gas efficiency.\\n */\\nlibrary FixidityLib {\\n    struct Fraction {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @notice Number of positions that the comma is shifted to the right.\\n     */\\n    function digits() internal pure returns (uint8) {\\n        return 24;\\n    }\\n\\n    uint256 private constant FIXED1_UINT = 1000000000000000000000000;\\n\\n    /**\\n     * @notice This is 1 in the fixed point units used in this library.\\n     * @dev Test fixed1() equals 10^digits()\\n     * Hardcoded to 24 digits.\\n     */\\n    function fixed1() internal pure returns (Fraction memory) {\\n        return Fraction(FIXED1_UINT);\\n    }\\n\\n    /**\\n     * @notice Wrap a uint256 that represents a 24-decimal fraction in a Fraction\\n     * struct.\\n     * @param x Number that already represents a 24-decimal fraction.\\n     * @return A Fraction struct with contents x.\\n     */\\n    function wrap(uint256 x) internal pure returns (Fraction memory) {\\n        return Fraction(x);\\n    }\\n\\n    /**\\n     * @notice Unwraps the uint256 inside of a Fraction struct.\\n     */\\n    function unwrap(Fraction memory x) internal pure returns (uint256) {\\n        return x.value;\\n    }\\n\\n    /**\\n     * @notice The amount of decimals lost on each multiplication operand.\\n     * @dev Test mulPrecision() equals sqrt(fixed1)\\n     */\\n    function mulPrecision() internal pure returns (uint256) {\\n        return 1000000000000;\\n    }\\n\\n    /**\\n     * @notice Maximum value that can be converted to fixed point. Optimize for deployment.\\n     * @dev\\n     * Test maxNewFixed() equals maxUint256() / fixed1()\\n     */\\n    function maxNewFixed() internal pure returns (uint256) {\\n        return 115792089237316195423570985008687907853269984665640564;\\n    }\\n\\n    /**\\n     * @notice Converts a uint256 to fixed point Fraction\\n     * @dev Test newFixed(0) returns 0\\n     * Test newFixed(1) returns fixed1()\\n     * Test newFixed(maxNewFixed()) returns maxNewFixed() * fixed1()\\n     * Test newFixed(maxNewFixed()+1) fails\\n     */\\n    function newFixed(uint256 x) internal pure returns (Fraction memory) {\\n        require(x <= maxNewFixed(), \\\"can't create fixidity number larger than maxNewFixed()\\\");\\n        return Fraction(x * FIXED1_UINT);\\n    }\\n\\n    /**\\n     * @notice Converts a uint256 in the fixed point representation of this\\n     * library to a non decimal. All decimal digits will be truncated.\\n     */\\n    function fromFixed(Fraction memory x) internal pure returns (uint256) {\\n        return x.value / FIXED1_UINT;\\n    }\\n\\n    /**\\n     * @notice Converts two uint256 representing a fraction to fixed point units,\\n     * equivalent to multiplying dividend and divisor by 10^digits().\\n     * @param numerator numerator must be <= maxNewFixed()\\n     * @param denominator denominator must be <= maxNewFixed() and denominator can't be 0\\n     * @dev\\n     * Test newFixedFraction(1,0) fails\\n     * Test newFixedFraction(0,1) returns 0\\n     * Test newFixedFraction(1,1) returns fixed1()\\n     * Test newFixedFraction(1,fixed1()) returns 1\\n     */\\n    function newFixedFraction(uint256 numerator, uint256 denominator) internal pure returns (Fraction memory) {\\n        Fraction memory convertedNumerator = newFixed(numerator);\\n        Fraction memory convertedDenominator = newFixed(denominator);\\n        return divide(convertedNumerator, convertedDenominator);\\n    }\\n\\n    /**\\n     * @notice Returns the integer part of a fixed point number.\\n     * @dev\\n     * Test integer(0) returns 0\\n     * Test integer(fixed1()) returns fixed1()\\n     * Test integer(newFixed(maxNewFixed())) returns maxNewFixed()*fixed1()\\n     */\\n    function integer(Fraction memory x) internal pure returns (Fraction memory) {\\n        return Fraction((x.value / FIXED1_UINT) * FIXED1_UINT); // Can't overflow\\n    }\\n\\n    /**\\n     * @notice Returns the fractional part of a fixed point number.\\n     * In the case of a negative number the fractional is also negative.\\n     * @dev\\n     * Test fractional(0) returns 0\\n     * Test fractional(fixed1()) returns 0\\n     * Test fractional(fixed1()-1) returns 10^24-1\\n     */\\n    function fractional(Fraction memory x) internal pure returns (Fraction memory) {\\n        return Fraction(x.value - (x.value / FIXED1_UINT) * FIXED1_UINT); // Can't overflow\\n    }\\n\\n    /**\\n     * @notice x+y.\\n     * @dev The maximum value that can be safely used as an addition operator is defined as\\n     * maxFixedAdd = maxUint256()-1 / 2, or\\n     * 57896044618658097711785492504343953926634992332820282019728792003956564819967.\\n     * Test add(maxFixedAdd,maxFixedAdd) equals maxFixedAdd + maxFixedAdd\\n     * Test add(maxFixedAdd+1,maxFixedAdd+1) throws\\n     */\\n    function add(Fraction memory x, Fraction memory y) internal pure returns (Fraction memory) {\\n        uint256 z = x.value + y.value;\\n        require(z >= x.value, \\\"add overflow detected\\\");\\n        return Fraction(z);\\n    }\\n\\n    /**\\n     * @notice x-y.\\n     * @dev\\n     * Test subtract(6, 10) fails\\n     */\\n    function subtract(Fraction memory x, Fraction memory y) internal pure returns (Fraction memory) {\\n        require(x.value >= y.value, \\\"substraction underflow detected\\\");\\n        return Fraction(x.value - y.value);\\n    }\\n\\n    /**\\n     * @notice x*y. If any of the operators is higher than the max multiplier value it\\n     * might overflow.\\n     * @dev The maximum value that can be safely used as a multiplication operator\\n     * (maxFixedMul) is calculated as sqrt(maxUint256()*fixed1()),\\n     * or 340282366920938463463374607431768211455999999999999\\n     * Test multiply(0,0) returns 0\\n     * Test multiply(maxFixedMul,0) returns 0\\n     * Test multiply(0,maxFixedMul) returns 0\\n     * Test multiply(fixed1()/mulPrecision(),fixed1()*mulPrecision()) returns fixed1()\\n     * Test multiply(maxFixedMul,maxFixedMul) is around maxUint256()\\n     * Test multiply(maxFixedMul+1,maxFixedMul+1) fails\\n     */\\n    function multiply(Fraction memory x, Fraction memory y) internal pure returns (Fraction memory) {\\n        if (x.value == 0 || y.value == 0) return Fraction(0);\\n        if (y.value == FIXED1_UINT) return x;\\n        if (x.value == FIXED1_UINT) return y;\\n\\n        // Separate into integer and fractional parts\\n        // x = x1 + x2, y = y1 + y2\\n        uint256 x1 = integer(x).value / FIXED1_UINT;\\n        uint256 x2 = fractional(x).value;\\n        uint256 y1 = integer(y).value / FIXED1_UINT;\\n        uint256 y2 = fractional(y).value;\\n\\n        // (x1 + x2) * (y1 + y2) = (x1 * y1) + (x1 * y2) + (x2 * y1) + (x2 * y2)\\n        uint256 x1y1 = x1 * y1;\\n        if (x1 != 0) require(x1y1 / x1 == y1, \\\"overflow x1y1 detected\\\");\\n\\n        // x1y1 needs to be multiplied back by fixed1\\n        // solium-disable-next-line mixedcase\\n        uint256 fixed_x1y1 = x1y1 * FIXED1_UINT;\\n        if (x1y1 != 0) require(fixed_x1y1 / x1y1 == FIXED1_UINT, \\\"overflow x1y1 * fixed1 detected\\\");\\n        x1y1 = fixed_x1y1;\\n\\n        uint256 x2y1 = x2 * y1;\\n        if (x2 != 0) require(x2y1 / x2 == y1, \\\"overflow x2y1 detected\\\");\\n\\n        uint256 x1y2 = x1 * y2;\\n        if (x1 != 0) require(x1y2 / x1 == y2, \\\"overflow x1y2 detected\\\");\\n\\n        x2 = x2 / mulPrecision();\\n        y2 = y2 / mulPrecision();\\n        uint256 x2y2 = x2 * y2;\\n        if (x2 != 0) require(x2y2 / x2 == y2, \\\"overflow x2y2 detected\\\");\\n\\n        // result = fixed1() * x1 * y1 + x1 * y2 + x2 * y1 + x2 * y2 / fixed1();\\n        Fraction memory result = Fraction(x1y1);\\n        result = add(result, Fraction(x2y1)); // Add checks for overflow\\n        result = add(result, Fraction(x1y2)); // Add checks for overflow\\n        result = add(result, Fraction(x2y2)); // Add checks for overflow\\n        return result;\\n    }\\n\\n    /**\\n     * @notice 1/x\\n     * @dev\\n     * Test reciprocal(0) fails\\n     * Test reciprocal(fixed1()) returns fixed1()\\n     * Test reciprocal(fixed1()*fixed1()) returns 1 // Testing how the fractional is truncated\\n     * Test reciprocal(1+fixed1()*fixed1()) returns 0 // Testing how the fractional is truncated\\n     * Test reciprocal(newFixedFraction(1, 1e24)) returns newFixed(1e24)\\n     */\\n    function reciprocal(Fraction memory x) internal pure returns (Fraction memory) {\\n        require(x.value != 0, \\\"can't call reciprocal(0)\\\");\\n        return Fraction((FIXED1_UINT * FIXED1_UINT) / x.value); // Can't overflow\\n    }\\n\\n    /**\\n     * @notice x/y. If the dividend is higher than the max dividend value, it\\n     * might overflow. You can use multiply(x,reciprocal(y)) instead.\\n     * @dev The maximum value that can be safely used as a dividend (maxNewFixed) is defined as\\n     * divide(maxNewFixed,newFixedFraction(1,fixed1())) is around maxUint256().\\n     * This yields the value 115792089237316195423570985008687907853269984665640564.\\n     * Test maxNewFixed equals maxUint256()/fixed1()\\n     * Test divide(maxNewFixed,1) equals maxNewFixed*(fixed1)\\n     * Test divide(maxNewFixed+1,multiply(mulPrecision(),mulPrecision())) throws\\n     * Test divide(fixed1(),0) fails\\n     * Test divide(maxNewFixed,1) = maxNewFixed*(10^digits())\\n     * Test divide(maxNewFixed+1,1) throws\\n     */\\n    function divide(Fraction memory x, Fraction memory y) internal pure returns (Fraction memory) {\\n        require(y.value != 0, \\\"can't divide by 0\\\");\\n        uint256 X = x.value * FIXED1_UINT;\\n        require(X / FIXED1_UINT == x.value, \\\"overflow at divide\\\");\\n        return Fraction(X / y.value);\\n    }\\n\\n    /**\\n     * @notice x > y\\n     */\\n    function gt(Fraction memory x, Fraction memory y) internal pure returns (bool) {\\n        return x.value > y.value;\\n    }\\n\\n    /**\\n     * @notice x >= y\\n     */\\n    function gte(Fraction memory x, Fraction memory y) internal pure returns (bool) {\\n        return x.value >= y.value;\\n    }\\n\\n    /**\\n     * @notice x < y\\n     */\\n    function lt(Fraction memory x, Fraction memory y) internal pure returns (bool) {\\n        return x.value < y.value;\\n    }\\n\\n    /**\\n     * @notice x <= y\\n     */\\n    function lte(Fraction memory x, Fraction memory y) internal pure returns (bool) {\\n        return x.value <= y.value;\\n    }\\n\\n    /**\\n     * @notice x == y\\n     */\\n    function equals(Fraction memory x, Fraction memory y) internal pure returns (bool) {\\n        return x.value == y.value;\\n    }\\n\\n    /**\\n     * @notice x <= 1\\n     */\\n    function isProperFraction(Fraction memory x) internal pure returns (bool) {\\n        return lte(x, fixed1());\\n    }\\n}\\n\",\"keccak256\":\"0x242f5ad451047a899fec403f798c8477ac6c6c7c637a9c00b82c909aaa0ebc58\"},\"project:/lib/mento-core/contracts/common/Freezable.sol\":{\"content\":\"pragma solidity ^0.5.13;\\n\\nimport \\\"./UsingRegistry.sol\\\";\\n\\ncontract Freezable is UsingRegistry {\\n    // onlyWhenNotFrozen functions can only be called when `frozen` is false, otherwise they will\\n    // revert.\\n    modifier onlyWhenNotFrozen() {\\n        require(!getFreezer().isFrozen(address(this)), \\\"can't call when contract is frozen\\\");\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0xa6987039438d2e49bc096edb017fd84b5d32a6f13b7f4589e3a1155a9387ab1a\"},\"project:/lib/mento-core/contracts/common/Initializable.sol\":{\"content\":\"pragma solidity ^0.5.13;\\n\\ncontract Initializable {\\n    bool public initialized;\\n\\n    constructor(bool testingDeployment) public {\\n        if (!testingDeployment) {\\n            initialized = true;\\n        }\\n    }\\n\\n    modifier initializer() {\\n        require(!initialized, \\\"contract already initialized\\\");\\n        initialized = true;\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0xb0ecb1e982724eea55f4fff68ae425db6a5cb34e7a76ebefc6c30ddf858f80d6\"},\"project:/lib/mento-core/contracts/common/UsingPrecompiles.sol\":{\"content\":\"pragma solidity ^0.5.13;\\n\\nimport \\\"openzeppelin-solidity/contracts/math/SafeMath.sol\\\";\\nimport \\\"./interfaces/ICeloVersionedContract.sol\\\";\\n\\ncontract UsingPrecompiles {\\n    using SafeMath for uint256;\\n\\n    address constant TRANSFER = address(0xff - 2);\\n    address constant FRACTION_MUL = address(0xff - 3);\\n    address constant PROOF_OF_POSSESSION = address(0xff - 4);\\n    address constant GET_VALIDATOR = address(0xff - 5);\\n    address constant NUMBER_VALIDATORS = address(0xff - 6);\\n    address constant EPOCH_SIZE = address(0xff - 7);\\n    address constant BLOCK_NUMBER_FROM_HEADER = address(0xff - 8);\\n    address constant HASH_HEADER = address(0xff - 9);\\n    address constant GET_PARENT_SEAL_BITMAP = address(0xff - 10);\\n    address constant GET_VERIFIED_SEAL_BITMAP = address(0xff - 11);\\n\\n    /**\\n     * @notice calculate a * b^x for fractions a, b to `decimals` precision\\n     * @param aNumerator Numerator of first fraction\\n     * @param aDenominator Denominator of first fraction\\n     * @param bNumerator Numerator of exponentiated fraction\\n     * @param bDenominator Denominator of exponentiated fraction\\n     * @param exponent exponent to raise b to\\n     * @param _decimals precision\\n     * @return Numerator of the computed quantity (not reduced).\\n     * @return Denominator of the computed quantity (not reduced).\\n     */\\n    function fractionMulExp(\\n        uint256 aNumerator,\\n        uint256 aDenominator,\\n        uint256 bNumerator,\\n        uint256 bDenominator,\\n        uint256 exponent,\\n        uint256 _decimals\\n    ) public view returns (uint256, uint256) {\\n        require(aDenominator != 0 && bDenominator != 0, \\\"a denominator is zero\\\");\\n        uint256 returnNumerator;\\n        uint256 returnDenominator;\\n        bool success;\\n        bytes memory out;\\n        (success, out) = FRACTION_MUL.staticcall(\\n            abi.encodePacked(aNumerator, aDenominator, bNumerator, bDenominator, exponent, _decimals)\\n        );\\n        require(success, \\\"error calling fractionMulExp precompile\\\");\\n        returnNumerator = getUint256FromBytes(out, 0);\\n        returnDenominator = getUint256FromBytes(out, 32);\\n        return (returnNumerator, returnDenominator);\\n    }\\n\\n    /**\\n     * @notice Returns the current epoch size in blocks.\\n     * @return The current epoch size in blocks.\\n     */\\n    function getEpochSize() public view returns (uint256) {\\n        bytes memory out;\\n        bool success;\\n        (success, out) = EPOCH_SIZE.staticcall(abi.encodePacked());\\n        require(success, \\\"error calling getEpochSize precompile\\\");\\n        return getUint256FromBytes(out, 0);\\n    }\\n\\n    /**\\n     * @notice Returns the epoch number at a block.\\n     * @param blockNumber Block number where epoch number is calculated.\\n     * @return Epoch number.\\n     */\\n    function getEpochNumberOfBlock(uint256 blockNumber) public view returns (uint256) {\\n        return epochNumberOfBlock(blockNumber, getEpochSize());\\n    }\\n\\n    /**\\n     * @notice Returns the epoch number at a block.\\n     * @return Current epoch number.\\n     */\\n    function getEpochNumber() public view returns (uint256) {\\n        return getEpochNumberOfBlock(block.number);\\n    }\\n\\n    /**\\n     * @notice Returns the epoch number at a block.\\n     * @param blockNumber Block number where epoch number is calculated.\\n     * @param epochSize The epoch size in blocks.\\n     * @return Epoch number.\\n     */\\n    function epochNumberOfBlock(uint256 blockNumber, uint256 epochSize) internal pure returns (uint256) {\\n        // Follows GetEpochNumber from celo-blockchain/blob/master/consensus/istanbul/utils.go\\n        uint256 epochNumber = blockNumber / epochSize;\\n        if (blockNumber % epochSize == 0) {\\n            return epochNumber;\\n        } else {\\n            return epochNumber.add(1);\\n        }\\n    }\\n\\n    /**\\n     * @notice Gets a validator address from the current validator set.\\n     * @param index Index of requested validator in the validator set.\\n     * @return Address of validator at the requested index.\\n     */\\n    function validatorSignerAddressFromCurrentSet(uint256 index) public view returns (address) {\\n        bytes memory out;\\n        bool success;\\n        (success, out) = GET_VALIDATOR.staticcall(abi.encodePacked(index, uint256(block.number)));\\n        require(success, \\\"error calling validatorSignerAddressFromCurrentSet precompile\\\");\\n        return address(getUint256FromBytes(out, 0));\\n    }\\n\\n    /**\\n     * @notice Gets a validator address from the validator set at the given block number.\\n     * @param index Index of requested validator in the validator set.\\n     * @param blockNumber Block number to retrieve the validator set from.\\n     * @return Address of validator at the requested index.\\n     */\\n    function validatorSignerAddressFromSet(uint256 index, uint256 blockNumber) public view returns (address) {\\n        bytes memory out;\\n        bool success;\\n        (success, out) = GET_VALIDATOR.staticcall(abi.encodePacked(index, blockNumber));\\n        require(success, \\\"error calling validatorSignerAddressFromSet precompile\\\");\\n        return address(getUint256FromBytes(out, 0));\\n    }\\n\\n    /**\\n     * @notice Gets the size of the current elected validator set.\\n     * @return Size of the current elected validator set.\\n     */\\n    function numberValidatorsInCurrentSet() public view returns (uint256) {\\n        bytes memory out;\\n        bool success;\\n        (success, out) = NUMBER_VALIDATORS.staticcall(abi.encodePacked(uint256(block.number)));\\n        require(success, \\\"error calling numberValidatorsInCurrentSet precompile\\\");\\n        return getUint256FromBytes(out, 0);\\n    }\\n\\n    /**\\n     * @notice Gets the size of the validator set that must sign the given block number.\\n     * @param blockNumber Block number to retrieve the validator set from.\\n     * @return Size of the validator set.\\n     */\\n    function numberValidatorsInSet(uint256 blockNumber) public view returns (uint256) {\\n        bytes memory out;\\n        bool success;\\n        (success, out) = NUMBER_VALIDATORS.staticcall(abi.encodePacked(blockNumber));\\n        require(success, \\\"error calling numberValidatorsInSet precompile\\\");\\n        return getUint256FromBytes(out, 0);\\n    }\\n\\n    /**\\n     * @notice Checks a BLS proof of possession.\\n     * @param sender The address signed by the BLS key to generate the proof of possession.\\n     * @param blsKey The BLS public key that the validator is using for consensus, should pass proof\\n     *   of possession. 48 bytes.\\n     * @param blsPop The BLS public key proof-of-possession, which consists of a signature on the\\n     *   account address. 96 bytes.\\n     * @return True upon success.\\n     */\\n    function checkProofOfPossession(\\n        address sender,\\n        bytes memory blsKey,\\n        bytes memory blsPop\\n    ) public view returns (bool) {\\n        bool success;\\n        (success, ) = PROOF_OF_POSSESSION.staticcall(abi.encodePacked(sender, blsKey, blsPop));\\n        return success;\\n    }\\n\\n    /**\\n     * @notice Parses block number out of header.\\n     * @param header RLP encoded header\\n     * @return Block number.\\n     */\\n    function getBlockNumberFromHeader(bytes memory header) public view returns (uint256) {\\n        bytes memory out;\\n        bool success;\\n        (success, out) = BLOCK_NUMBER_FROM_HEADER.staticcall(abi.encodePacked(header));\\n        require(success, \\\"error calling getBlockNumberFromHeader precompile\\\");\\n        return getUint256FromBytes(out, 0);\\n    }\\n\\n    /**\\n     * @notice Computes hash of header.\\n     * @param header RLP encoded header\\n     * @return Header hash.\\n     */\\n    function hashHeader(bytes memory header) public view returns (bytes32) {\\n        bytes memory out;\\n        bool success;\\n        (success, out) = HASH_HEADER.staticcall(abi.encodePacked(header));\\n        require(success, \\\"error calling hashHeader precompile\\\");\\n        return getBytes32FromBytes(out, 0);\\n    }\\n\\n    /**\\n     * @notice Gets the parent seal bitmap from the header at the given block number.\\n     * @param blockNumber Block number to retrieve. Must be within 4 epochs of the current number.\\n     * @return Bitmap parent seal with set bits at indices corresponding to signing validators.\\n     */\\n    function getParentSealBitmap(uint256 blockNumber) public view returns (bytes32) {\\n        bytes memory out;\\n        bool success;\\n        (success, out) = GET_PARENT_SEAL_BITMAP.staticcall(abi.encodePacked(blockNumber));\\n        require(success, \\\"error calling getParentSealBitmap precompile\\\");\\n        return getBytes32FromBytes(out, 0);\\n    }\\n\\n    /**\\n     * @notice Verifies the BLS signature on the header and returns the seal bitmap.\\n     * The validator set used for verification is retrieved based on the parent hash field of the\\n     * header.  If the parent hash is not in the blockchain, verification fails.\\n     * @param header RLP encoded header\\n     * @return Bitmap parent seal with set bits at indices correspoinding to signing validators.\\n     */\\n    function getVerifiedSealBitmapFromHeader(bytes memory header) public view returns (bytes32) {\\n        bytes memory out;\\n        bool success;\\n        (success, out) = GET_VERIFIED_SEAL_BITMAP.staticcall(abi.encodePacked(header));\\n        require(success, \\\"error calling getVerifiedSealBitmapFromHeader precompile\\\");\\n        return getBytes32FromBytes(out, 0);\\n    }\\n\\n    /**\\n     * @notice Converts bytes to uint256.\\n     * @param bs byte[] data\\n     * @param start offset into byte data to convert\\n     * @return uint256 data\\n     */\\n    function getUint256FromBytes(bytes memory bs, uint256 start) internal pure returns (uint256) {\\n        return uint256(getBytes32FromBytes(bs, start));\\n    }\\n\\n    /**\\n     * @notice Converts bytes to bytes32.\\n     * @param bs byte[] data\\n     * @param start offset into byte data to convert\\n     * @return bytes32 data\\n     */\\n    function getBytes32FromBytes(bytes memory bs, uint256 start) internal pure returns (bytes32) {\\n        require(bs.length >= start.add(32), \\\"slicing out of range\\\");\\n        bytes32 x;\\n        assembly {\\n            x := mload(add(bs, add(start, 32)))\\n        }\\n        return x;\\n    }\\n\\n    /**\\n     * @notice Returns the minimum number of required signers for a given block number.\\n     * @dev Computed in celo-blockchain as int(math.Ceil(float64(2*valSet.Size()) / 3))\\n     */\\n    function minQuorumSize(uint256 blockNumber) public view returns (uint256) {\\n        return numberValidatorsInSet(blockNumber).mul(2).add(2).div(3);\\n    }\\n\\n    /**\\n     * @notice Computes byzantine quorum from current validator set size\\n     * @return Byzantine quorum of validators.\\n     */\\n    function minQuorumSizeInCurrentSet() public view returns (uint256) {\\n        return minQuorumSize(block.number);\\n    }\\n}\\n\",\"keccak256\":\"0x3d5416d990133ed731c807f5689500432870f83561eb2857a8f8414630092107\"},\"project:/lib/mento-core/contracts/common/UsingRegistry.sol\":{\"content\":\"pragma solidity ^0.5.13;\\n\\nimport \\\"openzeppelin-solidity/contracts/ownership/Ownable.sol\\\";\\nimport \\\"openzeppelin-solidity/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport \\\"./interfaces/IFreezer.sol\\\";\\nimport \\\"./interfaces/IRegistry.sol\\\";\\n\\nimport \\\"../interfaces/IExchange.sol\\\";\\nimport \\\"../interfaces/IReserve.sol\\\";\\nimport \\\"../interfaces/ISortedOracles.sol\\\";\\nimport \\\"../interfaces/IStableToken.sol\\\";\\n\\ncontract UsingRegistry is Ownable {\\n    event RegistrySet(address indexed registryAddress);\\n\\n    // solhint-disable state-visibility\\n    bytes32 constant ACCOUNTS_REGISTRY_ID = keccak256(abi.encodePacked(\\\"Accounts\\\"));\\n    bytes32 constant ATTESTATIONS_REGISTRY_ID = keccak256(abi.encodePacked(\\\"Attestations\\\"));\\n    bytes32 constant DOWNTIME_SLASHER_REGISTRY_ID = keccak256(abi.encodePacked(\\\"DowntimeSlasher\\\"));\\n    bytes32 constant DOUBLE_SIGNING_SLASHER_REGISTRY_ID = keccak256(abi.encodePacked(\\\"DoubleSigningSlasher\\\"));\\n    bytes32 constant ELECTION_REGISTRY_ID = keccak256(abi.encodePacked(\\\"Election\\\"));\\n    bytes32 constant EXCHANGE_REGISTRY_ID = keccak256(abi.encodePacked(\\\"Exchange\\\"));\\n    bytes32 constant FEE_CURRENCY_WHITELIST_REGISTRY_ID = keccak256(abi.encodePacked(\\\"FeeCurrencyWhitelist\\\"));\\n    bytes32 constant FREEZER_REGISTRY_ID = keccak256(abi.encodePacked(\\\"Freezer\\\"));\\n    bytes32 constant GOLD_TOKEN_REGISTRY_ID = keccak256(abi.encodePacked(\\\"GoldToken\\\"));\\n    bytes32 constant GOVERNANCE_REGISTRY_ID = keccak256(abi.encodePacked(\\\"Governance\\\"));\\n    bytes32 constant GOVERNANCE_SLASHER_REGISTRY_ID = keccak256(abi.encodePacked(\\\"GovernanceSlasher\\\"));\\n    bytes32 constant LOCKED_GOLD_REGISTRY_ID = keccak256(abi.encodePacked(\\\"LockedGold\\\"));\\n    bytes32 constant RESERVE_REGISTRY_ID = keccak256(abi.encodePacked(\\\"Reserve\\\"));\\n    bytes32 constant RANDOM_REGISTRY_ID = keccak256(abi.encodePacked(\\\"Random\\\"));\\n    bytes32 constant SORTED_ORACLES_REGISTRY_ID = keccak256(abi.encodePacked(\\\"SortedOracles\\\"));\\n    bytes32 constant STABLE_TOKEN_REGISTRY_ID = keccak256(abi.encodePacked(\\\"StableToken\\\"));\\n    bytes32 constant VALIDATORS_REGISTRY_ID = keccak256(abi.encodePacked(\\\"Validators\\\"));\\n    // solhint-enable state-visibility\\n\\n    IRegistry public registry;\\n\\n    modifier onlyRegisteredContract(bytes32 identifierHash) {\\n        require(registry.getAddressForOrDie(identifierHash) == msg.sender, \\\"only registered contract\\\");\\n        _;\\n    }\\n\\n    modifier onlyRegisteredContracts(bytes32[] memory identifierHashes) {\\n        require(registry.isOneOf(identifierHashes, msg.sender), \\\"only registered contracts\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice Updates the address pointing to a Registry contract.\\n     * @param registryAddress The address of a registry contract for routing to other contracts.\\n     */\\n    function setRegistry(address registryAddress) public onlyOwner {\\n        require(registryAddress != address(0), \\\"Cannot register the null address\\\");\\n        registry = IRegistry(registryAddress);\\n        emit RegistrySet(registryAddress);\\n    }\\n\\n    function getExchange() internal view returns (IExchange) {\\n        return IExchange(registry.getAddressForOrDie(EXCHANGE_REGISTRY_ID));\\n    }\\n\\n    function getFreezer() internal view returns (IFreezer) {\\n        return IFreezer(registry.getAddressForOrDie(FREEZER_REGISTRY_ID));\\n    }\\n\\n    function getGoldToken() internal view returns (IERC20) {\\n        return IERC20(registry.getAddressForOrDie(GOLD_TOKEN_REGISTRY_ID));\\n    }\\n\\n    function getReserve() internal view returns (IReserve) {\\n        return IReserve(registry.getAddressForOrDie(RESERVE_REGISTRY_ID));\\n    }\\n\\n    function getSortedOracles() internal view returns (ISortedOracles) {\\n        return ISortedOracles(registry.getAddressForOrDie(SORTED_ORACLES_REGISTRY_ID));\\n    }\\n\\n    function getStableToken() internal view returns (IStableToken) {\\n        return IStableToken(registry.getAddressForOrDie(STABLE_TOKEN_REGISTRY_ID));\\n    }\\n}\\n\",\"keccak256\":\"0x08129f15c2b5641a361125c94ec8e575f222364f4f8fcb1a326016b27e15274e\"},\"project:/lib/mento-core/contracts/common/interfaces/ICeloVersionedContract.sol\":{\"content\":\"pragma solidity ^0.5.13;\\n\\ninterface ICeloVersionedContract {\\n    /**\\n     * @notice Returns the storage, major, minor, and patch version of the contract.\\n     * @return Storage version of the contract.\\n     * @return Major version of the contract.\\n     * @return Minor version of the contract.\\n     * @return Patch version of the contract.\\n     */\\n    function getVersionNumber()\\n        external\\n        pure\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256\\n        );\\n}\\n\",\"keccak256\":\"0xcd0ec818f34364d442602c03b76a9068d994d7a44c75e7abdfc879df48a54527\"},\"project:/lib/mento-core/contracts/common/interfaces/IFreezer.sol\":{\"content\":\"pragma solidity ^0.5.13;\\n\\ninterface IFreezer {\\n    function isFrozen(address) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xd54bab5f4df0471c112b7274db5e4321cda98f9bd894afff16a9e8e9ef58daf4\"},\"project:/lib/mento-core/contracts/common/interfaces/IRegistry.sol\":{\"content\":\"pragma solidity ^0.5.13;\\n\\ninterface IRegistry {\\n    function setAddressFor(string calldata, address) external;\\n\\n    function getAddressForOrDie(bytes32) external view returns (address);\\n\\n    function getAddressFor(bytes32) external view returns (address);\\n\\n    function getAddressForStringOrDie(string calldata identifier) external view returns (address);\\n\\n    function getAddressForString(string calldata identifier) external view returns (address);\\n\\n    function isOneOf(bytes32[] calldata, address) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x6349f43583970ac9ead075cc13f2716275ca8d8883246e6a58ab74a8f8560dd4\"},\"project:/lib/mento-core/contracts/interfaces/ICeloToken.sol\":{\"content\":\"pragma solidity ^0.5.13;\\n\\n/**\\n * @title This interface describes the non- ERC20 shared interface for all Celo Tokens, and\\n * in the absence of interface inheritance is intended as a companion to IERC20.sol.\\n */\\ninterface ICeloToken {\\n    function transferWithComment(\\n        address,\\n        uint256,\\n        string calldata\\n    ) external returns (bool);\\n\\n    function name() external view returns (string memory);\\n\\n    function symbol() external view returns (string memory);\\n\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x72c43fa2f97d697eaf3a91d78fbb9021fb6c3324daf530ec223b75d26d65632a\"},\"project:/lib/mento-core/contracts/interfaces/IExchange.sol\":{\"content\":\"pragma solidity ^0.5.13;\\n\\ninterface IExchange {\\n    function buy(\\n        uint256,\\n        uint256,\\n        bool\\n    ) external returns (uint256);\\n\\n    function sell(\\n        uint256,\\n        uint256,\\n        bool\\n    ) external returns (uint256);\\n\\n    function exchange(\\n        uint256,\\n        uint256,\\n        bool\\n    ) external returns (uint256);\\n\\n    function setUpdateFrequency(uint256) external;\\n\\n    function getBuyTokenAmount(uint256, bool) external view returns (uint256);\\n\\n    function getSellTokenAmount(uint256, bool) external view returns (uint256);\\n\\n    function getBuyAndSellBuckets(bool) external view returns (uint256, uint256);\\n}\\n\",\"keccak256\":\"0x320488022d1066ac81797b9e7a3dc303d1c8e9a48597972d4686e00f9554ade9\"},\"project:/lib/mento-core/contracts/interfaces/IReserve.sol\":{\"content\":\"pragma solidity ^0.5.13;\\n\\ninterface IReserve {\\n    function setTobinTaxStalenessThreshold(uint256) external;\\n\\n    function addToken(address) external returns (bool);\\n\\n    function removeToken(address, uint256) external returns (bool);\\n\\n    function transferGold(address payable, uint256) external returns (bool);\\n\\n    function transferExchangeGold(address payable, uint256) external returns (bool);\\n\\n    function getReserveGoldBalance() external view returns (uint256);\\n\\n    function getUnfrozenReserveGoldBalance() external view returns (uint256);\\n\\n    function getOrComputeTobinTax() external returns (uint256, uint256);\\n\\n    function getTokens() external view returns (address[] memory);\\n\\n    function getReserveRatio() external view returns (uint256);\\n\\n    function addExchangeSpender(address) external;\\n\\n    function removeExchangeSpender(address, uint256) external;\\n\\n    function addSpender(address) external;\\n\\n    function removeSpender(address) external;\\n}\\n\",\"keccak256\":\"0x9162b458dc21fe7e6cfc5d4722b3db3001b1c54ecdcefa703ff9d902084150b7\"},\"project:/lib/mento-core/contracts/interfaces/ISortedOracles.sol\":{\"content\":\"pragma solidity ^0.5.13;\\n\\ninterface ISortedOracles {\\n    function addOracle(address, address) external;\\n\\n    function removeOracle(\\n        address,\\n        address,\\n        uint256\\n    ) external;\\n\\n    function report(\\n        address,\\n        uint256,\\n        address,\\n        address\\n    ) external;\\n\\n    function removeExpiredReports(address, uint256) external;\\n\\n    function isOldestReportExpired(address token) external view returns (bool, address);\\n\\n    function numRates(address) external view returns (uint256);\\n\\n    function medianRate(address) external view returns (uint256, uint256);\\n\\n    function numTimestamps(address) external view returns (uint256);\\n\\n    function medianTimestamp(address) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x000a938f4229fc5d8115eac3a98117ba87e8ed26d85ddad76be77b90c9dd4451\"},\"project:/lib/mento-core/contracts/interfaces/IStableToken.sol\":{\"content\":\"pragma solidity ^0.5.13;\\n\\n/**\\n * @title This interface describes the functions specific to Celo Stable Tokens, and in the\\n * absence of interface inheritance is intended as a companion to IERC20.sol and ICeloToken.sol.\\n */\\ninterface IStableToken {\\n    function mint(address, uint256) external returns (bool);\\n\\n    function burn(uint256) external returns (bool);\\n\\n    function setInflationParameters(uint256, uint256) external;\\n\\n    function valueToUnits(uint256) external view returns (uint256);\\n\\n    function unitsToValue(uint256) external view returns (uint256);\\n\\n    function getInflationParameters()\\n        external\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256\\n        );\\n\\n    // NOTE: duplicated with IERC20.sol, remove once interface inheritance is supported.\\n    function balanceOf(address) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xcb6440c9b161b26a5b062e6c74d6fd1ed9736f292161c757406a9c39e942d20a\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "",
  "sourceMap": "55:847:15:-;;;255:50;8:9:-1;5:2;;;30:1;27;20:12;5:2;255:50:15;;;;;;;;;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;255:50:15;;;;;;;;;;;;;;;;297:4;3815::13;698:17:3;718:12;:10;;;:12;;:::i;:::-;698:32;;749:9;740:6;;:18;;;;;;;;;;;;;;;;;;806:9;773:43;;802:1;773:43;;;;;;;;;;;;664:159;143:17:23;138:67;;190:4;176:11;;:18;;;;;;;;;;;;;;;;;;138:67;85:126;3771:52:13;255:50:15;55:847;;788:96:0;833:15;867:10;860:17;;788:96;:::o;55:847:15:-;;;;;;;",
  "deployedSourceMap": "55:847:15:-;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;55:847:15;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;12346:83:13;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;80:1;75:3;71:11;64:39;52:2;49:1;45:10;40:15;;8:100;;;12:14;12346:83:13;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8283:306;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;8283:306:13;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;3997:389:28;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;3997:389:28;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;14793:264:13;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;14793:264:13;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;55:23:23;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;13736:105:13;;;:::i;:::-;;;;;;;;;;;;;;;;;;;4547:1389;;;;;;13:3:-1;8;5:12;2:2;;;30:1;27;20:12;2:2;4547:1389:13;;;;;;;;;;21:11:-1;8;5:28;2:2;;;46:1;43;36:12;2:2;4547:1389:13;;35:9:-1;28:4;12:14;8:25;5:40;2:2;;;58:1;55;48:12;2:2;4547:1389:13;;;;;;100:9:-1;95:1;81:12;77:20;67:8;63:35;60:50;39:11;25:12;22:29;11:107;8:2;;;131:1;128;121:12;8:2;4547:1389:13;;;;;;;;;;;;;;21:11:-1;8;5:28;2:2;;;46:1;43;36:12;2:2;4547:1389:13;;35:9:-1;28:4;12:14;8:25;5:40;2:2;;;58:1;55;48:12;2:2;4547:1389:13;;;;;;100:9:-1;95:1;81:12;77:20;67:8;63:35;60:50;39:11;25:12;22:29;11:107;8:2;;;131:1;128;121:12;8:2;4547:1389:13;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;21:11:-1;8;5:28;2:2;;;46:1;43;36:12;2:2;4547:1389:13;;35:9:-1;28:4;12:14;8:25;5:40;2:2;;;58:1;55;48:12;2:2;4547:1389:13;;;;;;101:9:-1;95:2;81:12;77:21;67:8;63:36;60:51;39:11;25:12;22:29;11:108;8:2;;;132:1;129;122:12;8:2;4547:1389:13;;;;;;;;;;;;;;21:11:-1;8;5:28;2:2;;;46:1;43;36:12;2:2;4547:1389:13;;35:9:-1;28:4;12:14;8:25;5:40;2:2;;;58:1;55;48:12;2:2;4547:1389:13;;;;;;101:9:-1;95:2;81:12;77:21;67:8;63:36;60:51;39:11;25:12;22:29;11:108;8:2;;;132:1;129;122:12;8:2;4547:1389:13;;;;;;;;;;;;;;21:11:-1;8;5:28;2:2;;;46:1;43;36:12;2:2;4547:1389:13;;35:9:-1;28:4;12:14;8:25;5:40;2:2;;;58:1;55;48:12;2:2;4547:1389:13;;;;;;100:9:-1;95:1;81:12;77:20;67:8;63:35;60:50;39:11;25:12;22:29;11:107;8:2;;;131:1;128;121:12;8:2;4547:1389:13;;;;;;;;;;;;:::i;:::-;;6097:527;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;6097:527:13;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;11529:750;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;11529:750:13;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;6622:296:28;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;6622:296:28;;;;;;;;;;;;;;;;;;;;;21:11:-1;8;5:28;2:2;;;46:1;43;36:12;2:2;6622:296:28;;35:9:-1;28:4;12:14;8:25;5:40;2:2;;;58:1;55;48:12;2:2;6622:296:28;;;;;;100:9:-1;95:1;81:12;77:20;67:8;63:35;60:50;39:11;25:12;22:29;11:107;8:2;;;131:1;128;121:12;8:2;6622:296:28;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;30:3:-1;22:6;14;1:33;99:1;93:3;85:6;81:16;74:27;137:4;133:9;126:4;121:3;117:14;113:30;106:37;;169:3;161:6;157:16;147:26;;6622:296:28;;;;;;;;;;;;;;;;;21:11:-1;8;5:28;2:2;;;46:1;43;36:12;2:2;6622:296:28;;35:9:-1;28:4;12:14;8:25;5:40;2:2;;;58:1;55;48:12;2:2;6622:296:28;;;;;;100:9:-1;95:1;81:12;77:20;67:8;63:35;60:50;39:11;25:12;22:29;11:107;8:2;;;131:1;128;121:12;8:2;6622:296:28;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;30:3:-1;22:6;14;1:33;99:1;93:3;85:6;81:16;74:27;137:4;133:9;126:4;121:3;117:14;113:30;106:37;;169:3;161:6;157:16;147:26;;6622:296:28;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;12686:83:13;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;6918:427;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;6918:427:13;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;2768:153:28;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;2768:153:28;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;15663:225:13;;;:::i;:::-;;;;;;;;;;;;;;;;;;;8780:441;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;8780:441:13;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;10539:656;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;10539:656:13;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;8920:365:28;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;8920:365:28;;;;;;;;;;21:11:-1;8;5:28;2:2;;;46:1;43;36:12;2:2;8920:365:28;;35:9:-1;28:4;12:14;8:25;5:40;2:2;;;58:1;55;48:12;2:2;8920:365:28;;;;;;100:9:-1;95:1;81:12;77:20;67:8;63:35;60:50;39:11;25:12;22:29;11:107;8:2;;;131:1;128;121:12;8:2;8920:365:28;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;30:3:-1;22:6;14;1:33;99:1;93:3;85:6;81:16;74:27;137:4;133:9;126:4;121:3;117:14;113:30;106:37;;169:3;161:6;157:16;147:26;;8920:365:28;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;691:209:15;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;20846:283:13;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;20846:283:13;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;4704:386:28;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;4704:386:28;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;7540:310;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;7540:310:28;;;;;;;;;;21:11:-1;8;5:28;2:2;;;46:1;43;36:12;2:2;7540:310:28;;35:9:-1;28:4;12:14;8:25;5:40;2:2;;;58:1;55;48:12;2:2;7540:310:28;;;;;;100:9:-1;95:1;81:12;77:20;67:8;63:35;60:50;39:11;25:12;22:29;11:107;8:2;;;131:1;128;121:12;8:2;7540:310:28;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;30:3:-1;22:6;14;1:33;99:1;93:3;85:6;81:16;74:27;137:4;133:9;126:4;121:3;117:14;113:30;106:37;;169:3;161:6;157:16;147:26;;7540:310:28;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;21907:684:13;;;;;;13:3:-1;8;5:12;2:2;;;30:1;27;20:12;2:2;21907:684:13;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;13450:133;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;13450:133:13;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;1684:137:3;;;:::i;:::-;;10565:118:28;;;:::i;:::-;;;;;;;;;;;;;;;;;;;2132:25:29;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;5237:348:28;;;:::i;:::-;;;;;;;;;;;;;;;;;;;7059:351;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;7059:351:28;;;;;;;;;;21:11:-1;8;5:28;2:2;;;46:1;43;36:12;2:2;7059:351:28;;35:9:-1;28:4;12:14;8:25;5:40;2:2;;;58:1;55;48:12;2:2;7059:351:28;;;;;;100:9:-1;95:1;81:12;77:20;67:8;63:35;60:50;39:11;25:12;22:29;11:107;8:2;;;131:1;128;121:12;8:2;7059:351:28;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;30:3:-1;22:6;14;1:33;99:1;93:3;85:6;81:16;74:27;137:4;133:9;126:4;121:3;117:14;113:30;106:37;;169:3;161:6;157:16;147:26;;7059:351:28;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;899:77:3;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;1250:92;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;12498:87:13;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;80:1;75:3;71:11;64:39;52:2;49:1;45:10;40:15;;8:100;;;12:14;12498:87:13;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3032:115:28;;;:::i;:::-;;;;;;;;;;;;;;;;;;;5813:343;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;5813:343:28;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;7639:341:13;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;7639:341:13;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;14008:386;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;19402:151;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;19402:151:13;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;2715:244:29;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;2715:244:29;;;;;;;;;;;;;;;;;;;:::i;:::-;;16143:701:13;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;16143:701:13;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;13065:144;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;13065:144:13;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;2304:288:28;;;:::i;:::-;;;;;;;;;;;;;;;;;;;10104:293:13;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;10104:293:13;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;21:11:-1;8;5:28;2:2;;;46:1;43;36:12;2:2;10104:293:13;;35:9:-1;28:4;12:14;8:25;5:40;2:2;;;58:1;55;48:12;2:2;10104:293:13;;;;;;100:9:-1;95:1;81:12;77:20;67:8;63:35;60:50;39:11;25:12;22:29;11:107;8:2;;;131:1;128;121:12;8:2;10104:293:13;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;10270:153:28;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;10270:153:28;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;1335:841;;;;;;13:3:-1;8;5:12;2:2;;;30:1;27;20:12;2:2;1335:841:28;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;1970:107:3;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;1970:107:3;;;;;;;;;;;;;;;;;;;:::i;:::-;;8153:344:28;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;8153:344:28;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;12346:83:13;12385:13;12417:5;12410:12;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;12346:83;:::o;8283:306::-;8372:4;2634:50;;:::i;:::-;2694:19;2764:27;:25;:27::i;:::-;2724:67;;;;;;;;2821:14;:32;;;2806:11;:47;2802:291;;2893:22;2869:14;:21;;:46;;;;;;;;;;;2964:11;2929:14;:32;;:46;;;;2994:88;3017:30;:14;:21;;:28;;;;;;;;;;;;;;;;;;:30::i;:::-;3049:14;:32;;;2994:88;;;;;;;;;;;;;;;;;;;;;;;;2802:291;8415:1;8396:21;;:7;:21;;;;8388:76;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8505:5;8474:7;:19;8482:10;8474:19;;;;;;;;;;;;;;;:28;8494:7;8474:28;;;;;;;;;;;;;;;:36;;;;8546:7;8525:36;;8534:10;8525:36;;;8555:5;8525:36;;;;;;;;;;;;;;;;;;8578:4;8571:11;;8283:306;;;;;;:::o;3997:389:28:-;4079:7;4098:16;4124:12;411:8;4163:24;;4205:5;4220:12;4188:46;;;;;;;;;;;;;;;;;;;;;49:4:-1;39:7;30;26:21;22:32;13:7;6:49;4188:46:28;;;4163:72;;;;;;;;;;;;;36:153:-1;66:2;61:3;58:11;36:153;;182:3;176:10;171:3;164:23;98:2;93:3;89:12;82:19;;123:2;118:3;114:12;107:19;;148:2;143:3;139:12;132:19;;36:153;;;274:1;267:3;263:2;259:12;254:3;250:22;246:30;315:4;311:9;305:3;299:10;295:26;356:4;350:3;344:10;340:21;389:7;380;377:20;372:3;365:33;3:399;;;4163:72:28;;;;;;;;;;;;;;;;;;;;;;;14:1:-1;21;16:31;;;;75:4;69:11;64:16;;144:4;140:9;133:4;115:16;111:27;107:43;104:1;100:51;94:4;87:65;169:16;166:1;159:27;225:16;222:1;215:4;212:1;208:12;193:49;7:242;;16:31;36:4;31:9;;7:242;;4146:89:28;;;;;;;;4253:7;4245:81;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4351:27;4371:3;4376:1;4351:19;:27::i;:::-;4336:43;;;;3997:389;;;:::o;14793:264:13:-;14853:7;14872:50;;:::i;:::-;14962:27;:25;:27::i;:::-;14933:56;;;;;15006:44;15020:22;15044:5;15006:13;:44::i;:::-;14999:51;;;14793:264;;;:::o;55:23:23:-;;;;;;;;;;;;;:::o;13736:105:13:-;13782:7;13808:26;13821:12;;13808;:26::i;:::-;13801:33;;13736:105;:::o;4547:1389::-;259:11:23;;;;;;;;;;;258:12;250:53;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;327:4;313:11;;:18;;;;;;;;;;;;;;;;;;4972:1:13;4955:13;:18;;4947:69;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5064:1;5034:27;:31;5026:83;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5120:30;5139:10;5120:18;:30::i;:::-;5176:1;5161:12;:16;;;;5195:5;;5187;:13;;;;;;;:::i;:::-;;5220:7;;5210;:17;;;;;;;:::i;:::-;;5249:9;5237;;:21;;;;;;;;;;;;;;;;;;5291:31;5308:13;5291:16;:31::i;:::-;5269:14;:19;;:53;;;;;;;;;;;5356:20;:18;:20::i;:::-;5332:14;:21;;:44;;;;;;;;;;;5416:27;5386:14;:27;;:57;;;;5542:3;5507:14;:32;;:38;;;;5598:20;;:27;;5564:23;;:30;;:61;5556:95;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5666:9;5678:1;5666:13;;5661:153;5685:23;;:30;;5681:1;:34;5661:153;;;5745:58;5751:23;;5775:1;5751:26;;;;;;;;;;;;;;;5779:20;;5800:1;5779:23;;;;;;;;;;;;;5745:5;:58::i;:::-;;5721:8;5727:1;5721;:5;;:8;;;;:::i;:::-;5717:12;;5661:153;;;;5823:28;5835:15;5823:11;:28::i;:::-;5909:18;;5892:36;;;;;;;30:3:-1;22:6;14;1:33;57:3;49:6;45:16;35:26;;5892:36:13;;;;;;;;49:4:-1;39:7;30;26:21;22:32;13:7;6:49;5892:36:13;;;5882:47;;;;;;5861:18;:68;;;;4547:1389;;;;;;;;;;;;;;:::o;6097:527::-;1103:9:3;:7;:9::i;:::-;1095:54;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2634:50:13;;:::i;:::-;2694:19;2764:27;:25;:27::i;:::-;2724:67;;;;;;;;2821:14;:32;;;2806:11;:47;2802:291;;2893:22;2869:14;:21;;:46;;;;;;;;;;;2964:11;2929:14;:32;;:46;;;;2994:88;3017:30;:14;:21;;:28;;;;;;;;;;;;;;;;;;:30::i;:::-;3049:14;:32;;;2994:88;;;;;;;;;;;;;;;;;;;;;;;;2802:291;6232:1;6224:4;:9;;6216:61;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6310:1;6295:12;:16;6287:53;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6372:22;6389:4;6372:16;:22::i;:::-;6350:14;:19;;:44;;;;;;;;;;;6434:12;6404:14;:27;;:42;;;;6462:155;6502:4;6520:12;6604:3;6462:155;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1159:1:3;;6097:527:13;;:::o;11529:750::-;11680:4;2634:50;;:::i;:::-;2694:19;2764:27;:25;:27::i;:::-;2724:67;;;;;;;;2821:14;:32;;;2806:11;:47;2802:291;;2893:22;2869:14;:21;;:46;;;;;;;;;;;2964:11;2929:14;:32;;:46;;;;2994:88;3017:30;:14;:21;;:28;;;;;;;;;;;;;;;;;;:30::i;:::-;3049:14;:32;;;2994:88;;;;;;;;;;;;;;;;;;;;;;;;2802:291;260:12:20;:10;:12::i;:::-;:21;;;290:4;260:36;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;260:36:20;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;260:36:20;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;260:36:20;;;;;;;;;;;;;;;;259:37;251:84;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;11696:13:13;11712:43;11726:14;:21;;11712:43;;;;;;;;;;;;;;;;;11749:5;11712:13;:43::i;:::-;11696:59;;11787:1;11773:16;;:2;:16;;;;11765:71;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;11863:8;:14;11872:4;11863:14;;;;;;;;;;;;;;;;11854:5;:23;;11846:77;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;11950:7;:13;11958:4;11950:13;;;;;;;;;;;;;;;:25;11964:10;11950:25;;;;;;;;;;;;;;;;11941:5;:34;;11933:103;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;12062:23;12079:5;12062:8;:12;12071:2;12062:12;;;;;;;;;;;;;;;;:16;;:23;;;;:::i;:::-;12047:8;:12;12056:2;12047:12;;;;;;;;;;;;;;;:38;;;;12112:25;12131:5;12112:8;:14;12121:4;12112:14;;;;;;;;;;;;;;;;:18;;:25;;;;:::i;:::-;12095:8;:14;12104:4;12095:14;;;;;;;;;;;;;;;:42;;;;12175:36;12205:5;12175:7;:13;12183:4;12175:13;;;;;;;;;;;;;;;:25;12189:10;12175:25;;;;;;;;;;;;;;;;:29;;:36;;;;:::i;:::-;12147:7;:13;12155:4;12147:13;;;;;;;;;;;;;;;:25;12161:10;12147:25;;;;;;;;;;;;;;;:64;;;;12241:2;12226:25;;12235:4;12226:25;;;12245:5;12226:25;;;;;;;;;;;;;;;;;;12268:4;12261:11;;;11529:750;;;;;;;:::o;6622:296:28:-;6763:4;6779:12;355:8;6815:30;;6863:6;6871;6879;6846:40;;;;;;;;;;;;;;;;;;;;;;;;;;36:153:-1;66:2;61:3;58:11;36:153;;182:3;176:10;171:3;164:23;98:2;93:3;89:12;82:19;;123:2;118:3;114:12;107:19;;148:2;143:3;139:12;132:19;;36:153;;;274:1;267:3;263:2;259:12;254:3;250:22;246:30;315:4;311:9;305:3;299:10;295:26;356:4;350:3;344:10;340:21;389:7;380;377:20;372:3;365:33;3:399;;;6846:40:28;;;;;;;;;;;;;;;;36:153:-1;66:2;61:3;58:11;36:153;;182:3;176:10;171:3;164:23;98:2;93:3;89:12;82:19;;123:2;118:3;114:12;107:19;;148:2;143:3;139:12;132:19;;36:153;;;274:1;267:3;263:2;259:12;254:3;250:22;246:30;315:4;311:9;305:3;299:10;295:26;356:4;350:3;344:10;340:21;389:7;380;377:20;372:3;365:33;3:399;;;6846:40:28;;;;;;;;;;;;;49:4:-1;39:7;30;26:21;22:32;13:7;6:49;6846:40:28;;;6815:72;;;;;;;;;;;;;36:153:-1;66:2;61:3;58:11;36:153;;182:3;176:10;171:3;164:23;98:2;93:3;89:12;82:19;;123:2;118:3;114:12;107:19;;148:2;143:3;139:12;132:19;;36:153;;;274:1;267:3;263:2;259:12;254:3;250:22;246:30;315:4;311:9;305:3;299:10;295:26;356:4;350:3;344:10;340:21;389:7;380;377:20;372:3;365:33;3:399;;;6815:72:28;;;;;;;;;;;;;;;;;;;;;;;14:1:-1;21;16:31;;;;75:4;69:11;64:16;;144:4;140:9;133:4;115:16;111:27;107:43;104:1;100:51;94:4;87:65;169:16;166:1;159:27;225:16;222:1;215:4;212:1;208:12;193:49;7:242;;16:31;36:4;31:9;;7:242;;6801:86:28;;;;;6904:7;6897:14;;;6622:296;;;;;:::o;12686:83:13:-;12729:5;12753:9;;;;;;;;;;;12746:16;;12686:83;:::o;6918:427::-;7017:4;2634:50;;:::i;:::-;2694:19;2764:27;:25;:27::i;:::-;2724:67;;;;;;;;2821:14;:32;;;2806:11;:47;2802:291;;2893:22;2869:14;:21;;:46;;;;;;;;;;;2964:11;2929:14;:32;;:46;;;;2994:88;3017:30;:14;:21;;:28;;;;;;;;;;;;;;;;;;:30::i;:::-;3049:14;:32;;;2994:88;;;;;;;;;;;;;;;;;;;;;;;;2802:291;7060:1;7041:21;;:7;:21;;;;7033:76;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;7119:16;7138:7;:19;7146:10;7138:19;;;;;;;;;;;;;;;:28;7158:7;7138:28;;;;;;;;;;;;;;;;7119:47;;7176:16;7195:19;7208:5;7195:8;:12;;:19;;;;:::i;:::-;7176:38;;7255:8;7224:7;:19;7232:10;7224:19;;;;;;;;;;;;;;;:28;7244:7;7224:28;;;;;;;;;;;;;;;:39;;;;7299:7;7278:39;;7287:10;7278:39;;;7308:8;7278:39;;;;;;;;;;;;;;;;;;7334:4;7327:11;;;;6918:427;;;;;;:::o;2768:153:28:-;2841:7;2867:47;2886:11;2899:14;:12;:14::i;:::-;2867:18;:47::i;:::-;2860:54;;2768:153;;;:::o;15663:225:13:-;15717:7;15770:1;15762:10;;15740:18;;:32;15736:146;;;1051:28:29;;;;;;;;;;;;;;;;49:4:-1;39:7;30;26:21;22:32;13:7;6:49;1051:28:29;;;1041:39;;;;;;15788:27:13;;;;15736:146;15853:18;;15846:25;;15663:225;;:::o;8780:441::-;8861:4;2634:50;;:::i;:::-;2694:19;2764:27;:25;:27::i;:::-;2724:67;;;;;;;;2821:14;:32;;;2806:11;:47;2802:291;;2893:22;2869:14;:21;;:46;;;;;;;;;;;2964:11;2929:14;:32;;:46;;;;2994:88;3017:30;:14;:21;;:28;;;;;;;;;;;;;;;;;;:30::i;:::-;3049:14;:32;;;2994:88;;;;;;;;;;;;;;;;;;;;;;;;2802:291;8912:8;;;;;;;;;;;:27;;;8940:23;:21;:23::i;:::-;8912:52;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;8912:52:13;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;8912:52:13;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;8912:52:13;;;;;;;;;;;;;;;;8898:66;;:10;:66;;;:146;;;;8998:8;;;;;;;;;;;:22;;;2055:30:29;;;;;;;;;;;;;;;;49:4:-1;39:7;30;26:21;22:32;13:7;6:49;2055:30:29;;;2045:41;;;;;;8998:46:13;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;8998:46:13;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;8998:46:13;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;8998:46:13;;;;;;;;;;;;;;;;8984:60;;:10;:60;;;8898:146;:228;;;;9078:8;;;;;;;;;;;:22;;;1312:31;;;;;;;;;;;;;;;;49:4:-1;39:7;30;26:21;22:32;13:7;6:49;1312:31:13;;;1302:42;;;;;;9078:48;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;9078:48:13;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;9078:48:13;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;9078:48:13;;;;;;;;;;;;;;;;9064:62;;:10;:62;;;8898:228;8877:304;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;9198:16;9204:2;9208:5;9198;:16::i;:::-;9191:23;;8780:441;;;;;;:::o;10539:656::-;10608:4;2634:50;;:::i;:::-;2694:19;2764:27;:25;:27::i;:::-;2724:67;;;;;;;;2821:14;:32;;;2806:11;:47;2802:291;;2893:22;2869:14;:21;;:46;;;;;;;;;;;2964:11;2929:14;:32;;:46;;;;2994:88;3017:30;:14;:21;;:28;;;;;;;;;;;;;;;;;;:30::i;:::-;3049:14;:32;;;2994:88;;;;;;;;;;;;;;;;;;;;;;;;2802:291;10659:8;;;;;;;;;;;:27;;;10687:23;:21;:23::i;:::-;10659:52;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;10659:52:13;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;10659:52:13;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;10659:52:13;;;;;;;;;;;;;;;;10645:66;;:10;:66;;;:148;;;;10745:8;;;;;;;;;;;:22;;;1312:31;;;;;;;;;;;;;;;;49:4:-1;39:7;30;26:21;22:32;13:7;6:49;1312:31:13;;;1302:42;;;;;;10745:48;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;10745:48:13;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;10745:48:13;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;10745:48:13;;;;;;;;;;;;;;;;10731:62;;:10;:62;;;10645:148;10624:224;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;10858:13;10874:43;10888:14;:21;;10874:43;;;;;;;;;;;;;;;;;10911:5;10874:13;:43::i;:::-;10858:59;;10944:8;:20;10953:10;10944:20;;;;;;;;;;;;;;;;10935:5;:29;;10927:74;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;11026:23;11043:5;11026:12;;:16;;:23;;;;:::i;:::-;11011:12;:38;;;;11082:31;11107:5;11082:8;:20;11091:10;11082:20;;;;;;;;;;;;;;;;:24;;:31;;;;:::i;:::-;11059:8;:20;11068:10;11059:20;;;;;;;;;;;;;;;:54;;;;11157:1;11128:39;;11137:10;11128:39;;;11161:5;11128:39;;;;;;;;;;;;;;;;;;11184:4;11177:11;;;10539:656;;;;;:::o;8920:365:28:-;9003:7;9022:16;9048:12;778:9;9087:35;;9140:6;9123:24;;;;;;;;;;;;;;;36:153:-1;66:2;61:3;58:11;36:153;;182:3;176:10;171:3;164:23;98:2;93:3;89:12;82:19;;123:2;118:3;114:12;107:19;;148:2;143:3;139:12;132:19;;36:153;;;274:1;267:3;263:2;259:12;254:3;250:22;246:30;315:4;311:9;305:3;299:10;295:26;356:4;350:3;344:10;340:21;389:7;380;377:20;372:3;365:33;3:399;;;9123:24:28;;;;;;;;;;;49:4:-1;39:7;30;26:21;22:32;13:7;6:49;9123:24:28;;;9087:61;;;;;;;;;;;;;36:153:-1;66:2;61:3;58:11;36:153;;182:3;176:10;171:3;164:23;98:2;93:3;89:12;82:19;;123:2;118:3;114:12;107:19;;148:2;143:3;139:12;132:19;;36:153;;;274:1;267:3;263:2;259:12;254:3;250:22;246:30;315:4;311:9;305:3;299:10;295:26;356:4;350:3;344:10;340:21;389:7;380;377:20;372:3;365:33;3:399;;;9087:61:28;;;;;;;;;;;;;;;;;;;;;;;14:1:-1;21;16:31;;;;75:4;69:11;64:16;;144:4;140:9;133:4;115:16;111:27;107:43;104:1;100:51;94:4;87:65;169:16;166:1;159:27;225:16;222:1;215:4;212:1;208:12;193:49;7:242;;16:31;36:4;31:9;;7:242;;9070:78:28;;;;;;;;9166:7;9158:76;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;9251:27;9271:3;9276:1;9251:19;:27::i;:::-;9244:34;;;;8920:365;;;:::o;691:209:15:-;779:7;800;821;842;882:1;885;888;891;874:19;;;;;;;;;;;;;;;;;;;;691:209;;;;:::o;20846:283:13:-;110:1:17;88:24;;:10;:24;;;80:53;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;260:12:20;:10;:12::i;:::-;:21;;;290:4;260:36;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;260:36:20;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;260:36:20;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;260:36:20;;;;;;;;;;;;;;;;259:37;251:84;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2634:50:13;;:::i;:::-;2694:19;2764:27;:25;:27::i;:::-;2724:67;;;;;;;;2821:14;:32;;;2806:11;:47;2802:291;;2893:22;2869:14;:21;;:46;;;;;;;;;;;2964:11;2929:14;:32;;:46;;;;2994:88;3017:30;:14;:21;;:28;;;;;;;;;;;;;;;;;;:30::i;:::-;3049:14;:32;;;2994:88;;;;;;;;;;;;;;;;;;;;;;;;2802:291;20963:13;20979:43;20993:14;:21;;20979:43;;;;;;;;;;;;;;;;;21016:5;20979:13;:43::i;:::-;20963:59;;21049:25;21068:5;21049:8;:14;21058:4;21049:14;;;;;;;;;;;;;;;;:18;;:25;;;;:::i;:::-;21032:8;:14;21041:4;21032:14;;;;;;;;;;;;;;;:42;;;;21099:23;21116:5;21099:12;;:16;;:23;;;;:::i;:::-;21084:12;:38;;;;3102:1;345::20;;20846:283:13;;:::o;4704:386:28:-;4800:7;4819:16;4845:12;411:8;4884:24;;4926:5;4933:11;4909:36;;;;;;;;;;;;;;;;;;;;;49:4:-1;39:7;30;26:21;22:32;13:7;6:49;4909:36:28;;;4884:62;;;;;;;;;;;;;36:153:-1;66:2;61:3;58:11;36:153;;182:3;176:10;171:3;164:23;98:2;93:3;89:12;82:19;;123:2;118:3;114:12;107:19;;148:2;143:3;139:12;132:19;;36:153;;;274:1;267:3;263:2;259:12;254:3;250:22;246:30;315:4;311:9;305:3;299:10;295:26;356:4;350:3;344:10;340:21;389:7;380;377:20;372:3;365:33;3:399;;;4884:62:28;;;;;;;;;;;;;;;;;;;;;;;14:1:-1;21;16:31;;;;75:4;69:11;64:16;;144:4;140:9;133:4;115:16;111:27;107:43;104:1;100:51;94:4;87:65;169:16;166:1;159:27;225:16;222:1;215:4;212:1;208:12;193:49;7:242;;16:31;36:4;31:9;;7:242;;4867:79:28;;;;;;;;4964:7;4956:74;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5055:27;5075:3;5080:1;5055:19;:27::i;:::-;5040:43;;;;4704:386;;;;:::o;7540:310::-;7602:7;7621:16;7647:12;645:8;7686:22;;7726:6;7709:24;;;;;;;;;;;;;;;36:153:-1;66:2;61:3;58:11;36:153;;182:3;176:10;171:3;164:23;98:2;93:3;89:12;82:19;;123:2;118:3;114:12;107:19;;148:2;143:3;139:12;132:19;;36:153;;;274:1;267:3;263:2;259:12;254:3;250:22;246:30;315:4;311:9;305:3;299:10;295:26;356:4;350:3;344:10;340:21;389:7;380;377:20;372:3;365:33;3:399;;;7709:24:28;;;;;;;;;;;49:4:-1;39:7;30;26:21;22:32;13:7;6:49;7709:24:28;;;7686:48;;;;;;;;;;;;;36:153:-1;66:2;61:3;58:11;36:153;;182:3;176:10;171:3;164:23;98:2;93:3;89:12;82:19;;123:2;118:3;114:12;107:19;;148:2;143:3;139:12;132:19;;36:153;;;274:1;267:3;263:2;259:12;254:3;250:22;246:30;315:4;311:9;305:3;299:10;295:26;356:4;350:3;344:10;340:21;389:7;380;377:20;372:3;365:33;3:399;;;7686:48:28;;;;;;;;;;;;;;;;;;;;;;;14:1:-1;21;16:31;;;;75:4;69:11;64:16;;144:4;140:9;133:4;115:16;111:27;107:43;104:1;100:51;94:4;87:65;169:16;166:1;159:27;225:16;222:1;215:4;212:1;208:12;193:49;7:242;;16:31;36:4;31:9;;7:242;;7669:65:28;;;;;;;;7752:7;7744:55;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;7816:27;7836:3;7841:1;7816:19;:27::i;:::-;7809:34;;;;7540:310;;;:::o;21907:684:13:-;110:1:17;88:24;;:10;:24;;;80:53;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;260:12:20;:10;:12::i;:::-;:21;;;290:4;260:36;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;260:36:20;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;260:36:20;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;260:36:20;;;;;;;;;;;;;;;;259:37;251:84;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;22205:13:13;22221:44;22235:14;:21;;22221:44;;;;;;;;;;;;;;;;;22258:6;22221:13;:44::i;:::-;22205:60;;22292:25;22311:5;22292:8;:14;22301:4;22292:14;;;;;;;;;;;;;;;;:18;;:25;;;;:::i;:::-;22275:8;:14;22284:4;22275:14;;;;;;;;;;;;;;;:42;;;;22336:53;22346:42;22357:4;22363:13;22378:9;22346:10;:42::i;:::-;22336:5;:9;;:53;;;;:::i;:::-;22328:61;;22407:51;22417:40;22428:4;22434:12;22448:8;22417:10;:40::i;:::-;22407:5;:9;;:51;;;;:::i;:::-;22399:59;;22476:60;22486:49;22497:4;22503:19;22524:10;22486;:49::i;:::-;22476:5;:9;;:60;;;;:::i;:::-;22468:68;;22561:23;22578:5;22561:12;;:16;;:23;;;;:::i;:::-;22546:12;:38;;;;345:1:20;21907:684:13;;;;;;;;:::o;13450:133::-;13514:7;13540:36;13553:8;:22;13562:12;13553:22;;;;;;;;;;;;;;;;13540:12;:36::i;:::-;13533:43;;13450:133;;;:::o;1684:137:3:-;1103:9;:7;:9::i;:::-;1095:54;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1782:1;1745:40;;1766:6;;;;;;;;;;;1745:40;;;;;;;;;;;;1812:1;1795:6;;:19;;;;;;;;;;;;;;;;;;1684:137::o;10565:118:28:-;10623:7;10649:27;10663:12;10649:13;:27::i;:::-;10642:34;;10565:118;:::o;2132:25:29:-;;;;;;;;;;;;;:::o;5237:348:28:-;5298:7;5317:16;5343:12;471:8;5382:28;;5436:12;5411:39;;;;;;;;;;;;;;;49:4:-1;39:7;30;26:21;22:32;13:7;6:49;5411:39:28;;;5382:69;;;;;;;;;;;;;36:153:-1;66:2;61:3;58:11;36:153;;182:3;176:10;171:3;164:23;98:2;93:3;89:12;82:19;;123:2;118:3;114:12;107:19;;148:2;143:3;139:12;132:19;;36:153;;;274:1;267:3;263:2;259:12;254:3;250:22;246:30;315:4;311:9;305:3;299:10;295:26;356:4;350:3;344:10;340:21;389:7;380;377:20;372:3;365:33;3:399;;;5382:69:28;;;;;;;;;;;;;;;;;;;;;;;14:1:-1;21;16:31;;;;75:4;69:11;64:16;;144:4;140:9;133:4;115:16;111:27;107:43;104:1;100:51;94:4;87:65;169:16;166:1;159:27;225:16;222:1;215:4;212:1;208:12;193:49;7:242;;16:31;36:4;31:9;;7:242;;5365:86:28;;;;;;;;5469:7;5461:73;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5551:27;5571:3;5576:1;5551:19;:27::i;:::-;5544:34;;;;5237:348;:::o;7059:351::-;7135:7;7154:16;7180:12;591:8;7219:35;;7272:6;7255:24;;;;;;;;;;;;;;;36:153:-1;66:2;61:3;58:11;36:153;;182:3;176:10;171:3;164:23;98:2;93:3;89:12;82:19;;123:2;118:3;114:12;107:19;;148:2;143:3;139:12;132:19;;36:153;;;274:1;267:3;263:2;259:12;254:3;250:22;246:30;315:4;311:9;305:3;299:10;295:26;356:4;350:3;344:10;340:21;389:7;380;377:20;372:3;365:33;3:399;;;7255:24:28;;;;;;;;;;;49:4:-1;39:7;30;26:21;22:32;13:7;6:49;7255:24:28;;;7219:61;;;;;;;;;;;;;36:153:-1;66:2;61:3;58:11;36:153;;182:3;176:10;171:3;164:23;98:2;93:3;89:12;82:19;;123:2;118:3;114:12;107:19;;148:2;143:3;139:12;132:19;;36:153;;;274:1;267:3;263:2;259:12;254:3;250:22;246:30;315:4;311:9;305:3;299:10;295:26;356:4;350:3;344:10;340:21;389:7;380;377:20;372:3;365:33;3:399;;;7219:61:28;;;;;;;;;;;;;;;;;;;;;;;14:1:-1;21;16:31;;;;75:4;69:11;64:16;;144:4;140:9;133:4;115:16;111:27;107:43;104:1;100:51;94:4;87:65;169:16;166:1;159:27;225:16;222:1;215:4;212:1;208:12;193:49;7:242;;16:31;36:4;31:9;;7:242;;7202:78:28;;;;;;;;7298:7;7290:69;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;7376:27;7396:3;7401:1;7376:19;:27::i;:::-;7369:34;;;;7059:351;;;:::o;899:77:3:-;937:7;963:6;;;;;;;;;;;956:13;;899:77;:::o;1250:92::-;1290:4;1329:6;;;;;;;;;;;1313:22;;:12;:10;:12::i;:::-;:22;;;1306:29;;1250:92;:::o;12498:87:13:-;12539:13;12571:7;12564:14;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;12498:87;:::o;3032:115:28:-;3079:7;3105:35;3127:12;3105:21;:35::i;:::-;3098:42;;3032:115;:::o;5813:343::-;5886:7;5905:16;5931:12;471:8;5970:28;;6016:11;5999:29;;;;;;;;;;;;;;;49:4:-1;39:7;30;26:21;22:32;13:7;6:49;5999:29:28;;;5970:59;;;;;;;;;;;;;36:153:-1;66:2;61:3;58:11;36:153;;182:3;176:10;171:3;164:23;98:2;93:3;89:12;82:19;;123:2;118:3;114:12;107:19;;148:2;143:3;139:12;132:19;;36:153;;;274:1;267:3;263:2;259:12;254:3;250:22;246:30;315:4;311:9;305:3;299:10;295:26;356:4;350:3;344:10;340:21;389:7;380;377:20;372:3;365:33;3:399;;;5970:59:28;;;;;;;;;;;;;;;;;;;;;;;14:1:-1;21;16:31;;;;75:4;69:11;64:16;;144:4;140:9;133:4;115:16;111:27;107:43;104:1;100:51;94:4;87:65;169:16;166:1;159:27;225:16;222:1;215:4;212:1;208:12;193:49;7:242;;16:31;36:4;31:9;;7:242;;5953:76:28;;;;;;;;6047:7;6039:66;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6122:27;6142:3;6147:1;6122:19;:27::i;:::-;6115:34;;;;5813:343;;;:::o;7639:341:13:-;7738:4;2634:50;;:::i;:::-;2694:19;2764:27;:25;:27::i;:::-;2724:67;;;;;;;;2821:14;:32;;;2806:11;:47;2802:291;;2893:22;2869:14;:21;;:46;;;;;;;;;;;2964:11;2929:14;:32;;:46;;;;2994:88;3017:30;:14;:21;;:28;;;;;;;;;;;;;;;;;;:30::i;:::-;3049:14;:32;;;2994:88;;;;;;;;;;;;;;;;;;;;;;;;2802:291;7754:16;7773:7;:19;7781:10;7773:19;;;;;;;;;;;;;;;:28;7793:7;7773:28;;;;;;;;;;;;;;;;7754:47;;7811:16;7830:19;7843:5;7830:8;:12;;:19;;;;:::i;:::-;7811:38;;7890:8;7859:7;:19;7867:10;7859:19;;;;;;;;;;;;;;;:28;7879:7;7859:28;;;;;;;;;;;;;;;:39;;;;7934:7;7913:39;;7922:10;7913:39;;;7943:8;7913:39;;;;;;;;;;;;;;;;;;7969:4;7962:11;;;;7639:341;;;;;;:::o;14008:386::-;14102:7;14123;14144;14165;14218:28;:14;:19;;:26;;;;;;;;;;;;;;;;;;:28::i;:::-;14260:30;:14;:21;;:28;;;;;;;;;;;;;;;;;;:30::i;:::-;14304:14;:27;;;14345:14;:32;;;14197:190;;;;;;;;14008:386;;;;:::o;19402:151::-;19503:4;2634:50;;:::i;:::-;2694:19;2764:27;:25;:27::i;:::-;2724:67;;;;;;;;2821:14;:32;;;2806:11;:47;2802:291;;2893:22;2869:14;:21;;:46;;;;;;;;;;;2964:11;2929:14;:32;;:46;;;;2994:88;3017:30;:14;:21;;:28;;;;;;;;;;;;;;;;;;:30::i;:::-;3049:14;:32;;;2994:88;;;;;;;;;;;;;;;;;;;;;;;;2802:291;260:12:20;:10;:12::i;:::-;:21;;;290:4;260:36;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;260:36:20;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;260:36:20;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;260:36:20;;;;;;;;;;;;;;;;259:37;251:84;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;19526:20:13;19536:2;19540:5;19526:9;:20::i;:::-;19519:27;;19402:151;;;;;;:::o;2715:244:29:-;1103:9:3;:7;:9::i;:::-;1095:54;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2823:1:29;2796:29;;:15;:29;;;;2788:74;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2893:15;2872:8;;:37;;;;;;;;;;;;;;;;;;2936:15;2924:28;;;;;;;;;;;;2715:244;:::o;16143:701:13:-;16201:7;16220:50;;:::i;:::-;16310:27;:25;:27::i;:::-;16281:56;;;;;16767:70;:58;16802:22;16767:27;16788:5;16767:20;:27::i;:::-;:34;;:58;;;;:::i;:::-;:68;:70::i;:::-;16760:77;;;16143:701;;;:::o;13065:144::-;13146:7;13172;:21;13180:12;13172:21;;;;;;;;;;;;;;;:30;13194:7;13172:30;;;;;;;;;;;;;;;;13165:37;;13065:144;;;;:::o;2304:288:28:-;2349:7;2368:16;2394:12;524:8;2433:21;;2455:18;;;;;;49:4:-1;39:7;30;26:21;22:32;13:7;6:49;2455:18:28;;;2433:41;;;;;;;;;;;;;36:153:-1;66:2;61:3;58:11;36:153;;182:3;176:10;171:3;164:23;98:2;93:3;89:12;82:19;;123:2;118:3;114:12;107:19;;148:2;143:3;139:12;132:19;;36:153;;;274:1;267:3;263:2;259:12;254:3;250:22;246:30;315:4;311:9;305:3;299:10;295:26;356:4;350:3;344:10;340:21;389:7;380;377:20;372:3;365:33;3:399;;;2433:41:28;;;;;;;;;;;;;;;;;;;;;;;14:1:-1;21;16:31;;;;75:4;69:11;64:16;;144:4;140:9;133:4;115:16;111:27;107:43;104:1;100:51;94:4;87:65;169:16;166:1;159:27;225:16;222:1;215:4;212:1;208:12;193:49;7:242;;16:31;36:4;31:9;;7:242;;2416:58:28;;;;;;;;2492:7;2484:57;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2558:27;2578:3;2583:1;2558:19;:27::i;:::-;2551:34;;;;2304:288;:::o;10104:293:13:-;10273:4;2634:50;;:::i;:::-;2694:19;2764:27;:25;:27::i;:::-;2724:67;;;;;;;;2821:14;:32;;;2806:11;:47;2802:291;;2893:22;2869:14;:21;;:46;;;;;;;;;;;2964:11;2929:14;:32;;:46;;;;2994:88;3017:30;:14;:21;;:28;;;;;;;;;;;;;;;;;;:30::i;:::-;3049:14;:32;;;2994:88;;;;;;;;;;;;;;;;;;;;;;;;2802:291;260:12:20;:10;:12::i;:::-;:21;;;290:4;260:36;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;260:36:20;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;260:36:20;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;260:36:20;;;;;;;;;;;;;;;;259:37;251:84;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;10289:14:13;10306:19;10315:2;10319:5;10306:8;:19::i;:::-;10289:36;;10340:24;10356:7;;10340:24;;;;;;;;;;;;;;;;;;;;;30:3:-1;22:6;14;1:33;99:1;93:3;85:6;81:16;74:27;137:4;133:9;126:4;121:3;117:14;113:30;106:37;;169:3;161:6;157:16;147:26;;10340:24:13;;;;;;;;;;;;;;10381:9;10374:16;;;10104:293;;;;;;;;:::o;10270:153:28:-;10335:7;10361:55;10414:1;10361:48;10407:1;10361:41;10400:1;10361:34;10383:11;10361:21;:34::i;:::-;:38;;:41;;;;:::i;:::-;:45;;:48;;;;:::i;:::-;:52;;:55;;;;:::i;:::-;10354:62;;10270:153;;;:::o;1335:841::-;1555:7;1564;1607:1;1591:12;:17;;:38;;;;;1628:1;1612:12;:17;;1591:38;1583:72;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1665:23;1698:25;1733:12;1755:16;293:8;1798:23;;1852:10;1864:12;1878:10;1890:12;1904:8;1914:9;1835:89;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;49:4:-1;39:7;30;26:21;22:32;13:7;6:49;1835:89:28;;;1798:136;;;;;;;;;;;;;36:153:-1;66:2;61:3;58:11;36:153;;182:3;176:10;171:3;164:23;98:2;93:3;89:12;82:19;;123:2;118:3;114:12;107:19;;148:2;143:3;139:12;132:19;;36:153;;;274:1;267:3;263:2;259:12;254:3;250:22;246:30;315:4;311:9;305:3;299:10;295:26;356:4;350:3;344:10;340:21;389:7;380;377:20;372:3;365:33;3:399;;;1798:136:28;;;;;;;;;;;;;;;;;;;;;;;14:1:-1;21;16:31;;;;75:4;69:11;64:16;;144:4;140:9;133:4;115:16;111:27;107:43;104:1;100:51;94:4;87:65;169:16;166:1;159:27;225:16;222:1;215:4;212:1;208:12;193:49;7:242;;16:31;36:4;31:9;;7:242;;1781:153:28;;;;;;;;1952:7;1944:59;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2031:27;2051:3;2056:1;2031:19;:27::i;:::-;2013:45;;2088:28;2108:3;2113:2;2088:19;:28::i;:::-;2068:48;;2134:15;2151:17;2126:43;;;;;;;;1335:841;;;;;;;;;:::o;1970:107:3:-;1103:9;:7;:9::i;:::-;1095:54;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2042:28;2061:8;2042:18;:28::i;:::-;1970:107;:::o;8153:344:28:-;8224:7;8243:16;8269:12;710:9;8308:33;;8359:11;8342:29;;;;;;;;;;;;;;;49:4:-1;39:7;30;26:21;22:32;13:7;6:49;8342:29:28;;;8308:64;;;;;;;;;;;;;36:153:-1;66:2;61:3;58:11;36:153;;182:3;176:10;171:3;164:23;98:2;93:3;89:12;82:19;;123:2;118:3;114:12;107:19;;148:2;143:3;139:12;132:19;;36:153;;;274:1;267:3;263:2;259:12;254:3;250:22;246:30;315:4;311:9;305:3;299:10;295:26;356:4;350:3;344:10;340:21;389:7;380;377:20;372:3;365:33;3:399;;;8308:64:28;;;;;;;;;;;;;;;;;;;;;;;14:1:-1;21;16:31;;;;75:4;69:11;64:16;;144:4;140:9;133:4;115:16;111:27;107:43;104:1;100:51;94:4;87:65;169:16;166:1;159:27;225:16;222:1;215:4;212:1;208:12;193:49;7:242;;16:31;36:4;31:9;;7:242;;8291:81:28;;;;;;;;8390:7;8382:64;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8463:27;8483:3;8488:1;8463:19;:27::i;:::-;8456:34;;;;8153:344;;;:::o;17634:1533:13:-;17693:27;;:::i;:::-;17722:7;17798:65;17835:14;:27;;;17798:14;:32;;;:36;;:65;;;;:::i;:::-;17792:3;:71;17788:166;;;17887:14;:21;;17910:14;:32;;;17879:64;;;;;;;;;;;;;;;;;;;;;;;;;;17788:166;17964:17;17991:19;18097:29;18129:74;18175:14;:27;;;18129:41;18137:14;:32;;;18129:3;:7;;:41;;;;:::i;:::-;:45;;:74;;;;:::i;:::-;18097:106;;18241:254;18269:30;:14;:21;;:28;;;;;;;;;;;;;;;;;;:30::i;:::-;18313:29;:20;:18;:20::i;:::-;:27;:29::i;:::-;18356:28;:14;:19;;:26;;;;;;;;;;;;;;;;;;:28::i;:::-;18398:29;:20;:18;:20::i;:::-;:27;:29::i;:::-;18441:21;18476:9;;;;;;;;;;;18241:254;;:14;:254::i;:::-;18214:281;;;;;;;;18651:1;18638:9;:14;:34;;;;18671:1;18656:11;:16;18638:34;18634:129;;;18696:14;:21;;18719:14;:32;;;18688:64;;;;;;;;;;;;;;;;;;;;;;;;;;;;;18634:129;18773:50;;:::i;:::-;18826:87;18874:29;18891:11;18874:16;:29::i;:::-;18826:27;18843:9;18826:16;:27::i;:::-;:34;;:87;;;;:::i;:::-;18773:140;;18923:19;18945:114;18995:54;19027:21;18995:14;:27;;;:31;;:54;;;;:::i;:::-;18945:14;:32;;;:36;;:114;;;;:::i;:::-;18923:136;;19078:22;19102:11;19070:44;;;;;;;;;17634:1533;;;:::o;1744:98:19:-;1802:7;1828:1;:7;;;1821:14;;1744:98;;;:::o;9459:156:28:-;9543:7;9577:30;9597:2;9601:5;9577:19;:30::i;:::-;9569:39;;9562:46;;9459:156;;;;:::o;17238:203:13:-;17343:7;17369:65;:53;17394:27;17415:5;17394:20;:27::i;:::-;17369:15;:24;;:53;;;;:::i;:::-;:63;:65::i;:::-;17362:72;;17238:203;;;;:::o;2178:225:3:-;2271:1;2251:22;;:8;:22;;;;2243:73;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2360:8;2331:38;;2352:6;;;;;;;;;;;2331:38;;;;;;;;;;;;2388:8;2379:6;;:17;;;;;;;;;;;;;;;;;;2178:225;:::o;1558:100:19:-;1606:15;;:::i;:::-;1640:11;;;;;;;;1649:1;1640:11;;;1633:18;;1558:100;;;:::o;1216:103::-;1257:15;;:::i;:::-;1291:21;;;;;;;;1020:25;1291:21;;;1284:28;;1216:103;:::o;9412:428:13:-;9471:4;9509:1;9495:16;;:2;:16;;;;9487:52;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;9562:1;9553:5;:10;9549:52;;;9586:4;9579:11;;;;9549:52;9611:13;9627:43;9641:14;:21;;9627:43;;;;;;;;;;;;;;;;;9664:5;9627:13;:43::i;:::-;9611:59;;9695:23;9712:5;9695:12;;:16;;:23;;;;:::i;:::-;9680:12;:38;;;;9743:23;9760:5;9743:8;:12;9752:2;9743:12;;;;;;;;;;;;;;;;:16;;:23;;;;:::i;:::-;9728:8;:12;9737:2;9728:12;;;;;;;;;;;;;;;:38;;;;9802:2;9781:31;;9798:1;9781:31;;;9806:5;9781:31;;;;;;;;;;;;;;;;;;9829:4;9822:11;;;9412:428;;;;;:::o;834:176:2:-;892:7;911:9;927:1;923;:5;911:17;;951:1;946;:6;;938:46;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1002:1;995:8;;;834:176;;;;:::o;3112:137:29:-;3157:8;3193;;;;;;;;;;;:27;;;1246;;;;;;;;;;;;;;;;49:4:-1;39:7;30;26:21;22:32;13:7;6:49;1246:27:29;;;1236:38;;;;;;3193:48;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;3193:48:29;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;3193:48:29;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;3193:48:29;;;;;;;;;;;;;;;;3177:65;;3112:137;:::o;1274:134:2:-;1332:7;1358:43;1362:1;1365;1358:43;;;;;;;;;;;;;;;;;:3;:43::i;:::-;1351:50;;1274:134;;;;:::o;3373:399:28:-;3464:7;3578:19;3614:9;3600:11;:23;;;;;;3578:45;;3664:1;3651:9;3637:11;:23;;;;;;:28;3633:133;;;3688:11;3681:18;;;;;3633:133;3737:18;3753:1;3737:11;:15;;:18;;;;:::i;:::-;3730:25;;;3373:399;;;;;:::o;9789:283::-;9873:7;9913:13;9923:2;9913:5;:9;;:13;;;;:::i;:::-;9900:2;:9;:26;;9892:59;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;9961:9;10033:2;10026:5;10022:14;10018:2;10014:23;10008:30;10003:35;;10064:1;10057:8;;;9789:283;;;;:::o;22597:368:13:-;22706:7;22743:1;22729:16;;:2;:16;;;22725:55;;;22768:1;22761:8;;;;22725:55;22789:13;22805:43;22819:14;:21;;22805:43;;;;;;;;;;;;;;;;;22842:5;22805:13;:43::i;:::-;22789:59;;22873:23;22890:5;22873:8;:12;22882:2;22873:12;;;;;;;;;;;;;;;;:16;;:23;;;;:::i;:::-;22858:8;:12;22867:2;22858:12;;;;;;;;;;;;;;;:38;;;;22926:2;22911:25;;22920:4;22911:25;;;22930:5;22911:25;;;;;;;;;;;;;;;;;;22953:5;22946:12;;;22597:368;;;;;;:::o;788:96:0:-;833:15;867:10;860:17;;788:96;:::o;19762:499:13:-;19826:4;19864:1;19850:16;;:2;:16;;;;19842:71;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;19923:13;19939:43;19953:14;:21;;19939:43;;;;;;;;;;;;;;;;;19976:5;19939:13;:43::i;:::-;19923:59;;20024:5;20000:8;:20;20009:10;20000:20;;;;;;;;;;;;;;;;:29;;19992:83;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;20108:31;20133:5;20108:8;:20;20117:10;20108:20;;;;;;;;;;;;;;;;:24;;:31;;;;:::i;:::-;20085:8;:20;20094:10;20085:20;;;;;;;;;;;;;;;:54;;;;20164:23;20181:5;20164:8;:12;20173:2;20164:12;;;;;;;;;;;;;;;;:16;;:23;;;;:::i;:::-;20149:8;:12;20158:2;20149:12;;;;;;;;;;;;;;;:38;;;;20223:2;20202:31;;20211:10;20202:31;;;20227:5;20202:31;;;;;;;;;;;;;;;;;;20250:4;20243:11;;;19762:499;;;;:::o;2673:213:19:-;2725:15;;:::i;:::-;2765:13;:11;:13::i;:::-;2760:1;:18;;2752:85;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2854:25;;;;;;;;1020;2863:1;:15;2854:25;;;2847:32;;2673:213;;;:::o;9668:301::-;9745:15;;:::i;:::-;9791:1;9780;:7;;;:12;;9772:42;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;9824:9;1020:25;9836:1;:7;;;:21;9824:33;;9894:1;:7;;;1020:25;9875:1;:15;;;;;;:26;9867:57;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;9941:21;;;;;;;;9954:1;:7;;;9950:1;:11;;;;;;9941:21;;;9934:28;;;9668:301;;;;:::o;3055:115::-;3116:7;1020:25;3142:1;:7;;;:21;;;;;;3135:28;;3055:115;;;:::o;2159:459:2:-;2217:7;2463:1;2458;:6;2454:45;;;2487:1;2480:8;;;;2454:45;2509:9;2525:1;2521;:5;2509:17;;2553:1;2548;2544;:5;;;;;;:10;2536:56;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2610:1;2603:8;;;2159:459;;;;;:::o;3073:130::-;3131:7;3157:39;3161:1;3164;3157:39;;;;;;;;;;;;;;;;;:3;:39::i;:::-;3150:46;;3073:130;;;;:::o;6510:1762:19:-;6589:15;;:::i;:::-;6631:1;6620;:7;;;:12;:28;;;;6647:1;6636;:7;;;:12;6620:28;6616:52;;;6657:11;;;;;;;;6666:1;6657:11;;;6650:18;;;;6616:52;1020:25;6682:1;:7;;;:22;6678:36;;;6713:1;6706:8;;;;6678:36;1020:25;6728:1;:7;;;:22;6724:36;;;6759:1;6752:8;;;;6724:36;6861:10;1020:25;6874:10;6882:1;6874:7;:10::i;:::-;:16;;;:30;;;;;;6861:43;;6914:10;6927:13;6938:1;6927:10;:13::i;:::-;:19;;;6914:32;;6956:10;1020:25;6969:10;6977:1;6969:7;:10::i;:::-;:16;;;:30;;;;;;6956:43;;7009:10;7022:13;7033:1;7022:10;:13::i;:::-;:19;;;7009:32;;7133:12;7153:2;7148;:7;7133:22;;7175:1;7169:2;:7;7165:63;;7199:2;7193;7186:4;:9;;;;;;:15;7178:50;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;7165:63;7339:18;1020:25;7360:4;:18;7339:39;;7400:1;7392:4;:9;7388:91;;1020:25;7424:4;7411:10;:17;;;;;;:32;7403:76;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;7388:91;7496:10;7489:17;;7517:12;7537:2;7532;:7;7517:22;;7559:1;7553:2;:7;7549:63;;7583:2;7577;7570:4;:9;;;;;;:15;7562:50;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;7549:63;7623:12;7643:2;7638;:7;7623:22;;7665:1;7659:2;:7;7655:63;;7689:2;7683;7676:4;:9;;;;;;:15;7668:50;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;7655:63;7739:14;:12;:14::i;:::-;7734:2;:19;;;;;;7729:24;;7773:14;:12;:14::i;:::-;7768:2;:19;;;;;;7763:24;;7797:12;7817:2;7812;:7;7797:22;;7839:1;7833:2;:7;7829:63;;7863:2;7857;7850:4;:9;;;;;;:15;7842:50;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;7829:63;7984:22;;:::i;:::-;8009:14;;;;;;;;8018:4;8009:14;;;7984:39;;8042:27;8046:6;8054:14;;;;;;;;8063:4;8054:14;;;8042:3;:27::i;:::-;8033:36;;8115:27;8119:6;8127:14;;;;;;;;8136:4;8127:14;;;8115:3;:27::i;:::-;8106:36;;8188:27;8192:6;8200:14;;;;;;;;8209:4;8200:14;;;8188:3;:27::i;:::-;8179:36;;8259:6;8252:13;;;;;;;;;;;;6510:1762;;;;;:::o;1732:187:2:-;1818:7;1850:1;1845;:6;;1853:12;1837:29;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;80:1;75:3;71:11;64:39;52:2;49:1;45:10;40:15;;8:100;;;12:14;1837:29:2;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1876:9;1892:1;1888;:5;1876:17;;1911:1;1904:8;;;1732:187;;;;;:::o;2267:133:19:-;2313:7;2339:54;2332:61;;2267:133;:::o;3718:338:2:-;3804:7;3901:1;3897;:5;3904:12;3889:28;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;80:1;75:3;71:11;64:39;52:2;49:1;45:10;40:15;;8:100;;;12:14;3889:28:2;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3927:9;3943:1;3939;:5;;;;;;3927:17;;4048:1;4041:8;;;3718:338;;;;;:::o;4260:165:19:-;4319:15;;:::i;:::-;4353:47;;;;;;;;1020:25;;4363:1;:7;;;:21;;;;;;4362:37;4353:47;;;4346:54;;4260:165;;;:::o;4730:178::-;4792:15;;:::i;:::-;4826:57;;;;;;;;1020:25;;4846:1;:7;;;:21;;;;;;4845:37;4835:1;:7;;;:47;4826:57;;;4819:64;;4730:178;;;:::o;1991:93::-;2038:7;2064:13;2057:20;;1991:93;:::o;5298:221::-;5372:15;;:::i;:::-;5399:9;5421:1;:7;;;5411:1;:7;;;:17;5399:29;;5451:1;:7;;;5446:1;:12;;5438:46;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5501:11;;;;;;;;5510:1;5501:11;;;5494:18;;;5298:221;;;;:::o;55:847:15:-;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o",
  "source": "pragma solidity ^0.5.13;\n\nimport \"./StableToken.sol\";\n\ncontract StableTokenEUR is StableToken {\n    /**\n     * @notice Sets initialized == true on implementation contracts.\n     * @param test Set to true to skip implementation initialization.\n     */\n    constructor(bool test) public StableToken(test) {}\n\n    /**\n     * @notice Returns the storage, major, minor, and patch version of the contract.\n     * @dev This function is overloaded to maintain a distinct version from StableToken.sol.\n     * @return Storage version of the contract.\n     * @return Major version of the contract.\n     * @return Minor version of the contract.\n     * @return Patch version of the contract.\n     */\n    function getVersionNumber()\n        external\n        pure\n        returns (\n            uint256,\n            uint256,\n            uint256,\n            uint256\n        )\n    {\n        return (1, 1, 0, 1);\n    }\n}\n",
  "sourcePath": "/Users/beaver/Development/celo/celo-monorepo/packages/protocol/lib/mento-core/contracts/StableTokenEUR.sol",
  "ast": {
    "absolutePath": "project:/lib/mento-core/contracts/StableTokenEUR.sol",
    "exportedSymbols": {
      "StableTokenEUR": [
        6482
      ]
    },
    "id": 6483,
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 6451,
        "literals": [
          "solidity",
          "^",
          "0.5",
          ".13"
        ],
        "nodeType": "PragmaDirective",
        "src": "0:24:15"
      },
      {
        "absolutePath": "project:/lib/mento-core/contracts/StableToken.sol",
        "file": "./StableToken.sol",
        "id": 6452,
        "nodeType": "ImportDirective",
        "scope": 6483,
        "sourceUnit": 6417,
        "src": "26:27:15",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "baseContracts": [
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 6453,
              "name": "StableToken",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 6416,
              "src": "82:11:15",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_StableToken_$6416",
                "typeString": "contract StableToken"
              }
            },
            "id": 6454,
            "nodeType": "InheritanceSpecifier",
            "src": "82:11:15"
          }
        ],
        "contractDependencies": [
          26,
          400,
          469,
          6416,
          6872,
          7552,
          8252,
          10512,
          10806,
          10820,
          13848,
          14142
        ],
        "contractKind": "contract",
        "documentation": null,
        "fullyImplemented": true,
        "id": 6482,
        "linearizedBaseContracts": [
          6482,
          6416,
          13848,
          469,
          14142,
          6872,
          7552,
          10512,
          10806,
          8252,
          400,
          26,
          10820
        ],
        "name": "StableTokenEUR",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "body": {
              "id": 6462,
              "nodeType": "Block",
              "src": "303:2:15",
              "statements": []
            },
            "documentation": "@notice Sets initialized == true on implementation contracts.\n@param test Set to true to skip implementation initialization.",
            "id": 6463,
            "implemented": true,
            "kind": "constructor",
            "modifiers": [
              {
                "arguments": [
                  {
                    "argumentTypes": null,
                    "id": 6459,
                    "name": "test",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 6456,
                    "src": "297:4:15",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  }
                ],
                "id": 6460,
                "modifierName": {
                  "argumentTypes": null,
                  "id": 6458,
                  "name": "StableToken",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 6416,
                  "src": "285:11:15",
                  "typeDescriptions": {
                    "typeIdentifier": "t_type$_t_contract$_StableToken_$6416_$",
                    "typeString": "type(contract StableToken)"
                  }
                },
                "nodeType": "ModifierInvocation",
                "src": "285:17:15"
              }
            ],
            "name": "",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 6457,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 6456,
                  "name": "test",
                  "nodeType": "VariableDeclaration",
                  "scope": 6463,
                  "src": "267:9:15",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 6455,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "267:4:15",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "266:11:15"
            },
            "returnParameters": {
              "id": 6461,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "303:0:15"
            },
            "scope": 6482,
            "src": "255:50:15",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": {
              "id": 6480,
              "nodeType": "Block",
              "src": "864:36:15",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "components": [
                      {
                        "argumentTypes": null,
                        "hexValue": "31",
                        "id": 6474,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "882:1:15",
                        "subdenomination": null,
                        "typeDescriptions": {
                          "typeIdentifier": "t_rational_1_by_1",
                          "typeString": "int_const 1"
                        },
                        "value": "1"
                      },
                      {
                        "argumentTypes": null,
                        "hexValue": "31",
                        "id": 6475,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "885:1:15",
                        "subdenomination": null,
                        "typeDescriptions": {
                          "typeIdentifier": "t_rational_1_by_1",
                          "typeString": "int_const 1"
                        },
                        "value": "1"
                      },
                      {
                        "argumentTypes": null,
                        "hexValue": "30",
                        "id": 6476,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "888:1:15",
                        "subdenomination": null,
                        "typeDescriptions": {
                          "typeIdentifier": "t_rational_0_by_1",
                          "typeString": "int_const 0"
                        },
                        "value": "0"
                      },
                      {
                        "argumentTypes": null,
                        "hexValue": "31",
                        "id": 6477,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "891:1:15",
                        "subdenomination": null,
                        "typeDescriptions": {
                          "typeIdentifier": "t_rational_1_by_1",
                          "typeString": "int_const 1"
                        },
                        "value": "1"
                      }
                    ],
                    "id": 6478,
                    "isConstant": false,
                    "isInlineArray": false,
                    "isLValue": false,
                    "isPure": true,
                    "lValueRequested": false,
                    "nodeType": "TupleExpression",
                    "src": "881:12:15",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$_t_rational_1_by_1_$_t_rational_1_by_1_$_t_rational_0_by_1_$_t_rational_1_by_1_$",
                      "typeString": "tuple(int_const 1,int_const 1,int_const 0,int_const 1)"
                    }
                  },
                  "functionReturnParameters": 6473,
                  "id": 6479,
                  "nodeType": "Return",
                  "src": "874:19:15"
                }
              ]
            },
            "documentation": "@notice Returns the storage, major, minor, and patch version of the contract.\n@dev This function is overloaded to maintain a distinct version from StableToken.sol.\n@return Storage version of the contract.\n@return Major version of the contract.\n@return Minor version of the contract.\n@return Patch version of the contract.",
            "id": 6481,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "getVersionNumber",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 6464,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "716:2:15"
            },
            "returnParameters": {
              "id": 6473,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 6466,
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 6481,
                  "src": "779:7:15",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 6465,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "779:7:15",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 6468,
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 6481,
                  "src": "800:7:15",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 6467,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "800:7:15",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 6470,
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 6481,
                  "src": "821:7:15",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 6469,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "821:7:15",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 6472,
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 6481,
                  "src": "842:7:15",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 6471,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "842:7:15",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "765:94:15"
            },
            "scope": 6482,
            "src": "691:209:15",
            "stateMutability": "pure",
            "superFunction": 5209,
            "visibility": "external"
          }
        ],
        "scope": 6483,
        "src": "55:847:15"
      }
    ],
    "src": "0:903:15"
  },
  "legacyAST": {
    "attributes": {
      "absolutePath": "project:/lib/mento-core/contracts/StableTokenEUR.sol",
      "exportedSymbols": {
        "StableTokenEUR": [
          6482
        ]
      }
    },
    "children": [
      {
        "attributes": {
          "literals": [
            "solidity",
            "^",
            "0.5",
            ".13"
          ]
        },
        "id": 6451,
        "name": "PragmaDirective",
        "src": "0:24:15"
      },
      {
        "attributes": {
          "SourceUnit": 6417,
          "absolutePath": "project:/lib/mento-core/contracts/StableToken.sol",
          "file": "./StableToken.sol",
          "scope": 6483,
          "symbolAliases": [
            null
          ],
          "unitAlias": ""
        },
        "id": 6452,
        "name": "ImportDirective",
        "src": "26:27:15"
      },
      {
        "attributes": {
          "contractDependencies": [
            26,
            400,
            469,
            6416,
            6872,
            7552,
            8252,
            10512,
            10806,
            10820,
            13848,
            14142
          ],
          "contractKind": "contract",
          "documentation": null,
          "fullyImplemented": true,
          "linearizedBaseContracts": [
            6482,
            6416,
            13848,
            469,
            14142,
            6872,
            7552,
            10512,
            10806,
            8252,
            400,
            26,
            10820
          ],
          "name": "StableTokenEUR",
          "scope": 6483
        },
        "children": [
          {
            "attributes": {
              "arguments": null
            },
            "children": [
              {
                "attributes": {
                  "contractScope": null,
                  "name": "StableToken",
                  "referencedDeclaration": 6416,
                  "type": "contract StableToken"
                },
                "id": 6453,
                "name": "UserDefinedTypeName",
                "src": "82:11:15"
              }
            ],
            "id": 6454,
            "name": "InheritanceSpecifier",
            "src": "82:11:15"
          },
          {
            "attributes": {
              "documentation": "@notice Sets initialized == true on implementation contracts.\n@param test Set to true to skip implementation initialization.",
              "implemented": true,
              "isConstructor": true,
              "kind": "constructor",
              "name": "",
              "scope": 6482,
              "stateMutability": "nonpayable",
              "superFunction": null,
              "visibility": "public"
            },
            "children": [
              {
                "children": [
                  {
                    "attributes": {
                      "constant": false,
                      "name": "test",
                      "scope": 6463,
                      "stateVariable": false,
                      "storageLocation": "default",
                      "type": "bool",
                      "value": null,
                      "visibility": "internal"
                    },
                    "children": [
                      {
                        "attributes": {
                          "name": "bool",
                          "type": "bool"
                        },
                        "id": 6455,
                        "name": "ElementaryTypeName",
                        "src": "267:4:15"
                      }
                    ],
                    "id": 6456,
                    "name": "VariableDeclaration",
                    "src": "267:9:15"
                  }
                ],
                "id": 6457,
                "name": "ParameterList",
                "src": "266:11:15"
              },
              {
                "attributes": {
                  "parameters": [
                    null
                  ]
                },
                "children": [],
                "id": 6461,
                "name": "ParameterList",
                "src": "303:0:15"
              },
              {
                "children": [
                  {
                    "attributes": {
                      "argumentTypes": null,
                      "overloadedDeclarations": [
                        null
                      ],
                      "referencedDeclaration": 6416,
                      "type": "type(contract StableToken)",
                      "value": "StableToken"
                    },
                    "id": 6458,
                    "name": "Identifier",
                    "src": "285:11:15"
                  },
                  {
                    "attributes": {
                      "argumentTypes": null,
                      "overloadedDeclarations": [
                        null
                      ],
                      "referencedDeclaration": 6456,
                      "type": "bool",
                      "value": "test"
                    },
                    "id": 6459,
                    "name": "Identifier",
                    "src": "297:4:15"
                  }
                ],
                "id": 6460,
                "name": "ModifierInvocation",
                "src": "285:17:15"
              },
              {
                "attributes": {
                  "statements": [
                    null
                  ]
                },
                "children": [],
                "id": 6462,
                "name": "Block",
                "src": "303:2:15"
              }
            ],
            "id": 6463,
            "name": "FunctionDefinition",
            "src": "255:50:15"
          },
          {
            "attributes": {
              "documentation": "@notice Returns the storage, major, minor, and patch version of the contract.\n@dev This function is overloaded to maintain a distinct version from StableToken.sol.\n@return Storage version of the contract.\n@return Major version of the contract.\n@return Minor version of the contract.\n@return Patch version of the contract.",
              "implemented": true,
              "isConstructor": false,
              "kind": "function",
              "modifiers": [
                null
              ],
              "name": "getVersionNumber",
              "scope": 6482,
              "stateMutability": "pure",
              "superFunction": 5209,
              "visibility": "external"
            },
            "children": [
              {
                "attributes": {
                  "parameters": [
                    null
                  ]
                },
                "children": [],
                "id": 6464,
                "name": "ParameterList",
                "src": "716:2:15"
              },
              {
                "children": [
                  {
                    "attributes": {
                      "constant": false,
                      "name": "",
                      "scope": 6481,
                      "stateVariable": false,
                      "storageLocation": "default",
                      "type": "uint256",
                      "value": null,
                      "visibility": "internal"
                    },
                    "children": [
                      {
                        "attributes": {
                          "name": "uint256",
                          "type": "uint256"
                        },
                        "id": 6465,
                        "name": "ElementaryTypeName",
                        "src": "779:7:15"
                      }
                    ],
                    "id": 6466,
                    "name": "VariableDeclaration",
                    "src": "779:7:15"
                  },
                  {
                    "attributes": {
                      "constant": false,
                      "name": "",
                      "scope": 6481,
                      "stateVariable": false,
                      "storageLocation": "default",
                      "type": "uint256",
                      "value": null,
                      "visibility": "internal"
                    },
                    "children": [
                      {
                        "attributes": {
                          "name": "uint256",
                          "type": "uint256"
                        },
                        "id": 6467,
                        "name": "ElementaryTypeName",
                        "src": "800:7:15"
                      }
                    ],
                    "id": 6468,
                    "name": "VariableDeclaration",
                    "src": "800:7:15"
                  },
                  {
                    "attributes": {
                      "constant": false,
                      "name": "",
                      "scope": 6481,
                      "stateVariable": false,
                      "storageLocation": "default",
                      "type": "uint256",
                      "value": null,
                      "visibility": "internal"
                    },
                    "children": [
                      {
                        "attributes": {
                          "name": "uint256",
                          "type": "uint256"
                        },
                        "id": 6469,
                        "name": "ElementaryTypeName",
                        "src": "821:7:15"
                      }
                    ],
                    "id": 6470,
                    "name": "VariableDeclaration",
                    "src": "821:7:15"
                  },
                  {
                    "attributes": {
                      "constant": false,
                      "name": "",
                      "scope": 6481,
                      "stateVariable": false,
                      "storageLocation": "default",
                      "type": "uint256",
                      "value": null,
                      "visibility": "internal"
                    },
                    "children": [
                      {
                        "attributes": {
                          "name": "uint256",
                          "type": "uint256"
                        },
                        "id": 6471,
                        "name": "ElementaryTypeName",
                        "src": "842:7:15"
                      }
                    ],
                    "id": 6472,
                    "name": "VariableDeclaration",
                    "src": "842:7:15"
                  }
                ],
                "id": 6473,
                "name": "ParameterList",
                "src": "765:94:15"
              },
              {
                "children": [
                  {
                    "attributes": {
                      "functionReturnParameters": 6473
                    },
                    "children": [
                      {
                        "attributes": {
                          "argumentTypes": null,
                          "isConstant": false,
                          "isInlineArray": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "type": "tuple(int_const 1,int_const 1,int_const 0,int_const 1)"
                        },
                        "children": [
                          {
                            "attributes": {
                              "argumentTypes": null,
                              "hexvalue": "31",
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "subdenomination": null,
                              "token": "number",
                              "type": "int_const 1",
                              "value": "1"
                            },
                            "id": 6474,
                            "name": "Literal",
                            "src": "882:1:15"
                          },
                          {
                            "attributes": {
                              "argumentTypes": null,
                              "hexvalue": "31",
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "subdenomination": null,
                              "token": "number",
                              "type": "int_const 1",
                              "value": "1"
                            },
                            "id": 6475,
                            "name": "Literal",
                            "src": "885:1:15"
                          },
                          {
                            "attributes": {
                              "argumentTypes": null,
                              "hexvalue": "30",
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "subdenomination": null,
                              "token": "number",
                              "type": "int_const 0",
                              "value": "0"
                            },
                            "id": 6476,
                            "name": "Literal",
                            "src": "888:1:15"
                          },
                          {
                            "attributes": {
                              "argumentTypes": null,
                              "hexvalue": "31",
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "subdenomination": null,
                              "token": "number",
                              "type": "int_const 1",
                              "value": "1"
                            },
                            "id": 6477,
                            "name": "Literal",
                            "src": "891:1:15"
                          }
                        ],
                        "id": 6478,
                        "name": "TupleExpression",
                        "src": "881:12:15"
                      }
                    ],
                    "id": 6479,
                    "name": "Return",
                    "src": "874:19:15"
                  }
                ],
                "id": 6480,
                "name": "Block",
                "src": "864:36:15"
              }
            ],
            "id": 6481,
            "name": "FunctionDefinition",
            "src": "691:209:15"
          }
        ],
        "id": 6482,
        "name": "ContractDefinition",
        "src": "55:847:15"
      }
    ],
    "id": 6483,
    "name": "SourceUnit",
    "src": "0:903:15"
  },
  "compiler": {
    "name": "solc",
    "version": "0.5.13+commit.5b0b510c.Emscripten.clang"
  },
  "networks": {},
  "schemaVersion": "3.4.13",
  "updatedAt": "2024-03-05T15:18:03.885Z",
  "devdoc": {
    "methods": {
      "allowance(address,address)": {
        "params": {
          "accountOwner": "The owner of the StableToken.",
          "spender": "The spender of the StableToken."
        },
        "return": "The amount of StableToken owner is allowing spender to spend."
      },
      "approve(address,uint256)": {
        "params": {
          "spender": "The address which is being approved to spend StableToken.",
          "value": "The amount of StableToken approved to the spender."
        },
        "return": "True if the transaction succeeds."
      },
      "balanceOf(address)": {
        "params": {
          "accountOwner": "The address to query the balance of."
        },
        "return": "The balance of the specified address."
      },
      "burn(uint256)": {
        "params": {
          "value": "The amount of StableToken to burn."
        }
      },
      "checkProofOfPossession(address,bytes,bytes)": {
        "params": {
          "blsKey": "The BLS public key that the validator is using for consensus, should pass proof  of possession. 48 bytes.",
          "blsPop": "The BLS public key proof-of-possession, which consists of a signature on the  account address. 96 bytes.",
          "sender": "The address signed by the BLS key to generate the proof of possession."
        },
        "return": "True upon success."
      },
      "constructor": {
        "params": {
          "test": "Set to true to skip implementation initialization."
        }
      },
      "creditGasFees(address,address,address,address,uint256,uint256,uint256,uint256)": {
        "details": "Note that this function is called by the protocol when paying for tx fees in this currency. Before the tx is executed, gas is debited from the sender via a call to `debitGasFees`. Note too that the events emitted by `creditGasFees` reflect the *net* gas fee payments for the transaction.",
        "params": {
          "baseTxFee": "Community fund fee",
          "communityFund": "Community fund address",
          "feeRecipient": "Coinbase address",
          "from": "The account to debit balance from",
          "gatewayFee": "Gateway fee",
          "gatewayFeeRecipient": "Gateway address",
          "tipTxFee": "Coinbase fee"
        }
      },
      "debitGasFees(address,uint256)": {
        "details": "Note that this function is called by the protocol when paying for tx fees in this currency. After the tx is executed, gas is refunded to the sender and credited to the various tx fee recipients via a call to `creditGasFees`. Note too that the events emitted by `creditGasFees` reflect the *net* gas fee payments for the transaction.",
        "params": {
          "from": "The account to reserve balance from",
          "value": "The amount of balance to reserve"
        }
      },
      "decimals()": {
        "return": "The number of decimal places to which StableToken is divisible."
      },
      "decreaseAllowance(address,uint256)": {
        "params": {
          "spender": "The address which is being approved to spend StableToken.",
          "value": "The decrement of the amount of StableToken approved to the spender."
        },
        "return": "True if the transaction succeeds."
      },
      "fractionMulExp(uint256,uint256,uint256,uint256,uint256,uint256)": {
        "params": {
          "_decimals": "precision",
          "aDenominator": "Denominator of first fraction",
          "aNumerator": "Numerator of first fraction",
          "bDenominator": "Denominator of exponentiated fraction",
          "bNumerator": "Numerator of exponentiated fraction",
          "exponent": "exponent to raise b to"
        },
        "return": "Numerator of the computed quantity (not reduced).Denominator of the computed quantity (not reduced)."
      },
      "getBlockNumberFromHeader(bytes)": {
        "params": {
          "header": "RLP encoded header"
        },
        "return": "Block number."
      },
      "getEpochNumber()": {
        "return": "Current epoch number."
      },
      "getEpochNumberOfBlock(uint256)": {
        "params": {
          "blockNumber": "Block number where epoch number is calculated."
        },
        "return": "Epoch number."
      },
      "getEpochSize()": {
        "return": "The current epoch size in blocks."
      },
      "getExchangeRegistryId()": {
        "details": "When this storage is uninitialized, it falls back to the default EXCHANGE_REGISTRY_ID. exchangeRegistryId was introduced after the initial release of cUSD's StableToken, so exchangeRegistryId will be uninitialized for that contract. If cUSD's StableToken exchangeRegistryId were to be correctly initialized, this function could be deprecated in favor of using exchangeRegistryId directly.",
        "return": "Registry id for the corresponding exchange."
      },
      "getInflationParameters()": {
        "return": "ratefactorupdatePeriodfactorLastUpdated"
      },
      "getParentSealBitmap(uint256)": {
        "params": {
          "blockNumber": "Block number to retrieve. Must be within 4 epochs of the current number."
        },
        "return": "Bitmap parent seal with set bits at indices corresponding to signing validators."
      },
      "getVerifiedSealBitmapFromHeader(bytes)": {
        "params": {
          "header": "RLP encoded header"
        },
        "return": "Bitmap parent seal with set bits at indices correspoinding to signing validators."
      },
      "getVersionNumber()": {
        "details": "This function is overloaded to maintain a distinct version from StableToken.sol.",
        "return": "Storage version of the contract.Major version of the contract.Minor version of the contract.Patch version of the contract."
      },
      "hashHeader(bytes)": {
        "params": {
          "header": "RLP encoded header"
        },
        "return": "Header hash."
      },
      "increaseAllowance(address,uint256)": {
        "params": {
          "spender": "The address which is being approved to spend StableToken.",
          "value": "The increment of the amount of StableToken approved to the spender."
        },
        "return": "True if the transaction succeeds."
      },
      "initialize(string,string,uint8,address,uint256,uint256,address[],uint256[],string)": {
        "params": {
          "_decimals": "Tokens are divisible to this many decimal places.",
          "_name": "The name of the stable token (English)",
          "_symbol": "A short symbol identifying the token (e.g. \"cUSD\")",
          "exchangeIdentifier": "String identifier of exchange in registry (for specific fiat pairs)",
          "inflationFactorUpdatePeriod": "How often the inflation factor is updated, in seconds.",
          "inflationRate": "Weekly inflation rate.",
          "initialBalanceAddresses": "Array of addresses with an initial balance.",
          "initialBalanceValues": "Array of balance values corresponding to initialBalanceAddresses.",
          "registryAddress": "Address of the Registry contract."
        }
      },
      "isOwner()": {
        "details": "Returns true if the caller is the current owner."
      },
      "minQuorumSize(uint256)": {
        "details": "Computed in celo-blockchain as int(math.Ceil(float64(2*valSet.Size()) / 3))"
      },
      "minQuorumSizeInCurrentSet()": {
        "return": "Byzantine quorum of validators."
      },
      "mint(address,uint256)": {
        "params": {
          "to": "The account for which to mint tokens.",
          "value": "The amount of StableToken to mint."
        }
      },
      "name()": {
        "return": "The name of the stable token."
      },
      "numberValidatorsInCurrentSet()": {
        "return": "Size of the current elected validator set."
      },
      "numberValidatorsInSet(uint256)": {
        "params": {
          "blockNumber": "Block number to retrieve the validator set from."
        },
        "return": "Size of the validator set."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner.     * NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "setInflationParameters(uint256,uint256)": {
        "params": {
          "rate": "New rate.",
          "updatePeriod": "How often inflationFactor is updated."
        }
      },
      "setRegistry(address)": {
        "params": {
          "registryAddress": "The address of a registry contract for routing to other contracts."
        }
      },
      "symbol()": {
        "return": "The symbol of the stable token."
      },
      "totalSupply()": {
        "details": "Though totalSupply_ is stored in units, this returns value.",
        "return": "The total value of StableToken in existence"
      },
      "transfer(address,uint256)": {
        "params": {
          "to": "The address to transfer to.",
          "value": "The amount to be transferred."
        }
      },
      "transferFrom(address,address,uint256)": {
        "params": {
          "from": "The address to transfer StableToken from.",
          "to": "The address to transfer StableToken to.",
          "value": "The amount of StableToken to transfer."
        },
        "return": "True if the transaction succeeds."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "transferWithComment(address,uint256,string)": {
        "params": {
          "comment": "The transfer comment.",
          "to": "The address to transfer to.",
          "value": "The amount to be transferred."
        },
        "return": "True if the transaction succeeds."
      },
      "unitsToValue(uint256)": {
        "params": {
          "units": "The units to convert to value."
        },
        "return": "The value corresponding to `units` given the current inflation factor."
      },
      "validatorSignerAddressFromCurrentSet(uint256)": {
        "params": {
          "index": "Index of requested validator in the validator set."
        },
        "return": "Address of validator at the requested index."
      },
      "validatorSignerAddressFromSet(uint256,uint256)": {
        "params": {
          "blockNumber": "Block number to retrieve the validator set from.",
          "index": "Index of requested validator in the validator set."
        },
        "return": "Address of validator at the requested index."
      },
      "valueToUnits(uint256)": {
        "details": "We don't compute the updated inflationFactor here because we assume any function calling this will have updated the inflation factor.",
        "params": {
          "value": "The value to convert to units."
        },
        "return": "The units corresponding to `value` given the current inflation factor."
      }
    }
  },
  "userdoc": {
    "methods": {
      "allowance(address,address)": {
        "notice": "Gets the amount of owner's StableToken allowed to be spent by spender."
      },
      "approve(address,uint256)": {
        "notice": "Approve a user to transfer StableToken on behalf of another user."
      },
      "balanceOf(address)": {
        "notice": "Gets the balance of the specified address using the presently stored inflation factor."
      },
      "burn(uint256)": {
        "notice": "Burns StableToken from the balance of msg.sender."
      },
      "checkProofOfPossession(address,bytes,bytes)": {
        "notice": "Checks a BLS proof of possession."
      },
      "constructor": "Sets initialized == true on implementation contracts.",
      "creditGasFees(address,address,address,address,uint256,uint256,uint256,uint256)": {
        "notice": "Alternative function to credit balance after making payments for gas in this StableToken currency."
      },
      "debitGasFees(address,uint256)": {
        "notice": "Reserve balance for making payments for gas in this StableToken currency."
      },
      "decreaseAllowance(address,uint256)": {
        "notice": "Decrease the allowance of another user."
      },
      "fractionMulExp(uint256,uint256,uint256,uint256,uint256,uint256)": {
        "notice": "calculate a * b^x for fractions a, b to `decimals` precision"
      },
      "getBlockNumberFromHeader(bytes)": {
        "notice": "Parses block number out of header."
      },
      "getEpochNumber()": {
        "notice": "Returns the epoch number at a block."
      },
      "getEpochNumberOfBlock(uint256)": {
        "notice": "Returns the epoch number at a block."
      },
      "getEpochSize()": {
        "notice": "Returns the current epoch size in blocks."
      },
      "getExchangeRegistryId()": {
        "notice": "Returns the exchange id in the registry of the corresponding fiat pair exchange."
      },
      "getInflationParameters()": {
        "notice": "gets inflation parameters."
      },
      "getParentSealBitmap(uint256)": {
        "notice": "Gets the parent seal bitmap from the header at the given block number."
      },
      "getVerifiedSealBitmapFromHeader(bytes)": {
        "notice": "Verifies the BLS signature on the header and returns the seal bitmap. The validator set used for verification is retrieved based on the parent hash field of the header.  If the parent hash is not in the blockchain, verification fails."
      },
      "getVersionNumber()": {
        "notice": "Returns the storage, major, minor, and patch version of the contract."
      },
      "hashHeader(bytes)": {
        "notice": "Computes hash of header."
      },
      "increaseAllowance(address,uint256)": {
        "notice": "Increase the allowance of another user."
      },
      "minQuorumSize(uint256)": {
        "notice": "Returns the minimum number of required signers for a given block number."
      },
      "minQuorumSizeInCurrentSet()": {
        "notice": "Computes byzantine quorum from current validator set size"
      },
      "mint(address,uint256)": {
        "notice": "Mints new StableToken and gives it to 'to'."
      },
      "numberValidatorsInCurrentSet()": {
        "notice": "Gets the size of the current elected validator set."
      },
      "numberValidatorsInSet(uint256)": {
        "notice": "Gets the size of the validator set that must sign the given block number."
      },
      "setInflationParameters(uint256,uint256)": {
        "notice": "Updates Inflation Parameters."
      },
      "setRegistry(address)": {
        "notice": "Updates the address pointing to a Registry contract."
      },
      "transfer(address,uint256)": {
        "notice": "Transfers `value` from `msg.sender` to `to`"
      },
      "transferFrom(address,address,uint256)": {
        "notice": "Transfers StableToken from one address to another on behalf of a user."
      },
      "transferWithComment(address,uint256,string)": {
        "notice": "Transfer token for a specified address"
      },
      "unitsToValue(uint256)": {
        "notice": "Returns the value of a given number of units given the current inflation factor."
      },
      "validatorSignerAddressFromCurrentSet(uint256)": {
        "notice": "Gets a validator address from the current validator set."
      },
      "validatorSignerAddressFromSet(uint256,uint256)": {
        "notice": "Gets a validator address from the validator set at the given block number."
      },
      "valueToUnits(uint256)": {
        "notice": "Returns the units for a given value given the current inflation factor."
      }
    }
  }
}