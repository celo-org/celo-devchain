{
  "contractName": "ExchangeEUR",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "test",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "goldBucket",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "stableBucket",
          "type": "uint256"
        }
      ],
      "name": "BucketsUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "exchanger",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "sellAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "buyAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "soldGold",
          "type": "bool"
        }
      ],
      "name": "Exchanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "minimumReports",
          "type": "uint256"
        }
      ],
      "name": "MinimumReportsSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "registryAddress",
          "type": "address"
        }
      ],
      "name": "RegistrySet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "reserveFraction",
          "type": "uint256"
        }
      ],
      "name": "ReserveFractionSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "spread",
          "type": "uint256"
        }
      ],
      "name": "SpreadSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "stable",
          "type": "address"
        }
      ],
      "name": "StableTokenSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "updateFrequency",
          "type": "uint256"
        }
      ],
      "name": "UpdateFrequencySet",
      "type": "event"
    },
    {
      "constant": false,
      "inputs": [],
      "name": "activateStable",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "buyAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxSellAmount",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "buyGold",
          "type": "bool"
        }
      ],
      "name": "buy",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "sellAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minBuyAmount",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "sellGold",
          "type": "bool"
        }
      ],
      "name": "exchange",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "bool",
          "name": "sellGold",
          "type": "bool"
        }
      ],
      "name": "getBuyAndSellBuckets",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "sellAmount",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "sellGold",
          "type": "bool"
        }
      ],
      "name": "getBuyTokenAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "buyAmount",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "sellGold",
          "type": "bool"
        }
      ],
      "name": "getSellTokenAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "goldBucket",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "registryAddress",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "stableTokenIdentifier",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "_spread",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_reserveFraction",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_updateFrequency",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_minimumReports",
          "type": "uint256"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "initialized",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "isOwner",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "lastBucketUpdate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "minimumReports",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "registry",
      "outputs": [
        {
          "internalType": "contract IRegistry",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "reserveFraction",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "sellAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minBuyAmount",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "sellGold",
          "type": "bool"
        }
      ],
      "name": "sell",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newMininumReports",
          "type": "uint256"
        }
      ],
      "name": "setMinimumReports",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "registryAddress",
          "type": "address"
        }
      ],
      "name": "setRegistry",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newReserveFraction",
          "type": "uint256"
        }
      ],
      "name": "setReserveFraction",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newSpread",
          "type": "uint256"
        }
      ],
      "name": "setSpread",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "newStableToken",
          "type": "address"
        }
      ],
      "name": "setStableToken",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newUpdateFrequency",
          "type": "uint256"
        }
      ],
      "name": "setUpdateFrequency",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "spread",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "stable",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "stableBucket",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "stableTokenRegistryId",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "updateFrequency",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "getVersionNumber",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "metadata": "{\"compiler\":{\"version\":\"0.5.13+commit.5b0b510c\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"test\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"goldBucket\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stableBucket\",\"type\":\"uint256\"}],\"name\":\"BucketsUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"exchanger\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sellAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"buyAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"soldGold\",\"type\":\"bool\"}],\"name\":\"Exchanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minimumReports\",\"type\":\"uint256\"}],\"name\":\"MinimumReportsSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"registryAddress\",\"type\":\"address\"}],\"name\":\"RegistrySet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reserveFraction\",\"type\":\"uint256\"}],\"name\":\"ReserveFractionSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"spread\",\"type\":\"uint256\"}],\"name\":\"SpreadSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"stable\",\"type\":\"address\"}],\"name\":\"StableTokenSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"updateFrequency\",\"type\":\"uint256\"}],\"name\":\"UpdateFrequencySet\",\"type\":\"event\"},{\"constant\":false,\"inputs\":[],\"name\":\"activateStable\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"buyAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxSellAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"buyGold\",\"type\":\"bool\"}],\"name\":\"buy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"sellAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minBuyAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"sellGold\",\"type\":\"bool\"}],\"name\":\"exchange\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bool\",\"name\":\"sellGold\",\"type\":\"bool\"}],\"name\":\"getBuyAndSellBuckets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"sellAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"sellGold\",\"type\":\"bool\"}],\"name\":\"getBuyTokenAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"buyAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"sellGold\",\"type\":\"bool\"}],\"name\":\"getSellTokenAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getVersionNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"goldBucket\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"registryAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"stableTokenIdentifier\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_spread\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_reserveFraction\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_updateFrequency\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minimumReports\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"initialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastBucketUpdate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minimumReports\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"registry\",\"outputs\":[{\"internalType\":\"contract IRegistry\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"reserveFraction\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"sellAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minBuyAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"sellGold\",\"type\":\"bool\"}],\"name\":\"sell\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newMininumReports\",\"type\":\"uint256\"}],\"name\":\"setMinimumReports\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"registryAddress\",\"type\":\"address\"}],\"name\":\"setRegistry\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newReserveFraction\",\"type\":\"uint256\"}],\"name\":\"setReserveFraction\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newSpread\",\"type\":\"uint256\"}],\"name\":\"setSpread\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newStableToken\",\"type\":\"address\"}],\"name\":\"setStableToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newUpdateFrequency\",\"type\":\"uint256\"}],\"name\":\"setUpdateFrequency\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"spread\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stable\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stableBucket\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stableTokenRegistryId\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"updateFrequency\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"methods\":{\"activateStable()\":{\"details\":\"Will revert if stable token is not registered or does not have oracle reports.\"},\"buy(uint256,uint256,bool)\":{\"details\":\"The caller must first have approved `maxSellAmount` to the exchange.This function can be frozen via the Freezable interface.\",\"params\":{\"buyAmount\":\"The number of tokens for the exchange to send in return.\",\"buyGold\":\"True if the exchange is sending CELO to the caller, false otherwise.\",\"maxSellAmount\":\"The maximum number of tokens to send to the exchange.\"},\"return\":\"The number of tokens sent to the exchange.\"},\"constructor\":{\"params\":{\"test\":\"Set to true to skip implementation initialization\"}},\"exchange(uint256,uint256,bool)\":{\"details\":\"DEPRECATED - Use `buy` or `sell`.The caller must first have approved `sellAmount` to the exchange.This function can be frozen via the Freezable interface.\",\"params\":{\"minBuyAmount\":\"The minimum number of tokens for the exchange to send in return.\",\"sellAmount\":\"The number of tokens to send to the exchange.\",\"sellGold\":\"True if the caller is sending CELO to the exchange, false otherwise.\"},\"return\":\"The number of tokens sent by the exchange.\"},\"getBuyAndSellBuckets(bool)\":{\"params\":{\"sellGold\":\"`true` if gold is the sell token.\"},\"return\":\"buyTokenBucketsellTokenBucket\"},\"getBuyTokenAmount(uint256,bool)\":{\"params\":{\"sellAmount\":\"The amount of sellToken the user is selling to the exchange.\",\"sellGold\":\"`true` if gold is the sell token.\"},\"return\":\"The corresponding buyToken amount.\"},\"getSellTokenAmount(uint256,bool)\":{\"params\":{\"buyAmount\":\"The amount of buyToken the user would like to purchase.\",\"sellGold\":\"`true` if gold is the sell token.\"},\"return\":\"The corresponding sellToken amount.\"},\"getVersionNumber()\":{\"details\":\"This function is overloaded to maintain a distinct version from Exchange.sol.\",\"return\":\"Storage version of the contract.Major version of the contract.Minor version of the contract.Patch version of the contract.\"},\"initialize(address,string,uint256,uint256,uint256,uint256)\":{\"params\":{\"_minimumReports\":\"The minimum number of fresh reports that need to be present in the oracle to update buckets commit to the gold bucket\",\"_reserveFraction\":\"Fraction to commit to the gold bucket\",\"_spread\":\"Spread charged on exchanges\",\"_updateFrequency\":\"The time period that needs to elapse between bucket updates\",\"registryAddress\":\"The address of the registry core smart contract.\",\"stableTokenIdentifier\":\"String identifier of stabletoken in registry\"}},\"isOwner()\":{\"details\":\"Returns true if the caller is the current owner.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner.     * NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"sell(uint256,uint256,bool)\":{\"details\":\"The caller must first have approved `sellAmount` to the exchange.This function can be frozen via the Freezable interface.\",\"params\":{\"minBuyAmount\":\"The minimum number of tokens for the exchange to send in return.\",\"sellAmount\":\"The number of tokens to send to the exchange.\",\"sellGold\":\"True if the caller is sending CELO to the exchange, false otherwise.\"},\"return\":\"The number of tokens sent by the exchange.\"},\"setMinimumReports(uint256)\":{\"params\":{\"newMininumReports\":\"The new update minimum number of reports required\"}},\"setRegistry(address)\":{\"params\":{\"registryAddress\":\"The address of a registry contract for routing to other contracts.\"}},\"setReserveFraction(uint256)\":{\"params\":{\"newReserveFraction\":\"The new value for the reserve fraction\"}},\"setSpread(uint256)\":{\"params\":{\"newSpread\":\"The new value for the spread\"}},\"setStableToken(address)\":{\"params\":{\"newStableToken\":\"The new address for Stable Token\"}},\"setUpdateFrequency(uint256)\":{\"params\":{\"newUpdateFrequency\":\"The new update frequency\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}}},\"userdoc\":{\"methods\":{\"activateStable()\":{\"notice\":\"Ensures stable token address is set in storage and initializes buckets.\"},\"buy(uint256,uint256,bool)\":{\"notice\":\"Exchanges an unspecified amount (up to a threshold) of one token for a specific amount of another.\"},\"constructor\":\"Sets initialized == true on implementation contracts\",\"exchange(uint256,uint256,bool)\":{\"notice\":\"Exchanges a specific amount of one token for an unspecified amount (greater than a threshold) of another.\"},\"getBuyAndSellBuckets(bool)\":{\"notice\":\"Returns the buy token and sell token bucket sizes, in order. The ratio of the two also represents the exchange rate between the two.\"},\"getBuyTokenAmount(uint256,bool)\":{\"notice\":\"Returns the amount of buy tokens a user would get for sellAmount of the sell token.\"},\"getSellTokenAmount(uint256,bool)\":{\"notice\":\"Returns the amount of sell tokens a user would need to exchange to receive buyAmount of buy tokens.\"},\"getVersionNumber()\":{\"notice\":\"Returns the storage, major, minor, and patch version of the contract.\"},\"initialize(address,string,uint256,uint256,uint256,uint256)\":{\"notice\":\"Used in place of the constructor to allow the contract to be upgradable via proxy.\"},\"sell(uint256,uint256,bool)\":{\"notice\":\"Exchanges a specific amount of one token for an unspecified amount (greater than a threshold) of another.\"},\"setMinimumReports(uint256)\":{\"notice\":\"Allows owner to set the minimum number of reports required\"},\"setRegistry(address)\":{\"notice\":\"Updates the address pointing to a Registry contract.\"},\"setReserveFraction(uint256)\":{\"notice\":\"Allows owner to set the Reserve Fraction\"},\"setSpread(uint256)\":{\"notice\":\"Allows owner to set the spread\"},\"setStableToken(address)\":{\"notice\":\"Allows owner to set the Stable Token address\"},\"setUpdateFrequency(uint256)\":{\"notice\":\"Allows owner to set the update frequency\"}}}},\"settings\":{\"compilationTarget\":{\"project:/lib/mento-core/contracts/ExchangeEUR.sol\":\"ExchangeEUR\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"openzeppelin-solidity/contracts/GSN/Context.sol\":{\"content\":\"pragma solidity ^0.5.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\ncontract Context {\\n    // Empty internal constructor, to prevent people from mistakenly deploying\\n    // an instance of this contract, which should be used via inheritance.\\n    constructor () internal { }\\n    // solhint-disable-previous-line no-empty-blocks\\n\\n    function _msgSender() internal view returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x90a3995645af7562d84b9d69363ffa5ae7217714ab61e951bf7bc450f40e4061\"},\"openzeppelin-solidity/contracts/math/SafeMath.sol\":{\"content\":\"pragma solidity ^0.5.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        // Solidity only automatically asserts when dividing by 0\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0x640b6dee7a4b830bdfd52b5031a07fc2b12209f5b2e29e5d364a7d37f69d8076\"},\"openzeppelin-solidity/contracts/ownership/Ownable.sol\":{\"content\":\"pragma solidity ^0.5.0;\\n\\nimport \\\"../GSN/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\ncontract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(isOwner(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the caller is the current owner.\\n     */\\n    function isOwner() public view returns (bool) {\\n        return _msgSender() == _owner;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public onlyOwner {\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     */\\n    function _transferOwnership(address newOwner) internal {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x6fb9d7889769d7cc161225f9ef7a90e468ba9788b253816f8d8b6894d3472c24\"},\"openzeppelin-solidity/contracts/token/ERC20/IERC20.sol\":{\"content\":\"pragma solidity ^0.5.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\\n * the optional functions; to access them see {ERC20Detailed}.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xe5bb0f57cff3e299f360052ba50f1ea0fff046df2be070b6943e0e3c3fdad8a9\"},\"project:/lib/mento-core/contracts/Exchange.sol\":{\"content\":\"pragma solidity ^0.5.13;\\n\\nimport \\\"openzeppelin-solidity/contracts/math/SafeMath.sol\\\";\\nimport \\\"openzeppelin-solidity/contracts/ownership/Ownable.sol\\\";\\nimport \\\"./interfaces/IExchange.sol\\\";\\nimport \\\"./interfaces/ISortedOracles.sol\\\";\\nimport \\\"./interfaces/IReserve.sol\\\";\\nimport \\\"./interfaces/IStableToken.sol\\\";\\nimport \\\"./common/Initializable.sol\\\";\\nimport \\\"./common/FixidityLib.sol\\\";\\nimport \\\"./common/Freezable.sol\\\";\\nimport \\\"./common/UsingRegistry.sol\\\";\\nimport \\\"./common/interfaces/ICeloVersionedContract.sol\\\";\\nimport \\\"./common/ReentrancyGuard.sol\\\";\\n\\n/**\\n * @title Contract that allows to exchange StableToken for GoldToken and vice versa\\n * using a Constant Product Market Maker Model\\n */\\ncontract Exchange is\\n    IExchange,\\n    ICeloVersionedContract,\\n    Initializable,\\n    Ownable,\\n    UsingRegistry,\\n    ReentrancyGuard,\\n    Freezable\\n{\\n    using SafeMath for uint256;\\n    using FixidityLib for FixidityLib.Fraction;\\n\\n    event Exchanged(address indexed exchanger, uint256 sellAmount, uint256 buyAmount, bool soldGold);\\n    event UpdateFrequencySet(uint256 updateFrequency);\\n    event MinimumReportsSet(uint256 minimumReports);\\n    event StableTokenSet(address indexed stable);\\n    event SpreadSet(uint256 spread);\\n    event ReserveFractionSet(uint256 reserveFraction);\\n    event BucketsUpdated(uint256 goldBucket, uint256 stableBucket);\\n\\n    FixidityLib.Fraction public spread;\\n\\n    // Fraction of the Reserve that is committed to the gold bucket when updating\\n    // buckets.\\n    FixidityLib.Fraction public reserveFraction;\\n\\n    address public stable;\\n\\n    // Size of the Uniswap gold bucket\\n    uint256 public goldBucket;\\n    // Size of the Uniswap stable token bucket\\n    uint256 public stableBucket;\\n\\n    uint256 public lastBucketUpdate = 0;\\n    uint256 public updateFrequency;\\n    uint256 public minimumReports;\\n\\n    bytes32 public stableTokenRegistryId;\\n\\n    modifier updateBucketsIfNecessary() {\\n        _updateBucketsIfNecessary();\\n        _;\\n    }\\n\\n    /**\\n     * @notice Returns the storage, major, minor, and patch version of the contract.\\n     * @return Storage version of the contract.\\n     * @return Major version of the contract.\\n     * @return Minor version of the contract.\\n     * @return Patch version of the contract.\\n     */\\n    function getVersionNumber()\\n        external\\n        pure\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256\\n        )\\n    {\\n        return (1, 2, 0, 0);\\n    }\\n\\n    /**\\n     * @notice Sets initialized == true on implementation contracts\\n     * @param test Set to true to skip implementation initialization\\n     */\\n    constructor(bool test) public Initializable(test) {}\\n\\n    /**\\n     * @notice Used in place of the constructor to allow the contract to be upgradable via proxy.\\n     * @param registryAddress The address of the registry core smart contract.\\n     * @param stableTokenIdentifier String identifier of stabletoken in registry\\n     * @param _spread Spread charged on exchanges\\n     * @param _reserveFraction Fraction to commit to the gold bucket\\n     * @param _updateFrequency The time period that needs to elapse between bucket\\n     * updates\\n     * @param _minimumReports The minimum number of fresh reports that need to be\\n     * present in the oracle to update buckets\\n     * commit to the gold bucket\\n     */\\n    function initialize(\\n        address registryAddress,\\n        string calldata stableTokenIdentifier,\\n        uint256 _spread,\\n        uint256 _reserveFraction,\\n        uint256 _updateFrequency,\\n        uint256 _minimumReports\\n    ) external initializer {\\n        _transferOwnership(msg.sender);\\n        setRegistry(registryAddress);\\n        stableTokenRegistryId = keccak256(abi.encodePacked(stableTokenIdentifier));\\n        setSpread(_spread);\\n        setReserveFraction(_reserveFraction);\\n        setUpdateFrequency(_updateFrequency);\\n        setMinimumReports(_minimumReports);\\n    }\\n\\n    /**\\n     * @notice Ensures stable token address is set in storage and initializes buckets.\\n     * @dev Will revert if stable token is not registered or does not have oracle reports.\\n     */\\n    function activateStable() external onlyOwner {\\n        require(stable == address(0), \\\"StableToken address already activated\\\");\\n        _setStableToken(registry.getAddressForOrDie(stableTokenRegistryId));\\n        _updateBucketsIfNecessary();\\n    }\\n\\n    /**\\n     * @notice Exchanges a specific amount of one token for an unspecified amount\\n     * (greater than a threshold) of another.\\n     * @param sellAmount The number of tokens to send to the exchange.\\n     * @param minBuyAmount The minimum number of tokens for the exchange to send in return.\\n     * @param sellGold True if the caller is sending CELO to the exchange, false otherwise.\\n     * @return The number of tokens sent by the exchange.\\n     * @dev The caller must first have approved `sellAmount` to the exchange.\\n     * @dev This function can be frozen via the Freezable interface.\\n     */\\n    function sell(\\n        uint256 sellAmount,\\n        uint256 minBuyAmount,\\n        bool sellGold\\n    ) public onlyWhenNotFrozen updateBucketsIfNecessary nonReentrant returns (uint256) {\\n        (uint256 buyTokenBucket, uint256 sellTokenBucket) = _getBuyAndSellBuckets(sellGold);\\n        uint256 buyAmount = _getBuyTokenAmount(buyTokenBucket, sellTokenBucket, sellAmount);\\n\\n        require(buyAmount >= minBuyAmount, \\\"Calculated buyAmount was less than specified minBuyAmount\\\");\\n\\n        _exchange(sellAmount, buyAmount, sellGold);\\n        return buyAmount;\\n    }\\n\\n    /**\\n     * @dev DEPRECATED - Use `buy` or `sell`.\\n     * @notice Exchanges a specific amount of one token for an unspecified amount\\n     * (greater than a threshold) of another.\\n     * @param sellAmount The number of tokens to send to the exchange.\\n     * @param minBuyAmount The minimum number of tokens for the exchange to send in return.\\n     * @param sellGold True if the caller is sending CELO to the exchange, false otherwise.\\n     * @return The number of tokens sent by the exchange.\\n     * @dev The caller must first have approved `sellAmount` to the exchange.\\n     * @dev This function can be frozen via the Freezable interface.\\n     */\\n    function exchange(\\n        uint256 sellAmount,\\n        uint256 minBuyAmount,\\n        bool sellGold\\n    ) external returns (uint256) {\\n        return sell(sellAmount, minBuyAmount, sellGold);\\n    }\\n\\n    /**\\n     * @notice Exchanges an unspecified amount (up to a threshold) of one token for\\n     * a specific amount of another.\\n     * @param buyAmount The number of tokens for the exchange to send in return.\\n     * @param maxSellAmount The maximum number of tokens to send to the exchange.\\n     * @param buyGold True if the exchange is sending CELO to the caller, false otherwise.\\n     * @return The number of tokens sent to the exchange.\\n     * @dev The caller must first have approved `maxSellAmount` to the exchange.\\n     * @dev This function can be frozen via the Freezable interface.\\n     */\\n    function buy(\\n        uint256 buyAmount,\\n        uint256 maxSellAmount,\\n        bool buyGold\\n    ) external onlyWhenNotFrozen updateBucketsIfNecessary nonReentrant returns (uint256) {\\n        bool sellGold = !buyGold;\\n        (uint256 buyTokenBucket, uint256 sellTokenBucket) = _getBuyAndSellBuckets(sellGold);\\n        uint256 sellAmount = _getSellTokenAmount(buyTokenBucket, sellTokenBucket, buyAmount);\\n\\n        require(sellAmount <= maxSellAmount, \\\"Calculated sellAmount was greater than specified maxSellAmount\\\");\\n\\n        _exchange(sellAmount, buyAmount, sellGold);\\n        return sellAmount;\\n    }\\n\\n    /**\\n     * @notice Exchanges a specific amount of one token for a specific amount of another.\\n     * @param sellAmount The number of tokens to send to the exchange.\\n     * @param buyAmount The number of tokens for the exchange to send in return.\\n     * @param sellGold True if the msg.sender is sending CELO to the exchange, false otherwise.\\n     */\\n    function _exchange(\\n        uint256 sellAmount,\\n        uint256 buyAmount,\\n        bool sellGold\\n    ) private {\\n        IReserve reserve = IReserve(registry.getAddressForOrDie(RESERVE_REGISTRY_ID));\\n\\n        if (sellGold) {\\n            goldBucket = goldBucket.add(sellAmount);\\n            stableBucket = stableBucket.sub(buyAmount);\\n            require(\\n                getGoldToken().transferFrom(msg.sender, address(reserve), sellAmount),\\n                \\\"Transfer of sell token failed\\\"\\n            );\\n            require(IStableToken(stable).mint(msg.sender, buyAmount), \\\"Mint of stable token failed\\\");\\n        } else {\\n            stableBucket = stableBucket.add(sellAmount);\\n            goldBucket = goldBucket.sub(buyAmount);\\n            require(\\n                IERC20(stable).transferFrom(msg.sender, address(this), sellAmount),\\n                \\\"Transfer of sell token failed\\\"\\n            );\\n            IStableToken(stable).burn(sellAmount);\\n\\n            require(reserve.transferExchangeGold(msg.sender, buyAmount), \\\"Transfer of buyToken failed\\\");\\n        }\\n\\n        emit Exchanged(msg.sender, sellAmount, buyAmount, sellGold);\\n    }\\n\\n    /**\\n     * @notice Returns the amount of buy tokens a user would get for sellAmount of the sell token.\\n     * @param sellAmount The amount of sellToken the user is selling to the exchange.\\n     * @param sellGold `true` if gold is the sell token.\\n     * @return The corresponding buyToken amount.\\n     */\\n    function getBuyTokenAmount(uint256 sellAmount, bool sellGold) external view returns (uint256) {\\n        (uint256 buyTokenBucket, uint256 sellTokenBucket) = getBuyAndSellBuckets(sellGold);\\n        return _getBuyTokenAmount(buyTokenBucket, sellTokenBucket, sellAmount);\\n    }\\n\\n    /**\\n     * @notice Returns the amount of sell tokens a user would need to exchange to receive buyAmount of\\n     * buy tokens.\\n     * @param buyAmount The amount of buyToken the user would like to purchase.\\n     * @param sellGold `true` if gold is the sell token.\\n     * @return The corresponding sellToken amount.\\n     */\\n    function getSellTokenAmount(uint256 buyAmount, bool sellGold) external view returns (uint256) {\\n        (uint256 buyTokenBucket, uint256 sellTokenBucket) = getBuyAndSellBuckets(sellGold);\\n        return _getSellTokenAmount(buyTokenBucket, sellTokenBucket, buyAmount);\\n    }\\n\\n    /**\\n     * @notice Returns the buy token and sell token bucket sizes, in order. The ratio of\\n     * the two also represents the exchange rate between the two.\\n     * @param sellGold `true` if gold is the sell token.\\n     * @return buyTokenBucket\\n     * @return sellTokenBucket\\n     */\\n    function getBuyAndSellBuckets(bool sellGold) public view returns (uint256, uint256) {\\n        uint256 currentGoldBucket = goldBucket;\\n        uint256 currentStableBucket = stableBucket;\\n\\n        if (shouldUpdateBuckets()) {\\n            (currentGoldBucket, currentStableBucket) = getUpdatedBuckets();\\n        }\\n\\n        if (sellGold) {\\n            return (currentStableBucket, currentGoldBucket);\\n        } else {\\n            return (currentGoldBucket, currentStableBucket);\\n        }\\n    }\\n\\n    /**\\n     * @notice Allows owner to set the update frequency\\n     * @param newUpdateFrequency The new update frequency\\n     */\\n    function setUpdateFrequency(uint256 newUpdateFrequency) public onlyOwner {\\n        updateFrequency = newUpdateFrequency;\\n        emit UpdateFrequencySet(newUpdateFrequency);\\n    }\\n\\n    /**\\n     * @notice Allows owner to set the minimum number of reports required\\n     * @param newMininumReports The new update minimum number of reports required\\n     */\\n    function setMinimumReports(uint256 newMininumReports) public onlyOwner {\\n        minimumReports = newMininumReports;\\n        emit MinimumReportsSet(newMininumReports);\\n    }\\n\\n    /**\\n     * @notice Allows owner to set the Stable Token address\\n     * @param newStableToken The new address for Stable Token\\n     */\\n    function setStableToken(address newStableToken) public onlyOwner {\\n        _setStableToken(newStableToken);\\n    }\\n\\n    /**\\n     * @notice Allows owner to set the spread\\n     * @param newSpread The new value for the spread\\n     */\\n    function setSpread(uint256 newSpread) public onlyOwner {\\n        spread = FixidityLib.wrap(newSpread);\\n        require(FixidityLib.lte(spread, FixidityLib.fixed1()), \\\"Spread must be less than or equal to 1\\\");\\n        emit SpreadSet(newSpread);\\n    }\\n\\n    /**\\n     * @notice Allows owner to set the Reserve Fraction\\n     * @param newReserveFraction The new value for the reserve fraction\\n     */\\n    function setReserveFraction(uint256 newReserveFraction) public onlyOwner {\\n        reserveFraction = FixidityLib.wrap(newReserveFraction);\\n        require(reserveFraction.lt(FixidityLib.fixed1()), \\\"reserve fraction must be smaller than 1\\\");\\n        emit ReserveFractionSet(newReserveFraction);\\n    }\\n\\n    function _setStableToken(address newStableToken) internal {\\n        stable = newStableToken;\\n        emit StableTokenSet(newStableToken);\\n    }\\n\\n    /**\\n     * @notice Returns the buy token and sell token bucket sizes, in order. The ratio of\\n     * the two also represents the exchange rate between the two.\\n     * @param sellGold `true` if gold is the sell token.\\n     * @return buyTokenBucket\\n     * @return sellTokenBucket\\n     */\\n    function _getBuyAndSellBuckets(bool sellGold) private view returns (uint256, uint256) {\\n        if (sellGold) {\\n            return (stableBucket, goldBucket);\\n        } else {\\n            return (goldBucket, stableBucket);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the amount of buy tokens a user would get for sellAmount of the sell.\\n     * @param buyTokenBucket The buy token bucket size.\\n     * @param sellTokenBucket The sell token bucket size.\\n     * @param sellAmount The amount the user is selling to the exchange.\\n     * @return The corresponding buy amount.\\n     */\\n    function _getBuyTokenAmount(\\n        uint256 buyTokenBucket,\\n        uint256 sellTokenBucket,\\n        uint256 sellAmount\\n    ) private view returns (uint256) {\\n        if (sellAmount == 0) return 0;\\n\\n        FixidityLib.Fraction memory reducedSellAmount = getReducedSellAmount(sellAmount);\\n        FixidityLib.Fraction memory numerator = reducedSellAmount.multiply(FixidityLib.newFixed(buyTokenBucket));\\n        FixidityLib.Fraction memory denominator = FixidityLib.newFixed(sellTokenBucket).add(reducedSellAmount);\\n\\n        // Can't use FixidityLib.divide because denominator can easily be greater\\n        // than maxFixedDivisor.\\n        // Fortunately, we expect an integer result, so integer division gives us as\\n        // much precision as we could hope for.\\n        return numerator.unwrap().div(denominator.unwrap());\\n    }\\n\\n    /**\\n     * @notice Returns the amount of sell tokens a user would need to exchange to receive buyAmount of\\n     * buy tokens.\\n     * @param buyTokenBucket The buy token bucket size.\\n     * @param sellTokenBucket The sell token bucket size.\\n     * @param buyAmount The amount the user is buying from the exchange.\\n     * @return The corresponding sell amount.\\n     */\\n    function _getSellTokenAmount(\\n        uint256 buyTokenBucket,\\n        uint256 sellTokenBucket,\\n        uint256 buyAmount\\n    ) private view returns (uint256) {\\n        if (buyAmount == 0) return 0;\\n\\n        FixidityLib.Fraction memory numerator = FixidityLib.newFixed(buyAmount.mul(sellTokenBucket));\\n        FixidityLib.Fraction memory denominator = FixidityLib.newFixed(buyTokenBucket.sub(buyAmount)).multiply(\\n            FixidityLib.fixed1().subtract(spread)\\n        );\\n\\n        // See comment in _getBuyTokenAmount\\n        return numerator.unwrap().div(denominator.unwrap());\\n    }\\n\\n    /**\\n     * @return buyTokenBucket\\n     * @return sellTokenBucket\\n     */\\n    function getUpdatedBuckets() private view returns (uint256, uint256) {\\n        uint256 updatedGoldBucket = getUpdatedGoldBucket();\\n        uint256 exchangeRateNumerator;\\n        uint256 exchangeRateDenominator;\\n        (exchangeRateNumerator, exchangeRateDenominator) = getOracleExchangeRate();\\n        uint256 updatedStableBucket = exchangeRateNumerator.mul(updatedGoldBucket).div(exchangeRateDenominator);\\n        return (updatedGoldBucket, updatedStableBucket);\\n    }\\n\\n    function getUpdatedGoldBucket() private view returns (uint256) {\\n        uint256 reserveGoldBalance = getReserve().getUnfrozenReserveGoldBalance();\\n        return reserveFraction.multiply(FixidityLib.newFixed(reserveGoldBalance)).fromFixed();\\n    }\\n\\n    /**\\n     * @notice If conditions are met, updates the Uniswap bucket sizes to track\\n     * the price reported by the Oracle.\\n     */\\n    function _updateBucketsIfNecessary() private {\\n        if (shouldUpdateBuckets()) {\\n            // solhint-disable-next-line not-rely-on-time\\n            lastBucketUpdate = now;\\n\\n            (goldBucket, stableBucket) = getUpdatedBuckets();\\n            emit BucketsUpdated(goldBucket, stableBucket);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates the sell amount reduced by the spread.\\n     * @param sellAmount The original sell amount.\\n     * @return The reduced sell amount, computed as (1 - spread) * sellAmount\\n     */\\n    function getReducedSellAmount(uint256 sellAmount) private view returns (FixidityLib.Fraction memory) {\\n        return FixidityLib.fixed1().subtract(spread).multiply(FixidityLib.newFixed(sellAmount));\\n    }\\n\\n    /**\\n     * @notice Checks conditions required for bucket updates.\\n     * @return The Rate numerator - whether or not buckets should be updated.\\n     * @return The rate denominator - whether or not buckets should be updated.\\n     */\\n    function shouldUpdateBuckets() private view returns (bool) {\\n        ISortedOracles sortedOracles = ISortedOracles(registry.getAddressForOrDie(SORTED_ORACLES_REGISTRY_ID));\\n        (bool isReportExpired, ) = sortedOracles.isOldestReportExpired(stable);\\n        // solhint-disable-next-line not-rely-on-time\\n        bool timePassed = now >= lastBucketUpdate.add(updateFrequency);\\n        bool enoughReports = sortedOracles.numRates(stable) >= minimumReports;\\n        // solhint-disable-next-line not-rely-on-time\\n        bool medianReportRecent = sortedOracles.medianTimestamp(stable) > now.sub(updateFrequency);\\n        return timePassed && enoughReports && medianReportRecent && !isReportExpired;\\n    }\\n\\n    function getOracleExchangeRate() private view returns (uint256, uint256) {\\n        uint256 rateNumerator;\\n        uint256 rateDenominator;\\n        (rateNumerator, rateDenominator) = ISortedOracles(registry.getAddressForOrDie(SORTED_ORACLES_REGISTRY_ID))\\n            .medianRate(stable);\\n        require(rateDenominator > 0, \\\"exchange rate denominator must be greater than 0\\\");\\n        return (rateNumerator, rateDenominator);\\n    }\\n}\\n\",\"keccak256\":\"0x543072082db4c92a8a6d07f89e272f16814985a7dbe0d28e9d0d849a15606516\"},\"project:/lib/mento-core/contracts/ExchangeEUR.sol\":{\"content\":\"pragma solidity ^0.5.13;\\n\\nimport \\\"./Exchange.sol\\\";\\n\\ncontract ExchangeEUR is Exchange {\\n    /**\\n     * @notice Sets initialized == true on implementation contracts\\n     * @param test Set to true to skip implementation initialization\\n     */\\n    constructor(bool test) public Exchange(test) {}\\n\\n    /**\\n     * @notice Returns the storage, major, minor, and patch version of the contract.\\n     * @dev This function is overloaded to maintain a distinct version from Exchange.sol.\\n     * @return Storage version of the contract.\\n     * @return Major version of the contract.\\n     * @return Minor version of the contract.\\n     * @return Patch version of the contract.\\n     */\\n    function getVersionNumber()\\n        external\\n        pure\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256\\n        )\\n    {\\n        return (1, 2, 0, 0);\\n    }\\n}\\n\",\"keccak256\":\"0x7a25112e19e420f917b39afae1c6bf995ac4382acba687ca84a34c4927dece2a\"},\"project:/lib/mento-core/contracts/common/FixidityLib.sol\":{\"content\":\"pragma solidity ^0.5.13;\\n\\n/**\\n * @title FixidityLib\\n * @author Gadi Guy, Alberto Cuesta Canada\\n * @notice This library provides fixed point arithmetic with protection against\\n * overflow.\\n * All operations are done with uint256 and the operands must have been created\\n * with any of the newFrom* functions, which shift the comma digits() to the\\n * right and check for limits, or with wrap() which expects a number already\\n * in the internal representation of a fraction.\\n * When using this library be sure to use maxNewFixed() as the upper limit for\\n * creation of fixed point numbers.\\n * @dev All contained functions are pure and thus marked internal to be inlined\\n * on consuming contracts at compile time for gas efficiency.\\n */\\nlibrary FixidityLib {\\n    struct Fraction {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @notice Number of positions that the comma is shifted to the right.\\n     */\\n    function digits() internal pure returns (uint8) {\\n        return 24;\\n    }\\n\\n    uint256 private constant FIXED1_UINT = 1000000000000000000000000;\\n\\n    /**\\n     * @notice This is 1 in the fixed point units used in this library.\\n     * @dev Test fixed1() equals 10^digits()\\n     * Hardcoded to 24 digits.\\n     */\\n    function fixed1() internal pure returns (Fraction memory) {\\n        return Fraction(FIXED1_UINT);\\n    }\\n\\n    /**\\n     * @notice Wrap a uint256 that represents a 24-decimal fraction in a Fraction\\n     * struct.\\n     * @param x Number that already represents a 24-decimal fraction.\\n     * @return A Fraction struct with contents x.\\n     */\\n    function wrap(uint256 x) internal pure returns (Fraction memory) {\\n        return Fraction(x);\\n    }\\n\\n    /**\\n     * @notice Unwraps the uint256 inside of a Fraction struct.\\n     */\\n    function unwrap(Fraction memory x) internal pure returns (uint256) {\\n        return x.value;\\n    }\\n\\n    /**\\n     * @notice The amount of decimals lost on each multiplication operand.\\n     * @dev Test mulPrecision() equals sqrt(fixed1)\\n     */\\n    function mulPrecision() internal pure returns (uint256) {\\n        return 1000000000000;\\n    }\\n\\n    /**\\n     * @notice Maximum value that can be converted to fixed point. Optimize for deployment.\\n     * @dev\\n     * Test maxNewFixed() equals maxUint256() / fixed1()\\n     */\\n    function maxNewFixed() internal pure returns (uint256) {\\n        return 115792089237316195423570985008687907853269984665640564;\\n    }\\n\\n    /**\\n     * @notice Converts a uint256 to fixed point Fraction\\n     * @dev Test newFixed(0) returns 0\\n     * Test newFixed(1) returns fixed1()\\n     * Test newFixed(maxNewFixed()) returns maxNewFixed() * fixed1()\\n     * Test newFixed(maxNewFixed()+1) fails\\n     */\\n    function newFixed(uint256 x) internal pure returns (Fraction memory) {\\n        require(x <= maxNewFixed(), \\\"can't create fixidity number larger than maxNewFixed()\\\");\\n        return Fraction(x * FIXED1_UINT);\\n    }\\n\\n    /**\\n     * @notice Converts a uint256 in the fixed point representation of this\\n     * library to a non decimal. All decimal digits will be truncated.\\n     */\\n    function fromFixed(Fraction memory x) internal pure returns (uint256) {\\n        return x.value / FIXED1_UINT;\\n    }\\n\\n    /**\\n     * @notice Converts two uint256 representing a fraction to fixed point units,\\n     * equivalent to multiplying dividend and divisor by 10^digits().\\n     * @param numerator numerator must be <= maxNewFixed()\\n     * @param denominator denominator must be <= maxNewFixed() and denominator can't be 0\\n     * @dev\\n     * Test newFixedFraction(1,0) fails\\n     * Test newFixedFraction(0,1) returns 0\\n     * Test newFixedFraction(1,1) returns fixed1()\\n     * Test newFixedFraction(1,fixed1()) returns 1\\n     */\\n    function newFixedFraction(uint256 numerator, uint256 denominator) internal pure returns (Fraction memory) {\\n        Fraction memory convertedNumerator = newFixed(numerator);\\n        Fraction memory convertedDenominator = newFixed(denominator);\\n        return divide(convertedNumerator, convertedDenominator);\\n    }\\n\\n    /**\\n     * @notice Returns the integer part of a fixed point number.\\n     * @dev\\n     * Test integer(0) returns 0\\n     * Test integer(fixed1()) returns fixed1()\\n     * Test integer(newFixed(maxNewFixed())) returns maxNewFixed()*fixed1()\\n     */\\n    function integer(Fraction memory x) internal pure returns (Fraction memory) {\\n        return Fraction((x.value / FIXED1_UINT) * FIXED1_UINT); // Can't overflow\\n    }\\n\\n    /**\\n     * @notice Returns the fractional part of a fixed point number.\\n     * In the case of a negative number the fractional is also negative.\\n     * @dev\\n     * Test fractional(0) returns 0\\n     * Test fractional(fixed1()) returns 0\\n     * Test fractional(fixed1()-1) returns 10^24-1\\n     */\\n    function fractional(Fraction memory x) internal pure returns (Fraction memory) {\\n        return Fraction(x.value - (x.value / FIXED1_UINT) * FIXED1_UINT); // Can't overflow\\n    }\\n\\n    /**\\n     * @notice x+y.\\n     * @dev The maximum value that can be safely used as an addition operator is defined as\\n     * maxFixedAdd = maxUint256()-1 / 2, or\\n     * 57896044618658097711785492504343953926634992332820282019728792003956564819967.\\n     * Test add(maxFixedAdd,maxFixedAdd) equals maxFixedAdd + maxFixedAdd\\n     * Test add(maxFixedAdd+1,maxFixedAdd+1) throws\\n     */\\n    function add(Fraction memory x, Fraction memory y) internal pure returns (Fraction memory) {\\n        uint256 z = x.value + y.value;\\n        require(z >= x.value, \\\"add overflow detected\\\");\\n        return Fraction(z);\\n    }\\n\\n    /**\\n     * @notice x-y.\\n     * @dev\\n     * Test subtract(6, 10) fails\\n     */\\n    function subtract(Fraction memory x, Fraction memory y) internal pure returns (Fraction memory) {\\n        require(x.value >= y.value, \\\"substraction underflow detected\\\");\\n        return Fraction(x.value - y.value);\\n    }\\n\\n    /**\\n     * @notice x*y. If any of the operators is higher than the max multiplier value it\\n     * might overflow.\\n     * @dev The maximum value that can be safely used as a multiplication operator\\n     * (maxFixedMul) is calculated as sqrt(maxUint256()*fixed1()),\\n     * or 340282366920938463463374607431768211455999999999999\\n     * Test multiply(0,0) returns 0\\n     * Test multiply(maxFixedMul,0) returns 0\\n     * Test multiply(0,maxFixedMul) returns 0\\n     * Test multiply(fixed1()/mulPrecision(),fixed1()*mulPrecision()) returns fixed1()\\n     * Test multiply(maxFixedMul,maxFixedMul) is around maxUint256()\\n     * Test multiply(maxFixedMul+1,maxFixedMul+1) fails\\n     */\\n    function multiply(Fraction memory x, Fraction memory y) internal pure returns (Fraction memory) {\\n        if (x.value == 0 || y.value == 0) return Fraction(0);\\n        if (y.value == FIXED1_UINT) return x;\\n        if (x.value == FIXED1_UINT) return y;\\n\\n        // Separate into integer and fractional parts\\n        // x = x1 + x2, y = y1 + y2\\n        uint256 x1 = integer(x).value / FIXED1_UINT;\\n        uint256 x2 = fractional(x).value;\\n        uint256 y1 = integer(y).value / FIXED1_UINT;\\n        uint256 y2 = fractional(y).value;\\n\\n        // (x1 + x2) * (y1 + y2) = (x1 * y1) + (x1 * y2) + (x2 * y1) + (x2 * y2)\\n        uint256 x1y1 = x1 * y1;\\n        if (x1 != 0) require(x1y1 / x1 == y1, \\\"overflow x1y1 detected\\\");\\n\\n        // x1y1 needs to be multiplied back by fixed1\\n        // solium-disable-next-line mixedcase\\n        uint256 fixed_x1y1 = x1y1 * FIXED1_UINT;\\n        if (x1y1 != 0) require(fixed_x1y1 / x1y1 == FIXED1_UINT, \\\"overflow x1y1 * fixed1 detected\\\");\\n        x1y1 = fixed_x1y1;\\n\\n        uint256 x2y1 = x2 * y1;\\n        if (x2 != 0) require(x2y1 / x2 == y1, \\\"overflow x2y1 detected\\\");\\n\\n        uint256 x1y2 = x1 * y2;\\n        if (x1 != 0) require(x1y2 / x1 == y2, \\\"overflow x1y2 detected\\\");\\n\\n        x2 = x2 / mulPrecision();\\n        y2 = y2 / mulPrecision();\\n        uint256 x2y2 = x2 * y2;\\n        if (x2 != 0) require(x2y2 / x2 == y2, \\\"overflow x2y2 detected\\\");\\n\\n        // result = fixed1() * x1 * y1 + x1 * y2 + x2 * y1 + x2 * y2 / fixed1();\\n        Fraction memory result = Fraction(x1y1);\\n        result = add(result, Fraction(x2y1)); // Add checks for overflow\\n        result = add(result, Fraction(x1y2)); // Add checks for overflow\\n        result = add(result, Fraction(x2y2)); // Add checks for overflow\\n        return result;\\n    }\\n\\n    /**\\n     * @notice 1/x\\n     * @dev\\n     * Test reciprocal(0) fails\\n     * Test reciprocal(fixed1()) returns fixed1()\\n     * Test reciprocal(fixed1()*fixed1()) returns 1 // Testing how the fractional is truncated\\n     * Test reciprocal(1+fixed1()*fixed1()) returns 0 // Testing how the fractional is truncated\\n     * Test reciprocal(newFixedFraction(1, 1e24)) returns newFixed(1e24)\\n     */\\n    function reciprocal(Fraction memory x) internal pure returns (Fraction memory) {\\n        require(x.value != 0, \\\"can't call reciprocal(0)\\\");\\n        return Fraction((FIXED1_UINT * FIXED1_UINT) / x.value); // Can't overflow\\n    }\\n\\n    /**\\n     * @notice x/y. If the dividend is higher than the max dividend value, it\\n     * might overflow. You can use multiply(x,reciprocal(y)) instead.\\n     * @dev The maximum value that can be safely used as a dividend (maxNewFixed) is defined as\\n     * divide(maxNewFixed,newFixedFraction(1,fixed1())) is around maxUint256().\\n     * This yields the value 115792089237316195423570985008687907853269984665640564.\\n     * Test maxNewFixed equals maxUint256()/fixed1()\\n     * Test divide(maxNewFixed,1) equals maxNewFixed*(fixed1)\\n     * Test divide(maxNewFixed+1,multiply(mulPrecision(),mulPrecision())) throws\\n     * Test divide(fixed1(),0) fails\\n     * Test divide(maxNewFixed,1) = maxNewFixed*(10^digits())\\n     * Test divide(maxNewFixed+1,1) throws\\n     */\\n    function divide(Fraction memory x, Fraction memory y) internal pure returns (Fraction memory) {\\n        require(y.value != 0, \\\"can't divide by 0\\\");\\n        uint256 X = x.value * FIXED1_UINT;\\n        require(X / FIXED1_UINT == x.value, \\\"overflow at divide\\\");\\n        return Fraction(X / y.value);\\n    }\\n\\n    /**\\n     * @notice x > y\\n     */\\n    function gt(Fraction memory x, Fraction memory y) internal pure returns (bool) {\\n        return x.value > y.value;\\n    }\\n\\n    /**\\n     * @notice x >= y\\n     */\\n    function gte(Fraction memory x, Fraction memory y) internal pure returns (bool) {\\n        return x.value >= y.value;\\n    }\\n\\n    /**\\n     * @notice x < y\\n     */\\n    function lt(Fraction memory x, Fraction memory y) internal pure returns (bool) {\\n        return x.value < y.value;\\n    }\\n\\n    /**\\n     * @notice x <= y\\n     */\\n    function lte(Fraction memory x, Fraction memory y) internal pure returns (bool) {\\n        return x.value <= y.value;\\n    }\\n\\n    /**\\n     * @notice x == y\\n     */\\n    function equals(Fraction memory x, Fraction memory y) internal pure returns (bool) {\\n        return x.value == y.value;\\n    }\\n\\n    /**\\n     * @notice x <= 1\\n     */\\n    function isProperFraction(Fraction memory x) internal pure returns (bool) {\\n        return lte(x, fixed1());\\n    }\\n}\\n\",\"keccak256\":\"0x242f5ad451047a899fec403f798c8477ac6c6c7c637a9c00b82c909aaa0ebc58\"},\"project:/lib/mento-core/contracts/common/Freezable.sol\":{\"content\":\"pragma solidity ^0.5.13;\\n\\nimport \\\"./UsingRegistry.sol\\\";\\n\\ncontract Freezable is UsingRegistry {\\n    // onlyWhenNotFrozen functions can only be called when `frozen` is false, otherwise they will\\n    // revert.\\n    modifier onlyWhenNotFrozen() {\\n        require(!getFreezer().isFrozen(address(this)), \\\"can't call when contract is frozen\\\");\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0xa6987039438d2e49bc096edb017fd84b5d32a6f13b7f4589e3a1155a9387ab1a\"},\"project:/lib/mento-core/contracts/common/Initializable.sol\":{\"content\":\"pragma solidity ^0.5.13;\\n\\ncontract Initializable {\\n    bool public initialized;\\n\\n    constructor(bool testingDeployment) public {\\n        if (!testingDeployment) {\\n            initialized = true;\\n        }\\n    }\\n\\n    modifier initializer() {\\n        require(!initialized, \\\"contract already initialized\\\");\\n        initialized = true;\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0xb0ecb1e982724eea55f4fff68ae425db6a5cb34e7a76ebefc6c30ddf858f80d6\"},\"project:/lib/mento-core/contracts/common/ReentrancyGuard.sol\":{\"content\":\"pragma solidity ^0.5.13;\\n\\n/**\\n * @title Helps contracts guard against reentrancy attacks.\\n * @author Remco Bloemen <remco@2\\u03c0.com>, Eenae <alexey@mixbytes.io>\\n * @dev If you mark a function `nonReentrant`, you should also\\n * mark it `external`.\\n */\\ncontract ReentrancyGuard {\\n    /// @dev counter to allow mutex lock with only one SSTORE operation\\n    uint256 private _guardCounter;\\n\\n    constructor() internal {\\n        // The counter starts at one to prevent changing it from zero to a non-zero\\n        // value, which is a more expensive operation.\\n        _guardCounter = 1;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _guardCounter += 1;\\n        uint256 localCounter = _guardCounter;\\n        _;\\n        require(localCounter == _guardCounter, \\\"reentrant call\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x2ef34e9e00aa11688d4dde367ef5ea7d8bcc4ecafe7e1d623b12cf1465c0b2ed\"},\"project:/lib/mento-core/contracts/common/UsingRegistry.sol\":{\"content\":\"pragma solidity ^0.5.13;\\n\\nimport \\\"openzeppelin-solidity/contracts/ownership/Ownable.sol\\\";\\nimport \\\"openzeppelin-solidity/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport \\\"./interfaces/IFreezer.sol\\\";\\nimport \\\"./interfaces/IRegistry.sol\\\";\\n\\nimport \\\"../interfaces/IExchange.sol\\\";\\nimport \\\"../interfaces/IReserve.sol\\\";\\nimport \\\"../interfaces/ISortedOracles.sol\\\";\\nimport \\\"../interfaces/IStableToken.sol\\\";\\n\\ncontract UsingRegistry is Ownable {\\n    event RegistrySet(address indexed registryAddress);\\n\\n    // solhint-disable state-visibility\\n    bytes32 constant ACCOUNTS_REGISTRY_ID = keccak256(abi.encodePacked(\\\"Accounts\\\"));\\n    bytes32 constant ATTESTATIONS_REGISTRY_ID = keccak256(abi.encodePacked(\\\"Attestations\\\"));\\n    bytes32 constant DOWNTIME_SLASHER_REGISTRY_ID = keccak256(abi.encodePacked(\\\"DowntimeSlasher\\\"));\\n    bytes32 constant DOUBLE_SIGNING_SLASHER_REGISTRY_ID = keccak256(abi.encodePacked(\\\"DoubleSigningSlasher\\\"));\\n    bytes32 constant ELECTION_REGISTRY_ID = keccak256(abi.encodePacked(\\\"Election\\\"));\\n    bytes32 constant EXCHANGE_REGISTRY_ID = keccak256(abi.encodePacked(\\\"Exchange\\\"));\\n    bytes32 constant FEE_CURRENCY_WHITELIST_REGISTRY_ID = keccak256(abi.encodePacked(\\\"FeeCurrencyWhitelist\\\"));\\n    bytes32 constant FREEZER_REGISTRY_ID = keccak256(abi.encodePacked(\\\"Freezer\\\"));\\n    bytes32 constant GOLD_TOKEN_REGISTRY_ID = keccak256(abi.encodePacked(\\\"GoldToken\\\"));\\n    bytes32 constant GOVERNANCE_REGISTRY_ID = keccak256(abi.encodePacked(\\\"Governance\\\"));\\n    bytes32 constant GOVERNANCE_SLASHER_REGISTRY_ID = keccak256(abi.encodePacked(\\\"GovernanceSlasher\\\"));\\n    bytes32 constant LOCKED_GOLD_REGISTRY_ID = keccak256(abi.encodePacked(\\\"LockedGold\\\"));\\n    bytes32 constant RESERVE_REGISTRY_ID = keccak256(abi.encodePacked(\\\"Reserve\\\"));\\n    bytes32 constant RANDOM_REGISTRY_ID = keccak256(abi.encodePacked(\\\"Random\\\"));\\n    bytes32 constant SORTED_ORACLES_REGISTRY_ID = keccak256(abi.encodePacked(\\\"SortedOracles\\\"));\\n    bytes32 constant STABLE_TOKEN_REGISTRY_ID = keccak256(abi.encodePacked(\\\"StableToken\\\"));\\n    bytes32 constant VALIDATORS_REGISTRY_ID = keccak256(abi.encodePacked(\\\"Validators\\\"));\\n    // solhint-enable state-visibility\\n\\n    IRegistry public registry;\\n\\n    modifier onlyRegisteredContract(bytes32 identifierHash) {\\n        require(registry.getAddressForOrDie(identifierHash) == msg.sender, \\\"only registered contract\\\");\\n        _;\\n    }\\n\\n    modifier onlyRegisteredContracts(bytes32[] memory identifierHashes) {\\n        require(registry.isOneOf(identifierHashes, msg.sender), \\\"only registered contracts\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice Updates the address pointing to a Registry contract.\\n     * @param registryAddress The address of a registry contract for routing to other contracts.\\n     */\\n    function setRegistry(address registryAddress) public onlyOwner {\\n        require(registryAddress != address(0), \\\"Cannot register the null address\\\");\\n        registry = IRegistry(registryAddress);\\n        emit RegistrySet(registryAddress);\\n    }\\n\\n    function getExchange() internal view returns (IExchange) {\\n        return IExchange(registry.getAddressForOrDie(EXCHANGE_REGISTRY_ID));\\n    }\\n\\n    function getFreezer() internal view returns (IFreezer) {\\n        return IFreezer(registry.getAddressForOrDie(FREEZER_REGISTRY_ID));\\n    }\\n\\n    function getGoldToken() internal view returns (IERC20) {\\n        return IERC20(registry.getAddressForOrDie(GOLD_TOKEN_REGISTRY_ID));\\n    }\\n\\n    function getReserve() internal view returns (IReserve) {\\n        return IReserve(registry.getAddressForOrDie(RESERVE_REGISTRY_ID));\\n    }\\n\\n    function getSortedOracles() internal view returns (ISortedOracles) {\\n        return ISortedOracles(registry.getAddressForOrDie(SORTED_ORACLES_REGISTRY_ID));\\n    }\\n\\n    function getStableToken() internal view returns (IStableToken) {\\n        return IStableToken(registry.getAddressForOrDie(STABLE_TOKEN_REGISTRY_ID));\\n    }\\n}\\n\",\"keccak256\":\"0x08129f15c2b5641a361125c94ec8e575f222364f4f8fcb1a326016b27e15274e\"},\"project:/lib/mento-core/contracts/common/interfaces/ICeloVersionedContract.sol\":{\"content\":\"pragma solidity ^0.5.13;\\n\\ninterface ICeloVersionedContract {\\n    /**\\n     * @notice Returns the storage, major, minor, and patch version of the contract.\\n     * @return Storage version of the contract.\\n     * @return Major version of the contract.\\n     * @return Minor version of the contract.\\n     * @return Patch version of the contract.\\n     */\\n    function getVersionNumber()\\n        external\\n        pure\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256\\n        );\\n}\\n\",\"keccak256\":\"0xcd0ec818f34364d442602c03b76a9068d994d7a44c75e7abdfc879df48a54527\"},\"project:/lib/mento-core/contracts/common/interfaces/IFreezer.sol\":{\"content\":\"pragma solidity ^0.5.13;\\n\\ninterface IFreezer {\\n    function isFrozen(address) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xd54bab5f4df0471c112b7274db5e4321cda98f9bd894afff16a9e8e9ef58daf4\"},\"project:/lib/mento-core/contracts/common/interfaces/IRegistry.sol\":{\"content\":\"pragma solidity ^0.5.13;\\n\\ninterface IRegistry {\\n    function setAddressFor(string calldata, address) external;\\n\\n    function getAddressForOrDie(bytes32) external view returns (address);\\n\\n    function getAddressFor(bytes32) external view returns (address);\\n\\n    function getAddressForStringOrDie(string calldata identifier) external view returns (address);\\n\\n    function getAddressForString(string calldata identifier) external view returns (address);\\n\\n    function isOneOf(bytes32[] calldata, address) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x6349f43583970ac9ead075cc13f2716275ca8d8883246e6a58ab74a8f8560dd4\"},\"project:/lib/mento-core/contracts/interfaces/IExchange.sol\":{\"content\":\"pragma solidity ^0.5.13;\\n\\ninterface IExchange {\\n    function buy(\\n        uint256,\\n        uint256,\\n        bool\\n    ) external returns (uint256);\\n\\n    function sell(\\n        uint256,\\n        uint256,\\n        bool\\n    ) external returns (uint256);\\n\\n    function exchange(\\n        uint256,\\n        uint256,\\n        bool\\n    ) external returns (uint256);\\n\\n    function setUpdateFrequency(uint256) external;\\n\\n    function getBuyTokenAmount(uint256, bool) external view returns (uint256);\\n\\n    function getSellTokenAmount(uint256, bool) external view returns (uint256);\\n\\n    function getBuyAndSellBuckets(bool) external view returns (uint256, uint256);\\n}\\n\",\"keccak256\":\"0x320488022d1066ac81797b9e7a3dc303d1c8e9a48597972d4686e00f9554ade9\"},\"project:/lib/mento-core/contracts/interfaces/IReserve.sol\":{\"content\":\"pragma solidity ^0.5.13;\\n\\ninterface IReserve {\\n    function setTobinTaxStalenessThreshold(uint256) external;\\n\\n    function addToken(address) external returns (bool);\\n\\n    function removeToken(address, uint256) external returns (bool);\\n\\n    function transferGold(address payable, uint256) external returns (bool);\\n\\n    function transferExchangeGold(address payable, uint256) external returns (bool);\\n\\n    function getReserveGoldBalance() external view returns (uint256);\\n\\n    function getUnfrozenReserveGoldBalance() external view returns (uint256);\\n\\n    function getOrComputeTobinTax() external returns (uint256, uint256);\\n\\n    function getTokens() external view returns (address[] memory);\\n\\n    function getReserveRatio() external view returns (uint256);\\n\\n    function addExchangeSpender(address) external;\\n\\n    function removeExchangeSpender(address, uint256) external;\\n\\n    function addSpender(address) external;\\n\\n    function removeSpender(address) external;\\n}\\n\",\"keccak256\":\"0x9162b458dc21fe7e6cfc5d4722b3db3001b1c54ecdcefa703ff9d902084150b7\"},\"project:/lib/mento-core/contracts/interfaces/ISortedOracles.sol\":{\"content\":\"pragma solidity ^0.5.13;\\n\\ninterface ISortedOracles {\\n    function addOracle(address, address) external;\\n\\n    function removeOracle(\\n        address,\\n        address,\\n        uint256\\n    ) external;\\n\\n    function report(\\n        address,\\n        uint256,\\n        address,\\n        address\\n    ) external;\\n\\n    function removeExpiredReports(address, uint256) external;\\n\\n    function isOldestReportExpired(address token) external view returns (bool, address);\\n\\n    function numRates(address) external view returns (uint256);\\n\\n    function medianRate(address) external view returns (uint256, uint256);\\n\\n    function numTimestamps(address) external view returns (uint256);\\n\\n    function medianTimestamp(address) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x000a938f4229fc5d8115eac3a98117ba87e8ed26d85ddad76be77b90c9dd4451\"},\"project:/lib/mento-core/contracts/interfaces/IStableToken.sol\":{\"content\":\"pragma solidity ^0.5.13;\\n\\n/**\\n * @title This interface describes the functions specific to Celo Stable Tokens, and in the\\n * absence of interface inheritance is intended as a companion to IERC20.sol and ICeloToken.sol.\\n */\\ninterface IStableToken {\\n    function mint(address, uint256) external returns (bool);\\n\\n    function burn(uint256) external returns (bool);\\n\\n    function setInflationParameters(uint256, uint256) external;\\n\\n    function valueToUnits(uint256) external view returns (uint256);\\n\\n    function unitsToValue(uint256) external view returns (uint256);\\n\\n    function getInflationParameters()\\n        external\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256\\n        );\\n\\n    // NOTE: duplicated with IERC20.sol, remove once interface inheritance is supported.\\n    function balanceOf(address) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xcb6440c9b161b26a5b062e6c74d6fd1ed9736f292161c757406a9c39e942d20a\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101da5760003560e01c806381bb18ec11610104578063c3434883116100a2578063db1bc87b11610071578063db1bc87b146107a8578063dda57b93146107ec578063e0c8b50a1461080a578063f2fde38b14610828576101da565b8063c343488314610657578063cf317778146106af578063d1a2bc1114610770578063d404f7f81461077a576101da565b80638f32d59b116100de5780638f32d59b146105755780639ed02b5814610597578063a91ee0dc146105e5578063b66a261c14610629576101da565b806381bb18ec146104b55780638ab1a5d4146104d35780638da5cb5b1461052b576101da565b806354255be01161017c5780636a5eaf471161014b5780636a5eaf47146103e8578063715018a61461041657806378ba9cfd146104205780637b1039991461046b576101da565b806354255be01461035b5780635c25c76c1461038e57806362f09084146103ac578063673ea086146103ca576101da565b806325ac2de6116101b857806325ac2de6146102695780632bc7d67a146102875780634a1be6cb146102df5780634c0226a21461030d576101da565b8063158ef93e146101df57806322503ce51461020157806322be3de11461021f575b600080fd5b6101e761086c565b604051808215151515815260200191505060405180910390f35b61020961087e565b6040518082815260200191505060405180910390f35b610227610884565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6102716108aa565b6040518082815260200191505060405180910390f35b6102c96004803603606081101561029d57600080fd5b8101908080359060200190929190803590602001909291908035151590602001909291905050506108b0565b6040518082815260200191505060405180910390f35b61030b600480360360208110156102f557600080fd5b81019080803590602001909291905050506108c6565b005b6103456004803603604081101561032357600080fd5b8101908080359060200190929190803515159060200190929190505050610981565b6040518082815260200191505060405180910390f35b6103636109a8565b6040518085815260200184815260200183815260200182815260200194505050505060405180910390f35b6103966109cf565b6040518082815260200191505060405180910390f35b6103b46109db565b6040518082815260200191505060405180910390f35b6103d26109e1565b6040518082815260200191505060405180910390f35b610414600480360360208110156103fe57600080fd5b81019080803590602001909291905050506109e7565b005b61041e610b38565b005b61044e6004803603602081101561043657600080fd5b81019080803515159060200190929190505050610c72565b604051808381526020018281526020019250505060405180910390f35b610473610cc2565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6104bd610ce8565b6040518082815260200191505060405180910390f35b610515600480360360608110156104e957600080fd5b810190808035906020019092919080359060200190929190803515159060200190929190505050610cee565b6040518082815260200191505060405180910390f35b610533610f2d565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b61057d610f56565b604051808215151515815260200191505060405180910390f35b6105cf600480360360408110156105ad57600080fd5b8101908080359060200190929190803515159060200190929190505050610fb4565b6040518082815260200191505060405180910390f35b610627600480360360208110156105fb57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610fdb565b005b6106556004803603602081101561063f57600080fd5b810190808035906020019092919050505061117f565b005b6106996004803603606081101561066d57600080fd5b8101908080359060200190929190803590602001909291908035151590602001909291905050506112c7565b6040518082815260200191505060405180910390f35b61076e600480360360c08110156106c557600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019064010000000081111561070257600080fd5b82018360208201111561071457600080fd5b8035906020019184600183028401116401000000008311171561073657600080fd5b90919293919293908035906020019092919080359060200190929190803590602001909291908035906020019092919050505061150d565b005b61077861161e565b005b6107a66004803603602081101561079057600080fd5b8101908080359060200190929190505050611801565b005b6107ea600480360360208110156107be57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506118bc565b005b6107f4611942565b6040518082815260200191505060405180910390f35b61081261194e565b6040518082815260200191505060405180910390f35b61086a6004803603602081101561083e57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611954565b005b6000809054906101000a900460ff1681565b600a5481565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60075481565b60006108bd848484610cee565b90509392505050565b6108ce610f56565b610940576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b806009819055507f90c0a4a142fbfbc2ae8c21f50729a2f4bc56e85a66c1a1b6654f1e85092a54a6816040518082815260200191505060405180910390a150565b600080600061098f84610c72565b9150915061099e8282876119da565b9250505092915050565b60008060008060016002600080839350829250819150809050935093509350935090919293565b60038060000154905081565b60065481565b60095481565b6109ef610f56565b610a61576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b610a6a81611aa7565b600460008201518160000155905050610aa9610a84611ac5565b6004604051806020016040529081600082015481525050611aeb90919063ffffffff16565b610afe576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526027815260200180613cbf6027913960400191505060405180910390fd5b7fb690f84efb1d9039c2834effb7bebc792a85bfec7ef84f4b269528454f363ccf816040518082815260200191505060405180910390a150565b610b40610f56565b610bb2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff16600060019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a360008060016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b6000806000600654905060006007549050610c8b611b00565b15610ca157610c98611efd565b80925081935050505b8415610cb4578082935093505050610cbd565b81819350935050505b915091565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600b5481565b6000610cf8611f56565b73ffffffffffffffffffffffffffffffffffffffff1663e5839836306040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b158015610d7457600080fd5b505afa158015610d88573d6000803e3d6000fd5b505050506040513d6020811015610d9e57600080fd5b810190808051906020019092919050505015610e05576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526022815260200180613bb26022913960400191505060405180910390fd5b610e0d612051565b600160026000828254019250508190555060006002549050600080610e31856120c7565b915091506000610e4283838a6120ef565b905086811015610e9d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526039815260200180613b796039913960400191505060405180910390fd5b610ea888828861218f565b8094505050506002548114610f25576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600e8152602001807f7265656e7472616e742063616c6c00000000000000000000000000000000000081525060200191505060405180910390fd5b509392505050565b60008060019054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60008060019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16610f9861299b565b73ffffffffffffffffffffffffffffffffffffffff1614905090565b6000806000610fc284610c72565b91509150610fd18282876120ef565b9250505092915050565b610fe3610f56565b611055576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156110f8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f43616e6e6f7420726567697374657220746865206e756c6c206164647265737381525060200191505060405180910390fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff167f27fe5f0c1c3b1ed427cc63d0f05759ffdecf9aec9e18d31ef366fc8a6cb5dc3b60405160405180910390a250565b611187610f56565b6111f9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b61120281611aa7565b6003600082015181600001559050506112386003604051806020016040529081600082015481525050611233611ac5565b6129a3565b61128d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526026815260200180613c996026913960400191505060405180910390fd5b7f8946f328efcc515b5cc3282f6cd95e87a6c0d3508421af0b52d4d3620b3e2db3816040518082815260200191505060405180910390a150565b60006112d1611f56565b73ffffffffffffffffffffffffffffffffffffffff1663e5839836306040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b15801561134d57600080fd5b505afa158015611361573d6000803e3d6000fd5b505050506040513d602081101561137757600080fd5b8101908080519060200190929190505050156113de576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526022815260200180613bb26022913960400191505060405180910390fd5b6113e6612051565b600160026000828254019250508190555060006002549050600083159050600080611410836120c7565b91509150600061142183838b6119da565b90508781111561147c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252603e815260200180613c0a603e913960400191505060405180910390fd5b611487818a8661218f565b809550505050506002548114611505576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600e8152602001807f7265656e7472616e742063616c6c00000000000000000000000000000000000081525060200191505060405180910390fd5b509392505050565b6000809054906101000a900460ff161561158f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601c8152602001807f636f6e747261637420616c726561647920696e697469616c697a65640000000081525060200191505060405180910390fd5b60016000806101000a81548160ff0219169083151502179055506115b2336129b9565b6115bb87610fdb565b858560405160200180838380828437808301925050509250505060405160208183030381529060405280519060200120600b819055506115fa8461117f565b611603836109e7565b61160c826108c6565b61161581611801565b50505050505050565b611626610f56565b611698576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff16600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161461173f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526025815260200180613b546025913960400191505060405180910390fd5b6117f7600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663dcf0aaed600b546040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b1580156117b757600080fd5b505afa1580156117cb573d6000803e3d6000fd5b505050506040513d60208110156117e157600080fd5b8101908080519060200190929190505050612aff565b6117ff612051565b565b611809610f56565b61187b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b80600a819055507f08523596abc266fb46d9c40ddf78fdfd3c08142252833ddce1a2b46f76521035816040518082815260200191505060405180910390a150565b6118c4610f56565b611936576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b61193f81612aff565b50565b60048060000154905081565b60085481565b61195c610f56565b6119ce576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b6119d7816129b9565b50565b6000808214156119ed5760009050611aa0565b6119f5613b1a565b611a10611a0b8585612b8690919063ffffffff16565b612c0c565b9050611a1a613b1a565b611a76611a4d6003604051806020016040529081600082015481525050611a3f611ac5565b612c9690919063ffffffff16565b611a68611a63878a612d3d90919063ffffffff16565b612c0c565b612d8790919063ffffffff16565b9050611a9b611a84826131e6565b611a8d846131e6565b6131f490919063ffffffff16565b925050505b9392505050565b611aaf613b1a565b6040518060200160405280838152509050919050565b611acd613b1a565b604051806020016040528069d3c21bcecceda1000000815250905090565b60008160000151836000015110905092915050565b600080600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663dcf0aaed60405160200180807f536f727465644f7261636c657300000000000000000000000000000000000000815250600d019050604051602081830303815290604052805190602001206040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b158015611bbc57600080fd5b505afa158015611bd0573d6000803e3d6000fd5b505050506040513d6020811015611be657600080fd5b8101908080519060200190929190505050905060008173ffffffffffffffffffffffffffffffffffffffff1663ffe736bf600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050604080518083038186803b158015611c9957600080fd5b505afa158015611cad573d6000803e3d6000fd5b505050506040513d6040811015611cc357600080fd5b8101908080519060200190929190805190602001909291905050505090506000611cfa60095460085461323e90919063ffffffff16565b42101590506000600a548473ffffffffffffffffffffffffffffffffffffffff1663bbc66a94600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b158015611da357600080fd5b505afa158015611db7573d6000803e3d6000fd5b505050506040513d6020811015611dcd57600080fd5b8101908080519060200190929190505050101590506000611df960095442612d3d90919063ffffffff16565b8573ffffffffffffffffffffffffffffffffffffffff1663071b48fc600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b158015611e9857600080fd5b505afa158015611eac573d6000803e3d6000fd5b505050506040513d6020811015611ec257600080fd5b8101908080519060200190929190505050119050828015611ee05750815b8015611ee95750805b8015611ef3575083155b9550505050505090565b6000806000611f0a6132c6565b9050600080611f17613392565b80925081935050506000611f4682611f388686612b8690919063ffffffff16565b6131f490919063ffffffff16565b9050838195509550505050509091565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663dcf0aaed60405160200180807f467265657a6572000000000000000000000000000000000000000000000000008152506007019050604051602081830303815290604052805190602001206040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b15801561201157600080fd5b505afa158015612025573d6000803e3d6000fd5b505050506040513d602081101561203b57600080fd5b8101908080519060200190929190505050905090565b612059611b00565b156120c5574260088190555061206d611efd565b60066000600760008491905055839190505550507fa18ec663cb684011386aa866c4dacb32d2d2ad859a35d3440b6ce7200a76bad8600654600754604051808381526020018281526020019250505060405180910390a15b565b60008082156120df57600754600654915091506120ea565b600654600754915091505b915091565b6000808214156121025760009050612188565b61210a613b1a565b612113836135db565b905061211d613b1a565b61213861212987612c0c565b83612d8790919063ffffffff16565b9050612142613b1a565b61215d8361214f88612c0c565b61363490919063ffffffff16565b905061218261216b826131e6565b612174846131e6565b6131f490919063ffffffff16565b93505050505b9392505050565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663dcf0aaed60405160200180807f52657365727665000000000000000000000000000000000000000000000000008152506007019050604051602081830303815290604052805190602001206040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b15801561224a57600080fd5b505afa15801561225e573d6000803e3d6000fd5b505050506040513d602081101561227457600080fd5b81019080805190602001909291905050509050811561258d576122a28460065461323e90919063ffffffff16565b6006819055506122bd83600754612d3d90919063ffffffff16565b6007819055506122cb6136dd565b73ffffffffffffffffffffffffffffffffffffffff166323b872dd3383876040518463ffffffff1660e01b8152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019350505050602060405180830381600087803b15801561238557600080fd5b505af1158015612399573d6000803e3d6000fd5b505050506040513d60208110156123af57600080fd5b8101908080519060200190929190505050612432576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601d8152602001807f5472616e73666572206f662073656c6c20746f6b656e206661696c656400000081525060200191505060405180910390fd5b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166340c10f1933856040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b1580156124db57600080fd5b505af11580156124ef573d6000803e3d6000fd5b505050506040513d602081101561250557600080fd5b8101908080519060200190929190505050612588576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601b8152602001807f4d696e74206f6620737461626c6520746f6b656e206661696c6564000000000081525060200191505060405180910390fd5b612933565b6125a28460075461323e90919063ffffffff16565b6007819055506125bd83600654612d3d90919063ffffffff16565b600681905550600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330876040518463ffffffff1660e01b8152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019350505050602060405180830381600087803b1580156126a057600080fd5b505af11580156126b4573d6000803e3d6000fd5b505050506040513d60208110156126ca57600080fd5b810190808051906020019092919050505061274d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601d8152602001807f5472616e73666572206f662073656c6c20746f6b656e206661696c656400000081525060200191505060405180910390fd5b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166342966c68856040518263ffffffff1660e01b815260040180828152602001915050602060405180830381600087803b1580156127c257600080fd5b505af11580156127d6573d6000803e3d6000fd5b505050506040513d60208110156127ec57600080fd5b8101908080519060200190929190505050508073ffffffffffffffffffffffffffffffffffffffff166303a0fea333856040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b15801561288557600080fd5b505af1158015612899573d6000803e3d6000fd5b505050506040513d60208110156128af57600080fd5b8101908080519060200190929190505050612932576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601b8152602001807f5472616e73666572206f6620627579546f6b656e206661696c6564000000000081525060200191505060405180910390fd5b5b3373ffffffffffffffffffffffffffffffffffffffff167f402ac9185b4616422c2794bf5b118bfcc68ed496d52c0d9841dfa114fdeb05ba8585856040518084815260200183815260200182151515158152602001935050505060405180910390a250505050565b600033905090565b6000816000015183600001511115905092915050565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415612a3f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526026815260200180613b2e6026913960400191505060405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16600060019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a380600060016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b80600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff167f119a23392e161a0bc5f9d5f3e2a6040c45b40d43a36973e10ea1de916f3d8a8a60405160405180910390a250565b600080831415612b995760009050612c06565b6000828402905082848281612baa57fe5b0414612c01576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526021815260200180613c786021913960400191505060405180910390fd5b809150505b92915050565b612c14613b1a565b612c1c6137d8565b821115612c74576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526036815260200180613bd46036913960400191505060405180910390fd5b604051806020016040528069d3c21bcecceda100000084028152509050919050565b612c9e613b1a565b816000015183600001511015612d1c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601f8152602001807f737562737472616374696f6e20756e646572666c6f772064657465637465640081525060200191505060405180910390fd5b60405180602001604052808360000151856000015103815250905092915050565b6000612d7f83836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f7700008152506137f7565b905092915050565b612d8f613b1a565b600083600001511480612da6575060008260000151145b15612dc2576040518060200160405280600081525090506131e0565b69d3c21bcecceda100000082600001511415612de0578290506131e0565b69d3c21bcecceda100000083600001511415612dfe578190506131e0565b600069d3c21bcecceda1000000612e14856138b7565b6000015181612e1f57fe5b0490506000612e2d856138ee565b600001519050600069d3c21bcecceda1000000612e49866138b7565b6000015181612e5457fe5b0490506000612e62866138ee565b6000015190506000828502905060008514612ef65782858281612e8157fe5b0414612ef5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260168152602001807f6f766572666c6f7720783179312064657465637465640000000000000000000081525060200191505060405180910390fd5b5b600069d3c21bcecceda10000008202905060008214612f985769d3c21bcecceda1000000828281612f2357fe5b0414612f97576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601f8152602001807f6f766572666c6f772078317931202a206669786564312064657465637465640081525060200191505060405180910390fd5b5b80915060008486029050600086146130295784868281612fb457fe5b0414613028576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260168152602001807f6f766572666c6f7720783279312064657465637465640000000000000000000081525060200191505060405180910390fd5b5b60008488029050600088146130b7578488828161304257fe5b04146130b6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260168152602001807f6f766572666c6f7720783179322064657465637465640000000000000000000081525060200191505060405180910390fd5b5b6130bf61392b565b87816130c757fe5b0496506130d261392b565b85816130da57fe5b049450600085880290506000881461316b57858882816130f657fe5b041461316a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260168152602001807f6f766572666c6f7720783279322064657465637465640000000000000000000081525060200191505060405180910390fd5b5b613173613b1a565b604051806020016040528087815250905061319c81604051806020016040528087815250613634565b90506131b681604051806020016040528086815250613634565b90506131d081604051806020016040528085815250613634565b9050809a50505050505050505050505b92915050565b600081600001519050919050565b600061323683836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f000000000000815250613938565b905092915050565b6000808284019050838110156132bc576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601b8152602001807f536166654d6174683a206164646974696f6e206f766572666c6f77000000000081525060200191505060405180910390fd5b8091505092915050565b6000806132d16139fe565b73ffffffffffffffffffffffffffffffffffffffff16638b7df8d46040518163ffffffff1660e01b815260040160206040518083038186803b15801561331657600080fd5b505afa15801561332a573d6000803e3d6000fd5b505050506040513d602081101561334057600080fd5b8101908080519060200190929190505050905061338c61338761336283612c0c565b6004604051806020016040529081600082015481525050612d8790919063ffffffff16565b613af9565b91505090565b600080600080600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663dcf0aaed60405160200180807f536f727465644f7261636c657300000000000000000000000000000000000000815250600d019050604051602081830303815290604052805190602001206040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b15801561345157600080fd5b505afa158015613465573d6000803e3d6000fd5b505050506040513d602081101561347b57600080fd5b810190808051906020019092919050505073ffffffffffffffffffffffffffffffffffffffff1663ef90e1b0600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050604080518083038186803b15801561352957600080fd5b505afa15801561353d573d6000803e3d6000fd5b505050506040513d604081101561355357600080fd5b8101908080519060200190929190805190602001909291905050508092508193505050600081116135cf576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526030815260200180613c486030913960400191505060405180910390fd5b81819350935050509091565b6135e3613b1a565b61362d6135ef83612c0c565b61361f6003604051806020016040529081600082015481525050613611611ac5565b612c9690919063ffffffff16565b612d8790919063ffffffff16565b9050919050565b61363c613b1a565b60008260000151846000015101905083600001518110156136c5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260158152602001807f616464206f766572666c6f77206465746563746564000000000000000000000081525060200191505060405180910390fd5b60405180602001604052808281525091505092915050565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663dcf0aaed60405160200180807f476f6c64546f6b656e00000000000000000000000000000000000000000000008152506009019050604051602081830303815290604052805190602001206040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b15801561379857600080fd5b505afa1580156137ac573d6000803e3d6000fd5b505050506040513d60208110156137c257600080fd5b8101908080519060200190929190505050905090565b60007601357c299a88ea76a58924d52ce4f26a85af186c2b9e74905090565b60008383111582906138a4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561386957808201518184015260208101905061384e565b50505050905090810190601f1680156138965780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b5060008385039050809150509392505050565b6138bf613b1a565b604051806020016040528069d3c21bcecceda1000000808560000151816138e257fe5b04028152509050919050565b6138f6613b1a565b604051806020016040528069d3c21bcecceda10000008085600001518161391957fe5b04028460000151038152509050919050565b600064e8d4a51000905090565b600080831182906139e4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b838110156139a957808201518184015260208101905061398e565b50505050905090810190601f1680156139d65780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b5060008385816139f057fe5b049050809150509392505050565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663dcf0aaed60405160200180807f52657365727665000000000000000000000000000000000000000000000000008152506007019050604051602081830303815290604052805190602001206040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b158015613ab957600080fd5b505afa158015613acd573d6000803e3d6000fd5b505050506040513d6020811015613ae357600080fd5b8101908080519060200190929190505050905090565b600069d3c21bcecceda1000000826000015181613b1257fe5b049050919050565b604051806020016040528060008152509056fe4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373537461626c65546f6b656e206164647265737320616c72656164792061637469766174656443616c63756c6174656420627579416d6f756e7420776173206c657373207468616e20737065636966696564206d696e427579416d6f756e7463616e27742063616c6c207768656e20636f6e74726163742069732066726f7a656e63616e277420637265617465206669786964697479206e756d626572206c6172676572207468616e206d61784e65774669786564282943616c63756c617465642073656c6c416d6f756e74207761732067726561746572207468616e20737065636966696564206d617853656c6c416d6f756e7465786368616e676520726174652064656e6f6d696e61746f72206d7573742062652067726561746572207468616e2030536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f77537072656164206d757374206265206c657373207468616e206f7220657175616c20746f203172657365727665206672616374696f6e206d75737420626520736d616c6c6572207468616e2031a265627a7a723158203c333aa47ce3282856202cc1bf5de4210c532d21c10acdf4bb9899a1f49efd5a64736f6c634300050d0032",
  "sourceMap": "52:833:8:-;;;1743:1:6;1709:35;;244:47:8;8:9:-1;5:2;;;30:1;27;20:12;5:2;244:47:8;;;;;;;;;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;244:47:8;;;;;;;;;;;;;;;;283:4;2661::6;143:17:23;138:67;;190:4;176:11;;:18;;;;;;;;;;;;;;;;;;138:67;85:126;698:17:3;718:12;:10;;;:12;;:::i;:::-;698:32;;749:9;740:6;;:18;;;;;;;;;;;;;;;;;;806:9;773:43;;802:1;773:43;;;;;;;;;;;;664:159;576:1:26;560:13;:17;;;;2617:52:6;244:47:8;52:833;;788:96:0;833:15;867:10;860:17;;788:96;:::o;52:833:8:-;;;;;;;",
  "deployedSourceMap": "52:833:8:-;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;52:833:8;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;55:23:23;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;1786:29:6;;;:::i;:::-;;;;;;;;;;;;;;;;;;;1530:21;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;1675:27;;;:::i;:::-;;;;;;;;;;;;;;;;;;;6186:196;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;6186:196:6;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;11205:179;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;11205:179:6;;;;;;;;;;;;;;;;;:::i;:::-;;10012:273;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;10012:273:6;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;674:209:8;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1341:34:6;;;:::i;:::-;;;;;;;;;;;;;;;;;;;1597:25;;;:::i;:::-;;;;;;;;;;;;;;;;;;;1750:30;;;:::i;:::-;;;;;;;;;;;;;;;;;;;12512:299;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;12512:299:6;;;;;;;;;;;;;;;;;:::i;:::-;;1684:137:3;;;:::i;:::-;;10580:489:6;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;10580:489:6;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;2132:25:29;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;1822:36:6;;;:::i;:::-;;;;;;;;;;;;;;;;;;;4970:560;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;4970:560:6;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;899:77:3;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;1250:92;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;9407:273:6;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;9407:273:6;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;2715:244:29;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;2715:244:29;;;;;;;;;;;;;;;;;;;:::i;:::-;;12113:249:6;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;12113:249:6;;;;;;;;;;;;;;;;;:::i;:::-;;6987:603;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;6987:603:6;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;3328:586;;;;;;13:3:-1;8;5:12;2:2;;;30:1;27;20:12;2:2;3328:586:6;;;;;;;;;;;;;;;;;;;;;21:11:-1;8;5:28;2:2;;;46:1;43;36:12;2:2;3328:586:6;;35:9:-1;28:4;12:14;8:25;5:40;2:2;;;58:1;55;48:12;2:2;3328:586:6;;;;;;100:9:-1;95:1;81:12;77:20;67:8;63:35;60:50;39:11;25:12;22:29;11:107;8:2;;;131:1;128;121:12;8:2;3328:586:6;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;4114:246;;;:::i;:::-;;11562:173;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;11562:173:6;;;;;;;;;;;;;;;;;:::i;:::-;;11879:113;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;11879:113:6;;;;;;;;;;;;;;;;;;;:::i;:::-;;1480:43;;;:::i;:::-;;;;;;;;;;;;;;;;;;;1709:35;;;:::i;:::-;;;;;;;;;;;;;;;;;;;1970:107:3;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;1970:107:3;;;;;;;;;;;;;;;;;;;:::i;:::-;;55:23:23;;;;;;;;;;;;;:::o;1786:29:6:-;;;;:::o;1530:21::-;;;;;;;;;;;;;:::o;1675:27::-;;;;:::o;6186:196::-;6309:7;6335:40;6340:10;6352:12;6366:8;6335:4;:40::i;:::-;6328:47;;6186:196;;;;;:::o;11205:179::-;1103:9:3;:7;:9::i;:::-;1095:54;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;11306:18:6;11288:15;:36;;;;11339:38;11358:18;11339:38;;;;;;;;;;;;;;;;;;11205:179;:::o;10012:273::-;10097:7;10117:22;10141:23;10168:30;10189:8;10168:20;:30::i;:::-;10116:82;;;;10215:63;10235:14;10251:15;10268:9;10215:19;:63::i;:::-;10208:70;;;;10012:273;;;;:::o;674:209:8:-;762:7;783;804;825;865:1;868;871;874;857:19;;;;;;;;;;;;;;;;;;;;674:209;;;;:::o;1341:34:6:-;;;;;;;;;:::o;1597:25::-;;;;:::o;1750:30::-;;;;:::o;12512:299::-;1103:9:3;:7;:9::i;:::-;1095:54;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;12613:36:6;12630:18;12613:16;:36::i;:::-;12595:15;:54;;;;;;;;;;;12667:40;12686:20;:18;:20::i;:::-;12667:15;:18;;;;;;;;;;;;;;;;;;;:40;;;;:::i;:::-;12659:92;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;12766:38;12785:18;12766:38;;;;;;;;;;;;;;;;;;12512:299;:::o;1684:137:3:-;1103:9;:7;:9::i;:::-;1095:54;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1782:1;1745:40;;1766:6;;;;;;;;;;;1745:40;;;;;;;;;;;;1812:1;1795:6;;:19;;;;;;;;;;;;;;;;;;1684:137::o;10580:489:6:-;10646:7;10655;10674:25;10702:10;;10674:38;;10722:27;10752:12;;10722:42;;10779:21;:19;:21::i;:::-;10775:114;;;10859:19;:17;:19::i;:::-;10816:62;;;;;;;;10775:114;10903:8;10899:164;;;10935:19;10956:17;10927:47;;;;;;;;10899:164;11013:17;11032:19;11005:47;;;;;;10580:489;;;;:::o;2132:25:29:-;;;;;;;;;;;;;:::o;1822:36:6:-;;;;:::o;4970:560::-;5143:7;260:12:20;:10;:12::i;:::-;:21;;;290:4;260:36;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;260:36:20;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;260:36:20;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;260:36:20;;;;;;;;;;;;;;;;259:37;251:84;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1911:27:6;:25;:27::i;:::-;1010:1:26;993:13;;:18;;;;;;;;;;;1021:20;1044:13;;1021:36;;5163:22:6;5187:23;5214:31;5236:8;5214:21;:31::i;:::-;5162:83;;;;5255:17;5275:63;5294:14;5310:15;5327:10;5275:18;:63::i;:::-;5255:83;;5370:12;5357:9;:25;;5349:95;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5455:42;5465:10;5477:9;5488:8;5455:9;:42::i;:::-;5514:9;5507:16;;;;;1102:13:26;;1086:12;:29;1078:56;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1948:1:6;4970:560;;;;;:::o;899:77:3:-;937:7;963:6;;;;;;;;;;;956:13;;899:77;:::o;1250:92::-;1290:4;1329:6;;;;;;;;;;;1313:22;;:12;:10;:12::i;:::-;:22;;;1306:29;;1250:92;:::o;9407:273:6:-;9492:7;9512:22;9536:23;9563:30;9584:8;9563:20;:30::i;:::-;9511:82;;;;9610:63;9629:14;9645:15;9662:10;9610:18;:63::i;:::-;9603:70;;;;9407:273;;;;:::o;2715:244:29:-;1103:9:3;:7;:9::i;:::-;1095:54;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2823:1:29;2796:29;;:15;:29;;;;2788:74;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2893:15;2872:8;;:37;;;;;;;;;;;;;;;;;;2936:15;2924:28;;;;;;;;;;;;2715:244;:::o;12113:249:6:-;1103:9:3;:7;:9::i;:::-;1095:54;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;12187:27:6;12204:9;12187:16;:27::i;:::-;12178:6;:36;;;;;;;;;;;12232:45;12248:6;12232:45;;;;;;;;;;;;;;;;;12256:20;:18;:20::i;:::-;12232:15;:45::i;:::-;12224:96;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;12335:20;12345:9;12335:20;;;;;;;;;;;;;;;;;;12113:249;:::o;6987:603::-;7160:7;260:12:20;:10;:12::i;:::-;:21;;;290:4;260:36;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;260:36:20;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;260:36:20;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;260:36:20;;;;;;;;;;;;;;;;259:37;251:84;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1911:27:6;:25;:27::i;:::-;1010:1:26;993:13;;:18;;;;;;;;;;;1021:20;1044:13;;1021:36;;7179:13:6;7196:7;7195:8;7179:24;;7214:22;7238:23;7265:31;7287:8;7265:21;:31::i;:::-;7213:83;;;;7306:18;7327:63;7347:14;7363:15;7380:9;7327:19;:63::i;:::-;7306:84;;7423:13;7409:10;:27;;7401:102;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;7514:42;7524:10;7536:9;7547:8;7514:9;:42::i;:::-;7573:10;7566:17;;;;;;1102:13:26;;1086:12;:29;1078:56;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1948:1:6;6987:603;;;;;:::o;3328:586::-;259:11:23;;;;;;;;;;;258:12;250:53;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;327:4;313:11;;:18;;;;;;;;;;;;;;;;;;3591:30:6;3610:10;3591:18;:30::i;:::-;3631:28;3643:15;3631:11;:28::i;:::-;3720:21;;3703:39;;;;;;;30:3:-1;22:6;14;1:33;57:3;49:6;45:16;35:26;;3703:39:6;;;;;;;;49:4:-1;39:7;30;26:21;22:32;13:7;6:49;3703:39:6;;;3693:50;;;;;;3669:21;:74;;;;3753:18;3763:7;3753:9;:18::i;:::-;3781:36;3800:16;3781:18;:36::i;:::-;3827;3846:16;3827:18;:36::i;:::-;3873:34;3891:15;3873:17;:34::i;:::-;3328:586;;;;;;;:::o;4114:246::-;1103:9:3;:7;:9::i;:::-;1095:54;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4195:1:6;4177:20;;:6;;;;;;;;;;;:20;;;4169:70;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4249:67;4265:8;;;;;;;;;;;:27;;;4293:21;;4265:50;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;4265:50:6;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;4265:50:6;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;4265:50:6;;;;;;;;;;;;;;;;4249:15;:67::i;:::-;4326:27;:25;:27::i;:::-;4114:246::o;11562:173::-;1103:9:3;:7;:9::i;:::-;1095:54;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;11660:17:6;11643:14;:34;;;;11692:36;11710:17;11692:36;;;;;;;;;;;;;;;;;;11562:173;:::o;11879:113::-;1103:9:3;:7;:9::i;:::-;1095:54;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;11954:31:6;11970:14;11954:15;:31::i;:::-;11879:113;:::o;1480:43::-;;;;;;;;;:::o;1709:35::-;;;;:::o;1970:107:3:-;1103:9;:7;:9::i;:::-;1095:54;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2042:28;2061:8;2042:18;:28::i;:::-;1970:107;:::o;15045:586:6:-;15194:7;15230:1;15217:9;:14;15213:28;;;15240:1;15233:8;;;;15213:28;15252:37;;:::i;:::-;15292:52;15313:30;15327:15;15313:9;:13;;:30;;;;:::i;:::-;15292:20;:52::i;:::-;15252:92;;15354:39;;:::i;:::-;15396:121;15470:37;15500:6;15470:37;;;;;;;;;;;;;;;;;:20;:18;:20::i;:::-;:29;;:37;;;;:::i;:::-;15396:51;15417:29;15436:9;15417:14;:18;;:29;;;;:::i;:::-;15396:20;:51::i;:::-;:60;;:121;;;;:::i;:::-;15354:163;;15580:44;15603:20;:11;:18;:20::i;:::-;15580:18;:9;:16;:18::i;:::-;:22;;:44;;;;:::i;:::-;15573:51;;;;15045:586;;;;;;:::o;1558:100:19:-;1606:15;;:::i;:::-;1640:11;;;;;;;;1649:1;1640:11;;;1633:18;;1558:100;;;:::o;1216:103::-;1257:15;;:::i;:::-;1291:21;;;;;;;;1020:25;1291:21;;;1284:28;;1216:103;:::o;10341:120::-;10414:4;10447:1;:7;;;10437:1;:7;;;:17;10430:24;;10341:120;;;;:::o;17559:703:6:-;17612:4;17628:28;17674:8;;;;;;;;;;;:27;;;1871:33:29;;;;;;;;;;;;;;;;49:4:-1;39:7;30;26:21;22:32;13:7;6:49;1871:33:29;;;1861:44;;;;;;17674:55:6;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;17674:55:6;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;17674:55:6;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;17674:55:6;;;;;;;;;;;;;;;;17628:102;;17741:20;17767:13;:35;;;17803:6;;;;;;;;;;;17767:43;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;17767:43:6;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;17767:43:6;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;17767:43:6;;;;;;;;;;;;;;;;;;;;;;;;;17740:70;;;17874:15;17899:37;17920:15;;17899:16;;:20;;:37;;;;:::i;:::-;17892:3;:44;;17874:62;;17946:18;18001:14;;17967:13;:22;;;17990:6;;;;;;;;;;;17967:30;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;17967:30:6;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;17967:30:6;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;17967:30:6;;;;;;;;;;;;;;;;:48;;17946:69;;18079:23;18145:24;18153:15;;18145:3;:7;;:24;;;;:::i;:::-;18105:13;:29;;;18135:6;;;;;;;;;;;18105:37;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;18105:37:6;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;18105:37:6;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;18105:37:6;;;;;;;;;;;;;;;;:64;18079:90;;18186:10;:27;;;;;18200:13;18186:27;:49;;;;;18217:18;18186:49;:69;;;;;18240:15;18239:16;18186:69;18179:76;;;;;;;17559:703;:::o;15714:470::-;15765:7;15774;15793:25;15821:22;:20;:22::i;:::-;15793:50;;15853:29;15892:31;15984:23;:21;:23::i;:::-;15933:74;;;;;;;;16017:27;16047:73;16096:23;16047:44;16073:17;16047:21;:25;;:44;;;;:::i;:::-;:48;;:73;;;;:::i;:::-;16017:103;;16138:17;16157:19;16130:47;;;;;;;;15714:470;;:::o;3112:137:29:-;3157:8;3193;;;;;;;;;;;:27;;;1246;;;;;;;;;;;;;;;;49:4:-1;39:7;30;26:21;22:32;13:7;6:49;1246:27:29;;;1236:38;;;;;;3193:48;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;3193:48:29;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;3193:48:29;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;3193:48:29;;;;;;;;;;;;;;;;3177:65;;3112:137;:::o;16581:315:6:-;16640:21;:19;:21::i;:::-;16636:254;;;16754:3;16735:16;:22;;;;16801:19;:17;:19::i;:::-;16773:10;;16785:12;;16772:48;;;;;;;;;;;;16839:40;16854:10;;16866:12;;16839:40;;;;;;;;;;;;;;;;;;;;;;;;16636:254;16581:315::o;13255:238::-;13323:7;13332;13355:8;13351:136;;;13387:12;;13401:10;;13379:33;;;;;;13351:136;13451:10;;13463:12;;13443:33;;;;13255:238;;;;:::o;13837:831::-;13986:7;14023:1;14009:10;:15;14005:29;;;14033:1;14026:8;;;;14005:29;14045:45;;:::i;:::-;14093:32;14114:10;14093:20;:32::i;:::-;14045:80;;14135:37;;:::i;:::-;14175:64;14202:36;14223:14;14202:20;:36::i;:::-;14175:17;:26;;:64;;;;:::i;:::-;14135:104;;14249:39;;:::i;:::-;14291:60;14333:17;14291:37;14312:15;14291:20;:37::i;:::-;:41;;:60;;;;:::i;:::-;14249:102;;14617:44;14640:20;:11;:18;:20::i;:::-;14617:18;:9;:16;:18::i;:::-;:22;;:44;;;;:::i;:::-;14610:51;;;;;13837:831;;;;;;:::o;7950:1143::-;8071:16;8099:8;;;;;;;;;;;:27;;;1700::29;;;;;;;;;;;;;;;;49:4:-1;39:7;30;26:21;22:32;13:7;6:49;1700:27:29;;;1690:38;;;;;;8099:48:6;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;8099:48:6;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;8099:48:6;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;8099:48:6;;;;;;;;;;;;;;;;8071:77;;8163:8;8159:858;;;8200:26;8215:10;8200;;:14;;:26;;;;:::i;:::-;8187:10;:39;;;;8255:27;8272:9;8255:12;;:16;;:27;;;;:::i;:::-;8240:12;:42;;;;8321:14;:12;:14::i;:::-;:27;;;8349:10;8369:7;8379:10;8321:69;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;8321:69:6;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;8321:69:6;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;8321:69:6;;;;;;;;;;;;;;;;8296:157;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8488:6;;;;;;;;;;;8475:25;;;8501:10;8513:9;8475:48;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;8475:48:6;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;8475:48:6;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;8475:48:6;;;;;;;;;;;;;;;;8467:88;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8159:858;;;8601:28;8618:10;8601:12;;:16;;:28;;;;:::i;:::-;8586:12;:43;;;;8656:25;8671:9;8656:10;;:14;;:25;;;;:::i;:::-;8643:10;:38;;;;8727:6;;;;;;;;;;;8720:27;;;8748:10;8768:4;8775:10;8720:66;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;8720:66:6;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;8720:66:6;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;8720:66:6;;;;;;;;;;;;;;;;8695:154;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8876:6;;;;;;;;;;;8863:25;;;8889:10;8863:37;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;8863:37:6;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;8863:37:6;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;8863:37:6;;;;;;;;;;;;;;;;;8923:7;:28;;;8952:10;8964:9;8923:51;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;8923:51:6;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;8923:51:6;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;8923:51:6;;;;;;;;;;;;;;;;8915:91;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8159:858;9042:10;9032:54;;;9054:10;9066:9;9077:8;9032:54;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;7950:1143;;;;:::o;788:96:0:-;833:15;867:10;860:17;;788:96;:::o;10505:122:19:-;10579:4;10613:1;:7;;;10602:1;:7;;;:18;;10595:25;;10505:122;;;;:::o;2178:225:3:-;2271:1;2251:22;;:8;:22;;;;2243:73;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2360:8;2331:38;;2352:6;;;;;;;;;;;2331:38;;;;;;;;;;;;2388:8;2379:6;;:17;;;;;;;;;;;;;;;;;;2178:225;:::o;12817:143:6:-;12894:14;12885:6;;:23;;;;;;;;;;;;;;;;;;12938:14;12923:30;;;;;;;;;;;;12817:143;:::o;2159:459:2:-;2217:7;2463:1;2458;:6;2454:45;;;2487:1;2480:8;;;;2454:45;2509:9;2525:1;2521;:5;2509:17;;2553:1;2548;2544;:5;;;;;;:10;2536:56;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2610:1;2603:8;;;2159:459;;;;;:::o;2673:213:19:-;2725:15;;:::i;:::-;2765:13;:11;:13::i;:::-;2760:1;:18;;2752:85;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2854:25;;;;;;;;1020;2863:1;:15;2854:25;;;2847:32;;2673:213;;;:::o;5607:219::-;5686:15;;:::i;:::-;5732:1;:7;;;5721:1;:7;;;:18;;5713:62;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5792:27;;;;;;;;5811:1;:7;;;5801:1;:7;;;:17;5792:27;;;5785:34;;5607:219;;;;:::o;1274:134:2:-;1332:7;1358:43;1362:1;1365;1358:43;;;;;;;;;;;;;;;;;:3;:43::i;:::-;1351:50;;1274:134;;;;:::o;6510:1762:19:-;6589:15;;:::i;:::-;6631:1;6620;:7;;;:12;:28;;;;6647:1;6636;:7;;;:12;6620:28;6616:52;;;6657:11;;;;;;;;6666:1;6657:11;;;6650:18;;;;6616:52;1020:25;6682:1;:7;;;:22;6678:36;;;6713:1;6706:8;;;;6678:36;1020:25;6728:1;:7;;;:22;6724:36;;;6759:1;6752:8;;;;6724:36;6861:10;1020:25;6874:10;6882:1;6874:7;:10::i;:::-;:16;;;:30;;;;;;6861:43;;6914:10;6927:13;6938:1;6927:10;:13::i;:::-;:19;;;6914:32;;6956:10;1020:25;6969:10;6977:1;6969:7;:10::i;:::-;:16;;;:30;;;;;;6956:43;;7009:10;7022:13;7033:1;7022:10;:13::i;:::-;:19;;;7009:32;;7133:12;7153:2;7148;:7;7133:22;;7175:1;7169:2;:7;7165:63;;7199:2;7193;7186:4;:9;;;;;;:15;7178:50;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;7165:63;7339:18;1020:25;7360:4;:18;7339:39;;7400:1;7392:4;:9;7388:91;;1020:25;7424:4;7411:10;:17;;;;;;:32;7403:76;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;7388:91;7496:10;7489:17;;7517:12;7537:2;7532;:7;7517:22;;7559:1;7553:2;:7;7549:63;;7583:2;7577;7570:4;:9;;;;;;:15;7562:50;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;7549:63;7623:12;7643:2;7638;:7;7623:22;;7665:1;7659:2;:7;7655:63;;7689:2;7683;7676:4;:9;;;;;;:15;7668:50;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;7655:63;7739:14;:12;:14::i;:::-;7734:2;:19;;;;;;7729:24;;7773:14;:12;:14::i;:::-;7768:2;:19;;;;;;7763:24;;7797:12;7817:2;7812;:7;7797:22;;7839:1;7833:2;:7;7829:63;;7863:2;7857;7850:4;:9;;;;;;:15;7842:50;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;7829:63;7984:22;;:::i;:::-;8009:14;;;;;;;;8018:4;8009:14;;;7984:39;;8042:27;8046:6;8054:14;;;;;;;;8063:4;8054:14;;;8042:3;:27::i;:::-;8033:36;;8115:27;8119:6;8127:14;;;;;;;;8136:4;8127:14;;;8115:3;:27::i;:::-;8106:36;;8188:27;8192:6;8200:14;;;;;;;;8209:4;8200:14;;;8188:3;:27::i;:::-;8179:36;;8259:6;8252:13;;;;;;;;;;;;6510:1762;;;;;:::o;1744:98::-;1802:7;1828:1;:7;;;1821:14;;1744:98;;;:::o;3073:130:2:-;3131:7;3157:39;3161:1;3164;3157:39;;;;;;;;;;;;;;;;;:3;:39::i;:::-;3150:46;;3073:130;;;;:::o;834:176::-;892:7;911:9;927:1;923;:5;911:17;;951:1;946;:6;;938:46;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1002:1;995:8;;;834:176;;;;:::o;16190:248:6:-;16244:7;16263:26;16292:12;:10;:12::i;:::-;:42;;;:44;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;16292:44:6;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;16292:44:6;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;16292:44:6;;;;;;;;;;;;;;;;16263:73;;16353:78;:66;16378:40;16399:18;16378:20;:40::i;:::-;16353:15;:24;;;;;;;;;;;;;;;;;;;:66;;;;:::i;:::-;:76;:78::i;:::-;16346:85;;;16190:248;:::o;18268:431::-;18323:7;18332;18351:21;18382:23;18465:8;;;;;;;;;;;:27;;;1871:33:29;;;;;;;;;;;;;;;;49:4:-1;39:7;30;26:21;22:32;13:7;6:49;1871:33:29;;;1861:44;;;;;;18465:55:6;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;18465:55:6;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;18465:55:6;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;18465:55:6;;;;;;;;;;;;;;;;18450:95;;;18546:6;;;;;;;;;;;18450:103;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;18450:103:6;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;18450:103:6;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;18450:103:6;;;;;;;;;;;;;;;;;;;;;;;;;18415:138;;;;;;;;18589:1;18571:15;:19;18563:80;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;18661:13;18676:15;18653:39;;;;;;18268:431;;:::o;17112:205::-;17184:27;;:::i;:::-;17230:80;17277:32;17298:10;17277:20;:32::i;:::-;17230:37;17260:6;17230:37;;;;;;;;;;;;;;;;;:20;:18;:20::i;:::-;:29;;:37;;;;:::i;:::-;:46;;:80;;;;:::i;:::-;17223:87;;17112:205;;;:::o;5298:221:19:-;5372:15;;:::i;:::-;5399:9;5421:1;:7;;;5411:1;:7;;;:17;5399:29;;5451:1;:7;;;5446:1;:12;;5438:46;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5501:11;;;;;;;;5510:1;5501:11;;;5494:18;;;5298:221;;;;:::o;3255:138:29:-;3302:6;3334:8;;;;;;;;;;;:27;;;1332:29;;;;;;;;;;;;;;;;49:4:-1;39:7;30;26:21;22:32;13:7;6:49;1332:29:29;;;1322:40;;;;;;3334:51;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;3334:51:29;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;3334:51:29;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;3334:51:29;;;;;;;;;;;;;;;;3320:66;;3255:138;:::o;2267:133:19:-;2313:7;2339:54;2332:61;;2267:133;:::o;1732:187:2:-;1818:7;1850:1;1845;:6;;1853:12;1837:29;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;80:1;75:3;71:11;64:39;52:2;49:1;45:10;40:15;;8:100;;;12:14;1837:29:2;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1876:9;1892:1;1888;:5;1876:17;;1911:1;1904:8;;;1732:187;;;;;:::o;4260:165:19:-;4319:15;;:::i;:::-;4353:47;;;;;;;;1020:25;;4363:1;:7;;;:21;;;;;;4362:37;4353:47;;;4346:54;;4260:165;;;:::o;4730:178::-;4792:15;;:::i;:::-;4826:57;;;;;;;;1020:25;;4846:1;:7;;;:21;;;;;;4845:37;4835:1;:7;;;:47;4826:57;;;4819:64;;4730:178;;;:::o;1991:93::-;2038:7;2064:13;2057:20;;1991:93;:::o;3718:338:2:-;3804:7;3901:1;3897;:5;3904:12;3889:28;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;80:1;75:3;71:11;64:39;52:2;49:1;45:10;40:15;;8:100;;;12:14;3889:28:2;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3927:9;3943:1;3939;:5;;;;;;3927:17;;4048:1;4041:8;;;3718:338;;;;;:::o;3399:137:29:-;3444:8;3480;;;;;;;;;;;:27;;;1700;;;;;;;;;;;;;;;;49:4:-1;39:7;30;26:21;22:32;13:7;6:49;1700:27:29;;;1690:38;;;;;;3480:48;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;3480:48:29;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;3480:48:29;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;3480:48:29;;;;;;;;;;;;;;;;3464:65;;3399:137;:::o;3055:115:19:-;3116:7;1020:25;3142:1;:7;;;:21;;;;;;3135:28;;3055:115;;;:::o;52:833:8:-;;;;;;;;;;;;;;:::o",
  "source": "pragma solidity ^0.5.13;\n\nimport \"./Exchange.sol\";\n\ncontract ExchangeEUR is Exchange {\n    /**\n     * @notice Sets initialized == true on implementation contracts\n     * @param test Set to true to skip implementation initialization\n     */\n    constructor(bool test) public Exchange(test) {}\n\n    /**\n     * @notice Returns the storage, major, minor, and patch version of the contract.\n     * @dev This function is overloaded to maintain a distinct version from Exchange.sol.\n     * @return Storage version of the contract.\n     * @return Major version of the contract.\n     * @return Minor version of the contract.\n     * @return Patch version of the contract.\n     */\n    function getVersionNumber()\n        external\n        pure\n        returns (\n            uint256,\n            uint256,\n            uint256,\n            uint256\n        )\n    {\n        return (1, 2, 0, 0);\n    }\n}\n",
  "sourcePath": "/Users/beaver/Development/celo/celo-monorepo/packages/protocol/lib/mento-core/contracts/ExchangeEUR.sol",
  "ast": {
    "absolutePath": "project:/lib/mento-core/contracts/ExchangeEUR.sol",
    "exportedSymbols": {
      "ExchangeEUR": [
        1603
      ]
    },
    "id": 1604,
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 1572,
        "literals": [
          "solidity",
          "^",
          "0.5",
          ".13"
        ],
        "nodeType": "PragmaDirective",
        "src": "0:24:8"
      },
      {
        "absolutePath": "project:/lib/mento-core/contracts/Exchange.sol",
        "file": "./Exchange.sol",
        "id": 1573,
        "nodeType": "ImportDirective",
        "scope": 1604,
        "sourceUnit": 1538,
        "src": "26:24:8",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "baseContracts": [
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 1574,
              "name": "Exchange",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 1537,
              "src": "76:8:8",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_Exchange_$1537",
                "typeString": "contract Exchange"
              }
            },
            "id": 1575,
            "nodeType": "InheritanceSpecifier",
            "src": "76:8:8"
          }
        ],
        "contractDependencies": [
          26,
          400,
          1537,
          7552,
          8252,
          9648,
          10806,
          10820,
          13916
        ],
        "contractKind": "contract",
        "documentation": null,
        "fullyImplemented": true,
        "id": 1603,
        "linearizedBaseContracts": [
          1603,
          1537,
          7552,
          9648,
          10806,
          400,
          26,
          8252,
          10820,
          13916
        ],
        "name": "ExchangeEUR",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "body": {
              "id": 1583,
              "nodeType": "Block",
              "src": "289:2:8",
              "statements": []
            },
            "documentation": "@notice Sets initialized == true on implementation contracts\n@param test Set to true to skip implementation initialization",
            "id": 1584,
            "implemented": true,
            "kind": "constructor",
            "modifiers": [
              {
                "arguments": [
                  {
                    "argumentTypes": null,
                    "id": 1580,
                    "name": "test",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 1577,
                    "src": "283:4:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  }
                ],
                "id": 1581,
                "modifierName": {
                  "argumentTypes": null,
                  "id": 1579,
                  "name": "Exchange",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 1537,
                  "src": "274:8:8",
                  "typeDescriptions": {
                    "typeIdentifier": "t_type$_t_contract$_Exchange_$1537_$",
                    "typeString": "type(contract Exchange)"
                  }
                },
                "nodeType": "ModifierInvocation",
                "src": "274:14:8"
              }
            ],
            "name": "",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1578,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1577,
                  "name": "test",
                  "nodeType": "VariableDeclaration",
                  "scope": 1584,
                  "src": "256:9:8",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 1576,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "256:4:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "255:11:8"
            },
            "returnParameters": {
              "id": 1582,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "289:0:8"
            },
            "scope": 1603,
            "src": "244:47:8",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": {
              "id": 1601,
              "nodeType": "Block",
              "src": "847:36:8",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "components": [
                      {
                        "argumentTypes": null,
                        "hexValue": "31",
                        "id": 1595,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "865:1:8",
                        "subdenomination": null,
                        "typeDescriptions": {
                          "typeIdentifier": "t_rational_1_by_1",
                          "typeString": "int_const 1"
                        },
                        "value": "1"
                      },
                      {
                        "argumentTypes": null,
                        "hexValue": "32",
                        "id": 1596,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "868:1:8",
                        "subdenomination": null,
                        "typeDescriptions": {
                          "typeIdentifier": "t_rational_2_by_1",
                          "typeString": "int_const 2"
                        },
                        "value": "2"
                      },
                      {
                        "argumentTypes": null,
                        "hexValue": "30",
                        "id": 1597,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "871:1:8",
                        "subdenomination": null,
                        "typeDescriptions": {
                          "typeIdentifier": "t_rational_0_by_1",
                          "typeString": "int_const 0"
                        },
                        "value": "0"
                      },
                      {
                        "argumentTypes": null,
                        "hexValue": "30",
                        "id": 1598,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "874:1:8",
                        "subdenomination": null,
                        "typeDescriptions": {
                          "typeIdentifier": "t_rational_0_by_1",
                          "typeString": "int_const 0"
                        },
                        "value": "0"
                      }
                    ],
                    "id": 1599,
                    "isConstant": false,
                    "isInlineArray": false,
                    "isLValue": false,
                    "isPure": true,
                    "lValueRequested": false,
                    "nodeType": "TupleExpression",
                    "src": "864:12:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$_t_rational_1_by_1_$_t_rational_2_by_1_$_t_rational_0_by_1_$_t_rational_0_by_1_$",
                      "typeString": "tuple(int_const 1,int_const 2,int_const 0,int_const 0)"
                    }
                  },
                  "functionReturnParameters": 1594,
                  "id": 1600,
                  "nodeType": "Return",
                  "src": "857:19:8"
                }
              ]
            },
            "documentation": "@notice Returns the storage, major, minor, and patch version of the contract.\n@dev This function is overloaded to maintain a distinct version from Exchange.sol.\n@return Storage version of the contract.\n@return Major version of the contract.\n@return Minor version of the contract.\n@return Patch version of the contract.",
            "id": 1602,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "getVersionNumber",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1585,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "699:2:8"
            },
            "returnParameters": {
              "id": 1594,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1587,
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 1602,
                  "src": "762:7:8",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 1586,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "762:7:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1589,
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 1602,
                  "src": "783:7:8",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 1588,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "783:7:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1591,
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 1602,
                  "src": "804:7:8",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 1590,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "804:7:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1593,
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 1602,
                  "src": "825:7:8",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 1592,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "825:7:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "748:94:8"
            },
            "scope": 1603,
            "src": "674:209:8",
            "stateMutability": "pure",
            "superFunction": 658,
            "visibility": "external"
          }
        ],
        "scope": 1604,
        "src": "52:833:8"
      }
    ],
    "src": "0:886:8"
  },
  "legacyAST": {
    "attributes": {
      "absolutePath": "project:/lib/mento-core/contracts/ExchangeEUR.sol",
      "exportedSymbols": {
        "ExchangeEUR": [
          1603
        ]
      }
    },
    "children": [
      {
        "attributes": {
          "literals": [
            "solidity",
            "^",
            "0.5",
            ".13"
          ]
        },
        "id": 1572,
        "name": "PragmaDirective",
        "src": "0:24:8"
      },
      {
        "attributes": {
          "SourceUnit": 1538,
          "absolutePath": "project:/lib/mento-core/contracts/Exchange.sol",
          "file": "./Exchange.sol",
          "scope": 1604,
          "symbolAliases": [
            null
          ],
          "unitAlias": ""
        },
        "id": 1573,
        "name": "ImportDirective",
        "src": "26:24:8"
      },
      {
        "attributes": {
          "contractDependencies": [
            26,
            400,
            1537,
            7552,
            8252,
            9648,
            10806,
            10820,
            13916
          ],
          "contractKind": "contract",
          "documentation": null,
          "fullyImplemented": true,
          "linearizedBaseContracts": [
            1603,
            1537,
            7552,
            9648,
            10806,
            400,
            26,
            8252,
            10820,
            13916
          ],
          "name": "ExchangeEUR",
          "scope": 1604
        },
        "children": [
          {
            "attributes": {
              "arguments": null
            },
            "children": [
              {
                "attributes": {
                  "contractScope": null,
                  "name": "Exchange",
                  "referencedDeclaration": 1537,
                  "type": "contract Exchange"
                },
                "id": 1574,
                "name": "UserDefinedTypeName",
                "src": "76:8:8"
              }
            ],
            "id": 1575,
            "name": "InheritanceSpecifier",
            "src": "76:8:8"
          },
          {
            "attributes": {
              "documentation": "@notice Sets initialized == true on implementation contracts\n@param test Set to true to skip implementation initialization",
              "implemented": true,
              "isConstructor": true,
              "kind": "constructor",
              "name": "",
              "scope": 1603,
              "stateMutability": "nonpayable",
              "superFunction": null,
              "visibility": "public"
            },
            "children": [
              {
                "children": [
                  {
                    "attributes": {
                      "constant": false,
                      "name": "test",
                      "scope": 1584,
                      "stateVariable": false,
                      "storageLocation": "default",
                      "type": "bool",
                      "value": null,
                      "visibility": "internal"
                    },
                    "children": [
                      {
                        "attributes": {
                          "name": "bool",
                          "type": "bool"
                        },
                        "id": 1576,
                        "name": "ElementaryTypeName",
                        "src": "256:4:8"
                      }
                    ],
                    "id": 1577,
                    "name": "VariableDeclaration",
                    "src": "256:9:8"
                  }
                ],
                "id": 1578,
                "name": "ParameterList",
                "src": "255:11:8"
              },
              {
                "attributes": {
                  "parameters": [
                    null
                  ]
                },
                "children": [],
                "id": 1582,
                "name": "ParameterList",
                "src": "289:0:8"
              },
              {
                "children": [
                  {
                    "attributes": {
                      "argumentTypes": null,
                      "overloadedDeclarations": [
                        null
                      ],
                      "referencedDeclaration": 1537,
                      "type": "type(contract Exchange)",
                      "value": "Exchange"
                    },
                    "id": 1579,
                    "name": "Identifier",
                    "src": "274:8:8"
                  },
                  {
                    "attributes": {
                      "argumentTypes": null,
                      "overloadedDeclarations": [
                        null
                      ],
                      "referencedDeclaration": 1577,
                      "type": "bool",
                      "value": "test"
                    },
                    "id": 1580,
                    "name": "Identifier",
                    "src": "283:4:8"
                  }
                ],
                "id": 1581,
                "name": "ModifierInvocation",
                "src": "274:14:8"
              },
              {
                "attributes": {
                  "statements": [
                    null
                  ]
                },
                "children": [],
                "id": 1583,
                "name": "Block",
                "src": "289:2:8"
              }
            ],
            "id": 1584,
            "name": "FunctionDefinition",
            "src": "244:47:8"
          },
          {
            "attributes": {
              "documentation": "@notice Returns the storage, major, minor, and patch version of the contract.\n@dev This function is overloaded to maintain a distinct version from Exchange.sol.\n@return Storage version of the contract.\n@return Major version of the contract.\n@return Minor version of the contract.\n@return Patch version of the contract.",
              "implemented": true,
              "isConstructor": false,
              "kind": "function",
              "modifiers": [
                null
              ],
              "name": "getVersionNumber",
              "scope": 1603,
              "stateMutability": "pure",
              "superFunction": 658,
              "visibility": "external"
            },
            "children": [
              {
                "attributes": {
                  "parameters": [
                    null
                  ]
                },
                "children": [],
                "id": 1585,
                "name": "ParameterList",
                "src": "699:2:8"
              },
              {
                "children": [
                  {
                    "attributes": {
                      "constant": false,
                      "name": "",
                      "scope": 1602,
                      "stateVariable": false,
                      "storageLocation": "default",
                      "type": "uint256",
                      "value": null,
                      "visibility": "internal"
                    },
                    "children": [
                      {
                        "attributes": {
                          "name": "uint256",
                          "type": "uint256"
                        },
                        "id": 1586,
                        "name": "ElementaryTypeName",
                        "src": "762:7:8"
                      }
                    ],
                    "id": 1587,
                    "name": "VariableDeclaration",
                    "src": "762:7:8"
                  },
                  {
                    "attributes": {
                      "constant": false,
                      "name": "",
                      "scope": 1602,
                      "stateVariable": false,
                      "storageLocation": "default",
                      "type": "uint256",
                      "value": null,
                      "visibility": "internal"
                    },
                    "children": [
                      {
                        "attributes": {
                          "name": "uint256",
                          "type": "uint256"
                        },
                        "id": 1588,
                        "name": "ElementaryTypeName",
                        "src": "783:7:8"
                      }
                    ],
                    "id": 1589,
                    "name": "VariableDeclaration",
                    "src": "783:7:8"
                  },
                  {
                    "attributes": {
                      "constant": false,
                      "name": "",
                      "scope": 1602,
                      "stateVariable": false,
                      "storageLocation": "default",
                      "type": "uint256",
                      "value": null,
                      "visibility": "internal"
                    },
                    "children": [
                      {
                        "attributes": {
                          "name": "uint256",
                          "type": "uint256"
                        },
                        "id": 1590,
                        "name": "ElementaryTypeName",
                        "src": "804:7:8"
                      }
                    ],
                    "id": 1591,
                    "name": "VariableDeclaration",
                    "src": "804:7:8"
                  },
                  {
                    "attributes": {
                      "constant": false,
                      "name": "",
                      "scope": 1602,
                      "stateVariable": false,
                      "storageLocation": "default",
                      "type": "uint256",
                      "value": null,
                      "visibility": "internal"
                    },
                    "children": [
                      {
                        "attributes": {
                          "name": "uint256",
                          "type": "uint256"
                        },
                        "id": 1592,
                        "name": "ElementaryTypeName",
                        "src": "825:7:8"
                      }
                    ],
                    "id": 1593,
                    "name": "VariableDeclaration",
                    "src": "825:7:8"
                  }
                ],
                "id": 1594,
                "name": "ParameterList",
                "src": "748:94:8"
              },
              {
                "children": [
                  {
                    "attributes": {
                      "functionReturnParameters": 1594
                    },
                    "children": [
                      {
                        "attributes": {
                          "argumentTypes": null,
                          "isConstant": false,
                          "isInlineArray": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "type": "tuple(int_const 1,int_const 2,int_const 0,int_const 0)"
                        },
                        "children": [
                          {
                            "attributes": {
                              "argumentTypes": null,
                              "hexvalue": "31",
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "subdenomination": null,
                              "token": "number",
                              "type": "int_const 1",
                              "value": "1"
                            },
                            "id": 1595,
                            "name": "Literal",
                            "src": "865:1:8"
                          },
                          {
                            "attributes": {
                              "argumentTypes": null,
                              "hexvalue": "32",
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "subdenomination": null,
                              "token": "number",
                              "type": "int_const 2",
                              "value": "2"
                            },
                            "id": 1596,
                            "name": "Literal",
                            "src": "868:1:8"
                          },
                          {
                            "attributes": {
                              "argumentTypes": null,
                              "hexvalue": "30",
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "subdenomination": null,
                              "token": "number",
                              "type": "int_const 0",
                              "value": "0"
                            },
                            "id": 1597,
                            "name": "Literal",
                            "src": "871:1:8"
                          },
                          {
                            "attributes": {
                              "argumentTypes": null,
                              "hexvalue": "30",
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "subdenomination": null,
                              "token": "number",
                              "type": "int_const 0",
                              "value": "0"
                            },
                            "id": 1598,
                            "name": "Literal",
                            "src": "874:1:8"
                          }
                        ],
                        "id": 1599,
                        "name": "TupleExpression",
                        "src": "864:12:8"
                      }
                    ],
                    "id": 1600,
                    "name": "Return",
                    "src": "857:19:8"
                  }
                ],
                "id": 1601,
                "name": "Block",
                "src": "847:36:8"
              }
            ],
            "id": 1602,
            "name": "FunctionDefinition",
            "src": "674:209:8"
          }
        ],
        "id": 1603,
        "name": "ContractDefinition",
        "src": "52:833:8"
      }
    ],
    "id": 1604,
    "name": "SourceUnit",
    "src": "0:886:8"
  },
  "compiler": {
    "name": "solc",
    "version": "0.5.13+commit.5b0b510c.Emscripten.clang"
  },
  "networks": {},
  "schemaVersion": "3.4.13",
  "updatedAt": "2023-11-21T17:20:51.932Z",
  "devdoc": {
    "methods": {
      "activateStable()": {
        "details": "Will revert if stable token is not registered or does not have oracle reports."
      },
      "buy(uint256,uint256,bool)": {
        "details": "The caller must first have approved `maxSellAmount` to the exchange.This function can be frozen via the Freezable interface.",
        "params": {
          "buyAmount": "The number of tokens for the exchange to send in return.",
          "buyGold": "True if the exchange is sending CELO to the caller, false otherwise.",
          "maxSellAmount": "The maximum number of tokens to send to the exchange."
        },
        "return": "The number of tokens sent to the exchange."
      },
      "constructor": {
        "params": {
          "test": "Set to true to skip implementation initialization"
        }
      },
      "exchange(uint256,uint256,bool)": {
        "details": "DEPRECATED - Use `buy` or `sell`.The caller must first have approved `sellAmount` to the exchange.This function can be frozen via the Freezable interface.",
        "params": {
          "minBuyAmount": "The minimum number of tokens for the exchange to send in return.",
          "sellAmount": "The number of tokens to send to the exchange.",
          "sellGold": "True if the caller is sending CELO to the exchange, false otherwise."
        },
        "return": "The number of tokens sent by the exchange."
      },
      "getBuyAndSellBuckets(bool)": {
        "params": {
          "sellGold": "`true` if gold is the sell token."
        },
        "return": "buyTokenBucketsellTokenBucket"
      },
      "getBuyTokenAmount(uint256,bool)": {
        "params": {
          "sellAmount": "The amount of sellToken the user is selling to the exchange.",
          "sellGold": "`true` if gold is the sell token."
        },
        "return": "The corresponding buyToken amount."
      },
      "getSellTokenAmount(uint256,bool)": {
        "params": {
          "buyAmount": "The amount of buyToken the user would like to purchase.",
          "sellGold": "`true` if gold is the sell token."
        },
        "return": "The corresponding sellToken amount."
      },
      "getVersionNumber()": {
        "details": "This function is overloaded to maintain a distinct version from Exchange.sol.",
        "return": "Storage version of the contract.Major version of the contract.Minor version of the contract.Patch version of the contract."
      },
      "initialize(address,string,uint256,uint256,uint256,uint256)": {
        "params": {
          "_minimumReports": "The minimum number of fresh reports that need to be present in the oracle to update buckets commit to the gold bucket",
          "_reserveFraction": "Fraction to commit to the gold bucket",
          "_spread": "Spread charged on exchanges",
          "_updateFrequency": "The time period that needs to elapse between bucket updates",
          "registryAddress": "The address of the registry core smart contract.",
          "stableTokenIdentifier": "String identifier of stabletoken in registry"
        }
      },
      "isOwner()": {
        "details": "Returns true if the caller is the current owner."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner.     * NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "sell(uint256,uint256,bool)": {
        "details": "The caller must first have approved `sellAmount` to the exchange.This function can be frozen via the Freezable interface.",
        "params": {
          "minBuyAmount": "The minimum number of tokens for the exchange to send in return.",
          "sellAmount": "The number of tokens to send to the exchange.",
          "sellGold": "True if the caller is sending CELO to the exchange, false otherwise."
        },
        "return": "The number of tokens sent by the exchange."
      },
      "setMinimumReports(uint256)": {
        "params": {
          "newMininumReports": "The new update minimum number of reports required"
        }
      },
      "setRegistry(address)": {
        "params": {
          "registryAddress": "The address of a registry contract for routing to other contracts."
        }
      },
      "setReserveFraction(uint256)": {
        "params": {
          "newReserveFraction": "The new value for the reserve fraction"
        }
      },
      "setSpread(uint256)": {
        "params": {
          "newSpread": "The new value for the spread"
        }
      },
      "setStableToken(address)": {
        "params": {
          "newStableToken": "The new address for Stable Token"
        }
      },
      "setUpdateFrequency(uint256)": {
        "params": {
          "newUpdateFrequency": "The new update frequency"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    }
  },
  "userdoc": {
    "methods": {
      "activateStable()": {
        "notice": "Ensures stable token address is set in storage and initializes buckets."
      },
      "buy(uint256,uint256,bool)": {
        "notice": "Exchanges an unspecified amount (up to a threshold) of one token for a specific amount of another."
      },
      "constructor": "Sets initialized == true on implementation contracts",
      "exchange(uint256,uint256,bool)": {
        "notice": "Exchanges a specific amount of one token for an unspecified amount (greater than a threshold) of another."
      },
      "getBuyAndSellBuckets(bool)": {
        "notice": "Returns the buy token and sell token bucket sizes, in order. The ratio of the two also represents the exchange rate between the two."
      },
      "getBuyTokenAmount(uint256,bool)": {
        "notice": "Returns the amount of buy tokens a user would get for sellAmount of the sell token."
      },
      "getSellTokenAmount(uint256,bool)": {
        "notice": "Returns the amount of sell tokens a user would need to exchange to receive buyAmount of buy tokens."
      },
      "getVersionNumber()": {
        "notice": "Returns the storage, major, minor, and patch version of the contract."
      },
      "initialize(address,string,uint256,uint256,uint256,uint256)": {
        "notice": "Used in place of the constructor to allow the contract to be upgradable via proxy."
      },
      "sell(uint256,uint256,bool)": {
        "notice": "Exchanges a specific amount of one token for an unspecified amount (greater than a threshold) of another."
      },
      "setMinimumReports(uint256)": {
        "notice": "Allows owner to set the minimum number of reports required"
      },
      "setRegistry(address)": {
        "notice": "Updates the address pointing to a Registry contract."
      },
      "setReserveFraction(uint256)": {
        "notice": "Allows owner to set the Reserve Fraction"
      },
      "setSpread(uint256)": {
        "notice": "Allows owner to set the spread"
      },
      "setStableToken(address)": {
        "notice": "Allows owner to set the Stable Token address"
      },
      "setUpdateFrequency(uint256)": {
        "notice": "Allows owner to set the update frequency"
      }
    }
  }
}