{
  "contractName": "GovernanceApproverMultiSig",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "test",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "transactionId",
          "type": "uint256"
        }
      ],
      "name": "Confirmation",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "transactionId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "returnData",
          "type": "bytes"
        }
      ],
      "name": "Execution",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "internalRequired",
          "type": "uint256"
        }
      ],
      "name": "InternalRequirementChange",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnerAddition",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnerRemoval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "required",
          "type": "uint256"
        }
      ],
      "name": "RequirementChange",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "transactionId",
          "type": "uint256"
        }
      ],
      "name": "Revocation",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "transactionId",
          "type": "uint256"
        }
      ],
      "name": "Submission",
      "type": "event"
    },
    {
      "payable": true,
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "MAX_OWNER_COUNT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "addOwner",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_internalRequired",
          "type": "uint256"
        }
      ],
      "name": "changeInternalRequirement",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_required",
          "type": "uint256"
        }
      ],
      "name": "changeRequirement",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "transactionId",
          "type": "uint256"
        }
      ],
      "name": "confirmTransaction",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "confirmations",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "transactionId",
          "type": "uint256"
        }
      ],
      "name": "executeTransaction",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "transactionId",
          "type": "uint256"
        }
      ],
      "name": "getConfirmationCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "count",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "transactionId",
          "type": "uint256"
        }
      ],
      "name": "getConfirmations",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "_confirmations",
          "type": "address[]"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "getOwners",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "bool",
          "name": "pending",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "executed",
          "type": "bool"
        }
      ],
      "name": "getTransactionCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "count",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "from",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "to",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "pending",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "executed",
          "type": "bool"
        }
      ],
      "name": "getTransactionIds",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "_transactionIds",
          "type": "uint256[]"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_owners",
          "type": "address[]"
        },
        {
          "internalType": "uint256",
          "name": "_required",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_internalRequired",
          "type": "uint256"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "initialized",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "internalRequired",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "transactionId",
          "type": "uint256"
        }
      ],
      "name": "isConfirmed",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "isOwner",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "owners",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "removeOwner",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "replaceOwner",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "required",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "transactionId",
          "type": "uint256"
        }
      ],
      "name": "revokeConfirmation",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "destination",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "submitTransaction",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "transactionId",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "transactionCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "transactions",
      "outputs": [
        {
          "internalType": "address",
          "name": "destination",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        },
        {
          "internalType": "bool",
          "name": "executed",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "metadata": "{\"compiler\":{\"version\":\"0.5.13+commit.5b0b510c\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"test\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"transactionId\",\"type\":\"uint256\"}],\"name\":\"Confirmation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"transactionId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"returnData\",\"type\":\"bytes\"}],\"name\":\"Execution\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"internalRequired\",\"type\":\"uint256\"}],\"name\":\"InternalRequirementChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnerAddition\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnerRemoval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"required\",\"type\":\"uint256\"}],\"name\":\"RequirementChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"transactionId\",\"type\":\"uint256\"}],\"name\":\"Revocation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"transactionId\",\"type\":\"uint256\"}],\"name\":\"Submission\",\"type\":\"event\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAX_OWNER_COUNT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"addOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_internalRequired\",\"type\":\"uint256\"}],\"name\":\"changeInternalRequirement\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_required\",\"type\":\"uint256\"}],\"name\":\"changeRequirement\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"transactionId\",\"type\":\"uint256\"}],\"name\":\"confirmTransaction\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"confirmations\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"transactionId\",\"type\":\"uint256\"}],\"name\":\"executeTransaction\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"transactionId\",\"type\":\"uint256\"}],\"name\":\"getConfirmationCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"transactionId\",\"type\":\"uint256\"}],\"name\":\"getConfirmations\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"_confirmations\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getOwners\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bool\",\"name\":\"pending\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"executed\",\"type\":\"bool\"}],\"name\":\"getTransactionCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"from\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"to\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"pending\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"executed\",\"type\":\"bool\"}],\"name\":\"getTransactionIds\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_transactionIds\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_owners\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"_required\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_internalRequired\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"initialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"internalRequired\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"transactionId\",\"type\":\"uint256\"}],\"name\":\"isConfirmed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"owners\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"removeOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"replaceOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"required\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"transactionId\",\"type\":\"uint256\"}],\"name\":\"revokeConfirmation\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"submitTransaction\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"transactionId\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"transactionCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"transactions\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"bool\",\"name\":\"executed\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"methods\":{\"addOwner(address)\":{\"details\":\"Allows to add a new owner. Transaction has to be sent by wallet.\",\"params\":{\"owner\":\"Address of new owner.\"}},\"changeInternalRequirement(uint256)\":{\"details\":\"Allows to change the number of required confirmations. Transaction has to be sent by wallet.\",\"params\":{\"_internalRequired\":\"Number of required confirmations for interal txs.\"}},\"changeRequirement(uint256)\":{\"details\":\"Allows to change the number of required confirmations. Transaction has to be sent by wallet.\",\"params\":{\"_required\":\"Number of required confirmations.\"}},\"confirmTransaction(uint256)\":{\"details\":\"Allows an owner to confirm a transaction.\",\"params\":{\"transactionId\":\"Transaction ID.\"}},\"constructor\":{\"params\":{\"test\":\"Set to true to skip implementation initialization\"}},\"executeTransaction(uint256)\":{\"details\":\"Allows anyone to execute a confirmed transaction.\",\"params\":{\"transactionId\":\"Transaction ID.\"}},\"getConfirmationCount(uint256)\":{\"details\":\"Returns number of confirmations of a transaction.\",\"params\":{\"transactionId\":\"Transaction ID.\"},\"return\":\"Number of confirmations.\"},\"getConfirmations(uint256)\":{\"details\":\"Returns array with owner addresses, which confirmed transaction.\",\"params\":{\"transactionId\":\"Transaction ID.\"},\"return\":\"Returns array of owner addresses.\"},\"getOwners()\":{\"details\":\"Returns list of owners.\",\"return\":\"List of owner addresses.\"},\"getTransactionCount(bool,bool)\":{\"details\":\"Returns total number of transactions after filters are applied.\",\"params\":{\"executed\":\"Include executed transactions.\",\"pending\":\"Include pending transactions.\"},\"return\":\"Total number of transactions after filters are applied.\"},\"getTransactionIds(uint256,uint256,bool,bool)\":{\"details\":\"Returns list of transaction IDs in defined range.\",\"params\":{\"executed\":\"Include executed transactions.\",\"from\":\"Index start position of transaction array.\",\"pending\":\"Include pending transactions.\",\"to\":\"Index end position of transaction array.\"},\"return\":\"Returns array of transaction IDs.\"},\"initialize(address[],uint256,uint256)\":{\"details\":\"Contract constructor sets initial owners and required number of confirmations.\",\"params\":{\"_internalRequired\":\"Number of required confirmations for internal transactions.\",\"_owners\":\"List of initial owners.\",\"_required\":\"Number of required confirmations for external transactions.\"}},\"isConfirmed(uint256)\":{\"details\":\"Returns the confirmation status of a transaction.\",\"params\":{\"transactionId\":\"Transaction ID.\"},\"return\":\"Confirmation status.\"},\"removeOwner(address)\":{\"details\":\"Allows to remove an owner. Transaction has to be sent by wallet.\",\"params\":{\"owner\":\"Address of owner.\"}},\"replaceOwner(address,address)\":{\"details\":\"Allows to replace an owner with a new owner. Transaction has to be sent by wallet.\",\"params\":{\"newOwner\":\"Address of new owner.\",\"owner\":\"Address of owner to be replaced.\"}},\"revokeConfirmation(uint256)\":{\"details\":\"Allows an owner to revoke a confirmation for a transaction.\",\"params\":{\"transactionId\":\"Transaction ID.\"}},\"submitTransaction(address,uint256,bytes)\":{\"details\":\"Allows an owner to submit and confirm a transaction.\",\"params\":{\"data\":\"Transaction data payload.\",\"destination\":\"Transaction target address.\",\"value\":\"Transaction ether value.\"},\"return\":\"Returns transaction ID.\"}}},\"userdoc\":{\"methods\":{\"constructor\":\"Sets initialized == true on implementation contracts\"}}},\"settings\":{\"compilationTarget\":{\"project:/contracts/governance/GovernanceApproverMultiSig.sol\":\"GovernanceApproverMultiSig\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"openzeppelin-solidity/contracts/math/SafeMath.sol\":{\"content\":\"pragma solidity ^0.5.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        // Solidity only automatically asserts when dividing by 0\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0x640b6dee7a4b830bdfd52b5031a07fc2b12209f5b2e29e5d364a7d37f69d8076\"},\"openzeppelin-solidity/contracts/utils/Address.sol\":{\"content\":\"pragma solidity ^0.5.5;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following \\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\\n        // for accounts without code, i.e. `keccak256('')`\\n        bytes32 codehash;\\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { codehash := extcodehash(account) }\\n        return (codehash != accountHash && codehash != 0x0);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` into `address payable`. Note that this is\\n     * simply a type cast: the actual underlying value is not changed.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function toPayable(address account) internal pure returns (address payable) {\\n        return address(uint160(account));\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-call-value\\n        (bool success, ) = recipient.call.value(amount)(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x1a8e5072509c5ea7365eb1d48030b9be865140c8fb779968da0a459a0e174a11\"},\"project:/contracts/common/ExternalCall.sol\":{\"content\":\"pragma solidity ^0.5.13;\\n\\nimport \\\"openzeppelin-solidity/contracts/utils/Address.sol\\\";\\n\\nlibrary ExternalCall {\\n  /**\\n   * @notice Executes external call.\\n   * @param destination The address to call.\\n   * @param value The CELO value to be sent.\\n   * @param data The data to be sent.\\n   * @return The call return value.\\n   */\\n  function execute(\\n    address destination,\\n    uint256 value,\\n    bytes memory data\\n  ) internal returns (bytes memory) {\\n    if (data.length > 0) require(Address.isContract(destination), \\\"Invalid contract address\\\");\\n    bool success;\\n    bytes memory returnData;\\n    (success, returnData) = destination.call.value(value)(data);\\n    require(success, \\\"Transaction execution failed.\\\");\\n    return returnData;\\n  }\\n}\\n\",\"keccak256\":\"0x07b3210ecdc833330a73e5bfd49032bad8fab096bb365ad57da105e1570642fc\"},\"project:/contracts/common/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.5.13 <0.9.0;\\n\\n/**\\n * @title Used with proxied contracts that have an `initialize` function.\\n * @notice Ensures the `initialize` function:\\n *         - gets called only once\\n *         - cannot be called on the logic contract.\\n */\\ncontract Initializable {\\n  bool public initialized;\\n\\n  /**\\n   * @notice Ensures the initializer function cannot be called more than once.\\n   */\\n  modifier initializer() {\\n    require(!initialized, \\\"contract already initialized\\\");\\n    initialized = true;\\n    _;\\n  }\\n\\n  /**\\n   * @notice By default, ensures that the `initialize` function cannot be called\\n   * on the logic contract.\\n   * @param testingDeployment When set to true, allows the `initialize` function\\n   * to be called, which is useful in testing when not setting up with a Proxy.\\n   */\\n  constructor(bool testingDeployment) public {\\n    if (!testingDeployment) {\\n      initialized = true;\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x8de2ab8706668982998c5a995bdc3d8ff20a1ec8519bf49cec9e464f62c57bb9\"},\"project:/contracts/common/MultiSig.sol\":{\"content\":\"pragma solidity ^0.5.13;\\n/* solhint-disable no-inline-assembly, avoid-low-level-calls, func-name-mixedcase, func-order */\\n\\nimport \\\"openzeppelin-solidity/contracts/math/SafeMath.sol\\\";\\n\\nimport \\\"./ExternalCall.sol\\\";\\nimport \\\"./Initializable.sol\\\";\\n\\n/**\\n * @title Multisignature wallet - Allows multiple parties to agree on transactions before\\n * execution.\\n * @author Stefan George - <stefan.george@consensys.net>\\n * @dev NOTE: This contract has its limitations and is not viable for every\\n * multi-signature setup. On a case by case basis, evaluate whether this is the\\n * correct contract for your use case.\\n * In particular, this contract doesn't have an atomic \\\"add owners and increase\\n * requirement\\\" operation.\\n * This can be tricky, for example, in a situation where a MultiSig starts out\\n * owned by a single owner. Safely increasing the owner set and requirement at\\n * the same time is not trivial. One way to work around this situation is to\\n * first add a second address controlled by the original owner, increase the\\n * requirement, and then replace the auxillary address with the intended second\\n * owner.\\n * Again, this is just one example, in general make sure to verify this contract\\n * will support your intended usage. The goal of this contract is to offer a\\n * simple, minimal multi-signature API that's easy to understand even for novice\\n * Solidity users.\\n */\\ncontract MultiSig is Initializable {\\n  using SafeMath for uint256;\\n\\n  struct Transaction {\\n    address destination;\\n    uint256 value;\\n    bytes data;\\n    bool executed;\\n  }\\n\\n  /*\\n   *  Constants\\n   */\\n  uint256 public constant MAX_OWNER_COUNT = 50;\\n\\n  /*\\n   *  Storage\\n   */\\n  mapping(uint256 => Transaction) public transactions;\\n  mapping(uint256 => mapping(address => bool)) public confirmations;\\n  mapping(address => bool) public isOwner;\\n  address[] public owners;\\n  uint256 public required;\\n  uint256 public internalRequired;\\n  uint256 public transactionCount;\\n\\n  /*\\n   *  Events\\n   */\\n  event Confirmation(address indexed sender, uint256 indexed transactionId);\\n  event Revocation(address indexed sender, uint256 indexed transactionId);\\n  event Submission(uint256 indexed transactionId);\\n  event Execution(uint256 indexed transactionId, bytes returnData);\\n  event Deposit(address indexed sender, uint256 value);\\n  event OwnerAddition(address indexed owner);\\n  event OwnerRemoval(address indexed owner);\\n  event RequirementChange(uint256 required);\\n  event InternalRequirementChange(uint256 internalRequired);\\n\\n  /*\\n   *  Modifiers\\n   */\\n  modifier onlyWallet() {\\n    require(msg.sender == address(this), \\\"msg.sender was not multisig wallet\\\");\\n    _;\\n  }\\n\\n  modifier ownerDoesNotExist(address owner) {\\n    require(!isOwner[owner], \\\"owner already existed\\\");\\n    _;\\n  }\\n\\n  modifier ownerExists(address owner) {\\n    require(isOwner[owner], \\\"owner does not exist\\\");\\n    _;\\n  }\\n\\n  modifier transactionExists(uint256 transactionId) {\\n    require(transactions[transactionId].destination != address(0), \\\"transaction does not exist\\\");\\n    _;\\n  }\\n\\n  modifier confirmed(uint256 transactionId, address owner) {\\n    require(confirmations[transactionId][owner], \\\"transaction was not confirmed for owner\\\");\\n    _;\\n  }\\n\\n  modifier notConfirmed(uint256 transactionId, address owner) {\\n    require(!confirmations[transactionId][owner], \\\"transaction was already confirmed for owner\\\");\\n    _;\\n  }\\n\\n  modifier notExecuted(uint256 transactionId) {\\n    require(!transactions[transactionId].executed, \\\"transaction was executed already\\\");\\n    _;\\n  }\\n\\n  modifier notNull(address _address) {\\n    require(_address != address(0), \\\"address was null\\\");\\n    _;\\n  }\\n\\n  modifier validRequirement(uint256 ownerCount, uint256 _required) {\\n    require(\\n      ownerCount <= MAX_OWNER_COUNT && _required <= ownerCount && _required != 0 && ownerCount != 0,\\n      \\\"invalid requirement\\\"\\n    );\\n    _;\\n  }\\n\\n  /**\\n   * @notice Sets initialized == true on implementation contracts\\n   * @param test Set to true to skip implementation initialization\\n   */\\n  constructor(bool test) public Initializable(test) {}\\n\\n  /*\\n   * Public functions\\n   */\\n  /// @dev Contract constructor sets initial owners and required number of confirmations.\\n  /// @param _owners List of initial owners.\\n  /// @param _required Number of required confirmations for external transactions.\\n  /// @param _internalRequired Number of required confirmations for internal transactions.\\n  function initialize(\\n    address[] calldata _owners,\\n    uint256 _required,\\n    uint256 _internalRequired\\n  )\\n    external\\n    initializer\\n    validRequirement(_owners.length, _required)\\n    validRequirement(_owners.length, _internalRequired)\\n  {\\n    for (uint256 i = 0; i < _owners.length; i = i.add(1)) {\\n      require(\\n        !isOwner[_owners[i]] && _owners[i] != address(0),\\n        \\\"owner was null or already given owner status\\\"\\n      );\\n      isOwner[_owners[i]] = true;\\n    }\\n    owners = _owners;\\n    required = _required;\\n    internalRequired = _internalRequired;\\n  }\\n\\n  /// @dev Fallback function allows to deposit ether.\\n  function() external payable {\\n    if (msg.value > 0) emit Deposit(msg.sender, msg.value);\\n  }\\n\\n  /// @dev Allows to add a new owner. Transaction has to be sent by wallet.\\n  /// @param owner Address of new owner.\\n  function addOwner(\\n    address owner\\n  )\\n    external\\n    onlyWallet\\n    ownerDoesNotExist(owner)\\n    notNull(owner)\\n    validRequirement(owners.length.add(1), internalRequired)\\n  {\\n    isOwner[owner] = true;\\n    owners.push(owner);\\n    emit OwnerAddition(owner);\\n  }\\n\\n  /// @dev Allows to remove an owner. Transaction has to be sent by wallet.\\n  /// @param owner Address of owner.\\n  function removeOwner(address owner) external onlyWallet ownerExists(owner) {\\n    isOwner[owner] = false;\\n    for (uint256 i = 0; i < owners.length.sub(1); i = i.add(1))\\n      if (owners[i] == owner) {\\n        owners[i] = owners[owners.length.sub(1)];\\n        break;\\n      }\\n    owners.length = owners.length.sub(1);\\n    if (required > owners.length) changeRequirement(owners.length);\\n    if (internalRequired > owners.length) changeInternalRequirement(owners.length);\\n    emit OwnerRemoval(owner);\\n  }\\n\\n  /// @dev Allows to replace an owner with a new owner. Transaction has to be sent by wallet.\\n  /// @param owner Address of owner to be replaced.\\n  /// @param newOwner Address of new owner.\\n  function replaceOwner(\\n    address owner,\\n    address newOwner\\n  ) external onlyWallet ownerExists(owner) notNull(newOwner) ownerDoesNotExist(newOwner) {\\n    for (uint256 i = 0; i < owners.length; i = i.add(1))\\n      if (owners[i] == owner) {\\n        owners[i] = newOwner;\\n        break;\\n      }\\n    isOwner[owner] = false;\\n    isOwner[newOwner] = true;\\n    emit OwnerRemoval(owner);\\n    emit OwnerAddition(newOwner);\\n  }\\n\\n  /// @dev Allows an owner to revoke a confirmation for a transaction.\\n  /// @param transactionId Transaction ID.\\n  function revokeConfirmation(\\n    uint256 transactionId\\n  )\\n    external\\n    ownerExists(msg.sender)\\n    confirmed(transactionId, msg.sender)\\n    notExecuted(transactionId)\\n  {\\n    confirmations[transactionId][msg.sender] = false;\\n    emit Revocation(msg.sender, transactionId);\\n  }\\n\\n  /// @dev Allows an owner to submit and confirm a transaction.\\n  /// @param destination Transaction target address.\\n  /// @param value Transaction ether value.\\n  /// @param data Transaction data payload.\\n  /// @return Returns transaction ID.\\n  function submitTransaction(\\n    address destination,\\n    uint256 value,\\n    bytes calldata data\\n  ) external returns (uint256 transactionId) {\\n    transactionId = addTransaction(destination, value, data);\\n    confirmTransaction(transactionId);\\n  }\\n\\n  /*\\n   * Web3 call functions\\n   */\\n  /// @dev Returns number of confirmations of a transaction.\\n  /// @param transactionId Transaction ID.\\n  /// @return Number of confirmations.\\n  function getConfirmationCount(uint256 transactionId) external view returns (uint256 count) {\\n    for (uint256 i = 0; i < owners.length; i = i.add(1))\\n      if (confirmations[transactionId][owners[i]]) count = count.add(1);\\n  }\\n\\n  /// @dev Returns total number of transactions after filters are applied.\\n  /// @param pending Include pending transactions.\\n  /// @param executed Include executed transactions.\\n  /// @return Total number of transactions after filters are applied.\\n  function getTransactionCount(bool pending, bool executed) external view returns (uint256 count) {\\n    for (uint256 i = 0; i < transactionCount; i = i.add(1))\\n      if ((pending && !transactions[i].executed) || (executed && transactions[i].executed))\\n        count = count.add(1);\\n  }\\n\\n  /// @dev Returns list of owners.\\n  /// @return List of owner addresses.\\n  function getOwners() external view returns (address[] memory) {\\n    return owners;\\n  }\\n\\n  /// @dev Returns array with owner addresses, which confirmed transaction.\\n  /// @param transactionId Transaction ID.\\n  /// @return Returns array of owner addresses.\\n  function getConfirmations(\\n    uint256 transactionId\\n  ) external view returns (address[] memory _confirmations) {\\n    address[] memory confirmationsTemp = new address[](owners.length);\\n    uint256 count = 0;\\n    uint256 i;\\n    for (i = 0; i < owners.length; i = i.add(1))\\n      if (confirmations[transactionId][owners[i]]) {\\n        confirmationsTemp[count] = owners[i];\\n        count = count.add(1);\\n      }\\n    _confirmations = new address[](count);\\n    for (i = 0; i < count; i = i.add(1)) _confirmations[i] = confirmationsTemp[i];\\n  }\\n\\n  /// @dev Returns list of transaction IDs in defined range.\\n  /// @param from Index start position of transaction array.\\n  /// @param to Index end position of transaction array.\\n  /// @param pending Include pending transactions.\\n  /// @param executed Include executed transactions.\\n  /// @return Returns array of transaction IDs.\\n  function getTransactionIds(\\n    uint256 from,\\n    uint256 to,\\n    bool pending,\\n    bool executed\\n  ) external view returns (uint256[] memory _transactionIds) {\\n    uint256[] memory transactionIdsTemp = new uint256[](transactionCount);\\n    uint256 count = 0;\\n    uint256 i;\\n    for (i = 0; i < transactionCount; i = i.add(1))\\n      if ((pending && !transactions[i].executed) || (executed && transactions[i].executed)) {\\n        transactionIdsTemp[count] = i;\\n        count = count.add(1);\\n      }\\n    _transactionIds = new uint256[](to.sub(from));\\n    for (i = from; i < to; i = i.add(1)) _transactionIds[i.sub(from)] = transactionIdsTemp[i];\\n  }\\n\\n  /// @dev Allows to change the number of required confirmations. Transaction has to be sent by\\n  /// wallet.\\n  /// @param _required Number of required confirmations.\\n  function changeRequirement(\\n    uint256 _required\\n  ) public onlyWallet validRequirement(owners.length, _required) {\\n    required = _required;\\n    emit RequirementChange(_required);\\n  }\\n\\n  /// @dev Allows to change the number of required confirmations. Transaction has to be sent by\\n  /// wallet.\\n  /// @param _internalRequired Number of required confirmations for interal txs.\\n  function changeInternalRequirement(\\n    uint256 _internalRequired\\n  ) public onlyWallet validRequirement(owners.length, _internalRequired) {\\n    internalRequired = _internalRequired;\\n    emit InternalRequirementChange(_internalRequired);\\n  }\\n\\n  /// @dev Allows an owner to confirm a transaction.\\n  /// @param transactionId Transaction ID.\\n  function confirmTransaction(\\n    uint256 transactionId\\n  )\\n    public\\n    ownerExists(msg.sender)\\n    transactionExists(transactionId)\\n    notConfirmed(transactionId, msg.sender)\\n  {\\n    confirmations[transactionId][msg.sender] = true;\\n    emit Confirmation(msg.sender, transactionId);\\n    if (isConfirmed(transactionId)) {\\n      executeTransaction(transactionId);\\n    }\\n  }\\n\\n  /// @dev Allows anyone to execute a confirmed transaction.\\n  /// @param transactionId Transaction ID.\\n  function executeTransaction(\\n    uint256 transactionId\\n  ) public ownerExists(msg.sender) confirmed(transactionId, msg.sender) notExecuted(transactionId) {\\n    require(isConfirmed(transactionId), \\\"Transaction not confirmed.\\\");\\n    Transaction storage txn = transactions[transactionId];\\n    txn.executed = true;\\n    bytes memory returnData = ExternalCall.execute(txn.destination, txn.value, txn.data);\\n    emit Execution(transactionId, returnData);\\n  }\\n\\n  /// @dev Returns the confirmation status of a transaction.\\n  /// @param transactionId Transaction ID.\\n  /// @return Confirmation status.\\n  function isConfirmed(uint256 transactionId) public view returns (bool) {\\n    uint256 count = 0;\\n    for (uint256 i = 0; i < owners.length; i = i.add(1)) {\\n      if (confirmations[transactionId][owners[i]]) count = count.add(1);\\n      bool isInternal = transactions[transactionId].destination == address(this);\\n      if ((isInternal && count == internalRequired) || (!isInternal && count == required))\\n        return true;\\n    }\\n    return false;\\n  }\\n\\n  /*\\n   * Internal functions\\n   */\\n  /// @dev Adds a new transaction to the transaction mapping, if transaction does not exist yet.\\n  /// @param destination Transaction target address.\\n  /// @param value Transaction ether value.\\n  /// @param data Transaction data payload.\\n  /// @return Returns transaction ID.\\n  function addTransaction(\\n    address destination,\\n    uint256 value,\\n    bytes memory data\\n  ) internal notNull(destination) returns (uint256 transactionId) {\\n    transactionId = transactionCount;\\n    transactions[transactionId] = Transaction({\\n      destination: destination,\\n      value: value,\\n      data: data,\\n      executed: false\\n    });\\n    transactionCount = transactionCount.add(1);\\n    emit Submission(transactionId);\\n  }\\n}\\n\",\"keccak256\":\"0xeaf25ac31ed80ac8395d4a3ea8d3a8a15bc4522290fa7100b8fe7fd46fa14c62\"},\"project:/contracts/governance/GovernanceApproverMultiSig.sol\":{\"content\":\"pragma solidity ^0.5.13;\\n\\nimport \\\"../common/MultiSig.sol\\\";\\n\\n/* solhint-disable no-empty-blocks */\\ncontract GovernanceApproverMultiSig is MultiSig {\\n  /**\\n   * @notice Sets initialized == true on implementation contracts\\n   * @param test Set to true to skip implementation initialization\\n   */\\n  constructor(bool test) public MultiSig(test) {}\\n}\\n\",\"keccak256\":\"0xcf5f5c88c3eedf406538269195f73d08678d92483017041c8ec05358cb895279\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "",
  "sourceMap": "98:246:116:-;;;295:47;8:9:-1;5:2;;;30:1;27;20:12;5:2;295:47:116;;;;;;;;;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;295:47:116;;;;;;;;;;;;;;;;334:4;4036::31;896:17:28;891:57;;937:4;923:11;;:18;;;;;;;;;;;;;;;;;;891:57;842:110;3992:52:31;295:47:116;98:246;;;;;;",
  "deployedSourceMap": "98:246:116:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5075:1:31;5063:9;:13;5059:54;;;5091:10;5083:30;;;5103:9;5083:30;;;;;;;;;;;;;;;;;;5059:54;98:246:116;1820:23:31;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1820:23:31;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;1820:23:31;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;319::28;;8:9:-1;5:2;;;30:1;27;20:12;5:2;319:23:28;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;5623:501:31;;8:9:-1;5:2;;;30:1;27;20:12;5:2;5623:501:31;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;5623:501:31;;;;;;;;;;;;;;;;;;;:::i;:::-;;6857:281;;8:9:-1;5:2;;;30:1;27;20:12;5:2;6857:281:31;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;6857:281:31;;;;;;;;;;;;;;;;;:::i;:::-;;10983:241;;8:9:-1;5:2;;;30:1;27;20:12;5:2;10983:241:31;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;10983:241:31;;;;;;;;;;;;;;;;;:::i;:::-;;1777:39;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1777:39:31;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;1777:39:31;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;1708:65;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1708:65:31;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;1708:65:31;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;8294:283;;8:9:-1;5:2;;;30:1;27;20:12;5:2;8294:283:31;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;8294:283:31;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;4390:577;;8:9:-1;5:2;;;30:1;27;20:12;5:2;4390:577:31;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;4390:577:31;;;;;;;;;;21:11:-1;8;5:28;2:2;;;46:1;43;36:12;2:2;4390:577:31;;35:9:-1;28:4;12:14;8:25;5:40;2:2;;;58:1;55;48:12;2:2;4390:577:31;;;;;;101:9:-1;95:2;81:12;77:21;67:8;63:36;60:51;39:11;25:12;22:29;11:108;8:2;;;132:1;129;122:12;8:2;4390:577:31;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;5239:267;;8:9:-1;5:2;;;30:1;27;20:12;5:2;5239:267:31;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;5239:267:31;;;;;;;;;;;;;;;;;;;:::i;:::-;;12400:449;;8:9:-1;5:2;;;30:1;27;20:12;5:2;12400:449:31;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;12400:449:31;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;7815:226;;8:9:-1;5:2;;;30:1;27;20:12;5:2;7815:226:31;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;7815:226:31;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;1653:51;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1653:51:31;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;1653:51:31;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;80:1;75:3;71:11;64:39;52:2;49:1;45:10;40:15;;8:100;;;12:14;1653:51:31;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8655:86;;8:9:-1;5:2;;;30:1;27;20:12;5:2;8655:86:31;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;80:1;75:3;71:11;64:39;52:2;49:1;45:10;40:15;;8:100;;;12:14;8655:86:31;;;;;;;;;;;;;;;;;1874:31;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1874:31:31;;;:::i;:::-;;;;;;;;;;;;;;;;;;;9786:646;;8:9:-1;5:2;;;30:1;27;20:12;5:2;9786:646:31;;;;;;13:3:-1;8;5:12;2:2;;;30:1;27;20:12;2:2;9786:646:31;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;80:1;75:3;71:11;64:39;52:2;49:1;45:10;40:15;;8:100;;;12:14;9786:646:31;;;;;;;;;;;;;;;;;8912:539;;8:9:-1;5:2;;;30:1;27;20:12;5:2;8912:539:31;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;8912:539:31;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;80:1;75:3;71:11;64:39;52:2;49:1;45:10;40:15;;8:100;;;12:14;8912:539:31;;;;;;;;;;;;;;;;;1909:31;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1909:31:31;;;:::i;:::-;;;;;;;;;;;;;;;;;;;10603:185;;8:9:-1;5:2;;;30:1;27;20:12;5:2;10603:185:31;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;10603:185:31;;;;;;;;;;;;;;;;;:::i;:::-;;11324:374;;8:9:-1;5:2;;;30:1;27;20:12;5:2;11324:374:31;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;11324:374:31;;;;;;;;;;;;;;;;;:::i;:::-;;7385:247;;8:9:-1;5:2;;;30:1;27;20:12;5:2;7385:247:31;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;7385:247:31;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;21:11:-1;8;5:28;2:2;;;46:1;43;36:12;2:2;7385:247:31;;35:9:-1;28:4;12:14;8:25;5:40;2:2;;;58:1;55;48:12;2:2;7385:247:31;;;;;;100:9:-1;95:1;81:12;77:20;67:8;63:35;60:50;39:11;25:12;22:29;11:107;8:2;;;131:1;128;121:12;8:2;7385:247:31;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;1579:44;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1579:44:31;;;:::i;:::-;;;;;;;;;;;;;;;;;;;1847:23;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1847:23:31;;;:::i;:::-;;;;;;;;;;;;;;;;;;;6318:421;;8:9:-1;5:2;;;30:1;27;20:12;5:2;6318:421:31;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;6318:421:31;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;11806:451;;8:9:-1;5:2;;;30:1;27;20:12;5:2;11806:451:31;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;11806:451:31;;;;;;;;;;;;;;;;;:::i;:::-;;1820:23;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;319::28:-;;;;;;;;;;;;;:::o;5623:501:31:-;2579:4;2557:27;;:10;:27;;;2549:74;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5691:5;2802:7;:14;2810:5;2802:14;;;;;;;;;;;;;;;;;;;;;;;;;2794:47;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5721:5;5704:7;:14;5712:5;5704:14;;;;;;;;;;;;;;;;:22;;;;;;;;;;;;;;;;;;5737:9;5749:1;5737:13;;5732:164;5756:20;5774:1;5756:6;:13;;;;:17;;:20;;;;:::i;:::-;5752:1;:24;5732:164;;;5815:5;5802:18;;:6;5809:1;5802:9;;;;;;;;;;;;;;;;;;;;;;;;;:18;;;5798:98;;;5844:6;5851:20;5869:1;5851:6;:13;;;;:17;;:20;;;;:::i;:::-;5844:28;;;;;;;;;;;;;;;;;;;;;;;;;5832:6;5839:1;5832:9;;;;;;;;;;;;;;;;:40;;;;;;;;;;;;;;;;;;5882:5;;5798:98;5782:8;5788:1;5782;:5;;:8;;;;:::i;:::-;5778:12;;5732:164;;;;5917:20;5935:1;5917:6;:13;;;;:17;;:20;;;;:::i;:::-;5901:6;:36;;;;;:::i;:::-;;5958:6;:13;;;;5947:8;;:24;5943:62;;;5973:32;5991:6;:13;;;;5973:17;:32::i;:::-;5943:62;6034:6;:13;;;;6015:16;;:32;6011:78;;;6049:40;6075:6;:13;;;;6049:25;:40::i;:::-;6011:78;6113:5;6100:19;;;;;;;;;;;;2629:1;5623:501;:::o;6857:281::-;6945:10;2802:7;:14;2810:5;2802:14;;;;;;;;;;;;;;;;;;;;;;;;;2794:47;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6971:13;6986:10;3092:13;:28;3106:13;3092:28;;;;;;;;;;;:35;3121:5;3092:35;;;;;;;;;;;;;;;;;;;;;;;;;3084:87;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;7014:13;3420:12;:27;3433:13;3420:27;;;;;;;;;;;:36;;;;;;;;;;;;3419:37;3411:82;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;7080:5;7037:13;:28;7051:13;7037:28;;;;;;;;;;;:40;7066:10;7037:40;;;;;;;;;;;;;;;;:48;;;;;;;;;;;;;;;;;;7119:13;7107:10;7096:37;;;;;;;;;;;;3177:1;2847;;6857:281;;:::o;10983:241::-;2579:4;2557:27;;:10;:27;;;2549:74;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;11088:6;:13;;;;11103:17;1621:2;3703:10;:29;;:56;;;;;3749:10;3736:9;:23;;3703:56;:74;;;;;3776:1;3763:9;:14;;3703:74;:93;;;;;3795:1;3781:10;:15;;3703:93;3688:143;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;11147:17;11128:16;:36;;;;11175:44;11201:17;11175:44;;;;;;;;;;;;;;;;;;2629:1;;10983:241;:::o;1777:39::-;;;;;;;;;;;;;;;;;;;;;;:::o;1708:65::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;8294:283::-;8375:13;8401:9;8413:1;8401:13;;8396:176;8420:16;;8416:1;:20;8396:176;;;8463:7;:36;;;;;8475:12;:15;8488:1;8475:15;;;;;;;;;;;:24;;;;;;;;;;;;8474:25;8463:36;8462:80;;;;8505:8;:36;;;;;8517:12;:15;8530:1;8517:15;;;;;;;;;;;:24;;;;;;;;;;;;8505:36;8462:80;8458:114;;;8560:12;8570:1;8560:5;:9;;:12;;;;:::i;:::-;8552:20;;8458:114;8442:8;8448:1;8442;:5;;:8;;;;:::i;:::-;8438:12;;8396:176;;;;8294:283;;;;:::o;4390:577::-;476:11:28;;;;;;;;;;;475:12;467:53;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;540:4;526:11;;:18;;;;;;;;;;;;;;;;;;4550:7:31;;:14;;4566:9;1621:2;3703:10;:29;;:56;;;;;3749:10;3736:9;:23;;3703:56;:74;;;;;3776:1;3763:9;:14;;3703:74;:93;;;;;3795:1;3781:10;:15;;3703:93;3688:143;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4598:7;;:14;;4614:17;1621:2;3703:10;:29;;:56;;;;;3749:10;3736:9;:23;;3703:56;:74;;;;;3776:1;3763:9;:14;;3703:74;:93;;;;;3795:1;3781:10;:15;;3703:93;3688:143;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4646:9;4658:1;4646:13;;4641:232;4665:7;;:14;;4661:1;:18;4641:232;;;4721:7;:19;4729:7;;4737:1;4729:10;;;;;;;;;;;;;;;4721:19;;;;;;;;;;;;;;;;;;;;;;;;;4720:20;:48;;;;;4766:1;4744:24;;:7;;4752:1;4744:10;;;;;;;;;;;;;;;:24;;;;4720:48;4703:129;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4862:4;4840:7;:19;4848:7;;4856:1;4848:10;;;;;;;;;;;;;;;4840:19;;;;;;;;;;;;;;;;:26;;;;;;;;;;;;;;;;;;4685:8;4691:1;4685;:5;;:8;;;;:::i;:::-;4681:12;;4641:232;;;;4887:7;;4878:6;:16;;;;;;;:::i;:::-;;4911:9;4900:8;:20;;;;4945:17;4926:16;:36;;;;3837:1;;550::28;;4390:577:31;;;;:::o;5239:267::-;2579:4;2557:27;;:10;:27;;;2549:74;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5330:5;2696:7;:14;2704:5;2696:14;;;;;;;;;;;;;;;;;;;;;;;;;2695:15;2687:49;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5349:5;3578:1;3558:22;;:8;:22;;;;3550:51;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5377:20;5395:1;5377:6;:13;;;;:17;;:20;;;;:::i;:::-;5399:16;;1621:2;3703:10;:29;;:56;;;;;3749:10;3736:9;:23;;3703:56;:74;;;;;3776:1;3763:9;:14;;3703:74;:93;;;;;3795:1;3781:10;:15;;3703:93;3688:143;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5442:4;5425:7;:14;5433:5;5425:14;;;;;;;;;;;;;;;;:21;;;;;;;;;;;;;;;;;;5452:6;5464:5;5452:18;;39:1:-1;33:3;27:10;23:18;57:10;52:3;45:23;79:10;72:17;;0:93;5452:18:31;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5495:5;5481:20;;;;;;;;;;;;3607:1;;2742;2629;5239:267;:::o;12400:449::-;12465:4;12477:13;12493:1;12477:17;;12505:9;12517:1;12505:13;;12500:327;12524:6;:13;;;;12520:1;:17;12500:327;;;12565:13;:28;12579:13;12565:28;;;;;;;;;;;:39;12594:6;12601:1;12594:9;;;;;;;;;;;;;;;;;;;;;;;;;12565:39;;;;;;;;;;;;;;;;;;;;;;;;;12561:65;;;12614:12;12624:1;12614:5;:9;;:12;;;;:::i;:::-;12606:20;;12561:65;12634:15;12703:4;12652:56;;:12;:27;12665:13;12652:27;;;;;;;;;;;:39;;;;;;;;;;;;:56;;;12634:74;;12721:10;:39;;;;;12744:16;;12735:5;:25;12721:39;12720:79;;;;12767:10;12766:11;:32;;;;;12790:8;;12781:5;:17;12766:32;12720:79;12716:104;;;12816:4;12809:11;;;;;;;12716:104;12500:327;12543:8;12549:1;12543;:5;;:8;;;;:::i;:::-;12539:12;;12500:327;;;;12839:5;12832:12;;;12400:449;;;;:::o;7815:226::-;7891:13;7917:9;7929:1;7917:13;;7912:124;7936:6;:13;;;;7932:1;:17;7912:124;;;7975:13;:28;7989:13;7975:28;;;;;;;;;;;:39;8004:6;8011:1;8004:9;;;;;;;;;;;;;;;;;;;;;;;;;7975:39;;;;;;;;;;;;;;;;;;;;;;;;;7971:65;;;8024:12;8034:1;8024:5;:9;;:12;;;;:::i;:::-;8016:20;;7971:65;7955:8;7961:1;7955;:5;;:8;;;;:::i;:::-;7951:12;;7912:124;;;;7815:226;;;:::o;1653:51::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;8655:86::-;8699:16;8730:6;8723:13;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8655:86;:::o;1874:31::-;;;;:::o;9786:646::-;9911:32;9951:35;10003:16;;9989:31;;;;;;;;;;;;;;;;;;;;;;29:2:-1;21:6;17:15;117:4;105:10;97:6;88:34;148:4;140:6;136:17;126:27;;0:157;9989:31:31;;;;9951:69;;10026:13;10042:1;10026:17;;10049:9;10073:1;10069:5;;10064:218;10080:16;;10076:1;:20;10064:218;;;10123:7;:36;;;;;10135:12;:15;10148:1;10135:15;;;;;;;;;;;:24;;;;;;;;;;;;10134:25;10123:36;10122:80;;;;10165:8;:36;;;;;10177:12;:15;10190:1;10177:15;;;;;;;;;;;:24;;;;;;;;;;;;10165:36;10122:80;10118:164;;;10242:1;10214:18;10233:5;10214:25;;;;;;;;;;;;;:29;;;;;10261:12;10271:1;10261:5;:9;;:12;;;;:::i;:::-;10253:20;;10118:164;10102:8;10108:1;10102;:5;;:8;;;;:::i;:::-;10098:12;;10064:218;;;10319:12;10326:4;10319:2;:6;;:12;;;;:::i;:::-;10305:27;;;;;;;;;;;;;;;;;;;;;;29:2:-1;21:6;17:15;117:4;105:10;97:6;88:34;148:4;140:6;136:17;126:27;;0:157;10305:27:31;;;;10287:45;;10347:4;10343:8;;10338:89;10357:2;10353:1;:6;10338:89;;;10406:18;10425:1;10406:21;;;;;;;;;;;;;;10375:15;10391:11;10397:4;10391:1;:5;;:11;;;;:::i;:::-;10375:28;;;;;;;;;;;;;:52;;;;;10365:8;10371:1;10365;:5;;:8;;;;:::i;:::-;10361:12;;10338:89;;;9786:646;;;;;;;;;:::o;8912:539::-;8992:31;9031:34;9082:6;:13;;;;9068:28;;;;;;;;;;;;;;;;;;;;;;29:2:-1;21:6;17:15;117:4;105:10;97:6;88:34;148:4;140:6;136:17;126:27;;0:157;9068:28:31;;;;9031:65;;9102:13;9118:1;9102:17;;9125:9;9149:1;9145:5;;9140:181;9156:6;:13;;;;9152:1;:17;9140:181;;;9195:13;:28;9209:13;9195:28;;;;;;;;;;;:39;9224:6;9231:1;9224:9;;;;;;;;;;;;;;;;;;;;;;;;;9195:39;;;;;;;;;;;;;;;;;;;;;;;;;9191:130;;;9273:6;9280:1;9273:9;;;;;;;;;;;;;;;;;;;;;;;;;9246:17;9264:5;9246:24;;;;;;;;;;;;;:36;;;;;;;;;;;9300:12;9310:1;9300:5;:9;;:12;;;;:::i;:::-;9292:20;;9191:130;9175:8;9181:1;9175;:5;;:8;;;;:::i;:::-;9171:12;;9140:181;;;9357:5;9343:20;;;;;;;;;;;;;;;;;;;;;;29:2:-1;21:6;17:15;117:4;105:10;97:6;88:34;148:4;140:6;136:17;126:27;;0:157;9343:20:31;;;;9326:37;;9378:1;9374:5;;9369:77;9385:5;9381:1;:9;9369:77;;;9426:17;9444:1;9426:20;;;;;;;;;;;;;;9406:14;9421:1;9406:17;;;;;;;;;;;;;:40;;;;;;;;;;;9396:8;9402:1;9396;:5;;:8;;;;:::i;:::-;9392:12;;9369:77;;;8912:539;;;;;;:::o;1909:31::-;;;;:::o;10603:185::-;2579:4;2557:27;;:10;:27;;;2549:74;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;10692:6;:13;;;;10707:9;1621:2;3703:10;:29;;:56;;;;;3749:10;3736:9;:23;;3703:56;:74;;;;;3776:1;3763:9;:14;;3703:74;:93;;;;;3795:1;3781:10;:15;;3703:93;3688:143;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;10735:9;10724:8;:20;;;;10755:28;10773:9;10755:28;;;;;;;;;;;;;;;;;;2629:1;;10603:185;:::o;11324:374::-;11410:10;2802:7;:14;2810:5;2802:14;;;;;;;;;;;;;;;;;;;;;;;;;2794:47;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;11444:13;2972:1;2921:53;;:12;:27;2934:13;2921:27;;;;;;;;;;;:39;;;;;;;;;;;;:53;;;;2913:92;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;11476:13;11491:10;3262:13;:28;3276:13;3262:28;;;;;;;;;;;:35;3291:5;3262:35;;;;;;;;;;;;;;;;;;;;;;;;;3261:36;3253:92;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;11554:4;11511:13;:28;11525:13;11511:28;;;;;;;;;;;:40;11540:10;11511:40;;;;;;;;;;;;;;;;:47;;;;;;;;;;;;;;;;;;11594:13;11582:10;11569:39;;;;;;;;;;;;11618:26;11630:13;11618:11;:26::i;:::-;11614:80;;;11654:33;11673:13;11654:18;:33::i;:::-;11614:80;3011:1;;2847;11324:374;;:::o;7385:247::-;7503:21;7548:40;7563:11;7576:5;7583:4;;7548:40;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;30:3:-1;22:6;14;1:33;99:1;93:3;85:6;81:16;74:27;137:4;133:9;126:4;121:3;117:14;113:30;106:37;;169:3;161:6;157:16;147:26;;7548:40:31;;;;;;:14;:40::i;:::-;7532:56;;7594:33;7613:13;7594:18;:33::i;:::-;7385:247;;;;;;:::o;1579:44::-;1621:2;1579:44;:::o;1847:23::-;;;;:::o;6318:421::-;2579:4;2557:27;;:10;:27;;;2549:74;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6417:5;2802:7;:14;2810:5;2802:14;;;;;;;;;;;;;;;;;;;;;;;;;2794:47;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6432:8;3578:1;3558:22;;:8;:22;;;;3550:51;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6460:8;2696:7;:14;2704:5;2696:14;;;;;;;;;;;;;;;;;;;;;;;;;2695:15;2687:49;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6481:9;6493:1;6481:13;;6476:137;6500:6;:13;;;;6496:1;:17;6476:137;;;6552:5;6539:18;;:6;6546:1;6539:9;;;;;;;;;;;;;;;;;;;;;;;;;:18;;;6535:78;;;6581:8;6569:6;6576:1;6569:9;;;;;;;;;;;;;;;;:20;;;;;;;;;;;;;;;;;;6599:5;;6535:78;6519:8;6525:1;6519;:5;;:8;;;;:::i;:::-;6515:12;;6476:137;;;;6635:5;6618:7;:14;6626:5;6618:14;;;;;;;;;;;;;;;;:22;;;;;;;;;;;;;;;;;;6666:4;6646:7;:17;6654:8;6646:17;;;;;;;;;;;;;;;;:24;;;;;;;;;;;;;;;;;;6694:5;6681:19;;;;;;;;;;;;6725:8;6711:23;;;;;;;;;;;;3607:1;2847;2629;6318:421;;:::o;11806:451::-;11884:10;2802:7;:14;2810:5;2802:14;;;;;;;;;;;;;;;;;;;;;;;;;2794:47;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;11906:13;11921:10;3092:13;:28;3106:13;3092:28;;;;;;;;;;;:35;3121:5;3092:35;;;;;;;;;;;;;;;;;;;;;;;;;3084:87;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;11945:13;3420:12;:27;3433:13;3420:27;;;;;;;;;;;:36;;;;;;;;;;;;3419:37;3411:82;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;11974:26;11986:13;11974:11;:26::i;:::-;11966:65;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;12037:23;12063:12;:27;12076:13;12063:27;;;;;;;;;;;12037:53;;12111:4;12096:3;:12;;;:19;;;;;;;;;;;;;;;;;;12121:23;12147:58;12168:3;:15;;;;;;;;;;;;12185:3;:9;;;12196:3;:8;;12147:58;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:20;:58::i;:::-;12121:84;;12226:13;12216:36;12241:10;12216:36;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;80:1;75:3;71:11;64:39;52:2;49:1;45:10;40:15;;8:100;;;12:14;12216:36:31;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3499:1;;3177;2847;;11806:451;;:::o;1274:134:3:-;1332:7;1358:43;1362:1;1365;1358:43;;;;;;;;;;;;;;;;;:3;:43::i;:::-;1351:50;;1274:134;;;;:::o;834:176::-;892:7;911:9;927:1;923;:5;911:17;;951:1;946;:6;;938:46;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1002:1;995:8;;;834:176;;;;:::o;13164:432:31:-;13298:21;13276:11;3578:1;3558:22;;:8;:22;;;;3550:51;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;13343:16;;13327:32;;13395:112;;;;;;;;13428:11;13395:112;;;;;;13454:5;13395:112;;;;13473:4;13395:112;;;;13495:5;13395:112;;;;;13365:12;:27;13378:13;13365:27;;;;;;;;;;;:142;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;13532:23;13553:1;13532:16;;:20;;:23;;;;:::i;:::-;13513:16;:42;;;;13577:13;13566:25;;;;;;;;;;13164:432;;;;;;:::o;325:410:19:-;431:12;469:1;455:4;:11;:15;451:89;;;480:31;499:11;480:18;:31::i;:::-;472:68;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;451:89;546:12;564:23;617:11;:16;;640:5;647:4;617:35;;;;;;;;;;;;;36:153:-1;66:2;61:3;58:11;36:153;;182:3;176:10;171:3;164:23;98:2;93:3;89:12;82:19;;123:2;118:3;114:12;107:19;;148:2;143:3;139:12;132:19;;36:153;;;274:1;267:3;263:2;259:12;254:3;250:22;246:30;315:4;311:9;305:3;299:10;295:26;356:4;350:3;344:10;340:21;389:7;380;377:20;372:3;365:33;3:399;;;617:35:19;;;;;;;;;;;;;;;;;;;;;;;;;14:1:-1;21;16:31;;;;75:4;69:11;64:16;;144:4;140:9;133:4;115:16;111:27;107:43;104:1;100:51;94:4;87:65;169:16;166:1;159:27;225:16;222:1;215:4;212:1;208:12;193:49;7:242;;16:31;36:4;31:9;;7:242;;593:59:19;;;;;;;;666:7;658:49;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;720:10;713:17;;;;325:410;;;;;:::o;1732:187:3:-;1818:7;1850:1;1845;:6;;1853:12;1837:29;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;80:1;75:3;71:11;64:39;52:2;49:1;45:10;40:15;;8:100;;;12:14;1837:29:3;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1876:9;1892:1;1888;:5;1876:17;;1911:1;1904:8;;;1732:187;;;;;:::o;686:610:8:-;746:4;1004:16;1030:19;1052:66;1030:88;;;;1219:7;1207:20;1195:32;;1258:11;1246:8;:23;;:42;;;;;1285:3;1273:15;;:8;:15;;1246:42;1238:51;;;;686:610;;;:::o;98:246:116:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o",
  "source": "pragma solidity ^0.5.13;\n\nimport \"../common/MultiSig.sol\";\n\n/* solhint-disable no-empty-blocks */\ncontract GovernanceApproverMultiSig is MultiSig {\n  /**\n   * @notice Sets initialized == true on implementation contracts\n   * @param test Set to true to skip implementation initialization\n   */\n  constructor(bool test) public MultiSig(test) {}\n}\n",
  "sourcePath": "/Users/beaver/Development/temp/celo-monorepo/packages/protocol/contracts/governance/GovernanceApproverMultiSig.sol",
  "ast": {
    "absolutePath": "project:/contracts/governance/GovernanceApproverMultiSig.sol",
    "exportedSymbols": {
      "GovernanceApproverMultiSig": [
        37162
      ]
    },
    "id": 37163,
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 37149,
        "literals": [
          "solidity",
          "^",
          "0.5",
          ".13"
        ],
        "nodeType": "PragmaDirective",
        "src": "0:24:116"
      },
      {
        "absolutePath": "project:/contracts/common/MultiSig.sol",
        "file": "../common/MultiSig.sol",
        "id": 37150,
        "nodeType": "ImportDirective",
        "scope": 37163,
        "sourceUnit": 10964,
        "src": "26:32:116",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "baseContracts": [
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 37151,
              "name": "MultiSig",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 10963,
              "src": "137:8:116",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_MultiSig_$10963",
                "typeString": "contract MultiSig"
              }
            },
            "id": 37152,
            "nodeType": "InheritanceSpecifier",
            "src": "137:8:116"
          }
        ],
        "contractDependencies": [
          9570,
          10963
        ],
        "contractKind": "contract",
        "documentation": null,
        "fullyImplemented": true,
        "id": 37162,
        "linearizedBaseContracts": [
          37162,
          10963,
          9570
        ],
        "name": "GovernanceApproverMultiSig",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "body": {
              "id": 37160,
              "nodeType": "Block",
              "src": "340:2:116",
              "statements": []
            },
            "documentation": "@notice Sets initialized == true on implementation contracts\n@param test Set to true to skip implementation initialization",
            "id": 37161,
            "implemented": true,
            "kind": "constructor",
            "modifiers": [
              {
                "arguments": [
                  {
                    "argumentTypes": null,
                    "id": 37157,
                    "name": "test",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 37154,
                    "src": "334:4:116",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  }
                ],
                "id": 37158,
                "modifierName": {
                  "argumentTypes": null,
                  "id": 37156,
                  "name": "MultiSig",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 10963,
                  "src": "325:8:116",
                  "typeDescriptions": {
                    "typeIdentifier": "t_type$_t_contract$_MultiSig_$10963_$",
                    "typeString": "type(contract MultiSig)"
                  }
                },
                "nodeType": "ModifierInvocation",
                "src": "325:14:116"
              }
            ],
            "name": "",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 37155,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 37154,
                  "name": "test",
                  "nodeType": "VariableDeclaration",
                  "scope": 37161,
                  "src": "307:9:116",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 37153,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "307:4:116",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "306:11:116"
            },
            "returnParameters": {
              "id": 37159,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "340:0:116"
            },
            "scope": 37162,
            "src": "295:47:116",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          }
        ],
        "scope": 37163,
        "src": "98:246:116"
      }
    ],
    "src": "0:345:116"
  },
  "legacyAST": {
    "attributes": {
      "absolutePath": "project:/contracts/governance/GovernanceApproverMultiSig.sol",
      "exportedSymbols": {
        "GovernanceApproverMultiSig": [
          37162
        ]
      }
    },
    "children": [
      {
        "attributes": {
          "literals": [
            "solidity",
            "^",
            "0.5",
            ".13"
          ]
        },
        "id": 37149,
        "name": "PragmaDirective",
        "src": "0:24:116"
      },
      {
        "attributes": {
          "SourceUnit": 10964,
          "absolutePath": "project:/contracts/common/MultiSig.sol",
          "file": "../common/MultiSig.sol",
          "scope": 37163,
          "symbolAliases": [
            null
          ],
          "unitAlias": ""
        },
        "id": 37150,
        "name": "ImportDirective",
        "src": "26:32:116"
      },
      {
        "attributes": {
          "contractDependencies": [
            9570,
            10963
          ],
          "contractKind": "contract",
          "documentation": null,
          "fullyImplemented": true,
          "linearizedBaseContracts": [
            37162,
            10963,
            9570
          ],
          "name": "GovernanceApproverMultiSig",
          "scope": 37163
        },
        "children": [
          {
            "attributes": {
              "arguments": null
            },
            "children": [
              {
                "attributes": {
                  "contractScope": null,
                  "name": "MultiSig",
                  "referencedDeclaration": 10963,
                  "type": "contract MultiSig"
                },
                "id": 37151,
                "name": "UserDefinedTypeName",
                "src": "137:8:116"
              }
            ],
            "id": 37152,
            "name": "InheritanceSpecifier",
            "src": "137:8:116"
          },
          {
            "attributes": {
              "documentation": "@notice Sets initialized == true on implementation contracts\n@param test Set to true to skip implementation initialization",
              "implemented": true,
              "isConstructor": true,
              "kind": "constructor",
              "name": "",
              "scope": 37162,
              "stateMutability": "nonpayable",
              "superFunction": null,
              "visibility": "public"
            },
            "children": [
              {
                "children": [
                  {
                    "attributes": {
                      "constant": false,
                      "name": "test",
                      "scope": 37161,
                      "stateVariable": false,
                      "storageLocation": "default",
                      "type": "bool",
                      "value": null,
                      "visibility": "internal"
                    },
                    "children": [
                      {
                        "attributes": {
                          "name": "bool",
                          "type": "bool"
                        },
                        "id": 37153,
                        "name": "ElementaryTypeName",
                        "src": "307:4:116"
                      }
                    ],
                    "id": 37154,
                    "name": "VariableDeclaration",
                    "src": "307:9:116"
                  }
                ],
                "id": 37155,
                "name": "ParameterList",
                "src": "306:11:116"
              },
              {
                "attributes": {
                  "parameters": [
                    null
                  ]
                },
                "children": [],
                "id": 37159,
                "name": "ParameterList",
                "src": "340:0:116"
              },
              {
                "children": [
                  {
                    "attributes": {
                      "argumentTypes": null,
                      "overloadedDeclarations": [
                        null
                      ],
                      "referencedDeclaration": 10963,
                      "type": "type(contract MultiSig)",
                      "value": "MultiSig"
                    },
                    "id": 37156,
                    "name": "Identifier",
                    "src": "325:8:116"
                  },
                  {
                    "attributes": {
                      "argumentTypes": null,
                      "overloadedDeclarations": [
                        null
                      ],
                      "referencedDeclaration": 37154,
                      "type": "bool",
                      "value": "test"
                    },
                    "id": 37157,
                    "name": "Identifier",
                    "src": "334:4:116"
                  }
                ],
                "id": 37158,
                "name": "ModifierInvocation",
                "src": "325:14:116"
              },
              {
                "attributes": {
                  "statements": [
                    null
                  ]
                },
                "children": [],
                "id": 37160,
                "name": "Block",
                "src": "340:2:116"
              }
            ],
            "id": 37161,
            "name": "FunctionDefinition",
            "src": "295:47:116"
          }
        ],
        "id": 37162,
        "name": "ContractDefinition",
        "src": "98:246:116"
      }
    ],
    "id": 37163,
    "name": "SourceUnit",
    "src": "0:345:116"
  },
  "compiler": {
    "name": "solc",
    "version": "0.5.13+commit.5b0b510c.Emscripten.clang"
  },
  "networks": {},
  "schemaVersion": "3.4.13",
  "updatedAt": "2025-05-05T17:49:51.403Z",
  "devdoc": {
    "methods": {
      "addOwner(address)": {
        "details": "Allows to add a new owner. Transaction has to be sent by wallet.",
        "params": {
          "owner": "Address of new owner."
        }
      },
      "changeInternalRequirement(uint256)": {
        "details": "Allows to change the number of required confirmations. Transaction has to be sent by wallet.",
        "params": {
          "_internalRequired": "Number of required confirmations for interal txs."
        }
      },
      "changeRequirement(uint256)": {
        "details": "Allows to change the number of required confirmations. Transaction has to be sent by wallet.",
        "params": {
          "_required": "Number of required confirmations."
        }
      },
      "confirmTransaction(uint256)": {
        "details": "Allows an owner to confirm a transaction.",
        "params": {
          "transactionId": "Transaction ID."
        }
      },
      "constructor": {
        "params": {
          "test": "Set to true to skip implementation initialization"
        }
      },
      "executeTransaction(uint256)": {
        "details": "Allows anyone to execute a confirmed transaction.",
        "params": {
          "transactionId": "Transaction ID."
        }
      },
      "getConfirmationCount(uint256)": {
        "details": "Returns number of confirmations of a transaction.",
        "params": {
          "transactionId": "Transaction ID."
        },
        "return": "Number of confirmations."
      },
      "getConfirmations(uint256)": {
        "details": "Returns array with owner addresses, which confirmed transaction.",
        "params": {
          "transactionId": "Transaction ID."
        },
        "return": "Returns array of owner addresses."
      },
      "getOwners()": {
        "details": "Returns list of owners.",
        "return": "List of owner addresses."
      },
      "getTransactionCount(bool,bool)": {
        "details": "Returns total number of transactions after filters are applied.",
        "params": {
          "executed": "Include executed transactions.",
          "pending": "Include pending transactions."
        },
        "return": "Total number of transactions after filters are applied."
      },
      "getTransactionIds(uint256,uint256,bool,bool)": {
        "details": "Returns list of transaction IDs in defined range.",
        "params": {
          "executed": "Include executed transactions.",
          "from": "Index start position of transaction array.",
          "pending": "Include pending transactions.",
          "to": "Index end position of transaction array."
        },
        "return": "Returns array of transaction IDs."
      },
      "initialize(address[],uint256,uint256)": {
        "details": "Contract constructor sets initial owners and required number of confirmations.",
        "params": {
          "_internalRequired": "Number of required confirmations for internal transactions.",
          "_owners": "List of initial owners.",
          "_required": "Number of required confirmations for external transactions."
        }
      },
      "isConfirmed(uint256)": {
        "details": "Returns the confirmation status of a transaction.",
        "params": {
          "transactionId": "Transaction ID."
        },
        "return": "Confirmation status."
      },
      "removeOwner(address)": {
        "details": "Allows to remove an owner. Transaction has to be sent by wallet.",
        "params": {
          "owner": "Address of owner."
        }
      },
      "replaceOwner(address,address)": {
        "details": "Allows to replace an owner with a new owner. Transaction has to be sent by wallet.",
        "params": {
          "newOwner": "Address of new owner.",
          "owner": "Address of owner to be replaced."
        }
      },
      "revokeConfirmation(uint256)": {
        "details": "Allows an owner to revoke a confirmation for a transaction.",
        "params": {
          "transactionId": "Transaction ID."
        }
      },
      "submitTransaction(address,uint256,bytes)": {
        "details": "Allows an owner to submit and confirm a transaction.",
        "params": {
          "data": "Transaction data payload.",
          "destination": "Transaction target address.",
          "value": "Transaction ether value."
        },
        "return": "Returns transaction ID."
      }
    }
  },
  "userdoc": {
    "methods": {
      "constructor": "Sets initialized == true on implementation contracts"
    }
  }
}