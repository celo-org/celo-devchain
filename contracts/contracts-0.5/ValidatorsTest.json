{
  "contractName": "ValidatorsTest",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "delay",
          "type": "uint256"
        }
      ],
      "name": "CommissionUpdateDelaySet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "duration",
          "type": "uint256"
        }
      ],
      "name": "GroupLockedGoldRequirementsSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "size",
          "type": "uint256"
        }
      ],
      "name": "MaxGroupSizeSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "length",
          "type": "uint256"
        }
      ],
      "name": "MembershipHistoryLengthSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "registryAddress",
          "type": "address"
        }
      ],
      "name": "RegistrySet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "validator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "group",
          "type": "address"
        }
      ],
      "name": "ValidatorAffiliated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "validator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "blsPublicKey",
          "type": "bytes"
        }
      ],
      "name": "ValidatorBlsPublicKeyUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "validator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "group",
          "type": "address"
        }
      ],
      "name": "ValidatorDeaffiliated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "validator",
          "type": "address"
        }
      ],
      "name": "ValidatorDeregistered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "validator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "ecdsaPublicKey",
          "type": "bytes"
        }
      ],
      "name": "ValidatorEcdsaPublicKeyUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "validator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "validatorPayment",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "group",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "groupPayment",
          "type": "uint256"
        }
      ],
      "name": "ValidatorEpochPaymentDistributed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "group",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "commission",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "activationBlock",
          "type": "uint256"
        }
      ],
      "name": "ValidatorGroupCommissionUpdateQueued",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "group",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "commission",
          "type": "uint256"
        }
      ],
      "name": "ValidatorGroupCommissionUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "group",
          "type": "address"
        }
      ],
      "name": "ValidatorGroupDeregistered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "group",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "validator",
          "type": "address"
        }
      ],
      "name": "ValidatorGroupMemberAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "group",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "validator",
          "type": "address"
        }
      ],
      "name": "ValidatorGroupMemberRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "group",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "validator",
          "type": "address"
        }
      ],
      "name": "ValidatorGroupMemberReordered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "group",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "commission",
          "type": "uint256"
        }
      ],
      "name": "ValidatorGroupRegistered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "duration",
          "type": "uint256"
        }
      ],
      "name": "ValidatorLockedGoldRequirementsSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "validator",
          "type": "address"
        }
      ],
      "name": "ValidatorRegistered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "exponent",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "adjustmentSpeed",
          "type": "uint256"
        }
      ],
      "name": "ValidatorScoreParametersSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "validator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "score",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "epochScore",
          "type": "uint256"
        }
      ],
      "name": "ValidatorScoreUpdated",
      "type": "event"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "validator",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "lesser",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "greater",
          "type": "address"
        }
      ],
      "name": "addFirstMember",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "validator",
          "type": "address"
        }
      ],
      "name": "addMember",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "group",
          "type": "address"
        }
      ],
      "name": "affiliate",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "uptime",
          "type": "uint256"
        }
      ],
      "name": "calculateEpochScore",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "uptimes",
          "type": "uint256[]"
        }
      ],
      "name": "calculateGroupEpochScore",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "blsKey",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "blsPop",
          "type": "bytes"
        }
      ],
      "name": "checkProofOfPossession",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "commissionUpdateDelay",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [],
      "name": "deaffiliate",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "deregisterValidator",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "deregisterValidatorGroup",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "downtimeGracePeriod",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "validatorAccount",
          "type": "address"
        }
      ],
      "name": "forceDeaffiliateIfValidator",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "aNumerator",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "aDenominator",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "bNumerator",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "bDenominator",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "exponent",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_decimals",
          "type": "uint256"
        }
      ],
      "name": "fractionMulExp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "getAccountLockedGoldRequirement",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "bytes",
          "name": "header",
          "type": "bytes"
        }
      ],
      "name": "getBlockNumberFromHeader",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "getCommissionUpdateDelay",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "getEpochNumber",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "blockNumber",
          "type": "uint256"
        }
      ],
      "name": "getEpochNumberOfBlock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "getEpochSize",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "getGroupLockedGoldRequirements",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "getGroupNumMembers",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address[]",
          "name": "accounts",
          "type": "address[]"
        }
      ],
      "name": "getGroupsNumMembers",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "getMaxGroupSize",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "getMembershipHistory",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "getMembershipInLastEpoch",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "signer",
          "type": "address"
        }
      ],
      "name": "getMembershipInLastEpochFromSigner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "getNumRegisteredValidators",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "blockNumber",
          "type": "uint256"
        }
      ],
      "name": "getParentSealBitmap",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "getRegisteredValidatorGroups",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "getRegisteredValidatorSigners",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "getRegisteredValidators",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "n",
          "type": "uint256"
        }
      ],
      "name": "getTopGroupValidators",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "getValidator",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "ecdsaPublicKey",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "blsPublicKey",
          "type": "bytes"
        },
        {
          "internalType": "address",
          "name": "affiliation",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "score",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "signer",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "signer",
          "type": "address"
        }
      ],
      "name": "getValidatorBlsPublicKeyFromSigner",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "blsPublicKey",
          "type": "bytes"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "getValidatorGroup",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "getValidatorGroupSlashingMultiplier",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "getValidatorLockedGoldRequirements",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "getValidatorScoreParameters",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "bytes",
          "name": "header",
          "type": "bytes"
        }
      ],
      "name": "getVerifiedSealBitmapFromHeader",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "getVersionNumber",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "groupLockedGoldRequirements",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "duration",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "epochNumber",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "groupMembershipInEpoch",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "halveSlashingMultiplier",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "bytes",
          "name": "header",
          "type": "bytes"
        }
      ],
      "name": "hashHeader",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "registryAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "groupRequirementValue",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "groupRequirementDuration",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "validatorRequirementValue",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "validatorRequirementDuration",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "validatorScoreExponent",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "validatorScoreAdjustmentSpeed",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_membershipHistoryLength",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_slashingMultiplierResetPeriod",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_maxGroupSize",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_commissionUpdateDelay",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_downtimeGracePeriod",
          "type": "uint256"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "initialized",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "isOwner",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "isValidator",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "isValidatorGroup",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "maxGroupSize",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "meetsAccountLockedGoldRequirements",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "membershipHistoryLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "blockNumber",
          "type": "uint256"
        }
      ],
      "name": "minQuorumSize",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "minQuorumSizeInCurrentSet",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "numberValidatorsInCurrentSet",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "blockNumber",
          "type": "uint256"
        }
      ],
      "name": "numberValidatorsInSet",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "bytes",
          "name": "ecdsaPublicKey",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "blsPublicKey",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "blsPop",
          "type": "bytes"
        }
      ],
      "name": "registerValidator",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "commission",
          "type": "uint256"
        }
      ],
      "name": "registerValidatorGroup",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "registry",
      "outputs": [
        {
          "internalType": "contract IRegistry",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "validator",
          "type": "address"
        }
      ],
      "name": "removeMember",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "validator",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "lesserMember",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "greaterMember",
          "type": "address"
        }
      ],
      "name": "reorderMember",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [],
      "name": "resetSlashingMultiplier",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "delay",
          "type": "uint256"
        }
      ],
      "name": "setCommissionUpdateDelay",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "setDowntimeGracePeriod",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "duration",
          "type": "uint256"
        }
      ],
      "name": "setGroupLockedGoldRequirements",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "size",
          "type": "uint256"
        }
      ],
      "name": "setMaxGroupSize",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "length",
          "type": "uint256"
        }
      ],
      "name": "setMembershipHistoryLength",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "commission",
          "type": "uint256"
        }
      ],
      "name": "setNextCommissionUpdate",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "registryAddress",
          "type": "address"
        }
      ],
      "name": "setRegistry",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "setSlashingMultiplierResetPeriod",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "duration",
          "type": "uint256"
        }
      ],
      "name": "setValidatorLockedGoldRequirements",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "exponent",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "adjustmentSpeed",
          "type": "uint256"
        }
      ],
      "name": "setValidatorScoreParameters",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "slashingMultiplierResetPeriod",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "bytes",
          "name": "blsPublicKey",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "blsPop",
          "type": "bytes"
        }
      ],
      "name": "updateBlsPublicKey",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [],
      "name": "updateCommission",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "signer",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "ecdsaPublicKey",
          "type": "bytes"
        }
      ],
      "name": "updateEcdsaPublicKey",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "signer",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "ecdsaPublicKey",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "blsPublicKey",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "blsPop",
          "type": "bytes"
        }
      ],
      "name": "updatePublicKeys",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "validatorLockedGoldRequirements",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "duration",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "validatorSignerAddressFromCurrentSet",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "blockNumber",
          "type": "uint256"
        }
      ],
      "name": "validatorSignerAddressFromSet",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "signer",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "uptime",
          "type": "uint256"
        }
      ],
      "name": "updateValidatorScoreFromSigner",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "signer",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "maxPayment",
          "type": "uint256"
        }
      ],
      "name": "distributeEpochPaymentsFromSigner",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "metadata": "{\"compiler\":{\"version\":\"0.5.13+commit.5b0b510c\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"delay\",\"type\":\"uint256\"}],\"name\":\"CommissionUpdateDelaySet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"}],\"name\":\"GroupLockedGoldRequirementsSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"size\",\"type\":\"uint256\"}],\"name\":\"MaxGroupSizeSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"length\",\"type\":\"uint256\"}],\"name\":\"MembershipHistoryLengthSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"registryAddress\",\"type\":\"address\"}],\"name\":\"RegistrySet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"group\",\"type\":\"address\"}],\"name\":\"ValidatorAffiliated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"blsPublicKey\",\"type\":\"bytes\"}],\"name\":\"ValidatorBlsPublicKeyUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"group\",\"type\":\"address\"}],\"name\":\"ValidatorDeaffiliated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"}],\"name\":\"ValidatorDeregistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"ecdsaPublicKey\",\"type\":\"bytes\"}],\"name\":\"ValidatorEcdsaPublicKeyUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"validatorPayment\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"group\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"groupPayment\",\"type\":\"uint256\"}],\"name\":\"ValidatorEpochPaymentDistributed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"group\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"commission\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"activationBlock\",\"type\":\"uint256\"}],\"name\":\"ValidatorGroupCommissionUpdateQueued\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"group\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"commission\",\"type\":\"uint256\"}],\"name\":\"ValidatorGroupCommissionUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"group\",\"type\":\"address\"}],\"name\":\"ValidatorGroupDeregistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"group\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"}],\"name\":\"ValidatorGroupMemberAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"group\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"}],\"name\":\"ValidatorGroupMemberRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"group\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"}],\"name\":\"ValidatorGroupMemberReordered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"group\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"commission\",\"type\":\"uint256\"}],\"name\":\"ValidatorGroupRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"}],\"name\":\"ValidatorLockedGoldRequirementsSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"}],\"name\":\"ValidatorRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"exponent\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"adjustmentSpeed\",\"type\":\"uint256\"}],\"name\":\"ValidatorScoreParametersSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"score\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"epochScore\",\"type\":\"uint256\"}],\"name\":\"ValidatorScoreUpdated\",\"type\":\"event\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"lesser\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"greater\",\"type\":\"address\"}],\"name\":\"addFirstMember\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"}],\"name\":\"addMember\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"group\",\"type\":\"address\"}],\"name\":\"affiliate\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"uptime\",\"type\":\"uint256\"}],\"name\":\"calculateEpochScore\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"uptimes\",\"type\":\"uint256[]\"}],\"name\":\"calculateGroupEpochScore\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"blsKey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"blsPop\",\"type\":\"bytes\"}],\"name\":\"checkProofOfPossession\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"commissionUpdateDelay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"deaffiliate\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"deregisterValidator\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"deregisterValidatorGroup\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxPayment\",\"type\":\"uint256\"}],\"name\":\"distributeEpochPaymentsFromSigner\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"downtimeGracePeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"validatorAccount\",\"type\":\"address\"}],\"name\":\"forceDeaffiliateIfValidator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"aNumerator\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"aDenominator\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bNumerator\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bDenominator\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"exponent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_decimals\",\"type\":\"uint256\"}],\"name\":\"fractionMulExp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getAccountLockedGoldRequirement\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"header\",\"type\":\"bytes\"}],\"name\":\"getBlockNumberFromHeader\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCommissionUpdateDelay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getEpochNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"getEpochNumberOfBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getEpochSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getGroupLockedGoldRequirements\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getGroupNumMembers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"}],\"name\":\"getGroupsNumMembers\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getMaxGroupSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getMembershipHistory\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getMembershipInLastEpoch\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"}],\"name\":\"getMembershipInLastEpochFromSigner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getNumRegisteredValidators\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"getParentSealBitmap\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getRegisteredValidatorGroups\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getRegisteredValidatorSigners\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getRegisteredValidators\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"n\",\"type\":\"uint256\"}],\"name\":\"getTopGroupValidators\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getValidator\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"ecdsaPublicKey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"blsPublicKey\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"affiliation\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"score\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"}],\"name\":\"getValidatorBlsPublicKeyFromSigner\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"blsPublicKey\",\"type\":\"bytes\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getValidatorGroup\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getValidatorGroupSlashingMultiplier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getValidatorLockedGoldRequirements\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getValidatorScoreParameters\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"header\",\"type\":\"bytes\"}],\"name\":\"getVerifiedSealBitmapFromHeader\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getVersionNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"groupLockedGoldRequirements\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"epochNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"groupMembershipInEpoch\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"halveSlashingMultiplier\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"header\",\"type\":\"bytes\"}],\"name\":\"hashHeader\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"registryAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"groupRequirementValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"groupRequirementDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"validatorRequirementValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"validatorRequirementDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"validatorScoreExponent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"validatorScoreAdjustmentSpeed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_membershipHistoryLength\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_slashingMultiplierResetPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxGroupSize\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_commissionUpdateDelay\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_downtimeGracePeriod\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"initialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isValidator\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isValidatorGroup\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxGroupSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"meetsAccountLockedGoldRequirements\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"membershipHistoryLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"minQuorumSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minQuorumSizeInCurrentSet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"numberValidatorsInCurrentSet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"numberValidatorsInSet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"ecdsaPublicKey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"blsPublicKey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"blsPop\",\"type\":\"bytes\"}],\"name\":\"registerValidator\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"commission\",\"type\":\"uint256\"}],\"name\":\"registerValidatorGroup\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"registry\",\"outputs\":[{\"internalType\":\"contract IRegistry\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"}],\"name\":\"removeMember\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"lesserMember\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"greaterMember\",\"type\":\"address\"}],\"name\":\"reorderMember\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"resetSlashingMultiplier\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"delay\",\"type\":\"uint256\"}],\"name\":\"setCommissionUpdateDelay\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"setDowntimeGracePeriod\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"}],\"name\":\"setGroupLockedGoldRequirements\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"size\",\"type\":\"uint256\"}],\"name\":\"setMaxGroupSize\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"length\",\"type\":\"uint256\"}],\"name\":\"setMembershipHistoryLength\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"commission\",\"type\":\"uint256\"}],\"name\":\"setNextCommissionUpdate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"registryAddress\",\"type\":\"address\"}],\"name\":\"setRegistry\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"setSlashingMultiplierResetPeriod\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"}],\"name\":\"setValidatorLockedGoldRequirements\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"exponent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"adjustmentSpeed\",\"type\":\"uint256\"}],\"name\":\"setValidatorScoreParameters\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"slashingMultiplierResetPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"blsPublicKey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"blsPop\",\"type\":\"bytes\"}],\"name\":\"updateBlsPublicKey\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"updateCommission\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"ecdsaPublicKey\",\"type\":\"bytes\"}],\"name\":\"updateEcdsaPublicKey\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"ecdsaPublicKey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"blsPublicKey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"blsPop\",\"type\":\"bytes\"}],\"name\":\"updatePublicKeys\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"uptime\",\"type\":\"uint256\"}],\"name\":\"updateValidatorScoreFromSigner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"validatorLockedGoldRequirements\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"validatorSignerAddressFromCurrentSet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"validatorSignerAddressFromSet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"methods\":{\"addFirstMember(address,address,address)\":{\"details\":\"Fails if `validator` has not set their affiliation to this account.Fails if the group has > 0 members.\",\"params\":{\"greater\":\"The address of the group that has received more votes than this group.\",\"lesser\":\"The address of the group that has received fewer votes than this group.\",\"validator\":\"The validator to add to the group\"},\"return\":\"True upon success.\"},\"addMember(address)\":{\"details\":\"Fails if `validator` has not set their affiliation to this account.Fails if the group has zero members.\",\"params\":{\"validator\":\"The validator to add to the group\"},\"return\":\"True upon success.\"},\"affiliate(address)\":{\"details\":\"De-affiliates with the previously affiliated group if present.\",\"params\":{\"group\":\"The validator group with which to affiliate.\"},\"return\":\"True upon success.\"},\"calculateEpochScore(uint256)\":{\"details\":\"epoch_score = uptime ** exponent\",\"params\":{\"uptime\":\"The Fixidity representation of the validator's uptime, between 0 and 1.\"},\"return\":\"Fixidity representation of the epoch score between 0 and 1.\"},\"calculateGroupEpochScore(uint256[])\":{\"details\":\"group_score = average(uptimes ** exponent)\",\"params\":{\"uptimes\":\"Array of Fixidity representations of the validators' uptimes, between 0 and 1.\"},\"return\":\"Fixidity representation of the group epoch score between 0 and 1.\"},\"checkProofOfPossession(address,bytes,bytes)\":{\"params\":{\"blsKey\":\"The BLS public key that the validator is using for consensus, should pass proof  of possession. 48 bytes.\",\"blsPop\":\"The BLS public key proof-of-possession, which consists of a signature on the  account address. 96 bytes.\",\"sender\":\"The address signed by the BLS key to generate the proof of possession.\"},\"return\":\"True upon success.\"},\"deaffiliate()\":{\"details\":\"Fails if the account is not a validator with non-zero affiliation.\",\"return\":\"True upon success.\"},\"deregisterValidator(uint256)\":{\"details\":\"Fails if the account is not a validator.Fails if the validator has been a member of a group too recently.\",\"params\":{\"index\":\"The index of this validator in the list of all registered validators.\"},\"return\":\"True upon success.\"},\"deregisterValidatorGroup(uint256)\":{\"details\":\"Fails if the account is not a validator group with no members.Fails if the group has had members too recently.\",\"params\":{\"index\":\"The index of this validator group in the list of all validator groups.\"},\"return\":\"True upon success.\"},\"forceDeaffiliateIfValidator(address)\":{\"params\":{\"validatorAccount\":\"The validator to deaffiliate from their affiliated validator group.\"}},\"fractionMulExp(uint256,uint256,uint256,uint256,uint256,uint256)\":{\"params\":{\"_decimals\":\"precision\",\"aDenominator\":\"Denominator of first fraction\",\"aNumerator\":\"Numerator of first fraction\",\"bDenominator\":\"Denominator of exponentiated fraction\",\"bNumerator\":\"Numerator of exponentiated fraction\",\"exponent\":\"exponent to raise b to\"},\"return\":\"Numerator of the computed quantity (not reduced).Denominator of the computed quantity (not reduced).\"},\"getAccountLockedGoldRequirement(address)\":{\"params\":{\"account\":\"The account that may have to meet locked gold balance requirements.\"},\"return\":\"The current locked gold balance requirement for the supplied account.\"},\"getBlockNumberFromHeader(bytes)\":{\"params\":{\"header\":\"RLP encoded header\"},\"return\":\"Block number.\"},\"getCommissionUpdateDelay()\":{\"return\":\"The block delay for a ValidatorGroup's commission udpdate.\"},\"getEpochNumber()\":{\"return\":\"Current epoch number.\"},\"getEpochNumberOfBlock(uint256)\":{\"params\":{\"blockNumber\":\"Block number where epoch number is calculated.\"},\"return\":\"Epoch number.\"},\"getEpochSize()\":{\"return\":\"The current epoch size in blocks.\"},\"getGroupLockedGoldRequirements()\":{\"return\":\"The Locked Gold value.The Locked Gold duration.\"},\"getGroupNumMembers(address)\":{\"params\":{\"account\":\"The address of the validator group.\"},\"return\":\"The number of members in a validator group.\"},\"getGroupsNumMembers(address[])\":{\"params\":{\"accounts\":\"The addresses of the validator groups.\"},\"return\":\"The number of members in the provided validator groups.\"},\"getMaxGroupSize()\":{\"return\":\"The maximum number of members a group can add.\"},\"getMembershipHistory(address)\":{\"params\":{\"account\":\"The validator whose membership history to return.\"},\"return\":\"epochs The epochs of a validator.The membership groups of a validator.The last removed from group timestamp of a validator.The tail of a validator.\"},\"getMembershipInLastEpoch(address)\":{\"params\":{\"account\":\"The account whose group membership should be returned.\"},\"return\":\"The group that `account` was a member of at the end of the last epoch.\"},\"getMembershipInLastEpochFromSigner(address)\":{\"params\":{\"signer\":\"The signer of the account whose group membership should be returned.\"},\"return\":\"The group that `account` was a member of at the end of the last epoch.\"},\"getNumRegisteredValidators()\":{\"return\":\"The number of registered validators.\"},\"getParentSealBitmap(uint256)\":{\"params\":{\"blockNumber\":\"Block number to retrieve. Must be within 4 epochs of the current number.\"},\"return\":\"Bitmap parent seal with set bits at indices corresponding to signing validators.\"},\"getRegisteredValidatorGroups()\":{\"return\":\"The list of registered validator group addresses.\"},\"getRegisteredValidatorSigners()\":{\"return\":\"The list of signers for registered validator accounts.\"},\"getRegisteredValidators()\":{\"return\":\"The list of registered validator accounts.\"},\"getTopGroupValidators(address,uint256)\":{\"params\":{\"account\":\"The address of the validator group.\",\"n\":\"The number of members to return.\"},\"return\":\"The top n group members for a particular group.\"},\"getValidator(address)\":{\"params\":{\"account\":\"The account that registered the validator.\"},\"return\":\"The unpacked validator struct.\"},\"getValidatorBlsPublicKeyFromSigner(address)\":{\"params\":{\"signer\":\"The account that registered the validator or its authorized signing address.\"},\"return\":\"The validator BLS key.\"},\"getValidatorGroup(address)\":{\"params\":{\"account\":\"The account that registered the validator group.\"},\"return\":\"keys The Keys.commision The commision.nextCommision The next commision.nextCommisionBlock The next commision block.size The Size history.multiplier The multiplier.lastSlashed The last slashed.\"},\"getValidatorGroupSlashingMultiplier(address)\":{\"params\":{\"account\":\"The group to fetch slashing multiplier for.\"}},\"getValidatorLockedGoldRequirements()\":{\"return\":\"The Locked Gold value.The Locked Gold duration.\"},\"getValidatorScoreParameters()\":{\"return\":\"The exponent that governs how a validator's score is calculated.The adjustment speed that governs how a validator's score is calculated.\"},\"getVerifiedSealBitmapFromHeader(bytes)\":{\"params\":{\"header\":\"RLP encoded header\"},\"return\":\"Bitmap parent seal with set bits at indices correspoinding to signing validators.\"},\"getVersionNumber()\":{\"return\":\"Storage version of the contract.Major version of the contract.Minor version of the contract.Patch version of the contract.\"},\"groupMembershipInEpoch(address,uint256,uint256)\":{\"params\":{\"account\":\"The account whose group membership should be returned.\",\"epochNumber\":\"The epoch number we are querying this account's membership at.\",\"index\":\"The index into the validator's history struct for their history at `epochNumber`.\"},\"return\":\"The group that `account` was a member of during `epochNumber`.\"},\"halveSlashingMultiplier(address)\":{\"params\":{\"account\":\"The group being slashed.\"}},\"hashHeader(bytes)\":{\"params\":{\"header\":\"RLP encoded header\"},\"return\":\"Header hash.\"},\"initialize(address,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256)\":{\"details\":\"Should be called only once.\",\"params\":{\"_commissionUpdateDelay\":\"The number of blocks to delay a ValidatorGroup's commission update.\",\"_maxGroupSize\":\"The maximum group size.\",\"_membershipHistoryLength\":\"The max number of entries for validator membership history.\",\"groupRequirementDuration\":\"The Locked Gold requirement duration for groups.\",\"groupRequirementValue\":\"The Locked Gold requirement amount for groups.\",\"registryAddress\":\"The address of the registry core smart contract.\",\"validatorRequirementDuration\":\"The Locked Gold requirement duration for validators.\",\"validatorRequirementValue\":\"The Locked Gold requirement amount for validators.\",\"validatorScoreAdjustmentSpeed\":\"The speed at which validator scores are adjusted.\",\"validatorScoreExponent\":\"The exponent used in calculating validator scores.\"}},\"isOwner()\":{\"details\":\"Returns true if the caller is the current owner.\"},\"isValidator(address)\":{\"params\":{\"account\":\"The account.\"},\"return\":\"Whether a particular address is a registered validator.\"},\"isValidatorGroup(address)\":{\"params\":{\"account\":\"The account.\"},\"return\":\"Whether a particular address is a registered validator group.\"},\"meetsAccountLockedGoldRequirements(address)\":{\"params\":{\"account\":\"The address of the account.\"},\"return\":\"Whether or not an account meets its Locked Gold requirements.\"},\"minQuorumSize(uint256)\":{\"details\":\"Computed in celo-blockchain as int(math.Ceil(float64(2*valSet.Size()) / 3))\"},\"minQuorumSizeInCurrentSet()\":{\"return\":\"Byzantine quorum of validators.\"},\"numberValidatorsInCurrentSet()\":{\"return\":\"Size of the current elected validator set.\"},\"numberValidatorsInSet(uint256)\":{\"params\":{\"blockNumber\":\"Block number to retrieve the validator set from.\"},\"return\":\"Size of the validator set.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"registerValidator(bytes,bytes,bytes)\":{\"details\":\"Fails if the account is already a validator or validator group.Fails if the account does not have sufficient Locked Gold.\",\"params\":{\"blsPop\":\"The BLS public key proof-of-possession, which consists of a signature on the  account address. 48 bytes.\",\"blsPublicKey\":\"The BLS public key that the validator is using for consensus, should pass  proof of possession. 96 bytes.\",\"ecdsaPublicKey\":\"The ECDSA public key that the validator is using for consensus, should  match the validator signer. 64 bytes.\"},\"return\":\"True upon success.\"},\"registerValidatorGroup(uint256)\":{\"details\":\"Fails if the account is already a validator or validator group.Fails if the account does not have sufficient weight.\",\"params\":{\"commission\":\"Fixidity representation of the commission this group receives on epoch  payments made to its members.\"},\"return\":\"True upon success.\"},\"removeMember(address)\":{\"details\":\"Fails if `validator` is not a member of the account's group.\",\"params\":{\"validator\":\"The validator to remove from the group\"},\"return\":\"True upon success.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner.     * NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"reorderMember(address,address,address)\":{\"details\":\"Fails if `validator` is not a member of the account's validator group.\",\"params\":{\"greaterMember\":\"The member who will be ahead of `validator`, or 0 if `validator` will be  the first member.\",\"lesserMember\":\"The member who will be behind `validator`, or 0 if `validator` will be the  last member.\",\"validator\":\"The validator to reorder.\"},\"return\":\"True upon success.\"},\"setCommissionUpdateDelay(uint256)\":{\"params\":{\"delay\":\"Number of blocks to delay the update\"}},\"setDowntimeGracePeriod(uint256)\":{\"params\":{\"value\":\"New downtime grace period for calculating epoch scores.\"}},\"setGroupLockedGoldRequirements(uint256,uint256)\":{\"params\":{\"duration\":\"The time (in seconds) that these requirements persist for.\",\"value\":\"The per-member amount of Locked Gold required.\"},\"return\":\"True upon success.\"},\"setMaxGroupSize(uint256)\":{\"params\":{\"size\":\"The maximum group size.\"},\"return\":\"True upon success.\"},\"setMembershipHistoryLength(uint256)\":{\"params\":{\"length\":\"The number of validator group membership entries to store.\"},\"return\":\"True upon success.\"},\"setNextCommissionUpdate(uint256)\":{\"params\":{\"commission\":\"Fixidity representation of the commission this group receives on epoch  payments made to its members. Must be in the range [0, 1.0].\"}},\"setRegistry(address)\":{\"params\":{\"registryAddress\":\"The address of a registry contract for routing to other contracts.\"}},\"setSlashingMultiplierResetPeriod(uint256)\":{\"params\":{\"value\":\"New reset period for slashing multiplier.\"}},\"setValidatorLockedGoldRequirements(uint256,uint256)\":{\"params\":{\"duration\":\"The time (in seconds) that these requirements persist for.\",\"value\":\"The amount of Locked Gold required.\"},\"return\":\"True upon success.\"},\"setValidatorScoreParameters(uint256,uint256)\":{\"params\":{\"adjustmentSpeed\":\"The speed at which the score is adjusted.\",\"exponent\":\"The exponent used in calculating the score.\"},\"return\":\"True upon success.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"updateBlsPublicKey(bytes,bytes)\":{\"params\":{\"blsPop\":\"The BLS public key proof-of-possession, which consists of a signature on the  account address. 48 bytes.\",\"blsPublicKey\":\"The BLS public key that the validator is using for consensus, should pass  proof of possession. 48 bytes.\"},\"return\":\"True upon success.\"},\"updateEcdsaPublicKey(address,address,bytes)\":{\"params\":{\"account\":\"The address under which the validator is registered.\",\"ecdsaPublicKey\":\"The ECDSA public key corresponding to `signer`.\",\"signer\":\"The address which the validator is using to sign consensus messages.\"},\"return\":\"True upon success.\"},\"updatePublicKeys(address,address,bytes,bytes,bytes)\":{\"params\":{\"account\":\"The address under which the validator is registered.\",\"blsPop\":\"The BLS public key proof-of-possession, which consists of a signature on the  account address. 48 bytes.\",\"blsPublicKey\":\"The BLS public key that the validator is using for consensus, should pass  proof of possession. 96 bytes.\",\"ecdsaPublicKey\":\"The ECDSA public key corresponding to `signer`.\",\"signer\":\"The address which the validator is using to sign consensus messages.\"},\"return\":\"True upon success.\"},\"validatorSignerAddressFromCurrentSet(uint256)\":{\"params\":{\"index\":\"Index of requested validator in the validator set.\"},\"return\":\"Address of validator at the requested index.\"},\"validatorSignerAddressFromSet(uint256,uint256)\":{\"params\":{\"blockNumber\":\"Block number to retrieve the validator set from.\",\"index\":\"Index of requested validator in the validator set.\"},\"return\":\"Address of validator at the requested index.\"}},\"title\":\"A wrapper around Validators that exposes onlyVm functions for testing.\"},\"userdoc\":{\"methods\":{\"addFirstMember(address,address,address)\":{\"notice\":\"Adds the first member to a group's list of members and marks it eligible for election.\"},\"addMember(address)\":{\"notice\":\"Adds a member to the end of a validator group's list of members.\"},\"affiliate(address)\":{\"notice\":\"Affiliates a validator with a group, allowing it to be added as a member.\"},\"calculateEpochScore(uint256)\":{\"notice\":\"Calculates the validator score for an epoch from the uptime value for the epoch.\"},\"calculateGroupEpochScore(uint256[])\":{\"notice\":\"Calculates the aggregate score of a group for an epoch from individual uptimes.\"},\"checkProofOfPossession(address,bytes,bytes)\":{\"notice\":\"Checks a BLS proof of possession.\"},\"deaffiliate()\":{\"notice\":\"De-affiliates a validator, removing it from the group for which it is a member.\"},\"deregisterValidator(uint256)\":{\"notice\":\"De-registers a validator.\"},\"deregisterValidatorGroup(uint256)\":{\"notice\":\"De-registers a validator group.\"},\"forceDeaffiliateIfValidator(address)\":{\"notice\":\"Removes a validator from the group for which it is a member.\"},\"fractionMulExp(uint256,uint256,uint256,uint256,uint256,uint256)\":{\"notice\":\"calculate a * b^x for fractions a, b to `decimals` precision\"},\"getAccountLockedGoldRequirement(address)\":{\"notice\":\"Returns the current locked gold balance requirement for the supplied account.\"},\"getBlockNumberFromHeader(bytes)\":{\"notice\":\"Parses block number out of header.\"},\"getCommissionUpdateDelay()\":{\"notice\":\"Returns the block delay for a ValidatorGroup's commission udpdate.\"},\"getEpochNumber()\":{\"notice\":\"Returns the epoch number at a block.\"},\"getEpochNumberOfBlock(uint256)\":{\"notice\":\"Returns the epoch number at a block.\"},\"getEpochSize()\":{\"notice\":\"Returns the current epoch size in blocks.\"},\"getGroupLockedGoldRequirements()\":{\"notice\":\"Returns the Locked Gold requirements for validator groups.\"},\"getGroupNumMembers(address)\":{\"notice\":\"Returns the number of members in a validator group.\"},\"getGroupsNumMembers(address[])\":{\"notice\":\"Returns the number of members in the provided validator groups.\"},\"getMaxGroupSize()\":{\"notice\":\"Returns the maximum number of members a group can add.\"},\"getMembershipHistory(address)\":{\"notice\":\"Returns the group membership history of a validator.\"},\"getMembershipInLastEpoch(address)\":{\"notice\":\"Returns the group that `account` was a member of at the end of the last epoch.\"},\"getMembershipInLastEpochFromSigner(address)\":{\"notice\":\"Returns the group that `account` was a member of at the end of the last epoch.\"},\"getNumRegisteredValidators()\":{\"notice\":\"Returns the number of registered validators.\"},\"getParentSealBitmap(uint256)\":{\"notice\":\"Gets the parent seal bitmap from the header at the given block number.\"},\"getRegisteredValidatorGroups()\":{\"notice\":\"Returns the list of registered validator group accounts.\"},\"getRegisteredValidatorSigners()\":{\"notice\":\"Returns the list of signers for the registered validator accounts.\"},\"getRegisteredValidators()\":{\"notice\":\"Returns the list of registered validator accounts.\"},\"getTopGroupValidators(address,uint256)\":{\"notice\":\"Returns the top n group members for a particular group.\"},\"getValidator(address)\":{\"notice\":\"Returns validator information.\"},\"getValidatorBlsPublicKeyFromSigner(address)\":{\"notice\":\"Returns the validator BLS key.\"},\"getValidatorGroup(address)\":{\"notice\":\"Returns validator group information.\"},\"getValidatorGroupSlashingMultiplier(address)\":{\"notice\":\"Getter for a group's slashing multiplier.\"},\"getValidatorLockedGoldRequirements()\":{\"notice\":\"Returns the Locked Gold requirements for validators.\"},\"getValidatorScoreParameters()\":{\"notice\":\"Returns the parameters that govern how a validator's score is calculated.\"},\"getVerifiedSealBitmapFromHeader(bytes)\":{\"notice\":\"Verifies the BLS signature on the header and returns the seal bitmap. The validator set used for verification is retrieved based on the parent hash field of the header.  If the parent hash is not in the blockchain, verification fails.\"},\"getVersionNumber()\":{\"notice\":\"Returns the storage, major, minor, and patch version of the contract.\"},\"groupMembershipInEpoch(address,uint256,uint256)\":{\"notice\":\"Returns the group that `account` was a member of during `epochNumber`.\"},\"halveSlashingMultiplier(address)\":{\"notice\":\"Halves the group's slashing multiplier.\"},\"hashHeader(bytes)\":{\"notice\":\"Computes hash of header.\"},\"initialize(address,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256)\":{\"notice\":\"Used in place of the constructor to allow the contract to be upgradable via proxy.\"},\"isValidator(address)\":{\"notice\":\"Returns whether a particular account has a registered validator.\"},\"isValidatorGroup(address)\":{\"notice\":\"Returns whether a particular account has a registered validator group.\"},\"meetsAccountLockedGoldRequirements(address)\":{\"notice\":\"Returns whether or not an account meets its Locked Gold requirements.\"},\"minQuorumSize(uint256)\":{\"notice\":\"Returns the minimum number of required signers for a given block number.\"},\"minQuorumSizeInCurrentSet()\":{\"notice\":\"Computes byzantine quorum from current validator set size\"},\"numberValidatorsInCurrentSet()\":{\"notice\":\"Gets the size of the current elected validator set.\"},\"numberValidatorsInSet(uint256)\":{\"notice\":\"Gets the size of the validator set that must sign the given block number.\"},\"registerValidator(bytes,bytes,bytes)\":{\"notice\":\"Registers a validator unaffiliated with any validator group.\"},\"registerValidatorGroup(uint256)\":{\"notice\":\"Registers a validator group with no member validators.\"},\"removeMember(address)\":{\"notice\":\"Removes a member from a validator group.\"},\"reorderMember(address,address,address)\":{\"notice\":\"Reorders a member within a validator group.\"},\"resetSlashingMultiplier()\":{\"notice\":\"Resets a group's slashing multiplier if it has been >= the reset period since        the last time the group was slashed.\"},\"setCommissionUpdateDelay(uint256)\":{\"notice\":\"Updates the block delay for a ValidatorGroup's commission udpdate\"},\"setDowntimeGracePeriod(uint256)\":{\"notice\":\"Sets the downtimeGracePeriod property if called by owner.\"},\"setGroupLockedGoldRequirements(uint256,uint256)\":{\"notice\":\"Updates the Locked Gold requirements for Validator Groups.\"},\"setMaxGroupSize(uint256)\":{\"notice\":\"Updates the maximum number of members a group can have.\"},\"setMembershipHistoryLength(uint256)\":{\"notice\":\"Updates the number of validator group membership entries to store.\"},\"setNextCommissionUpdate(uint256)\":{\"notice\":\"Queues an update to a validator group's commission. If there was a previously scheduled update, that is overwritten.\"},\"setRegistry(address)\":{\"notice\":\"Updates the address pointing to a Registry contract.\"},\"setSlashingMultiplierResetPeriod(uint256)\":{\"notice\":\"Sets the slashingMultiplierRestPeriod property if called by owner.\"},\"setValidatorLockedGoldRequirements(uint256,uint256)\":{\"notice\":\"Updates the Locked Gold requirements for Validators.\"},\"setValidatorScoreParameters(uint256,uint256)\":{\"notice\":\"Updates the validator score parameters.\"},\"updateBlsPublicKey(bytes,bytes)\":{\"notice\":\"Updates a validator's BLS key.\"},\"updateCommission()\":{\"notice\":\"Updates a validator group's commission based on the previously queued update\"},\"updateEcdsaPublicKey(address,address,bytes)\":{\"notice\":\"Updates a validator's ECDSA key.\"},\"updatePublicKeys(address,address,bytes,bytes,bytes)\":{\"notice\":\"Updates a validator's ECDSA and BLS keys.\"},\"validatorSignerAddressFromCurrentSet(uint256)\":{\"notice\":\"Gets a validator address from the current validator set.\"},\"validatorSignerAddressFromSet(uint256,uint256)\":{\"notice\":\"Gets a validator address from the validator set at the given block number.\"}}}},\"settings\":{\"compilationTarget\":{\"project:/contracts/governance/test/ValidatorsTest.sol\":\"ValidatorsTest\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"openzeppelin-solidity/contracts/GSN/Context.sol\":{\"content\":\"pragma solidity ^0.5.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\ncontract Context {\\n    // Empty internal constructor, to prevent people from mistakenly deploying\\n    // an instance of this contract, which should be used via inheritance.\\n    constructor () internal { }\\n    // solhint-disable-previous-line no-empty-blocks\\n\\n    function _msgSender() internal view returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x90a3995645af7562d84b9d69363ffa5ae7217714ab61e951bf7bc450f40e4061\"},\"openzeppelin-solidity/contracts/math/Math.sol\":{\"content\":\"pragma solidity ^0.5.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow, so we distribute\\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\\n    }\\n}\\n\",\"keccak256\":\"0x4b5aa451e4e8801478708f94b118a7821c0500d676255eaf89fc78c14856ce4e\"},\"openzeppelin-solidity/contracts/math/SafeMath.sol\":{\"content\":\"pragma solidity ^0.5.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        // Solidity only automatically asserts when dividing by 0\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0x640b6dee7a4b830bdfd52b5031a07fc2b12209f5b2e29e5d364a7d37f69d8076\"},\"openzeppelin-solidity/contracts/ownership/Ownable.sol\":{\"content\":\"pragma solidity ^0.5.0;\\n\\nimport \\\"../GSN/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\ncontract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(isOwner(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the caller is the current owner.\\n     */\\n    function isOwner() public view returns (bool) {\\n        return _msgSender() == _owner;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public onlyOwner {\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     */\\n    function _transferOwnership(address newOwner) internal {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x6fb9d7889769d7cc161225f9ef7a90e468ba9788b253816f8d8b6894d3472c24\"},\"openzeppelin-solidity/contracts/token/ERC20/IERC20.sol\":{\"content\":\"pragma solidity ^0.5.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\\n * the optional functions; to access them see {ERC20Detailed}.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xe5bb0f57cff3e299f360052ba50f1ea0fff046df2be070b6943e0e3c3fdad8a9\"},\"project:/contracts/common/CalledByVm.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.5.13 <0.9.0;\\n\\ncontract CalledByVm {\\n  modifier onlyVm() {\\n    require(msg.sender == address(0), \\\"Only VM can call\\\");\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0xb94d2b580a505f5d4ef51bb14b12b6fa19d69e4fa94c96f2f105091673a0a0a4\"},\"project:/contracts/common/FixidityLib.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.5.13 <0.9.0;\\n\\n/**\\n * @title FixidityLib\\n * @author Gadi Guy, Alberto Cuesta Canada\\n * @notice This library provides fixed point arithmetic with protection against\\n * overflow.\\n * All operations are done with uint256 and the operands must have been created\\n * with any of the newFrom* functions, which shift the comma digits() to the\\n * right and check for limits, or with wrap() which expects a number already\\n * in the internal representation of a fraction.\\n * When using this library be sure to use maxNewFixed() as the upper limit for\\n * creation of fixed point numbers.\\n * @dev All contained functions are pure and thus marked internal to be inlined\\n * on consuming contracts at compile time for gas efficiency.\\n */\\nlibrary FixidityLib {\\n  struct Fraction {\\n    uint256 value;\\n  }\\n\\n  /**\\n   * @notice Number of positions that the comma is shifted to the right.\\n   */\\n  function digits() internal pure returns (uint8) {\\n    return 24;\\n  }\\n\\n  uint256 private constant FIXED1_UINT = 1000000000000000000000000;\\n\\n  /**\\n   * @notice This is 1 in the fixed point units used in this library.\\n   * @dev Test fixed1() equals 10^digits()\\n   * Hardcoded to 24 digits.\\n   */\\n  function fixed1() internal pure returns (Fraction memory) {\\n    return Fraction(FIXED1_UINT);\\n  }\\n\\n  /**\\n   * @notice Wrap a uint256 that represents a 24-decimal fraction in a Fraction\\n   * struct.\\n   * @param x Number that already represents a 24-decimal fraction.\\n   * @return A Fraction struct with contents x.\\n   */\\n  function wrap(uint256 x) internal pure returns (Fraction memory) {\\n    return Fraction(x);\\n  }\\n\\n  /**\\n   * @notice Unwraps the uint256 inside of a Fraction struct.\\n   */\\n  function unwrap(Fraction memory x) internal pure returns (uint256) {\\n    return x.value;\\n  }\\n\\n  /**\\n   * @notice The amount of decimals lost on each multiplication operand.\\n   * @dev Test mulPrecision() equals sqrt(fixed1)\\n   */\\n  function mulPrecision() internal pure returns (uint256) {\\n    return 1000000000000;\\n  }\\n\\n  /**\\n   * @notice Maximum value that can be converted to fixed point. Optimize for deployment.\\n   * @dev\\n   * Test maxNewFixed() equals maxUint256() / fixed1()\\n   */\\n  function maxNewFixed() internal pure returns (uint256) {\\n    return 115792089237316195423570985008687907853269984665640564;\\n  }\\n\\n  /**\\n   * @notice Converts a uint256 to fixed point Fraction\\n   * @dev Test newFixed(0) returns 0\\n   * Test newFixed(1) returns fixed1()\\n   * Test newFixed(maxNewFixed()) returns maxNewFixed() * fixed1()\\n   * Test newFixed(maxNewFixed()+1) fails\\n   */\\n  function newFixed(uint256 x) internal pure returns (Fraction memory) {\\n    require(x <= maxNewFixed(), \\\"can't create fixidity number larger than maxNewFixed()\\\");\\n    return Fraction(x * FIXED1_UINT);\\n  }\\n\\n  /**\\n   * @notice Converts a uint256 in the fixed point representation of this\\n   * library to a non decimal. All decimal digits will be truncated.\\n   */\\n  function fromFixed(Fraction memory x) internal pure returns (uint256) {\\n    return x.value / FIXED1_UINT;\\n  }\\n\\n  /**\\n   * @notice Converts two uint256 representing a fraction to fixed point units,\\n   * equivalent to multiplying dividend and divisor by 10^digits().\\n   * @param numerator numerator must be <= maxNewFixed()\\n   * @param denominator denominator must be <= maxNewFixed() and denominator can't be 0\\n   * @dev\\n   * Test newFixedFraction(1,0) fails\\n   * Test newFixedFraction(0,1) returns 0\\n   * Test newFixedFraction(1,1) returns fixed1()\\n   * Test newFixedFraction(1,fixed1()) returns 1\\n   */\\n  function newFixedFraction(uint256 numerator, uint256 denominator)\\n    internal\\n    pure\\n    returns (Fraction memory)\\n  {\\n    Fraction memory convertedNumerator = newFixed(numerator);\\n    Fraction memory convertedDenominator = newFixed(denominator);\\n    return divide(convertedNumerator, convertedDenominator);\\n  }\\n\\n  /**\\n   * @notice Returns the integer part of a fixed point number.\\n   * @dev\\n   * Test integer(0) returns 0\\n   * Test integer(fixed1()) returns fixed1()\\n   * Test integer(newFixed(maxNewFixed())) returns maxNewFixed()*fixed1()\\n   */\\n  function integer(Fraction memory x) internal pure returns (Fraction memory) {\\n    return Fraction((x.value / FIXED1_UINT) * FIXED1_UINT); // Can't overflow\\n  }\\n\\n  /**\\n   * @notice Returns the fractional part of a fixed point number.\\n   * In the case of a negative number the fractional is also negative.\\n   * @dev\\n   * Test fractional(0) returns 0\\n   * Test fractional(fixed1()) returns 0\\n   * Test fractional(fixed1()-1) returns 10^24-1\\n   */\\n  function fractional(Fraction memory x) internal pure returns (Fraction memory) {\\n    return Fraction(x.value - (x.value / FIXED1_UINT) * FIXED1_UINT); // Can't overflow\\n  }\\n\\n  /**\\n   * @notice x+y.\\n   * @dev The maximum value that can be safely used as an addition operator is defined as\\n   * maxFixedAdd = maxUint256()-1 / 2, or\\n   * 57896044618658097711785492504343953926634992332820282019728792003956564819967.\\n   * Test add(maxFixedAdd,maxFixedAdd) equals maxFixedAdd + maxFixedAdd\\n   * Test add(maxFixedAdd+1,maxFixedAdd+1) throws\\n   */\\n  function add(Fraction memory x, Fraction memory y) internal pure returns (Fraction memory) {\\n    uint256 z = x.value + y.value;\\n    require(z >= x.value, \\\"add overflow detected\\\");\\n    return Fraction(z);\\n  }\\n\\n  /**\\n   * @notice x-y.\\n   * @dev\\n   * Test subtract(6, 10) fails\\n   */\\n  function subtract(Fraction memory x, Fraction memory y) internal pure returns (Fraction memory) {\\n    require(x.value >= y.value, \\\"substraction underflow detected\\\");\\n    return Fraction(x.value - y.value);\\n  }\\n\\n  /**\\n   * @notice x*y. If any of the operators is higher than the max multiplier value it\\n   * might overflow.\\n   * @dev The maximum value that can be safely used as a multiplication operator\\n   * (maxFixedMul) is calculated as sqrt(maxUint256()*fixed1()),\\n   * or 340282366920938463463374607431768211455999999999999\\n   * Test multiply(0,0) returns 0\\n   * Test multiply(maxFixedMul,0) returns 0\\n   * Test multiply(0,maxFixedMul) returns 0\\n   * Test multiply(fixed1()/mulPrecision(),fixed1()*mulPrecision()) returns fixed1()\\n   * Test multiply(maxFixedMul,maxFixedMul) is around maxUint256()\\n   * Test multiply(maxFixedMul+1,maxFixedMul+1) fails\\n   */\\n  function multiply(Fraction memory x, Fraction memory y) internal pure returns (Fraction memory) {\\n    if (x.value == 0 || y.value == 0) return Fraction(0);\\n    if (y.value == FIXED1_UINT) return x;\\n    if (x.value == FIXED1_UINT) return y;\\n\\n    // Separate into integer and fractional parts\\n    // x = x1 + x2, y = y1 + y2\\n    uint256 x1 = integer(x).value / FIXED1_UINT;\\n    uint256 x2 = fractional(x).value;\\n    uint256 y1 = integer(y).value / FIXED1_UINT;\\n    uint256 y2 = fractional(y).value;\\n\\n    // (x1 + x2) * (y1 + y2) = (x1 * y1) + (x1 * y2) + (x2 * y1) + (x2 * y2)\\n    uint256 x1y1 = x1 * y1;\\n    if (x1 != 0) require(x1y1 / x1 == y1, \\\"overflow x1y1 detected\\\");\\n\\n    // x1y1 needs to be multiplied back by fixed1\\n    // solium-disable-next-line mixedcase\\n    uint256 fixed_x1y1 = x1y1 * FIXED1_UINT;\\n    if (x1y1 != 0) require(fixed_x1y1 / x1y1 == FIXED1_UINT, \\\"overflow x1y1 * fixed1 detected\\\");\\n    x1y1 = fixed_x1y1;\\n\\n    uint256 x2y1 = x2 * y1;\\n    if (x2 != 0) require(x2y1 / x2 == y1, \\\"overflow x2y1 detected\\\");\\n\\n    uint256 x1y2 = x1 * y2;\\n    if (x1 != 0) require(x1y2 / x1 == y2, \\\"overflow x1y2 detected\\\");\\n\\n    x2 = x2 / mulPrecision();\\n    y2 = y2 / mulPrecision();\\n    uint256 x2y2 = x2 * y2;\\n    if (x2 != 0) require(x2y2 / x2 == y2, \\\"overflow x2y2 detected\\\");\\n\\n    // result = fixed1() * x1 * y1 + x1 * y2 + x2 * y1 + x2 * y2 / fixed1();\\n    Fraction memory result = Fraction(x1y1);\\n    result = add(result, Fraction(x2y1)); // Add checks for overflow\\n    result = add(result, Fraction(x1y2)); // Add checks for overflow\\n    result = add(result, Fraction(x2y2)); // Add checks for overflow\\n    return result;\\n  }\\n\\n  /**\\n   * @notice 1/x\\n   * @dev\\n   * Test reciprocal(0) fails\\n   * Test reciprocal(fixed1()) returns fixed1()\\n   * Test reciprocal(fixed1()*fixed1()) returns 1 // Testing how the fractional is truncated\\n   * Test reciprocal(1+fixed1()*fixed1()) returns 0 // Testing how the fractional is truncated\\n   * Test reciprocal(newFixedFraction(1, 1e24)) returns newFixed(1e24)\\n   */\\n  function reciprocal(Fraction memory x) internal pure returns (Fraction memory) {\\n    require(x.value != 0, \\\"can't call reciprocal(0)\\\");\\n    return Fraction((FIXED1_UINT * FIXED1_UINT) / x.value); // Can't overflow\\n  }\\n\\n  /**\\n   * @notice x/y. If the dividend is higher than the max dividend value, it\\n   * might overflow. You can use multiply(x,reciprocal(y)) instead.\\n   * @dev The maximum value that can be safely used as a dividend (maxNewFixed) is defined as\\n   * divide(maxNewFixed,newFixedFraction(1,fixed1())) is around maxUint256().\\n   * This yields the value 115792089237316195423570985008687907853269984665640564.\\n   * Test maxNewFixed equals maxUint256()/fixed1()\\n   * Test divide(maxNewFixed,1) equals maxNewFixed*(fixed1)\\n   * Test divide(maxNewFixed+1,multiply(mulPrecision(),mulPrecision())) throws\\n   * Test divide(fixed1(),0) fails\\n   * Test divide(maxNewFixed,1) = maxNewFixed*(10^digits())\\n   * Test divide(maxNewFixed+1,1) throws\\n   */\\n  function divide(Fraction memory x, Fraction memory y) internal pure returns (Fraction memory) {\\n    require(y.value != 0, \\\"can't divide by 0\\\");\\n    uint256 X = x.value * FIXED1_UINT;\\n    require(X / FIXED1_UINT == x.value, \\\"overflow at divide\\\");\\n    return Fraction(X / y.value);\\n  }\\n\\n  /**\\n   * @notice x > y\\n   */\\n  function gt(Fraction memory x, Fraction memory y) internal pure returns (bool) {\\n    return x.value > y.value;\\n  }\\n\\n  /**\\n   * @notice x >= y\\n   */\\n  function gte(Fraction memory x, Fraction memory y) internal pure returns (bool) {\\n    return x.value >= y.value;\\n  }\\n\\n  /**\\n   * @notice x < y\\n   */\\n  function lt(Fraction memory x, Fraction memory y) internal pure returns (bool) {\\n    return x.value < y.value;\\n  }\\n\\n  /**\\n   * @notice x <= y\\n   */\\n  function lte(Fraction memory x, Fraction memory y) internal pure returns (bool) {\\n    return x.value <= y.value;\\n  }\\n\\n  /**\\n   * @notice x == y\\n   */\\n  function equals(Fraction memory x, Fraction memory y) internal pure returns (bool) {\\n    return x.value == y.value;\\n  }\\n\\n  /**\\n   * @notice x <= 1\\n   */\\n  function isProperFraction(Fraction memory x) internal pure returns (bool) {\\n    return lte(x, fixed1());\\n  }\\n}\\n\",\"keccak256\":\"0xf1cebbfcf298ef05f24e940ab4351049e2da6e5ee77b272257d2c86b4cd1cc1c\"},\"project:/contracts/common/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.5.13 <0.9.0;\\n\\ncontract Initializable {\\n  bool public initialized;\\n\\n  constructor(bool testingDeployment) public {\\n    if (!testingDeployment) {\\n      initialized = true;\\n    }\\n  }\\n\\n  modifier initializer() {\\n    require(!initialized, \\\"contract already initialized\\\");\\n    initialized = true;\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0x27277d9f2c894659833be45eeca368a6d5ff060d944f0ad335e31003bf6477ed\"},\"project:/contracts/common/UsingPrecompiles.sol\":{\"content\":\"pragma solidity ^0.5.13;\\n\\nimport \\\"openzeppelin-solidity/contracts/math/SafeMath.sol\\\";\\nimport \\\"../common/interfaces/ICeloVersionedContract.sol\\\";\\n\\ncontract UsingPrecompiles {\\n  using SafeMath for uint256;\\n\\n  address constant TRANSFER = address(0xff - 2);\\n  address constant FRACTION_MUL = address(0xff - 3);\\n  address constant PROOF_OF_POSSESSION = address(0xff - 4);\\n  address constant GET_VALIDATOR = address(0xff - 5);\\n  address constant NUMBER_VALIDATORS = address(0xff - 6);\\n  address constant EPOCH_SIZE = address(0xff - 7);\\n  address constant BLOCK_NUMBER_FROM_HEADER = address(0xff - 8);\\n  address constant HASH_HEADER = address(0xff - 9);\\n  address constant GET_PARENT_SEAL_BITMAP = address(0xff - 10);\\n  address constant GET_VERIFIED_SEAL_BITMAP = address(0xff - 11);\\n\\n  /**\\n   * @notice calculate a * b^x for fractions a, b to `decimals` precision\\n   * @param aNumerator Numerator of first fraction\\n   * @param aDenominator Denominator of first fraction\\n   * @param bNumerator Numerator of exponentiated fraction\\n   * @param bDenominator Denominator of exponentiated fraction\\n   * @param exponent exponent to raise b to\\n   * @param _decimals precision\\n   * @return Numerator of the computed quantity (not reduced).\\n   * @return Denominator of the computed quantity (not reduced).\\n   */\\n  function fractionMulExp(\\n    uint256 aNumerator,\\n    uint256 aDenominator,\\n    uint256 bNumerator,\\n    uint256 bDenominator,\\n    uint256 exponent,\\n    uint256 _decimals\\n  ) public view returns (uint256, uint256) {\\n    require(aDenominator != 0 && bDenominator != 0, \\\"a denominator is zero\\\");\\n    uint256 returnNumerator;\\n    uint256 returnDenominator;\\n    bool success;\\n    bytes memory out;\\n    (success, out) = FRACTION_MUL.staticcall(\\n      abi.encodePacked(aNumerator, aDenominator, bNumerator, bDenominator, exponent, _decimals)\\n    );\\n    require(success, \\\"error calling fractionMulExp precompile\\\");\\n    returnNumerator = getUint256FromBytes(out, 0);\\n    returnDenominator = getUint256FromBytes(out, 32);\\n    return (returnNumerator, returnDenominator);\\n  }\\n\\n  /**\\n   * @notice Returns the current epoch size in blocks.\\n   * @return The current epoch size in blocks.\\n   */\\n  function getEpochSize() public view returns (uint256) {\\n    bytes memory out;\\n    bool success;\\n    (success, out) = EPOCH_SIZE.staticcall(abi.encodePacked());\\n    require(success, \\\"error calling getEpochSize precompile\\\");\\n    return getUint256FromBytes(out, 0);\\n  }\\n\\n  /**\\n   * @notice Returns the epoch number at a block.\\n   * @param blockNumber Block number where epoch number is calculated.\\n   * @return Epoch number.\\n   */\\n  function getEpochNumberOfBlock(uint256 blockNumber) public view returns (uint256) {\\n    return epochNumberOfBlock(blockNumber, getEpochSize());\\n  }\\n\\n  /**\\n   * @notice Returns the epoch number at a block.\\n   * @return Current epoch number.\\n   */\\n  function getEpochNumber() public view returns (uint256) {\\n    return getEpochNumberOfBlock(block.number);\\n  }\\n\\n  /**\\n   * @notice Returns the epoch number at a block.\\n   * @param blockNumber Block number where epoch number is calculated.\\n   * @param epochSize The epoch size in blocks.\\n   * @return Epoch number.\\n   */\\n  function epochNumberOfBlock(uint256 blockNumber, uint256 epochSize)\\n    internal\\n    pure\\n    returns (uint256)\\n  {\\n    // Follows GetEpochNumber from celo-blockchain/blob/master/consensus/istanbul/utils.go\\n    uint256 epochNumber = blockNumber / epochSize;\\n    if (blockNumber % epochSize == 0) {\\n      return epochNumber;\\n    } else {\\n      return epochNumber.add(1);\\n    }\\n  }\\n\\n  /**\\n   * @notice Gets a validator address from the current validator set.\\n   * @param index Index of requested validator in the validator set.\\n   * @return Address of validator at the requested index.\\n   */\\n  // TODO: (soloseng) add to precompiles\\n  function validatorSignerAddressFromCurrentSet(uint256 index) public view returns (address) {\\n    bytes memory out;\\n    bool success;\\n    (success, out) = GET_VALIDATOR.staticcall(abi.encodePacked(index, uint256(block.number)));\\n    require(success, \\\"error calling validatorSignerAddressFromCurrentSet precompile\\\");\\n    return address(getUint256FromBytes(out, 0));\\n  }\\n\\n  /**\\n   * @notice Gets a validator address from the validator set at the given block number.\\n   * @param index Index of requested validator in the validator set.\\n   * @param blockNumber Block number to retrieve the validator set from.\\n   * @return Address of validator at the requested index.\\n   */\\n  function validatorSignerAddressFromSet(uint256 index, uint256 blockNumber)\\n    public\\n    view\\n    returns (address)\\n  {\\n    bytes memory out;\\n    bool success;\\n    (success, out) = GET_VALIDATOR.staticcall(abi.encodePacked(index, blockNumber));\\n    require(success, \\\"error calling validatorSignerAddressFromSet precompile\\\");\\n    return address(getUint256FromBytes(out, 0));\\n  }\\n\\n  /**\\n   * @notice Gets the size of the current elected validator set.\\n   * @return Size of the current elected validator set.\\n   */\\n  // TODO:(soloseng) add to precompiles.\\n  function numberValidatorsInCurrentSet() public view returns (uint256) {\\n    bytes memory out;\\n    bool success;\\n    (success, out) = NUMBER_VALIDATORS.staticcall(abi.encodePacked(uint256(block.number)));\\n    require(success, \\\"error calling numberValidatorsInCurrentSet precompile\\\");\\n    return getUint256FromBytes(out, 0);\\n  }\\n\\n  /**\\n   * @notice Gets the size of the validator set that must sign the given block number.\\n   * @param blockNumber Block number to retrieve the validator set from.\\n   * @return Size of the validator set.\\n   */\\n  function numberValidatorsInSet(uint256 blockNumber) public view returns (uint256) {\\n    bytes memory out;\\n    bool success;\\n    (success, out) = NUMBER_VALIDATORS.staticcall(abi.encodePacked(blockNumber));\\n    require(success, \\\"error calling numberValidatorsInSet precompile\\\");\\n    return getUint256FromBytes(out, 0);\\n  }\\n\\n  /**\\n   * @notice Checks a BLS proof of possession.\\n   * @param sender The address signed by the BLS key to generate the proof of possession.\\n   * @param blsKey The BLS public key that the validator is using for consensus, should pass proof\\n   *   of possession. 48 bytes.\\n   * @param blsPop The BLS public key proof-of-possession, which consists of a signature on the\\n   *   account address. 96 bytes.\\n   * @return True upon success.\\n   */\\n  function checkProofOfPossession(address sender, bytes memory blsKey, bytes memory blsPop)\\n    public\\n    view\\n    returns (bool)\\n  {\\n    bool success;\\n    (success, ) = PROOF_OF_POSSESSION.staticcall(abi.encodePacked(sender, blsKey, blsPop));\\n    return success;\\n  }\\n\\n  /**\\n   * @notice Parses block number out of header.\\n   * @param header RLP encoded header\\n   * @return Block number.\\n   */\\n  function getBlockNumberFromHeader(bytes memory header) public view returns (uint256) {\\n    bytes memory out;\\n    bool success;\\n    (success, out) = BLOCK_NUMBER_FROM_HEADER.staticcall(abi.encodePacked(header));\\n    require(success, \\\"error calling getBlockNumberFromHeader precompile\\\");\\n    return getUint256FromBytes(out, 0);\\n  }\\n\\n  /**\\n   * @notice Computes hash of header.\\n   * @param header RLP encoded header\\n   * @return Header hash.\\n   */\\n  function hashHeader(bytes memory header) public view returns (bytes32) {\\n    bytes memory out;\\n    bool success;\\n    (success, out) = HASH_HEADER.staticcall(abi.encodePacked(header));\\n    require(success, \\\"error calling hashHeader precompile\\\");\\n    return getBytes32FromBytes(out, 0);\\n  }\\n\\n  /**\\n   * @notice Gets the parent seal bitmap from the header at the given block number.\\n   * @param blockNumber Block number to retrieve. Must be within 4 epochs of the current number.\\n   * @return Bitmap parent seal with set bits at indices corresponding to signing validators.\\n   */\\n  function getParentSealBitmap(uint256 blockNumber) public view returns (bytes32) {\\n    bytes memory out;\\n    bool success;\\n    (success, out) = GET_PARENT_SEAL_BITMAP.staticcall(abi.encodePacked(blockNumber));\\n    require(success, \\\"error calling getParentSealBitmap precompile\\\");\\n    return getBytes32FromBytes(out, 0);\\n  }\\n\\n  /**\\n   * @notice Verifies the BLS signature on the header and returns the seal bitmap.\\n   * The validator set used for verification is retrieved based on the parent hash field of the\\n   * header.  If the parent hash is not in the blockchain, verification fails.\\n   * @param header RLP encoded header\\n   * @return Bitmap parent seal with set bits at indices correspoinding to signing validators.\\n   */\\n  function getVerifiedSealBitmapFromHeader(bytes memory header) public view returns (bytes32) {\\n    bytes memory out;\\n    bool success;\\n    (success, out) = GET_VERIFIED_SEAL_BITMAP.staticcall(abi.encodePacked(header));\\n    require(success, \\\"error calling getVerifiedSealBitmapFromHeader precompile\\\");\\n    return getBytes32FromBytes(out, 0);\\n  }\\n\\n  /**\\n   * @notice Converts bytes to uint256.\\n   * @param bs byte[] data\\n   * @param start offset into byte data to convert\\n   * @return uint256 data\\n   */\\n  function getUint256FromBytes(bytes memory bs, uint256 start) internal pure returns (uint256) {\\n    return uint256(getBytes32FromBytes(bs, start));\\n  }\\n\\n  /**\\n   * @notice Converts bytes to bytes32.\\n   * @param bs byte[] data\\n   * @param start offset into byte data to convert\\n   * @return bytes32 data\\n   */\\n  function getBytes32FromBytes(bytes memory bs, uint256 start) internal pure returns (bytes32) {\\n    require(bs.length >= start.add(32), \\\"slicing out of range\\\");\\n    bytes32 x;\\n    assembly {\\n      x := mload(add(bs, add(start, 32)))\\n    }\\n    return x;\\n  }\\n\\n  /**\\n   * @notice Returns the minimum number of required signers for a given block number.\\n   * @dev Computed in celo-blockchain as int(math.Ceil(float64(2*valSet.Size()) / 3))\\n   */\\n  function minQuorumSize(uint256 blockNumber) public view returns (uint256) {\\n    return numberValidatorsInSet(blockNumber).mul(2).add(2).div(3);\\n  }\\n\\n  /**\\n   * @notice Computes byzantine quorum from current validator set size\\n   * @return Byzantine quorum of validators.\\n   */\\n  function minQuorumSizeInCurrentSet() public view returns (uint256) {\\n    return minQuorumSize(block.number);\\n  }\\n}\\n\",\"keccak256\":\"0xd46e05170295a0aed352f8fab6798fb37c72e487734b2c0762c8212ed88aa4c2\"},\"project:/contracts/common/UsingRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity ^0.5.13;\\n\\nimport \\\"openzeppelin-solidity/contracts/ownership/Ownable.sol\\\";\\nimport \\\"openzeppelin-solidity/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport \\\"./interfaces/IAccounts.sol\\\";\\nimport \\\"./interfaces/IFeeCurrencyWhitelist.sol\\\";\\nimport \\\"./interfaces/IFreezer.sol\\\";\\nimport \\\"./interfaces/IRegistry.sol\\\";\\n\\nimport \\\"../governance/interfaces/IElection.sol\\\";\\nimport \\\"../governance/interfaces/IGovernance.sol\\\";\\nimport \\\"../governance/interfaces/ILockedGold.sol\\\";\\nimport \\\"../governance/interfaces/IValidators.sol\\\";\\n\\nimport \\\"../identity/interfaces/IRandom.sol\\\";\\nimport \\\"../identity/interfaces/IAttestations.sol\\\";\\n\\nimport \\\"../../lib/mento-core/contracts/interfaces/IExchange.sol\\\";\\nimport \\\"../../lib/mento-core/contracts/interfaces/IReserve.sol\\\";\\nimport \\\"../../lib/mento-core/contracts/interfaces/IStableToken.sol\\\";\\nimport \\\"../stability/interfaces/ISortedOracles.sol\\\";\\n\\ncontract UsingRegistry is Ownable {\\n  event RegistrySet(address indexed registryAddress);\\n\\n  // solhint-disable state-visibility\\n  bytes32 constant ACCOUNTS_REGISTRY_ID = keccak256(abi.encodePacked(\\\"Accounts\\\"));\\n  bytes32 constant ATTESTATIONS_REGISTRY_ID = keccak256(abi.encodePacked(\\\"Attestations\\\"));\\n  bytes32 constant DOWNTIME_SLASHER_REGISTRY_ID = keccak256(abi.encodePacked(\\\"DowntimeSlasher\\\"));\\n  bytes32 constant DOUBLE_SIGNING_SLASHER_REGISTRY_ID = keccak256(\\n    abi.encodePacked(\\\"DoubleSigningSlasher\\\")\\n  );\\n  bytes32 constant ELECTION_REGISTRY_ID = keccak256(abi.encodePacked(\\\"Election\\\"));\\n  bytes32 constant EXCHANGE_REGISTRY_ID = keccak256(abi.encodePacked(\\\"Exchange\\\"));\\n  bytes32 constant FEE_CURRENCY_WHITELIST_REGISTRY_ID = keccak256(\\n    abi.encodePacked(\\\"FeeCurrencyWhitelist\\\")\\n  );\\n  bytes32 constant FREEZER_REGISTRY_ID = keccak256(abi.encodePacked(\\\"Freezer\\\"));\\n  bytes32 constant GOLD_TOKEN_REGISTRY_ID = keccak256(abi.encodePacked(\\\"GoldToken\\\"));\\n  bytes32 constant GOVERNANCE_REGISTRY_ID = keccak256(abi.encodePacked(\\\"Governance\\\"));\\n  bytes32 constant GOVERNANCE_SLASHER_REGISTRY_ID = keccak256(\\n    abi.encodePacked(\\\"GovernanceSlasher\\\")\\n  );\\n  bytes32 constant LOCKED_GOLD_REGISTRY_ID = keccak256(abi.encodePacked(\\\"LockedGold\\\"));\\n  bytes32 constant RESERVE_REGISTRY_ID = keccak256(abi.encodePacked(\\\"Reserve\\\"));\\n  bytes32 constant RANDOM_REGISTRY_ID = keccak256(abi.encodePacked(\\\"Random\\\"));\\n  bytes32 constant SORTED_ORACLES_REGISTRY_ID = keccak256(abi.encodePacked(\\\"SortedOracles\\\"));\\n  bytes32 constant STABLE_TOKEN_REGISTRY_ID = keccak256(abi.encodePacked(\\\"StableToken\\\"));\\n  bytes32 constant VALIDATORS_REGISTRY_ID = keccak256(abi.encodePacked(\\\"Validators\\\"));\\n  // solhint-enable state-visibility\\n\\n  IRegistry public registry;\\n\\n  modifier onlyRegisteredContract(bytes32 identifierHash) {\\n    require(registry.getAddressForOrDie(identifierHash) == msg.sender, \\\"only registered contract\\\");\\n    _;\\n  }\\n\\n  modifier onlyRegisteredContracts(bytes32[] memory identifierHashes) {\\n    require(registry.isOneOf(identifierHashes, msg.sender), \\\"only registered contracts\\\");\\n    _;\\n  }\\n\\n  /**\\n   * @notice Updates the address pointing to a Registry contract.\\n   * @param registryAddress The address of a registry contract for routing to other contracts.\\n   */\\n  function setRegistry(address registryAddress) public onlyOwner {\\n    require(registryAddress != address(0), \\\"Cannot register the null address\\\");\\n    registry = IRegistry(registryAddress);\\n    emit RegistrySet(registryAddress);\\n  }\\n\\n  function getAccounts() internal view returns (IAccounts) {\\n    return IAccounts(registry.getAddressForOrDie(ACCOUNTS_REGISTRY_ID));\\n  }\\n\\n  function getAttestations() internal view returns (IAttestations) {\\n    return IAttestations(registry.getAddressForOrDie(ATTESTATIONS_REGISTRY_ID));\\n  }\\n\\n  function getElection() internal view returns (IElection) {\\n    return IElection(registry.getAddressForOrDie(ELECTION_REGISTRY_ID));\\n  }\\n\\n  function getExchange() internal view returns (IExchange) {\\n    return IExchange(registry.getAddressForOrDie(EXCHANGE_REGISTRY_ID));\\n  }\\n\\n  function getFeeCurrencyWhitelistRegistry() internal view returns (IFeeCurrencyWhitelist) {\\n    return IFeeCurrencyWhitelist(registry.getAddressForOrDie(FEE_CURRENCY_WHITELIST_REGISTRY_ID));\\n  }\\n\\n  function getFreezer() internal view returns (IFreezer) {\\n    return IFreezer(registry.getAddressForOrDie(FREEZER_REGISTRY_ID));\\n  }\\n\\n  function getGoldToken() internal view returns (IERC20) {\\n    return IERC20(registry.getAddressForOrDie(GOLD_TOKEN_REGISTRY_ID));\\n  }\\n\\n  function getGovernance() internal view returns (IGovernance) {\\n    return IGovernance(registry.getAddressForOrDie(GOVERNANCE_REGISTRY_ID));\\n  }\\n\\n  function getLockedGold() internal view returns (ILockedGold) {\\n    return ILockedGold(registry.getAddressForOrDie(LOCKED_GOLD_REGISTRY_ID));\\n  }\\n\\n  function getRandom() internal view returns (IRandom) {\\n    return IRandom(registry.getAddressForOrDie(RANDOM_REGISTRY_ID));\\n  }\\n\\n  function getReserve() internal view returns (IReserve) {\\n    return IReserve(registry.getAddressForOrDie(RESERVE_REGISTRY_ID));\\n  }\\n\\n  function getSortedOracles() internal view returns (ISortedOracles) {\\n    return ISortedOracles(registry.getAddressForOrDie(SORTED_ORACLES_REGISTRY_ID));\\n  }\\n\\n  function getStableToken() internal view returns (IStableToken) {\\n    return IStableToken(registry.getAddressForOrDie(STABLE_TOKEN_REGISTRY_ID));\\n  }\\n\\n  function getValidators() internal view returns (IValidators) {\\n    return IValidators(registry.getAddressForOrDie(VALIDATORS_REGISTRY_ID));\\n  }\\n}\\n\",\"keccak256\":\"0x31ec0f16867a35046f9e1211ac3457198e39abc2362d2d559f4ccc4a3985a9ac\"},\"project:/contracts/common/interfaces/IAccounts.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.5.13 <0.9.0;\\n\\ninterface IAccounts {\\n  function isAccount(address) external view returns (bool);\\n  function voteSignerToAccount(address) external view returns (address);\\n  function validatorSignerToAccount(address) external view returns (address);\\n  function attestationSignerToAccount(address) external view returns (address);\\n  function signerToAccount(address) external view returns (address);\\n  function getAttestationSigner(address) external view returns (address);\\n  function getValidatorSigner(address) external view returns (address);\\n  function getVoteSigner(address) external view returns (address);\\n  function hasAuthorizedVoteSigner(address) external view returns (bool);\\n  function hasAuthorizedValidatorSigner(address) external view returns (bool);\\n  function hasAuthorizedAttestationSigner(address) external view returns (bool);\\n\\n  function setAccountDataEncryptionKey(bytes calldata) external;\\n  function setMetadataURL(string calldata) external;\\n  function setName(string calldata) external;\\n  function setWalletAddress(address, uint8, bytes32, bytes32) external;\\n  function setAccount(string calldata, bytes calldata, address, uint8, bytes32, bytes32) external;\\n\\n  function getDataEncryptionKey(address) external view returns (bytes memory);\\n  function getWalletAddress(address) external view returns (address);\\n  function getMetadataURL(address) external view returns (string memory);\\n  function batchGetMetadataURL(address[] calldata)\\n    external\\n    view\\n    returns (uint256[] memory, bytes memory);\\n  function getName(address) external view returns (string memory);\\n\\n  function authorizeVoteSigner(address, uint8, bytes32, bytes32) external;\\n  function authorizeValidatorSigner(address, uint8, bytes32, bytes32) external;\\n  function authorizeValidatorSignerWithPublicKey(address, uint8, bytes32, bytes32, bytes calldata)\\n    external;\\n  function authorizeValidatorSignerWithKeys(\\n    address,\\n    uint8,\\n    bytes32,\\n    bytes32,\\n    bytes calldata,\\n    bytes calldata,\\n    bytes calldata\\n  ) external;\\n  function authorizeAttestationSigner(address, uint8, bytes32, bytes32) external;\\n  function createAccount() external returns (bool);\\n\\n  function setPaymentDelegation(address, uint256) external;\\n  function getPaymentDelegation(address) external view returns (address, uint256);\\n  function isSigner(address, address, bytes32) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x17a0ff4b1c2da32f5de9c0fe230fcb325b2bbabcf51980cfb425cec75f678f5e\"},\"project:/contracts/common/interfaces/ICeloVersionedContract.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.5.13 <0.9.0;\\n\\ninterface ICeloVersionedContract {\\n  /**\\n   * @notice Returns the storage, major, minor, and patch version of the contract.\\n    * @return Storage version of the contract.\\n    * @return Major version of the contract.\\n    * @return Minor version of the contract.\\n    * @return Patch version of the contract.\\n   */\\n  function getVersionNumber() external pure returns (uint256, uint256, uint256, uint256);\\n}\\n\",\"keccak256\":\"0x27f0b14472db998eb8e4b529bbfd6a5879cbd842f8db8aa6c06ed7d2e0b17ac1\"},\"project:/contracts/common/interfaces/IFeeCurrencyWhitelist.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.5.13 <0.9.0;\\n\\ninterface IFeeCurrencyWhitelist {\\n  function addToken(address) external;\\n  function getWhitelist() external view returns (address[] memory);\\n}\\n\",\"keccak256\":\"0x4a91e634d22e8b8c36ef16113d7403029f334affb38f2453f0453f4ba06a925e\"},\"project:/contracts/common/interfaces/IFreezer.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.5.13 <0.9.0;\\n\\ninterface IFreezer {\\n  function isFrozen(address) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x6c34df21ba7ae83d9b47153bec2ffdb74128c11c0a9f20edaca927967fda4786\"},\"project:/contracts/common/interfaces/IRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.5.13 <0.9.0;\\n\\ninterface IRegistry {\\n  function setAddressFor(string calldata, address) external;\\n  function getAddressForOrDie(bytes32) external view returns (address);\\n  function getAddressFor(bytes32) external view returns (address);\\n  function getAddressForStringOrDie(string calldata identifier) external view returns (address);\\n  function getAddressForString(string calldata identifier) external view returns (address);\\n  function isOneOf(bytes32[] calldata, address) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x7737cbda6f3519bf6a4108e07b2c991a655e8731a4c040a3681e9629cfc4b52d\"},\"project:/contracts/common/libraries/ReentrancyGuard.sol\":{\"content\":\"pragma solidity ^0.5.13;\\n\\n/**\\n * @title Helps contracts guard against reentrancy attacks.\\n * @author Remco Bloemen <remco@2\\u03c0.com>, Eenae <alexey@mixbytes.io>\\n * @dev If you mark a function `nonReentrant`, you should also\\n * mark it `external`.\\n */\\ncontract ReentrancyGuard {\\n  /// @dev counter to allow mutex lock with only one SSTORE operation\\n  uint256 private _guardCounter;\\n\\n  constructor() internal {\\n    // The counter starts at one to prevent changing it from zero to a non-zero\\n    // value, which is a more expensive operation.\\n    _guardCounter = 1;\\n  }\\n\\n  /**\\n   * @dev Prevents a contract from calling itself, directly or indirectly.\\n   * Calling a `nonReentrant` function from another `nonReentrant`\\n   * function is not supported. It is possible to prevent this from happening\\n   * by making the `nonReentrant` function external, and make it call a\\n   * `private` function that does the actual work.\\n   */\\n  modifier nonReentrant() {\\n    _guardCounter += 1;\\n    uint256 localCounter = _guardCounter;\\n    _;\\n    require(localCounter == _guardCounter, \\\"reentrant call\\\");\\n  }\\n}\\n\",\"keccak256\":\"0xa2584554532d7004ca3d2d168cd9dfb7694605f1a32431af4d1b7d834fa6b08d\"},\"project:/contracts/common/linkedlists/AddressLinkedList.sol\":{\"content\":\"pragma solidity ^0.5.13;\\n\\nimport \\\"openzeppelin-solidity/contracts/math/SafeMath.sol\\\";\\n\\nimport \\\"./LinkedList.sol\\\";\\n\\n/**\\n * @title Maintains a doubly linked list keyed by address.\\n * @dev Following the `next` pointers will lead you to the head, rather than the tail.\\n */\\nlibrary AddressLinkedList {\\n  using LinkedList for LinkedList.List;\\n  using SafeMath for uint256;\\n\\n  function toBytes(address a) public pure returns (bytes32) {\\n    return bytes32(uint256(a) << 96);\\n  }\\n\\n  function toAddress(bytes32 b) public pure returns (address) {\\n    return address(uint256(b) >> 96);\\n  }\\n\\n  /**\\n   * @notice Inserts an element into a doubly linked list.\\n   * @param list A storage pointer to the underlying list.\\n   * @param key The key of the element to insert.\\n   * @param previousKey The key of the element that comes before the element to insert.\\n   * @param nextKey The key of the element that comes after the element to insert.\\n   */\\n  function insert(LinkedList.List storage list, address key, address previousKey, address nextKey)\\n    public\\n  {\\n    list.insert(toBytes(key), toBytes(previousKey), toBytes(nextKey));\\n  }\\n\\n  /**\\n   * @notice Inserts an element at the end of the doubly linked list.\\n   * @param list A storage pointer to the underlying list.\\n   * @param key The key of the element to insert.\\n   */\\n  function push(LinkedList.List storage list, address key) public {\\n    list.insert(toBytes(key), bytes32(0), list.tail);\\n  }\\n\\n  /**\\n   * @notice Removes an element from the doubly linked list.\\n   * @param list A storage pointer to the underlying list.\\n   * @param key The key of the element to remove.\\n   */\\n  function remove(LinkedList.List storage list, address key) public {\\n    list.remove(toBytes(key));\\n  }\\n\\n  /**\\n   * @notice Updates an element in the list.\\n   * @param list A storage pointer to the underlying list.\\n   * @param key The element key.\\n   * @param previousKey The key of the element that comes before the updated element.\\n   * @param nextKey The key of the element that comes after the updated element.\\n   */\\n  function update(LinkedList.List storage list, address key, address previousKey, address nextKey)\\n    public\\n  {\\n    list.update(toBytes(key), toBytes(previousKey), toBytes(nextKey));\\n  }\\n\\n  /**\\n   * @notice Returns whether or not a particular key is present in the sorted list.\\n   * @param list A storage pointer to the underlying list.\\n   * @param key The element key.\\n   * @return Whether or not the key is in the sorted list.\\n   */\\n  function contains(LinkedList.List storage list, address key) public view returns (bool) {\\n    return list.elements[toBytes(key)].exists;\\n  }\\n\\n  /**\\n   * @notice Returns the N greatest elements of the list.\\n   * @param list A storage pointer to the underlying list.\\n   * @param n The number of elements to return.\\n   * @return The keys of the greatest elements.\\n   * @dev Reverts if n is greater than the number of elements in the list.\\n   */\\n  function headN(LinkedList.List storage list, uint256 n) public view returns (address[] memory) {\\n    bytes32[] memory byteKeys = list.headN(n);\\n    address[] memory keys = new address[](n);\\n    for (uint256 i = 0; i < n; i = i.add(1)) {\\n      keys[i] = toAddress(byteKeys[i]);\\n    }\\n    return keys;\\n  }\\n\\n  /**\\n   * @notice Gets all element keys from the doubly linked list.\\n   * @param list A storage pointer to the underlying list.\\n   * @return All element keys from head to tail.\\n   */\\n  function getKeys(LinkedList.List storage list) public view returns (address[] memory) {\\n    return headN(list, list.numElements);\\n  }\\n}\\n\",\"keccak256\":\"0xa2244090699575e91c14bfd19a152a025ce93dddf2088971d8587d39bbc34df9\"},\"project:/contracts/common/linkedlists/LinkedList.sol\":{\"content\":\"pragma solidity ^0.5.13;\\n\\nimport \\\"openzeppelin-solidity/contracts/math/SafeMath.sol\\\";\\n\\n/**\\n * @title Maintains a doubly linked list keyed by bytes32.\\n * @dev Following the `next` pointers will lead you to the head, rather than the tail.\\n */\\nlibrary LinkedList {\\n  using SafeMath for uint256;\\n\\n  struct Element {\\n    bytes32 previousKey;\\n    bytes32 nextKey;\\n    bool exists;\\n  }\\n\\n  struct List {\\n    bytes32 head;\\n    bytes32 tail;\\n    uint256 numElements;\\n    mapping(bytes32 => Element) elements;\\n  }\\n\\n  /**\\n   * @notice Inserts an element into a doubly linked list.\\n   * @param list A storage pointer to the underlying list.\\n   * @param key The key of the element to insert.\\n   * @param previousKey The key of the element that comes before the element to insert.\\n   * @param nextKey The key of the element that comes after the element to insert.\\n   */\\n  function insert(List storage list, bytes32 key, bytes32 previousKey, bytes32 nextKey) internal {\\n    require(key != bytes32(0), \\\"Key must be defined\\\");\\n    require(!contains(list, key), \\\"Can't insert an existing element\\\");\\n    require(\\n      previousKey != key && nextKey != key,\\n      \\\"Key cannot be the same as previousKey or nextKey\\\"\\n    );\\n\\n    Element storage element = list.elements[key];\\n    element.exists = true;\\n\\n    if (list.numElements == 0) {\\n      list.tail = key;\\n      list.head = key;\\n    } else {\\n      require(\\n        previousKey != bytes32(0) || nextKey != bytes32(0),\\n        \\\"Either previousKey or nextKey must be defined\\\"\\n      );\\n\\n      element.previousKey = previousKey;\\n      element.nextKey = nextKey;\\n\\n      if (previousKey != bytes32(0)) {\\n        require(\\n          contains(list, previousKey),\\n          \\\"If previousKey is defined, it must exist in the list\\\"\\n        );\\n        Element storage previousElement = list.elements[previousKey];\\n        require(previousElement.nextKey == nextKey, \\\"previousKey must be adjacent to nextKey\\\");\\n        previousElement.nextKey = key;\\n      } else {\\n        list.tail = key;\\n      }\\n\\n      if (nextKey != bytes32(0)) {\\n        require(contains(list, nextKey), \\\"If nextKey is defined, it must exist in the list\\\");\\n        Element storage nextElement = list.elements[nextKey];\\n        require(nextElement.previousKey == previousKey, \\\"previousKey must be adjacent to nextKey\\\");\\n        nextElement.previousKey = key;\\n      } else {\\n        list.head = key;\\n      }\\n    }\\n\\n    list.numElements = list.numElements.add(1);\\n  }\\n\\n  /**\\n   * @notice Inserts an element at the tail of the doubly linked list.\\n   * @param list A storage pointer to the underlying list.\\n   * @param key The key of the element to insert.\\n   */\\n  function push(List storage list, bytes32 key) internal {\\n    insert(list, key, bytes32(0), list.tail);\\n  }\\n\\n  /**\\n   * @notice Removes an element from the doubly linked list.\\n   * @param list A storage pointer to the underlying list.\\n   * @param key The key of the element to remove.\\n   */\\n  function remove(List storage list, bytes32 key) internal {\\n    Element storage element = list.elements[key];\\n    require(key != bytes32(0) && contains(list, key), \\\"key not in list\\\");\\n    if (element.previousKey != bytes32(0)) {\\n      Element storage previousElement = list.elements[element.previousKey];\\n      previousElement.nextKey = element.nextKey;\\n    } else {\\n      list.tail = element.nextKey;\\n    }\\n\\n    if (element.nextKey != bytes32(0)) {\\n      Element storage nextElement = list.elements[element.nextKey];\\n      nextElement.previousKey = element.previousKey;\\n    } else {\\n      list.head = element.previousKey;\\n    }\\n\\n    delete list.elements[key];\\n    list.numElements = list.numElements.sub(1);\\n  }\\n\\n  /**\\n   * @notice Updates an element in the list.\\n   * @param list A storage pointer to the underlying list.\\n   * @param key The element key.\\n   * @param previousKey The key of the element that comes before the updated element.\\n   * @param nextKey The key of the element that comes after the updated element.\\n   */\\n  function update(List storage list, bytes32 key, bytes32 previousKey, bytes32 nextKey) internal {\\n    require(\\n      key != bytes32(0) && key != previousKey && key != nextKey && contains(list, key),\\n      \\\"key on in list\\\"\\n    );\\n    remove(list, key);\\n    insert(list, key, previousKey, nextKey);\\n  }\\n\\n  /**\\n   * @notice Returns whether or not a particular key is present in the sorted list.\\n   * @param list A storage pointer to the underlying list.\\n   * @param key The element key.\\n   * @return Whether or not the key is in the sorted list.\\n   */\\n  function contains(List storage list, bytes32 key) internal view returns (bool) {\\n    return list.elements[key].exists;\\n  }\\n\\n  /**\\n   * @notice Returns the keys of the N elements at the head of the list.\\n   * @param list A storage pointer to the underlying list.\\n   * @param n The number of elements to return.\\n   * @return The keys of the N elements at the head of the list.\\n   * @dev Reverts if n is greater than the number of elements in the list.\\n   */\\n  function headN(List storage list, uint256 n) internal view returns (bytes32[] memory) {\\n    require(n <= list.numElements, \\\"not enough elements\\\");\\n    bytes32[] memory keys = new bytes32[](n);\\n    bytes32 key = list.head;\\n    for (uint256 i = 0; i < n; i = i.add(1)) {\\n      keys[i] = key;\\n      key = list.elements[key].previousKey;\\n    }\\n    return keys;\\n  }\\n\\n  /**\\n   * @notice Gets all element keys from the doubly linked list.\\n   * @param list A storage pointer to the underlying list.\\n   * @return All element keys from head to tail.\\n   */\\n  function getKeys(List storage list) internal view returns (bytes32[] memory) {\\n    return headN(list, list.numElements);\\n  }\\n}\\n\",\"keccak256\":\"0x9104cbf273bd44a5845784a7540066ce80d543912b8b84742094e80adac3f1a3\"},\"project:/contracts/governance/Validators.sol\":{\"content\":\"pragma solidity ^0.5.13;\\n\\nimport \\\"openzeppelin-solidity/contracts/math/Math.sol\\\";\\nimport \\\"openzeppelin-solidity/contracts/math/SafeMath.sol\\\";\\nimport \\\"openzeppelin-solidity/contracts/ownership/Ownable.sol\\\";\\nimport \\\"solidity-bytes-utils/contracts/BytesLib.sol\\\";\\n\\nimport \\\"./interfaces/IValidators.sol\\\";\\n\\nimport \\\"../common/CalledByVm.sol\\\";\\nimport \\\"../common/Initializable.sol\\\";\\nimport \\\"../common/FixidityLib.sol\\\";\\nimport \\\"../common/linkedlists/AddressLinkedList.sol\\\";\\nimport \\\"../common/UsingRegistry.sol\\\";\\nimport \\\"../common/UsingPrecompiles.sol\\\";\\nimport \\\"../common/interfaces/ICeloVersionedContract.sol\\\";\\nimport \\\"../common/libraries/ReentrancyGuard.sol\\\";\\n\\n/**\\n * @title A contract for registering and electing Validator Groups and Validators.\\n */\\ncontract Validators is\\n  IValidators,\\n  ICeloVersionedContract,\\n  Ownable,\\n  ReentrancyGuard,\\n  Initializable,\\n  UsingRegistry,\\n  UsingPrecompiles,\\n  CalledByVm\\n{\\n  using FixidityLib for FixidityLib.Fraction;\\n  using AddressLinkedList for LinkedList.List;\\n  using SafeMath for uint256;\\n  using BytesLib for bytes;\\n\\n  // For Validators, these requirements must be met in order to:\\n  //   1. Register a validator\\n  //   2. Affiliate with and be added to a group\\n  //   3. Receive epoch payments (note that the group must meet the group requirements as well)\\n  // Accounts may de-register their Validator `duration` seconds after they were last a member of a\\n  // group, after which no restrictions on Locked Gold will apply to the account.\\n  //\\n  // For Validator Groups, these requirements must be met in order to:\\n  //   1. Register a group\\n  //   2. Add a member to a group\\n  //   3. Receive epoch payments\\n  // Note that for groups, the requirement value is multiplied by the number of members, and is\\n  // enforced for `duration` seconds after the group last had that number of members.\\n  // Accounts may de-register their Group `duration` seconds after they were last non-empty, after\\n  // which no restrictions on Locked Gold will apply to the account.\\n  struct LockedGoldRequirements {\\n    uint256 value;\\n    // In seconds.\\n    uint256 duration;\\n  }\\n\\n  struct ValidatorGroup {\\n    bool exists;\\n    LinkedList.List members;\\n    FixidityLib.Fraction commission;\\n    FixidityLib.Fraction nextCommission;\\n    uint256 nextCommissionBlock;\\n    // sizeHistory[i] contains the last time the group contained i members.\\n    uint256[] sizeHistory;\\n    SlashingInfo slashInfo;\\n  }\\n\\n  // Stores the epoch number at which a validator joined a particular group.\\n  struct MembershipHistoryEntry {\\n    uint256 epochNumber;\\n    address group;\\n  }\\n\\n  // Stores the per-epoch membership history of a validator, used to determine which group\\n  // commission should be paid to at the end of an epoch.\\n  // Stores a timestamp of the last time the validator was removed from a group, used to determine\\n  // whether or not a group can de-register.\\n  struct MembershipHistory {\\n    // The key to the most recent entry in the entries mapping.\\n    uint256 tail;\\n    // The number of entries in this validators membership history.\\n    uint256 numEntries;\\n    mapping(uint256 => MembershipHistoryEntry) entries;\\n    uint256 lastRemovedFromGroupTimestamp;\\n  }\\n\\n  struct SlashingInfo {\\n    FixidityLib.Fraction multiplier;\\n    uint256 lastSlashed;\\n  }\\n\\n  struct PublicKeys {\\n    bytes ecdsa;\\n    bytes bls;\\n  }\\n\\n  struct Validator {\\n    PublicKeys publicKeys;\\n    address affiliation;\\n    FixidityLib.Fraction score;\\n    MembershipHistory membershipHistory;\\n  }\\n\\n  // Parameters that govern the calculation of validator's score.\\n  struct ValidatorScoreParameters {\\n    uint256 exponent;\\n    FixidityLib.Fraction adjustmentSpeed;\\n  }\\n\\n  mapping(address => ValidatorGroup) private groups;\\n  mapping(address => Validator) private validators;\\n  address[] private registeredGroups;\\n  address[] private registeredValidators;\\n  LockedGoldRequirements public validatorLockedGoldRequirements;\\n  LockedGoldRequirements public groupLockedGoldRequirements;\\n  ValidatorScoreParameters private validatorScoreParameters;\\n  uint256 public membershipHistoryLength;\\n  uint256 public maxGroupSize;\\n  // The number of blocks to delay a ValidatorGroup's commission update\\n  uint256 public commissionUpdateDelay;\\n  uint256 public slashingMultiplierResetPeriod;\\n  uint256 public downtimeGracePeriod;\\n\\n  event MaxGroupSizeSet(uint256 size);\\n  event CommissionUpdateDelaySet(uint256 delay);\\n  event ValidatorScoreParametersSet(uint256 exponent, uint256 adjustmentSpeed);\\n  event GroupLockedGoldRequirementsSet(uint256 value, uint256 duration);\\n  event ValidatorLockedGoldRequirementsSet(uint256 value, uint256 duration);\\n  event MembershipHistoryLengthSet(uint256 length);\\n  event ValidatorRegistered(address indexed validator);\\n  event ValidatorDeregistered(address indexed validator);\\n  event ValidatorAffiliated(address indexed validator, address indexed group);\\n  event ValidatorDeaffiliated(address indexed validator, address indexed group);\\n  event ValidatorEcdsaPublicKeyUpdated(address indexed validator, bytes ecdsaPublicKey);\\n  event ValidatorBlsPublicKeyUpdated(address indexed validator, bytes blsPublicKey);\\n  event ValidatorScoreUpdated(address indexed validator, uint256 score, uint256 epochScore);\\n  event ValidatorGroupRegistered(address indexed group, uint256 commission);\\n  event ValidatorGroupDeregistered(address indexed group);\\n  event ValidatorGroupMemberAdded(address indexed group, address indexed validator);\\n  event ValidatorGroupMemberRemoved(address indexed group, address indexed validator);\\n  event ValidatorGroupMemberReordered(address indexed group, address indexed validator);\\n  event ValidatorGroupCommissionUpdateQueued(\\n    address indexed group,\\n    uint256 commission,\\n    uint256 activationBlock\\n  );\\n  event ValidatorGroupCommissionUpdated(address indexed group, uint256 commission);\\n  event ValidatorEpochPaymentDistributed(\\n    address indexed validator,\\n    uint256 validatorPayment,\\n    address indexed group,\\n    uint256 groupPayment\\n  );\\n\\n  modifier onlySlasher() {\\n    require(getLockedGold().isSlasher(msg.sender), \\\"Only registered slasher can call\\\");\\n    _;\\n  }\\n\\n  /**\\n   * @notice Returns the storage, major, minor, and patch version of the contract.\\n   * @return Storage version of the contract.\\n   * @return Major version of the contract.\\n   * @return Minor version of the contract.\\n   * @return Patch version of the contract.\\n   */\\n  function getVersionNumber() external pure returns (uint256, uint256, uint256, uint256) {\\n    return (1, 2, 0, 5);\\n  }\\n\\n  /**\\n   * @notice Sets initialized == true on implementation contracts\\n   * @param test Set to true to skip implementation initialization\\n   */\\n  constructor(bool test) public Initializable(test) {}\\n\\n  /**\\n   * @notice Used in place of the constructor to allow the contract to be upgradable via proxy.\\n   * @param registryAddress The address of the registry core smart contract.\\n   * @param groupRequirementValue The Locked Gold requirement amount for groups.\\n   * @param groupRequirementDuration The Locked Gold requirement duration for groups.\\n   * @param validatorRequirementValue The Locked Gold requirement amount for validators.\\n   * @param validatorRequirementDuration The Locked Gold requirement duration for validators.\\n   * @param validatorScoreExponent The exponent used in calculating validator scores.\\n   * @param validatorScoreAdjustmentSpeed The speed at which validator scores are adjusted.\\n   * @param _membershipHistoryLength The max number of entries for validator membership history.\\n   * @param _maxGroupSize The maximum group size.\\n   * @param _commissionUpdateDelay The number of blocks to delay a ValidatorGroup's commission\\n   * update.\\n   * @dev Should be called only once.\\n   */\\n  function initialize(\\n    address registryAddress,\\n    uint256 groupRequirementValue,\\n    uint256 groupRequirementDuration,\\n    uint256 validatorRequirementValue,\\n    uint256 validatorRequirementDuration,\\n    uint256 validatorScoreExponent,\\n    uint256 validatorScoreAdjustmentSpeed,\\n    uint256 _membershipHistoryLength,\\n    uint256 _slashingMultiplierResetPeriod,\\n    uint256 _maxGroupSize,\\n    uint256 _commissionUpdateDelay,\\n    uint256 _downtimeGracePeriod\\n  ) external initializer {\\n    _transferOwnership(msg.sender);\\n    setRegistry(registryAddress);\\n    setGroupLockedGoldRequirements(groupRequirementValue, groupRequirementDuration);\\n    setValidatorLockedGoldRequirements(validatorRequirementValue, validatorRequirementDuration);\\n    setValidatorScoreParameters(validatorScoreExponent, validatorScoreAdjustmentSpeed);\\n    setMaxGroupSize(_maxGroupSize);\\n    setCommissionUpdateDelay(_commissionUpdateDelay);\\n    setMembershipHistoryLength(_membershipHistoryLength);\\n    setSlashingMultiplierResetPeriod(_slashingMultiplierResetPeriod);\\n    setDowntimeGracePeriod(_downtimeGracePeriod);\\n  }\\n\\n  /**\\n   * @notice Updates the block delay for a ValidatorGroup's commission udpdate\\n   * @param delay Number of blocks to delay the update\\n   */\\n  function setCommissionUpdateDelay(uint256 delay) public onlyOwner {\\n    require(delay != commissionUpdateDelay, \\\"commission update delay not changed\\\");\\n    commissionUpdateDelay = delay;\\n    emit CommissionUpdateDelaySet(delay);\\n  }\\n\\n  /**\\n   * @notice Updates the maximum number of members a group can have.\\n   * @param size The maximum group size.\\n   * @return True upon success.\\n   */\\n  function setMaxGroupSize(uint256 size) public onlyOwner returns (bool) {\\n    require(0 < size, \\\"Max group size cannot be zero\\\");\\n    require(size != maxGroupSize, \\\"Max group size not changed\\\");\\n    maxGroupSize = size;\\n    emit MaxGroupSizeSet(size);\\n    return true;\\n  }\\n\\n  /**\\n   * @notice Updates the number of validator group membership entries to store.\\n   * @param length The number of validator group membership entries to store.\\n   * @return True upon success.\\n   */\\n  function setMembershipHistoryLength(uint256 length) public onlyOwner returns (bool) {\\n    require(0 < length, \\\"Membership history length cannot be zero\\\");\\n    require(length != membershipHistoryLength, \\\"Membership history length not changed\\\");\\n    membershipHistoryLength = length;\\n    emit MembershipHistoryLengthSet(length);\\n    return true;\\n  }\\n\\n  /**\\n   * @notice Updates the validator score parameters.\\n   * @param exponent The exponent used in calculating the score.\\n   * @param adjustmentSpeed The speed at which the score is adjusted.\\n   * @return True upon success.\\n   */\\n  function setValidatorScoreParameters(uint256 exponent, uint256 adjustmentSpeed)\\n    public\\n    onlyOwner\\n    returns (bool)\\n  {\\n    require(\\n      adjustmentSpeed <= FixidityLib.fixed1().unwrap(),\\n      \\\"Adjustment speed cannot be larger than 1\\\"\\n    );\\n    require(\\n      exponent != validatorScoreParameters.exponent ||\\n        !FixidityLib.wrap(adjustmentSpeed).equals(validatorScoreParameters.adjustmentSpeed),\\n      \\\"Adjustment speed and exponent not changed\\\"\\n    );\\n    validatorScoreParameters = ValidatorScoreParameters(\\n      exponent,\\n      FixidityLib.wrap(adjustmentSpeed)\\n    );\\n    emit ValidatorScoreParametersSet(exponent, adjustmentSpeed);\\n    return true;\\n  }\\n\\n  /**\\n   * @notice Returns the maximum number of members a group can add.\\n   * @return The maximum number of members a group can add.\\n   */\\n  function getMaxGroupSize() external view returns (uint256) {\\n    return maxGroupSize;\\n  }\\n\\n  /**\\n   * @notice Returns the block delay for a ValidatorGroup's commission udpdate.\\n   * @return The block delay for a ValidatorGroup's commission udpdate.\\n   */\\n  function getCommissionUpdateDelay() external view returns (uint256) {\\n    return commissionUpdateDelay;\\n  }\\n\\n  /**\\n   * @notice Updates the Locked Gold requirements for Validator Groups.\\n   * @param value The per-member amount of Locked Gold required.\\n   * @param duration The time (in seconds) that these requirements persist for.\\n   * @return True upon success.\\n   */\\n  function setGroupLockedGoldRequirements(uint256 value, uint256 duration)\\n    public\\n    onlyOwner\\n    returns (bool)\\n  {\\n    LockedGoldRequirements storage requirements = groupLockedGoldRequirements;\\n    require(\\n      value != requirements.value || duration != requirements.duration,\\n      \\\"Group requirements not changed\\\"\\n    );\\n    groupLockedGoldRequirements = LockedGoldRequirements(value, duration);\\n    emit GroupLockedGoldRequirementsSet(value, duration);\\n    return true;\\n  }\\n\\n  /**\\n   * @notice Updates the Locked Gold requirements for Validators.\\n   * @param value The amount of Locked Gold required.\\n   * @param duration The time (in seconds) that these requirements persist for.\\n   * @return True upon success.\\n   */\\n  function setValidatorLockedGoldRequirements(uint256 value, uint256 duration)\\n    public\\n    onlyOwner\\n    returns (bool)\\n  {\\n    LockedGoldRequirements storage requirements = validatorLockedGoldRequirements;\\n    require(\\n      value != requirements.value || duration != requirements.duration,\\n      \\\"Validator requirements not changed\\\"\\n    );\\n    validatorLockedGoldRequirements = LockedGoldRequirements(value, duration);\\n    emit ValidatorLockedGoldRequirementsSet(value, duration);\\n    return true;\\n  }\\n\\n  /**\\n   * @notice Registers a validator unaffiliated with any validator group.\\n   * @param ecdsaPublicKey The ECDSA public key that the validator is using for consensus, should\\n   *   match the validator signer. 64 bytes.\\n   * @param blsPublicKey The BLS public key that the validator is using for consensus, should pass\\n   *   proof of possession. 96 bytes.\\n   * @param blsPop The BLS public key proof-of-possession, which consists of a signature on the\\n   *   account address. 48 bytes.\\n   * @return True upon success.\\n   * @dev Fails if the account is already a validator or validator group.\\n   * @dev Fails if the account does not have sufficient Locked Gold.\\n   */\\n  function registerValidator(\\n    bytes calldata ecdsaPublicKey,\\n    bytes calldata blsPublicKey,\\n    bytes calldata blsPop\\n  ) external nonReentrant returns (bool) {\\n    address account = getAccounts().validatorSignerToAccount(msg.sender);\\n    _isRegistrationAllowed(account);\\n    require(!isValidator(account) && !isValidatorGroup(account), \\\"Already registered\\\");\\n    uint256 lockedGoldBalance = getLockedGold().getAccountTotalLockedGold(account);\\n    require(lockedGoldBalance >= validatorLockedGoldRequirements.value, \\\"Deposit too small\\\");\\n    Validator storage validator = validators[account];\\n    address signer = getAccounts().getValidatorSigner(account);\\n    require(\\n      _updateEcdsaPublicKey(validator, account, signer, ecdsaPublicKey),\\n      \\\"Error updating ECDSA public key\\\"\\n    );\\n    require(\\n      _updateBlsPublicKey(validator, account, blsPublicKey, blsPop),\\n      \\\"Error updating BLS public key\\\"\\n    );\\n    registeredValidators.push(account);\\n    updateMembershipHistory(account, address(0));\\n    emit ValidatorRegistered(account);\\n    return true;\\n  }\\n\\n  /**\\n   * @notice Returns the parameters that govern how a validator's score is calculated.\\n   * @return The exponent that governs how a validator's score is calculated.\\n   * @return The adjustment speed that governs how a validator's score is calculated.\\n   */\\n  function getValidatorScoreParameters() external view returns (uint256, uint256) {\\n    return (validatorScoreParameters.exponent, validatorScoreParameters.adjustmentSpeed.unwrap());\\n  }\\n\\n  /**\\n   * @notice Returns the group membership history of a validator.\\n   * @param account The validator whose membership history to return.\\n   * @return epochs The epochs of a validator.\\n   * @return The membership groups of a validator.\\n   * @return The last removed from group timestamp of a validator.\\n   * @return The tail of a validator.\\n   */\\n  function getMembershipHistory(address account)\\n    external\\n    view\\n    returns (uint256[] memory, address[] memory, uint256, uint256)\\n  {\\n    MembershipHistory storage history = validators[account].membershipHistory;\\n    uint256[] memory epochs = new uint256[](history.numEntries);\\n    address[] memory membershipGroups = new address[](history.numEntries);\\n    for (uint256 i = 0; i < history.numEntries; i = i.add(1)) {\\n      uint256 index = history.tail.add(i);\\n      epochs[i] = history.entries[index].epochNumber;\\n      membershipGroups[i] = history.entries[index].group;\\n    }\\n    return (epochs, membershipGroups, history.lastRemovedFromGroupTimestamp, history.tail);\\n  }\\n\\n  /**\\n   * @notice Calculates the validator score for an epoch from the uptime value for the epoch.\\n   * @param uptime The Fixidity representation of the validator's uptime, between 0 and 1.\\n   * @dev epoch_score = uptime ** exponent\\n   * @return Fixidity representation of the epoch score between 0 and 1.\\n   */\\n  function calculateEpochScore(uint256 uptime) public view returns (uint256) {\\n    require(uptime <= FixidityLib.fixed1().unwrap(), \\\"Uptime cannot be larger than one\\\");\\n    uint256 numerator;\\n    uint256 denominator;\\n    uptime = Math.min(uptime.add(downtimeGracePeriod), FixidityLib.fixed1().unwrap());\\n    (numerator, denominator) = fractionMulExp(\\n      FixidityLib.fixed1().unwrap(),\\n      FixidityLib.fixed1().unwrap(),\\n      uptime,\\n      FixidityLib.fixed1().unwrap(),\\n      validatorScoreParameters.exponent,\\n      18\\n    );\\n    return FixidityLib.newFixedFraction(numerator, denominator).unwrap();\\n  }\\n\\n  /**\\n   * @notice Calculates the aggregate score of a group for an epoch from individual uptimes.\\n   * @param uptimes Array of Fixidity representations of the validators' uptimes, between 0 and 1.\\n   * @dev group_score = average(uptimes ** exponent)\\n   * @return Fixidity representation of the group epoch score between 0 and 1.\\n   */\\n  function calculateGroupEpochScore(uint256[] calldata uptimes) external view returns (uint256) {\\n    require(uptimes.length > 0, \\\"Uptime array empty\\\");\\n    require(uptimes.length <= maxGroupSize, \\\"Uptime array larger than maximum group size\\\");\\n    FixidityLib.Fraction memory sum;\\n    for (uint256 i = 0; i < uptimes.length; i = i.add(1)) {\\n      sum = sum.add(FixidityLib.wrap(calculateEpochScore(uptimes[i])));\\n    }\\n    return sum.divide(FixidityLib.newFixed(uptimes.length)).unwrap();\\n  }\\n\\n  /**\\n   * @notice Updates a validator's score based on its uptime for the epoch.\\n   * @param signer The validator signer of the validator account whose score needs updating.\\n   * @param uptime The Fixidity representation of the validator's uptime, between 0 and 1.\\n   * @return True upon success.\\n   */\\n  function updateValidatorScoreFromSigner(address signer, uint256 uptime) external onlyVm() {\\n    _updateValidatorScoreFromSigner(signer, uptime);\\n  }\\n\\n  /**\\n   * @notice Updates a validator's score based on its uptime for the epoch.\\n   * @param signer The validator signer of the validator whose score needs updating.\\n   * @param uptime The Fixidity representation of the validator's uptime, between 0 and 1.\\n   * @dev new_score = uptime ** exponent * adjustmentSpeed + old_score * (1 - adjustmentSpeed)\\n   * @return True upon success.\\n   */\\n  function _updateValidatorScoreFromSigner(address signer, uint256 uptime) internal {\\n    address account = getAccounts().signerToAccount(signer);\\n    require(isValidator(account), \\\"Not a validator\\\");\\n\\n    FixidityLib.Fraction memory epochScore = FixidityLib.wrap(calculateEpochScore(uptime));\\n    FixidityLib.Fraction memory newComponent = validatorScoreParameters.adjustmentSpeed.multiply(\\n      epochScore\\n    );\\n\\n    FixidityLib.Fraction memory currentComponent = FixidityLib.fixed1().subtract(\\n      validatorScoreParameters.adjustmentSpeed\\n    );\\n    currentComponent = currentComponent.multiply(validators[account].score);\\n    validators[account].score = FixidityLib.wrap(\\n      Math.min(epochScore.unwrap(), newComponent.add(currentComponent).unwrap())\\n    );\\n    emit ValidatorScoreUpdated(account, validators[account].score.unwrap(), epochScore.unwrap());\\n  }\\n\\n  /**\\n   * @notice Distributes epoch payments to the account associated with `signer` and its group.\\n   * @param signer The validator signer of the account to distribute the epoch payment to.\\n   * @param maxPayment The maximum payment to the validator. Actual payment is based on score and\\n   *   group commission.\\n   * @return The total payment paid to the validator and their group.\\n   */\\n  function distributeEpochPaymentsFromSigner(address signer, uint256 maxPayment)\\n    external\\n    onlyVm()\\n    returns (uint256)\\n  {\\n    return _distributeEpochPaymentsFromSigner(signer, maxPayment);\\n  }\\n\\n  /**\\n   * @notice Distributes epoch payments to the account associated with `signer` and its group.\\n   * @param signer The validator signer of the validator to distribute the epoch payment to.\\n   * @param maxPayment The maximum payment to the validator. Actual payment is based on score and\\n   *   group commission.\\n   * @return The total payment paid to the validator and their group.\\n   */\\n  function _distributeEpochPaymentsFromSigner(address signer, uint256 maxPayment)\\n    internal\\n    returns (uint256)\\n  {\\n    address account = getAccounts().signerToAccount(signer);\\n    require(isValidator(account), \\\"Not a validator\\\");\\n    // The group that should be paid is the group that the validator was a member of at the\\n    // time it was elected.\\n    address group = getMembershipInLastEpoch(account);\\n    require(group != address(0), \\\"Validator not registered with a group\\\");\\n    // Both the validator and the group must maintain the minimum locked gold balance in order to\\n    // receive epoch payments.\\n    if (meetsAccountLockedGoldRequirements(account) && meetsAccountLockedGoldRequirements(group)) {\\n      FixidityLib.Fraction memory totalPayment = FixidityLib\\n        .newFixed(maxPayment)\\n        .multiply(validators[account].score)\\n        .multiply(groups[group].slashInfo.multiplier);\\n      uint256 groupPayment = totalPayment.multiply(groups[group].commission).fromFixed();\\n      FixidityLib.Fraction memory remainingPayment = FixidityLib.newFixed(\\n        totalPayment.fromFixed().sub(groupPayment)\\n      );\\n      (address beneficiary, uint256 fraction) = getAccounts().getPaymentDelegation(account);\\n      uint256 delegatedPayment = remainingPayment.multiply(FixidityLib.wrap(fraction)).fromFixed();\\n      uint256 validatorPayment = remainingPayment.fromFixed().sub(delegatedPayment);\\n      IStableToken stableToken = getStableToken();\\n      require(stableToken.mint(group, groupPayment), \\\"mint failed to validator group\\\");\\n      require(stableToken.mint(account, validatorPayment), \\\"mint failed to validator account\\\");\\n      if (fraction != 0) {\\n        require(stableToken.mint(beneficiary, delegatedPayment), \\\"mint failed to delegatee\\\");\\n      }\\n      emit ValidatorEpochPaymentDistributed(account, validatorPayment, group, groupPayment);\\n      return totalPayment.fromFixed();\\n    } else {\\n      return 0;\\n    }\\n  }\\n\\n  /**\\n   * @notice De-registers a validator.\\n   * @param index The index of this validator in the list of all registered validators.\\n   * @return True upon success.\\n   * @dev Fails if the account is not a validator.\\n   * @dev Fails if the validator has been a member of a group too recently.\\n   */\\n  function deregisterValidator(uint256 index) external nonReentrant returns (bool) {\\n    address account = getAccounts().validatorSignerToAccount(msg.sender);\\n    require(isValidator(account), \\\"Not a validator\\\");\\n\\n    // Require that the validator has not been a member of a validator group for\\n    // `validatorLockedGoldRequirements.duration` seconds.\\n    Validator storage validator = validators[account];\\n    if (validator.affiliation != address(0)) {\\n      require(\\n        !groups[validator.affiliation].members.contains(account),\\n        \\\"Has been group member recently\\\"\\n      );\\n    }\\n    uint256 requirementEndTime = validator.membershipHistory.lastRemovedFromGroupTimestamp.add(\\n      validatorLockedGoldRequirements.duration\\n    );\\n    require(requirementEndTime < now, \\\"Not yet requirement end time\\\");\\n\\n    // Remove the validator.\\n    deleteElement(registeredValidators, account, index);\\n    delete validators[account];\\n    emit ValidatorDeregistered(account);\\n    return true;\\n  }\\n\\n  /**\\n   * @notice Affiliates a validator with a group, allowing it to be added as a member.\\n   * @param group The validator group with which to affiliate.\\n   * @return True upon success.\\n   * @dev De-affiliates with the previously affiliated group if present.\\n   */\\n  function affiliate(address group) external nonReentrant returns (bool) {\\n    address account = getAccounts().validatorSignerToAccount(msg.sender);\\n    require(isValidator(account), \\\"Not a validator\\\");\\n    require(isValidatorGroup(group), \\\"Not a validator group\\\");\\n    require(meetsAccountLockedGoldRequirements(account), \\\"Validator doesn't meet requirements\\\");\\n    require(meetsAccountLockedGoldRequirements(group), \\\"Group doesn't meet requirements\\\");\\n    Validator storage validator = validators[account];\\n    if (validator.affiliation != address(0)) {\\n      _deaffiliate(validator, account);\\n    }\\n    validator.affiliation = group;\\n    emit ValidatorAffiliated(account, group);\\n    return true;\\n  }\\n\\n  /**\\n   * @notice De-affiliates a validator, removing it from the group for which it is a member.\\n   * @return True upon success.\\n   * @dev Fails if the account is not a validator with non-zero affiliation.\\n   */\\n  function deaffiliate() external nonReentrant returns (bool) {\\n    address account = getAccounts().validatorSignerToAccount(msg.sender);\\n    require(isValidator(account), \\\"Not a validator\\\");\\n    Validator storage validator = validators[account];\\n    require(validator.affiliation != address(0), \\\"deaffiliate: not affiliated\\\");\\n    _deaffiliate(validator, account);\\n    return true;\\n  }\\n\\n  /**\\n   * @notice Updates a validator's BLS key.\\n   * @param blsPublicKey The BLS public key that the validator is using for consensus, should pass\\n   *   proof of possession. 48 bytes.\\n   * @param blsPop The BLS public key proof-of-possession, which consists of a signature on the\\n   *   account address. 48 bytes.\\n   * @return True upon success.\\n   */\\n  function updateBlsPublicKey(bytes calldata blsPublicKey, bytes calldata blsPop)\\n    external\\n    returns (bool)\\n  {\\n    address account = getAccounts().validatorSignerToAccount(msg.sender);\\n    require(isValidator(account), \\\"Not a validator\\\");\\n    Validator storage validator = validators[account];\\n    require(\\n      _updateBlsPublicKey(validator, account, blsPublicKey, blsPop),\\n      \\\"Error updating BLS public key\\\"\\n    );\\n    return true;\\n  }\\n\\n  /**\\n   * @notice Updates a validator's BLS key.\\n   * @param validator The validator whose BLS public key should be updated.\\n   * @param account The address under which the validator is registered.\\n   * @param blsPublicKey The BLS public key that the validator is using for consensus, should pass\\n   *   proof of possession. 96 bytes.\\n   * @param blsPop The BLS public key proof-of-possession, which consists of a signature on the\\n   *   account address. 48 bytes.\\n   * @return True upon success.\\n   */\\n  function _updateBlsPublicKey(\\n    Validator storage validator,\\n    address account,\\n    bytes memory blsPublicKey,\\n    bytes memory blsPop\\n  ) private returns (bool) {\\n    require(blsPublicKey.length == 96, \\\"Wrong BLS public key length\\\");\\n    require(blsPop.length == 48, \\\"Wrong BLS PoP length\\\");\\n    require(checkProofOfPossession(account, blsPublicKey, blsPop), \\\"Invalid BLS PoP\\\");\\n    validator.publicKeys.bls = blsPublicKey;\\n    emit ValidatorBlsPublicKeyUpdated(account, blsPublicKey);\\n    return true;\\n  }\\n\\n  /**\\n   * @notice Updates a validator's ECDSA key.\\n   * @param account The address under which the validator is registered.\\n   * @param signer The address which the validator is using to sign consensus messages.\\n   * @param ecdsaPublicKey The ECDSA public key corresponding to `signer`.\\n   * @return True upon success.\\n   */\\n  function updateEcdsaPublicKey(address account, address signer, bytes calldata ecdsaPublicKey)\\n    external\\n    onlyRegisteredContract(ACCOUNTS_REGISTRY_ID)\\n    returns (bool)\\n  {\\n    require(isValidator(account), \\\"Not a validator\\\");\\n    Validator storage validator = validators[account];\\n    require(\\n      _updateEcdsaPublicKey(validator, account, signer, ecdsaPublicKey),\\n      \\\"Error updating ECDSA public key\\\"\\n    );\\n    return true;\\n  }\\n\\n  /**\\n   * @notice Updates a validator's ECDSA key.\\n   * @param validator The validator whose ECDSA public key should be updated.\\n   * @param signer The address with which the validator is signing consensus messages.\\n   * @param ecdsaPublicKey The ECDSA public key that the validator is using for consensus. Should\\n   *   match `signer`. 64 bytes.\\n   * @return True upon success.\\n   */\\n  function _updateEcdsaPublicKey(\\n    Validator storage validator,\\n    address account,\\n    address signer,\\n    bytes memory ecdsaPublicKey\\n  ) private returns (bool) {\\n    require(ecdsaPublicKey.length == 64, \\\"Wrong ECDSA public key length\\\");\\n    require(\\n      address(uint160(uint256(keccak256(ecdsaPublicKey)))) == signer,\\n      \\\"ECDSA key does not match signer\\\"\\n    );\\n    validator.publicKeys.ecdsa = ecdsaPublicKey;\\n    emit ValidatorEcdsaPublicKeyUpdated(account, ecdsaPublicKey);\\n    return true;\\n  }\\n\\n  /**\\n   * @notice Updates a validator's ECDSA and BLS keys.\\n   * @param account The address under which the validator is registered.\\n   * @param signer The address which the validator is using to sign consensus messages.\\n   * @param ecdsaPublicKey The ECDSA public key corresponding to `signer`.\\n   * @param blsPublicKey The BLS public key that the validator is using for consensus, should pass\\n   *   proof of possession. 96 bytes.\\n   * @param blsPop The BLS public key proof-of-possession, which consists of a signature on the\\n   *   account address. 48 bytes.\\n   * @return True upon success.\\n   */\\n  function updatePublicKeys(\\n    address account,\\n    address signer,\\n    bytes calldata ecdsaPublicKey,\\n    bytes calldata blsPublicKey,\\n    bytes calldata blsPop\\n  ) external onlyRegisteredContract(ACCOUNTS_REGISTRY_ID) returns (bool) {\\n    require(isValidator(account), \\\"Not a validator\\\");\\n    Validator storage validator = validators[account];\\n    require(\\n      _updateEcdsaPublicKey(validator, account, signer, ecdsaPublicKey),\\n      \\\"Error updating ECDSA public key\\\"\\n    );\\n    require(\\n      _updateBlsPublicKey(validator, account, blsPublicKey, blsPop),\\n      \\\"Error updating BLS public key\\\"\\n    );\\n    return true;\\n  }\\n\\n  /**\\n   * @notice Registers a validator group with no member validators.\\n   * @param commission Fixidity representation of the commission this group receives on epoch\\n   *   payments made to its members.\\n   * @return True upon success.\\n   * @dev Fails if the account is already a validator or validator group.\\n   * @dev Fails if the account does not have sufficient weight.\\n   */\\n  function registerValidatorGroup(uint256 commission) external nonReentrant returns (bool) {\\n    require(commission <= FixidityLib.fixed1().unwrap(), \\\"Commission can't be greater than 100%\\\");\\n    address account = getAccounts().validatorSignerToAccount(msg.sender);\\n    _isRegistrationAllowed(account);\\n    require(!isValidator(account), \\\"Already registered as validator\\\");\\n    require(!isValidatorGroup(account), \\\"Already registered as group\\\");\\n    uint256 lockedGoldBalance = getLockedGold().getAccountTotalLockedGold(account);\\n    require(lockedGoldBalance >= groupLockedGoldRequirements.value, \\\"Not enough locked gold\\\");\\n    ValidatorGroup storage group = groups[account];\\n    group.exists = true;\\n    group.commission = FixidityLib.wrap(commission);\\n    group.slashInfo = SlashingInfo(FixidityLib.fixed1(), 0);\\n    registeredGroups.push(account);\\n    emit ValidatorGroupRegistered(account, commission);\\n    return true;\\n  }\\n\\n  function _isRegistrationAllowed(address account) private returns (bool) {\\n    require(\\n      !getElection().allowedToVoteOverMaxNumberOfGroups(account),\\n      \\\"Cannot vote for more than max number of groups\\\"\\n    );\\n    require(\\n      // Validator could avoid getting slashed by delegating Celo to delegatees that would be voting\\n      // for lots of proposals. Such transaction could run out of gas.\\n      getLockedGold().getAccountTotalDelegatedFraction(account) == 0,\\n      \\\"Cannot delegate governance power\\\"\\n    );\\n  }\\n\\n  /**\\n   * @notice De-registers a validator group.\\n   * @param index The index of this validator group in the list of all validator groups.\\n   * @return True upon success.\\n   * @dev Fails if the account is not a validator group with no members.\\n   * @dev Fails if the group has had members too recently.\\n   */\\n  function deregisterValidatorGroup(uint256 index) external nonReentrant returns (bool) {\\n    address account = getAccounts().validatorSignerToAccount(msg.sender);\\n    // Only Validator Groups that have never had members or have been empty for at least\\n    // `groupLockedGoldRequirements.duration` seconds can be deregistered.\\n    require(isValidatorGroup(account), \\\"Not a validator group\\\");\\n    require(groups[account].members.numElements == 0, \\\"Validator group not empty\\\");\\n    uint256[] storage sizeHistory = groups[account].sizeHistory;\\n    if (sizeHistory.length > 1) {\\n      require(\\n        sizeHistory[1].add(groupLockedGoldRequirements.duration) < now,\\n        \\\"Hasn't been empty for long enough\\\"\\n      );\\n    }\\n    delete groups[account];\\n    deleteElement(registeredGroups, account, index);\\n    emit ValidatorGroupDeregistered(account);\\n    return true;\\n  }\\n\\n  /**\\n   * @notice Adds a member to the end of a validator group's list of members.\\n   * @param validator The validator to add to the group\\n   * @return True upon success.\\n   * @dev Fails if `validator` has not set their affiliation to this account.\\n   * @dev Fails if the group has zero members.\\n   */\\n  function addMember(address validator) external nonReentrant returns (bool) {\\n    address account = getAccounts().validatorSignerToAccount(msg.sender);\\n    require(groups[account].members.numElements > 0, \\\"Validator group empty\\\");\\n    return _addMember(account, validator, address(0), address(0));\\n  }\\n\\n  /**\\n   * @notice Adds the first member to a group's list of members and marks it eligible for election.\\n   * @param validator The validator to add to the group\\n   * @param lesser The address of the group that has received fewer votes than this group.\\n   * @param greater The address of the group that has received more votes than this group.\\n   * @return True upon success.\\n   * @dev Fails if `validator` has not set their affiliation to this account.\\n   * @dev Fails if the group has > 0 members.\\n   */\\n  function addFirstMember(address validator, address lesser, address greater)\\n    external\\n    nonReentrant\\n    returns (bool)\\n  {\\n    address account = getAccounts().validatorSignerToAccount(msg.sender);\\n    require(groups[account].members.numElements == 0, \\\"Validator group not empty\\\");\\n    return _addMember(account, validator, lesser, greater);\\n  }\\n\\n  /**\\n   * @notice Adds a member to the end of a validator group's list of members.\\n   * @param group The address of the validator group.\\n   * @param validator The validator to add to the group.\\n   * @param lesser The address of the group that has received fewer votes than this group.\\n   * @param greater The address of the group that has received more votes than this group.\\n   * @return True upon success.\\n   * @dev Fails if `validator` has not set their affiliation to this account.\\n   * @dev Fails if the group has > 0 members.\\n   */\\n  function _addMember(address group, address validator, address lesser, address greater)\\n    private\\n    returns (bool)\\n  {\\n    require(isValidatorGroup(group) && isValidator(validator), \\\"Not validator and group\\\");\\n    ValidatorGroup storage _group = groups[group];\\n    require(_group.members.numElements < maxGroupSize, \\\"group would exceed maximum size\\\");\\n    require(validators[validator].affiliation == group, \\\"Not affiliated to group\\\");\\n    require(!_group.members.contains(validator), \\\"Already in group\\\");\\n    uint256 numMembers = _group.members.numElements.add(1);\\n    _group.members.push(validator);\\n    require(meetsAccountLockedGoldRequirements(group), \\\"Group requirements not met\\\");\\n    require(meetsAccountLockedGoldRequirements(validator), \\\"Validator requirements not met\\\");\\n    if (numMembers == 1) {\\n      getElection().markGroupEligible(group, lesser, greater);\\n    }\\n    updateMembershipHistory(validator, group);\\n    updateSizeHistory(group, numMembers.sub(1));\\n    emit ValidatorGroupMemberAdded(group, validator);\\n    return true;\\n  }\\n\\n  /**\\n   * @notice Removes a member from a validator group.\\n   * @param validator The validator to remove from the group\\n   * @return True upon success.\\n   * @dev Fails if `validator` is not a member of the account's group.\\n   */\\n  function removeMember(address validator) external nonReentrant returns (bool) {\\n    address account = getAccounts().validatorSignerToAccount(msg.sender);\\n    require(isValidatorGroup(account) && isValidator(validator), \\\"is not group and validator\\\");\\n    return _removeMember(account, validator);\\n  }\\n\\n  /**\\n   * @notice Reorders a member within a validator group.\\n   * @param validator The validator to reorder.\\n   * @param lesserMember The member who will be behind `validator`, or 0 if `validator` will be the\\n   *   last member.\\n   * @param greaterMember The member who will be ahead of `validator`, or 0 if `validator` will be\\n   *   the first member.\\n   * @return True upon success.\\n   * @dev Fails if `validator` is not a member of the account's validator group.\\n   */\\n  function reorderMember(address validator, address lesserMember, address greaterMember)\\n    external\\n    nonReentrant\\n    returns (bool)\\n  {\\n    address account = getAccounts().validatorSignerToAccount(msg.sender);\\n    require(isValidatorGroup(account), \\\"Not a group\\\");\\n    require(isValidator(validator), \\\"Not a validator\\\");\\n    ValidatorGroup storage group = groups[account];\\n    require(group.members.contains(validator), \\\"Not a member of the group\\\");\\n    group.members.update(validator, lesserMember, greaterMember);\\n    emit ValidatorGroupMemberReordered(account, validator);\\n    return true;\\n  }\\n\\n  /**\\n   * @notice Queues an update to a validator group's commission.\\n   * If there was a previously scheduled update, that is overwritten.\\n   * @param commission Fixidity representation of the commission this group receives on epoch\\n   *   payments made to its members. Must be in the range [0, 1.0].\\n   */\\n  function setNextCommissionUpdate(uint256 commission) external {\\n    address account = getAccounts().validatorSignerToAccount(msg.sender);\\n    require(isValidatorGroup(account), \\\"Not a validator group\\\");\\n    ValidatorGroup storage group = groups[account];\\n    require(commission <= FixidityLib.fixed1().unwrap(), \\\"Commission can't be greater than 100%\\\");\\n    require(commission != group.commission.unwrap(), \\\"Commission must be different\\\");\\n\\n    group.nextCommission = FixidityLib.wrap(commission);\\n    group.nextCommissionBlock = block.number.add(commissionUpdateDelay);\\n    emit ValidatorGroupCommissionUpdateQueued(account, commission, group.nextCommissionBlock);\\n  }\\n  /**\\n   * @notice Updates a validator group's commission based on the previously queued update\\n   */\\n  function updateCommission() external {\\n    address account = getAccounts().validatorSignerToAccount(msg.sender);\\n    require(isValidatorGroup(account), \\\"Not a validator group\\\");\\n    ValidatorGroup storage group = groups[account];\\n\\n    require(group.nextCommissionBlock != 0, \\\"No commission update queued\\\");\\n    require(group.nextCommissionBlock <= block.number, \\\"Can't apply commission update yet\\\");\\n\\n    group.commission = group.nextCommission;\\n    delete group.nextCommission;\\n    delete group.nextCommissionBlock;\\n    emit ValidatorGroupCommissionUpdated(account, group.commission.unwrap());\\n  }\\n\\n  /**\\n   * @notice Returns the current locked gold balance requirement for the supplied account.\\n   * @param account The account that may have to meet locked gold balance requirements.\\n   * @return The current locked gold balance requirement for the supplied account.\\n   */\\n  function getAccountLockedGoldRequirement(address account) public view returns (uint256) {\\n    if (isValidator(account)) {\\n      return validatorLockedGoldRequirements.value;\\n    } else if (isValidatorGroup(account)) {\\n      uint256 multiplier = Math.max(1, groups[account].members.numElements);\\n      uint256[] storage sizeHistory = groups[account].sizeHistory;\\n      if (sizeHistory.length > 0) {\\n        for (uint256 i = sizeHistory.length.sub(1); i > 0; i = i.sub(1)) {\\n          if (sizeHistory[i].add(groupLockedGoldRequirements.duration) >= now) {\\n            multiplier = Math.max(i, multiplier);\\n            break;\\n          }\\n        }\\n      }\\n      return groupLockedGoldRequirements.value.mul(multiplier);\\n    }\\n    return 0;\\n  }\\n\\n  /**\\n   * @notice Returns whether or not an account meets its Locked Gold requirements.\\n   * @param account The address of the account.\\n   * @return Whether or not an account meets its Locked Gold requirements.\\n   */\\n  function meetsAccountLockedGoldRequirements(address account) public view returns (bool) {\\n    uint256 balance = getLockedGold().getAccountTotalLockedGold(account);\\n    // Add a bit of \\\"wiggle room\\\" to accommodate the fact that vote activation can result in ~1\\n    // wei rounding errors. Using 10 as an additional margin of safety.\\n    return balance.add(10) >= getAccountLockedGoldRequirement(account);\\n  }\\n\\n  /**\\n   * @notice Returns the validator BLS key.\\n   * @param signer The account that registered the validator or its authorized signing address.\\n   * @return The validator BLS key.\\n   */\\n  function getValidatorBlsPublicKeyFromSigner(address signer)\\n    external\\n    view\\n    returns (bytes memory blsPublicKey)\\n  {\\n    address account = getAccounts().signerToAccount(signer);\\n    require(isValidator(account), \\\"Not a validator\\\");\\n    return validators[account].publicKeys.bls;\\n  }\\n\\n  /**\\n   * @notice Returns validator information.\\n   * @param account The account that registered the validator.\\n   * @return The unpacked validator struct.\\n   */\\n  function getValidator(address account)\\n    public\\n    view\\n    returns (\\n      bytes memory ecdsaPublicKey,\\n      bytes memory blsPublicKey,\\n      address affiliation,\\n      uint256 score,\\n      address signer\\n    )\\n  {\\n    require(isValidator(account), \\\"Not a validator\\\");\\n    Validator storage validator = validators[account];\\n    return (\\n      validator.publicKeys.ecdsa,\\n      validator.publicKeys.bls,\\n      validator.affiliation,\\n      validator.score.unwrap(),\\n      getAccounts().getValidatorSigner(account)\\n    );\\n  }\\n\\n  /**\\n   * @notice Returns validator group information.\\n   * @param account The account that registered the validator group.\\n   * @return keys The Keys.\\n   * @return commision The commision.\\n   * @return nextCommision The next commision.\\n   * @return nextCommisionBlock The next commision block.\\n   * @return size The Size history.\\n   * @return multiplier The multiplier.\\n   * @return lastSlashed The last slashed.\\n   */\\n  function getValidatorGroup(address account)\\n    external\\n    view\\n    returns (address[] memory, uint256, uint256, uint256, uint256[] memory, uint256, uint256)\\n  {\\n    require(isValidatorGroup(account), \\\"Not a validator group\\\");\\n    ValidatorGroup storage group = groups[account];\\n    return (\\n      group.members.getKeys(),\\n      group.commission.unwrap(),\\n      group.nextCommission.unwrap(),\\n      group.nextCommissionBlock,\\n      group.sizeHistory,\\n      group.slashInfo.multiplier.unwrap(),\\n      group.slashInfo.lastSlashed\\n    );\\n  }\\n\\n  /**\\n   * @notice Returns the number of members in a validator group.\\n   * @param account The address of the validator group.\\n   * @return The number of members in a validator group.\\n   */\\n  function getGroupNumMembers(address account) public view returns (uint256) {\\n    require(isValidatorGroup(account), \\\"Not validator group\\\");\\n    return groups[account].members.numElements;\\n  }\\n\\n  /**\\n   * @notice Returns the top n group members for a particular group.\\n   * @param account The address of the validator group.\\n   * @param n The number of members to return.\\n   * @return The top n group members for a particular group.\\n   */\\n  function getTopGroupValidators(address account, uint256 n)\\n    external\\n    view\\n    returns (address[] memory)\\n  {\\n    address[] memory topAccounts = groups[account].members.headN(n);\\n    address[] memory topValidators = new address[](n);\\n    for (uint256 i = 0; i < n; i = i.add(1)) {\\n      topValidators[i] = getAccounts().getValidatorSigner(topAccounts[i]);\\n    }\\n    return topValidators;\\n  }\\n\\n  /**\\n   * @notice Returns the number of members in the provided validator groups.\\n   * @param accounts The addresses of the validator groups.\\n   * @return The number of members in the provided validator groups.\\n   */\\n  function getGroupsNumMembers(address[] calldata accounts)\\n    external\\n    view\\n    returns (uint256[] memory)\\n  {\\n    uint256[] memory numMembers = new uint256[](accounts.length);\\n    for (uint256 i = 0; i < accounts.length; i = i.add(1)) {\\n      numMembers[i] = getGroupNumMembers(accounts[i]);\\n    }\\n    return numMembers;\\n  }\\n\\n  /**\\n   * @notice Returns the number of registered validators.\\n   * @return The number of registered validators.\\n   */\\n  function getNumRegisteredValidators() external view returns (uint256) {\\n    return registeredValidators.length;\\n  }\\n\\n  /**\\n   * @notice Returns the Locked Gold requirements for validators.\\n   * @return The Locked Gold value.\\n   * @return The Locked Gold duration.\\n   */\\n  function getValidatorLockedGoldRequirements() external view returns (uint256, uint256) {\\n    return (validatorLockedGoldRequirements.value, validatorLockedGoldRequirements.duration);\\n  }\\n\\n  /**\\n   * @notice Returns the Locked Gold requirements for validator groups.\\n   * @return The Locked Gold value.\\n   * @return The Locked Gold duration.\\n   */\\n  function getGroupLockedGoldRequirements() external view returns (uint256, uint256) {\\n    return (groupLockedGoldRequirements.value, groupLockedGoldRequirements.duration);\\n  }\\n\\n  /**\\n   * @notice Returns the list of registered validator accounts.\\n   * @return The list of registered validator accounts.\\n   */\\n  function getRegisteredValidators() external view returns (address[] memory) {\\n    return registeredValidators;\\n  }\\n\\n  /**\\n   * @notice Returns the list of signers for the registered validator accounts.\\n   * @return The list of signers for registered validator accounts.\\n   */\\n  function getRegisteredValidatorSigners() external view returns (address[] memory) {\\n    IAccounts accounts = getAccounts();\\n    address[] memory signers = new address[](registeredValidators.length);\\n    for (uint256 i = 0; i < signers.length; i = i.add(1)) {\\n      signers[i] = accounts.getValidatorSigner(registeredValidators[i]);\\n    }\\n    return signers;\\n  }\\n\\n  /**\\n   * @notice Returns the list of registered validator group accounts.\\n   * @return The list of registered validator group addresses.\\n   */\\n  function getRegisteredValidatorGroups() external view returns (address[] memory) {\\n    return registeredGroups;\\n  }\\n\\n  /**\\n   * @notice Returns whether a particular account has a registered validator group.\\n   * @param account The account.\\n   * @return Whether a particular address is a registered validator group.\\n   */\\n  function isValidatorGroup(address account) public view returns (bool) {\\n    return groups[account].exists;\\n  }\\n\\n  /**\\n   * @notice Returns whether a particular account has a registered validator.\\n   * @param account The account.\\n   * @return Whether a particular address is a registered validator.\\n   */\\n  function isValidator(address account) public view returns (bool) {\\n    return validators[account].publicKeys.bls.length > 0;\\n  }\\n\\n  /**\\n   * @notice Deletes an element from a list of addresses.\\n   * @param list The list of addresses.\\n   * @param element The address to delete.\\n   * @param index The index of `element` in the list.\\n   */\\n  function deleteElement(address[] storage list, address element, uint256 index) private {\\n    require(index < list.length && list[index] == element, \\\"deleteElement: index out of range\\\");\\n    uint256 lastIndex = list.length.sub(1);\\n    list[index] = list[lastIndex];\\n    delete list[lastIndex];\\n    list.length = lastIndex;\\n  }\\n\\n  /**\\n   * @notice Removes a member from a validator group.\\n   * @param group The group from which the member should be removed.\\n   * @param validator The validator to remove from the group.\\n   * @return True upon success.\\n   * @dev If `validator` was the only member of `group`, `group` becomes unelectable.\\n   * @dev Fails if `validator` is not a member of `group`.\\n   */\\n  function _removeMember(address group, address validator) private returns (bool) {\\n    ValidatorGroup storage _group = groups[group];\\n    require(validators[validator].affiliation == group, \\\"Not affiliated to group\\\");\\n    require(_group.members.contains(validator), \\\"Not a member of the group\\\");\\n    _group.members.remove(validator);\\n    uint256 numMembers = _group.members.numElements;\\n    // Empty validator groups are not electable.\\n    if (numMembers == 0) {\\n      getElection().markGroupIneligible(group);\\n    }\\n    updateMembershipHistory(validator, address(0));\\n    updateSizeHistory(group, numMembers.add(1));\\n    emit ValidatorGroupMemberRemoved(group, validator);\\n    return true;\\n  }\\n\\n  /**\\n   * @notice Updates the group membership history of a particular account.\\n   * @param account The account whose group membership has changed.\\n   * @param group The group that the account is now a member of.\\n   * @return True upon success.\\n   * @dev Note that this is used to determine a validator's membership at the time of an election,\\n   *   and so group changes within an epoch will overwrite eachother.\\n   */\\n  function updateMembershipHistory(address account, address group) private returns (bool) {\\n    MembershipHistory storage history = validators[account].membershipHistory;\\n    uint256 epochNumber = getEpochNumber();\\n    uint256 head = history.numEntries == 0 ? 0 : history.tail.add(history.numEntries.sub(1));\\n\\n    if (history.numEntries > 0 && group == address(0)) {\\n      history.lastRemovedFromGroupTimestamp = now;\\n    }\\n\\n    if (history.numEntries > 0 && history.entries[head].epochNumber == epochNumber) {\\n      // There have been no elections since the validator last changed membership, overwrite the\\n      // previous entry.\\n      history.entries[head] = MembershipHistoryEntry(epochNumber, group);\\n      return true;\\n    }\\n\\n    // There have been elections since the validator last changed membership, create a new entry.\\n    uint256 index = history.numEntries == 0 ? 0 : head.add(1);\\n    history.entries[index] = MembershipHistoryEntry(epochNumber, group);\\n    if (history.numEntries < membershipHistoryLength) {\\n      // Not enough entries, don't remove any.\\n      history.numEntries = history.numEntries.add(1);\\n    } else if (history.numEntries == membershipHistoryLength) {\\n      // Exactly enough entries, delete the oldest one to account for the one we added.\\n      delete history.entries[history.tail];\\n      history.tail = history.tail.add(1);\\n    } else {\\n      // Too many entries, delete the oldest two to account for the one we added.\\n      delete history.entries[history.tail];\\n      delete history.entries[history.tail.add(1)];\\n      history.numEntries = history.numEntries.sub(1);\\n      history.tail = history.tail.add(2);\\n    }\\n    return true;\\n  }\\n\\n  /**\\n   * @notice Updates the size history of a validator group.\\n   * @param group The account whose group size has changed.\\n   * @param size The new size of the group.\\n   * @dev Used to determine how much gold an account needs to keep locked.\\n   */\\n  function updateSizeHistory(address group, uint256 size) private {\\n    uint256[] storage sizeHistory = groups[group].sizeHistory;\\n    if (size == sizeHistory.length) {\\n      sizeHistory.push(now);\\n    } else if (size < sizeHistory.length) {\\n      sizeHistory[size] = now;\\n    } else {\\n      require(false, \\\"Unable to update size history\\\");\\n    }\\n  }\\n\\n  /**\\n   * @notice Returns the group that `account` was a member of at the end of the last epoch.\\n   * @param signer The signer of the account whose group membership should be returned.\\n   * @return The group that `account` was a member of at the end of the last epoch.\\n   */\\n  function getMembershipInLastEpochFromSigner(address signer) external view returns (address) {\\n    address account = getAccounts().signerToAccount(signer);\\n    require(isValidator(account), \\\"Not a validator\\\");\\n    return getMembershipInLastEpoch(account);\\n  }\\n\\n  /**\\n   * @notice Returns the group that `account` was a member of at the end of the last epoch.\\n   * @param account The account whose group membership should be returned.\\n   * @return The group that `account` was a member of at the end of the last epoch.\\n   */\\n  function getMembershipInLastEpoch(address account) public view returns (address) {\\n    uint256 epochNumber = getEpochNumber();\\n    MembershipHistory storage history = validators[account].membershipHistory;\\n    uint256 head = history.numEntries == 0 ? 0 : history.tail.add(history.numEntries.sub(1));\\n    // If the most recent entry in the membership history is for the current epoch number, we need\\n    // to look at the previous entry.\\n    if (history.entries[head].epochNumber == epochNumber) {\\n      if (head > history.tail) {\\n        head = head.sub(1);\\n      }\\n    }\\n    return history.entries[head].group;\\n  }\\n\\n  /**\\n   * @notice De-affiliates a validator, removing it from the group for which it is a member.\\n   * @param validator The validator to deaffiliate from their affiliated validator group.\\n   * @param validatorAccount The LockedGold account of the validator.\\n   * @return True upon success.\\n   */\\n  function _deaffiliate(Validator storage validator, address validatorAccount)\\n    private\\n    returns (bool)\\n  {\\n    address affiliation = validator.affiliation;\\n    ValidatorGroup storage group = groups[affiliation];\\n    if (group.members.contains(validatorAccount)) {\\n      _removeMember(affiliation, validatorAccount);\\n    }\\n    validator.affiliation = address(0);\\n    emit ValidatorDeaffiliated(validatorAccount, affiliation);\\n    return true;\\n  }\\n\\n  /**\\n   * @notice Removes a validator from the group for which it is a member.\\n   * @param validatorAccount The validator to deaffiliate from their affiliated validator group.\\n   */\\n  function forceDeaffiliateIfValidator(address validatorAccount) external nonReentrant onlySlasher {\\n    if (isValidator(validatorAccount)) {\\n      Validator storage validator = validators[validatorAccount];\\n      if (validator.affiliation != address(0)) {\\n        _deaffiliate(validator, validatorAccount);\\n      }\\n    }\\n  }\\n\\n  /**\\n   * @notice Sets the slashingMultiplierRestPeriod property if called by owner.\\n   * @param value New reset period for slashing multiplier.\\n   */\\n  function setSlashingMultiplierResetPeriod(uint256 value) public nonReentrant onlyOwner {\\n    slashingMultiplierResetPeriod = value;\\n  }\\n\\n  /**\\n   * @notice Sets the downtimeGracePeriod property if called by owner.\\n   * @param value New downtime grace period for calculating epoch scores.\\n   */\\n  function setDowntimeGracePeriod(uint256 value) public nonReentrant onlyOwner {\\n    downtimeGracePeriod = value;\\n  }\\n\\n  /**\\n   * @notice Resets a group's slashing multiplier if it has been >= the reset period since\\n   *         the last time the group was slashed.\\n   */\\n  function resetSlashingMultiplier() external nonReentrant {\\n    address account = getAccounts().validatorSignerToAccount(msg.sender);\\n    require(isValidatorGroup(account), \\\"Not a validator group\\\");\\n    ValidatorGroup storage group = groups[account];\\n    require(\\n      now >= group.slashInfo.lastSlashed.add(slashingMultiplierResetPeriod),\\n      \\\"`resetSlashingMultiplier` called before resetPeriod expired\\\"\\n    );\\n    group.slashInfo.multiplier = FixidityLib.fixed1();\\n  }\\n\\n  /**\\n   * @notice Halves the group's slashing multiplier.\\n   * @param account The group being slashed.\\n   */\\n  function halveSlashingMultiplier(address account) external nonReentrant onlySlasher {\\n    require(isValidatorGroup(account), \\\"Not a validator group\\\");\\n    ValidatorGroup storage group = groups[account];\\n    group.slashInfo.multiplier = FixidityLib.wrap(group.slashInfo.multiplier.unwrap().div(2));\\n    group.slashInfo.lastSlashed = now;\\n  }\\n\\n  /**\\n   * @notice Getter for a group's slashing multiplier.\\n   * @param account The group to fetch slashing multiplier for.\\n   */\\n  function getValidatorGroupSlashingMultiplier(address account) external view returns (uint256) {\\n    require(isValidatorGroup(account), \\\"Not a validator group\\\");\\n    ValidatorGroup storage group = groups[account];\\n    return group.slashInfo.multiplier.unwrap();\\n  }\\n\\n  /**\\n   * @notice Returns the group that `account` was a member of during `epochNumber`.\\n   * @param account The account whose group membership should be returned.\\n   * @param epochNumber The epoch number we are querying this account's membership at.\\n   * @param index The index into the validator's history struct for their history at `epochNumber`.\\n   * @return The group that `account` was a member of during `epochNumber`.\\n   */\\n  function groupMembershipInEpoch(address account, uint256 epochNumber, uint256 index)\\n    external\\n    view\\n    returns (address)\\n  {\\n    require(isValidator(account), \\\"Not a validator\\\");\\n    require(epochNumber <= getEpochNumber(), \\\"Epoch cannot be larger than current\\\");\\n    MembershipHistory storage history = validators[account].membershipHistory;\\n    require(index < history.tail.add(history.numEntries), \\\"index out of bounds\\\");\\n    require(index >= history.tail && history.numEntries > 0, \\\"index out of bounds\\\");\\n    bool isExactMatch = history.entries[index].epochNumber == epochNumber;\\n    bool isLastEntry = index.sub(history.tail) == history.numEntries.sub(1);\\n    bool isWithinRange = history.entries[index].epochNumber < epochNumber &&\\n      (history.entries[index.add(1)].epochNumber > epochNumber || isLastEntry);\\n    require(\\n      isExactMatch || isWithinRange,\\n      \\\"provided index does not match provided epochNumber at index in history.\\\"\\n    );\\n    return history.entries[index].group;\\n  }\\n\\n}\\n\",\"keccak256\":\"0x576a37815e6d2d09826e7f82d14ab1a44709e1aad854c50463d1fb93ea902be7\"},\"project:/contracts/governance/interfaces/IElection.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.5.13 <0.9.0;\\n\\ninterface IElection {\\n  function electValidatorSigners() external view returns (address[] memory);\\n  function electNValidatorSigners(uint256, uint256) external view returns (address[] memory);\\n  function vote(address, uint256, address, address) external returns (bool);\\n  function activate(address) external returns (bool);\\n  function revokeActive(address, uint256, address, address, uint256) external returns (bool);\\n  function revokeAllActive(address, address, address, uint256) external returns (bool);\\n  function revokePending(address, uint256, address, address, uint256) external returns (bool);\\n  function markGroupIneligible(address) external;\\n  function markGroupEligible(address, address, address) external;\\n  function allowedToVoteOverMaxNumberOfGroups(address) external returns (bool);\\n  function forceDecrementVotes(\\n    address,\\n    uint256,\\n    address[] calldata,\\n    address[] calldata,\\n    uint256[] calldata\\n  ) external returns (uint256);\\n  function setAllowedToVoteOverMaxNumberOfGroups(bool flag) external;\\n\\n  // view functions\\n  function getElectableValidators() external view returns (uint256, uint256);\\n  function getElectabilityThreshold() external view returns (uint256);\\n  function getNumVotesReceivable(address) external view returns (uint256);\\n  function getTotalVotes() external view returns (uint256);\\n  function getActiveVotes() external view returns (uint256);\\n  function getTotalVotesByAccount(address) external view returns (uint256);\\n  function getPendingVotesForGroupByAccount(address, address) external view returns (uint256);\\n  function getActiveVotesForGroupByAccount(address, address) external view returns (uint256);\\n  function getTotalVotesForGroupByAccount(address, address) external view returns (uint256);\\n  function getActiveVoteUnitsForGroupByAccount(address, address) external view returns (uint256);\\n  function getTotalVotesForGroup(address) external view returns (uint256);\\n  function getActiveVotesForGroup(address) external view returns (uint256);\\n  function getPendingVotesForGroup(address) external view returns (uint256);\\n  function getGroupEligibility(address) external view returns (bool);\\n  function getGroupEpochRewards(address, uint256, uint256[] calldata)\\n    external\\n    view\\n    returns (uint256);\\n  function getGroupsVotedForByAccount(address) external view returns (address[] memory);\\n  function getEligibleValidatorGroups() external view returns (address[] memory);\\n  function getTotalVotesForEligibleValidatorGroups()\\n    external\\n    view\\n    returns (address[] memory, uint256[] memory);\\n  function getCurrentValidatorSigners() external view returns (address[] memory);\\n  function canReceiveVotes(address, uint256) external view returns (bool);\\n  function hasActivatablePendingVotes(address, address) external view returns (bool);\\n  function validatorSignerAddressFromCurrentSet(uint256 index) external view returns (address);\\n  function numberValidatorsInCurrentSet() external view returns (uint256);\\n\\n  // only owner\\n  function setElectableValidators(uint256, uint256) external returns (bool);\\n  function setMaxNumGroupsVotedFor(uint256) external returns (bool);\\n  function setElectabilityThreshold(uint256) external returns (bool);\\n\\n  // only VM\\n  function distributeEpochRewards(address, uint256, address, address) external;\\n}\\n\",\"keccak256\":\"0x2b7195aaef2f49cfd9a5b1106fd6841701e0dc92752b97d4909947b3127460c7\"},\"project:/contracts/governance/interfaces/IGovernance.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.5.13 <0.9.0;\\n\\ninterface IGovernance {\\n  function removeVotesWhenRevokingDelegatedVotes(address account, uint256 maxAmountAllowed)\\n    external;\\n  function votePartially(\\n    uint256 proposalId,\\n    uint256 index,\\n    uint256 yesVotes,\\n    uint256 noVotes,\\n    uint256 abstainVotes\\n  ) external returns (bool);\\n\\n  function isVoting(address) external view returns (bool);\\n  function getAmountOfGoldUsedForVoting(address account) external view returns (uint256);\\n\\n  function getProposal(uint256 proposalId)\\n    external\\n    view\\n    returns (address, uint256, uint256, uint256, string memory, uint256, bool);\\n\\n  function getReferendumStageDuration() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x19499ae304c70805e523ebf674c2983e8dc428f49a9da5b89e8450c2cd12997b\"},\"project:/contracts/governance/interfaces/ILockedGold.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.5.13 <0.9.0;\\n\\ninterface ILockedGold {\\n  function lock() external payable;\\n  function incrementNonvotingAccountBalance(address, uint256) external;\\n  function decrementNonvotingAccountBalance(address, uint256) external;\\n  function getAccountTotalLockedGold(address) external view returns (uint256);\\n  function getTotalLockedGold() external view returns (uint256);\\n  function getPendingWithdrawals(address)\\n    external\\n    view\\n    returns (uint256[] memory, uint256[] memory);\\n  function getPendingWithdrawal(address account, uint256 index)\\n    external\\n    view\\n    returns (uint256, uint256);\\n  function getTotalPendingWithdrawals(address) external view returns (uint256);\\n  function unlock(uint256) external;\\n  function relock(uint256, uint256) external;\\n  function withdraw(uint256) external;\\n  function slash(\\n    address account,\\n    uint256 penalty,\\n    address reporter,\\n    uint256 reward,\\n    address[] calldata lessers,\\n    address[] calldata greaters,\\n    uint256[] calldata indices\\n  ) external;\\n  function isSlasher(address) external view returns (bool);\\n\\n  function getAccountTotalDelegatedFraction(address account) external view returns (uint256);\\n\\n  function getAccountTotalGovernanceVotingPower(address account) external view returns (uint256);\\n  function unlockingPeriod() external view returns (uint256);\\n  function getAccountNonvotingLockedGold(address account) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xcb6530457f85fc492a9714baca95f52a915dc91472cbd1f987ab4347d2e2d1bc\"},\"project:/contracts/governance/interfaces/IValidators.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.5.13 <0.9.0;\\n\\ninterface IValidators {\\n  function registerValidator(bytes calldata, bytes calldata, bytes calldata)\\n    external\\n    returns (bool);\\n  function deregisterValidator(uint256) external returns (bool);\\n  function affiliate(address) external returns (bool);\\n  function deaffiliate() external returns (bool);\\n  function updateBlsPublicKey(bytes calldata, bytes calldata) external returns (bool);\\n  function registerValidatorGroup(uint256) external returns (bool);\\n  function deregisterValidatorGroup(uint256) external returns (bool);\\n  function addMember(address) external returns (bool);\\n  function addFirstMember(address, address, address) external returns (bool);\\n  function removeMember(address) external returns (bool);\\n  function reorderMember(address, address, address) external returns (bool);\\n  function updateCommission() external;\\n  function setNextCommissionUpdate(uint256) external;\\n  function resetSlashingMultiplier() external;\\n\\n  // only owner\\n  function setCommissionUpdateDelay(uint256) external;\\n  function setMaxGroupSize(uint256) external returns (bool);\\n  function setMembershipHistoryLength(uint256) external returns (bool);\\n  function setValidatorScoreParameters(uint256, uint256) external returns (bool);\\n  function setGroupLockedGoldRequirements(uint256, uint256) external returns (bool);\\n  function setValidatorLockedGoldRequirements(uint256, uint256) external returns (bool);\\n  function setSlashingMultiplierResetPeriod(uint256) external;\\n\\n  // view functions\\n  function getMaxGroupSize() external view returns (uint256);\\n  function getCommissionUpdateDelay() external view returns (uint256);\\n  function getValidatorScoreParameters() external view returns (uint256, uint256);\\n  function getMembershipHistory(address)\\n    external\\n    view\\n    returns (uint256[] memory, address[] memory, uint256, uint256);\\n  function calculateEpochScore(uint256) external view returns (uint256);\\n  function calculateGroupEpochScore(uint256[] calldata) external view returns (uint256);\\n  function getAccountLockedGoldRequirement(address) external view returns (uint256);\\n  function meetsAccountLockedGoldRequirements(address) external view returns (bool);\\n  function getValidatorBlsPublicKeyFromSigner(address) external view returns (bytes memory);\\n  function getValidator(address account)\\n    external\\n    view\\n    returns (bytes memory, bytes memory, address, uint256, address);\\n  function getValidatorGroup(address)\\n    external\\n    view\\n    returns (address[] memory, uint256, uint256, uint256, uint256[] memory, uint256, uint256);\\n  function getGroupNumMembers(address) external view returns (uint256);\\n  function getTopGroupValidators(address, uint256) external view returns (address[] memory);\\n  function getGroupsNumMembers(address[] calldata accounts)\\n    external\\n    view\\n    returns (uint256[] memory);\\n  function getNumRegisteredValidators() external view returns (uint256);\\n  function groupMembershipInEpoch(address, uint256, uint256) external view returns (address);\\n\\n  // only registered contract\\n  function updateEcdsaPublicKey(address, address, bytes calldata) external returns (bool);\\n  function updatePublicKeys(address, address, bytes calldata, bytes calldata, bytes calldata)\\n    external\\n    returns (bool);\\n  function getValidatorLockedGoldRequirements() external view returns (uint256, uint256);\\n  function getGroupLockedGoldRequirements() external view returns (uint256, uint256);\\n  function getRegisteredValidators() external view returns (address[] memory);\\n  function getRegisteredValidatorSigners() external view returns (address[] memory);\\n  function getRegisteredValidatorGroups() external view returns (address[] memory);\\n  function isValidatorGroup(address) external view returns (bool);\\n  function isValidator(address) external view returns (bool);\\n  function getValidatorGroupSlashingMultiplier(address) external view returns (uint256);\\n  function getMembershipInLastEpoch(address) external view returns (address);\\n  function getMembershipInLastEpochFromSigner(address) external view returns (address);\\n\\n  // only VM\\n  function updateValidatorScoreFromSigner(address, uint256) external;\\n  function distributeEpochPaymentsFromSigner(address, uint256) external returns (uint256);\\n\\n  // only slasher\\n  function forceDeaffiliateIfValidator(address) external;\\n  function halveSlashingMultiplier(address) external;\\n\\n}\\n\",\"keccak256\":\"0xedb1f9717f0ea77f30cb7fa40bfd3704dcfdc17252082c4bf5caaea205c83d9a\"},\"project:/contracts/governance/test/ValidatorsTest.sol\":{\"content\":\"pragma solidity ^0.5.13;\\n\\nimport \\\"../Validators.sol\\\";\\nimport \\\"../../common/FixidityLib.sol\\\";\\n\\n/**\\n * @title A wrapper around Validators that exposes onlyVm functions for testing.\\n */\\ncontract ValidatorsTest is Validators(true) {\\n  function updateValidatorScoreFromSigner(address signer, uint256 uptime) external {\\n    return _updateValidatorScoreFromSigner(signer, uptime);\\n  }\\n\\n  function distributeEpochPaymentsFromSigner(address signer, uint256 maxPayment)\\n    external\\n    returns (uint256)\\n  {\\n    return _distributeEpochPaymentsFromSigner(signer, maxPayment);\\n  }\\n}\\n\",\"keccak256\":\"0x457aa0a57437672f6297739f15fdfe7aa1ee2c699669be573de8ade2b7fbf078\"},\"project:/contracts/identity/interfaces/IAttestations.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.5.13 <0.9.0;\\n\\ninterface IAttestations {\\n  function revoke(bytes32, uint256) external;\\n  function withdraw(address) external;\\n\\n  // view functions\\n  function getUnselectedRequest(bytes32, address) external view returns (uint32, uint32, address);\\n  function getAttestationIssuers(bytes32, address) external view returns (address[] memory);\\n  function getAttestationStats(bytes32, address) external view returns (uint32, uint32);\\n  function batchGetAttestationStats(bytes32[] calldata)\\n    external\\n    view\\n    returns (uint256[] memory, address[] memory, uint64[] memory, uint64[] memory);\\n  function getAttestationState(bytes32, address, address)\\n    external\\n    view\\n    returns (uint8, uint32, address);\\n  function getCompletableAttestations(bytes32, address)\\n    external\\n    view\\n    returns (uint32[] memory, address[] memory, uint256[] memory, bytes memory);\\n  function getAttestationRequestFee(address) external view returns (uint256);\\n  function getMaxAttestations() external view returns (uint256);\\n  function validateAttestationCode(bytes32, address, uint8, bytes32, bytes32)\\n    external\\n    view\\n    returns (address);\\n  function lookupAccountsForIdentifier(bytes32) external view returns (address[] memory);\\n  function requireNAttestationsRequested(bytes32, address, uint32) external view;\\n\\n  // only owner\\n  function setAttestationRequestFee(address, uint256) external;\\n  function setAttestationExpiryBlocks(uint256) external;\\n  function setSelectIssuersWaitBlocks(uint256) external;\\n  function setMaxAttestations(uint256) external;\\n}\\n\",\"keccak256\":\"0x18698a475dc0c9ea8a4c53ab5e42407f34a7c676d7b713c1507b43669f860e74\"},\"project:/contracts/identity/interfaces/IRandom.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.5.13 <0.9.0;\\n\\ninterface IRandom {\\n  function revealAndCommit(bytes32, bytes32, address) external;\\n  function randomnessBlockRetentionWindow() external view returns (uint256);\\n  function random() external view returns (bytes32);\\n  function getBlockRandomness(uint256) external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xdb545530be6397d23692e4465f4514cf3c87c1d4f553323964694818c375c08d\"},\"project:/contracts/stability/interfaces/ISortedOracles.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.5.13 <0.9.0;\\n\\ninterface ISortedOracles {\\n  function addOracle(address, address) external;\\n  function removeOracle(address, address, uint256) external;\\n  function report(address, uint256, address, address) external;\\n  function removeExpiredReports(address, uint256) external;\\n  function isOldestReportExpired(address token) external view returns (bool, address);\\n  function numRates(address) external view returns (uint256);\\n  function medianRate(address) external view returns (uint256, uint256);\\n  function numTimestamps(address) external view returns (uint256);\\n  function medianTimestamp(address) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xc9d69b608b060effe4a0b246e7fad096b524b848aa51d8f4eccad36c1aa0479d\"},\"project:/lib/mento-core/contracts/interfaces/IExchange.sol\":{\"content\":\"pragma solidity ^0.5.13;\\n\\ninterface IExchange {\\n    function buy(\\n        uint256,\\n        uint256,\\n        bool\\n    ) external returns (uint256);\\n\\n    function sell(\\n        uint256,\\n        uint256,\\n        bool\\n    ) external returns (uint256);\\n\\n    function exchange(\\n        uint256,\\n        uint256,\\n        bool\\n    ) external returns (uint256);\\n\\n    function setUpdateFrequency(uint256) external;\\n\\n    function getBuyTokenAmount(uint256, bool) external view returns (uint256);\\n\\n    function getSellTokenAmount(uint256, bool) external view returns (uint256);\\n\\n    function getBuyAndSellBuckets(bool) external view returns (uint256, uint256);\\n}\\n\",\"keccak256\":\"0x320488022d1066ac81797b9e7a3dc303d1c8e9a48597972d4686e00f9554ade9\"},\"project:/lib/mento-core/contracts/interfaces/IReserve.sol\":{\"content\":\"pragma solidity ^0.5.13;\\n\\ninterface IReserve {\\n    function setTobinTaxStalenessThreshold(uint256) external;\\n\\n    function addToken(address) external returns (bool);\\n\\n    function removeToken(address, uint256) external returns (bool);\\n\\n    function transferGold(address payable, uint256) external returns (bool);\\n\\n    function transferExchangeGold(address payable, uint256) external returns (bool);\\n\\n    function getReserveGoldBalance() external view returns (uint256);\\n\\n    function getUnfrozenReserveGoldBalance() external view returns (uint256);\\n\\n    function getOrComputeTobinTax() external returns (uint256, uint256);\\n\\n    function getTokens() external view returns (address[] memory);\\n\\n    function getReserveRatio() external view returns (uint256);\\n\\n    function addExchangeSpender(address) external;\\n\\n    function removeExchangeSpender(address, uint256) external;\\n\\n    function addSpender(address) external;\\n\\n    function removeSpender(address) external;\\n}\\n\",\"keccak256\":\"0x9162b458dc21fe7e6cfc5d4722b3db3001b1c54ecdcefa703ff9d902084150b7\"},\"project:/lib/mento-core/contracts/interfaces/IStableToken.sol\":{\"content\":\"pragma solidity ^0.5.13;\\n\\n/**\\n * @title This interface describes the functions specific to Celo Stable Tokens, and in the\\n * absence of interface inheritance is intended as a companion to IERC20.sol and ICeloToken.sol.\\n */\\ninterface IStableToken {\\n    function mint(address, uint256) external returns (bool);\\n\\n    function burn(uint256) external returns (bool);\\n\\n    function setInflationParameters(uint256, uint256) external;\\n\\n    function valueToUnits(uint256) external view returns (uint256);\\n\\n    function unitsToValue(uint256) external view returns (uint256);\\n\\n    function getInflationParameters()\\n        external\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256\\n        );\\n\\n    // NOTE: duplicated with IERC20.sol, remove once interface inheritance is supported.\\n    function balanceOf(address) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xcb6440c9b161b26a5b062e6c74d6fd1ed9736f292161c757406a9c39e942d20a\"},\"solidity-bytes-utils/contracts/BytesLib.sol\":{\"content\":\"/*\\n * @title Solidity Bytes Arrays Utils\\n * @author Gon\\u00e7alo S\\u00e1 <goncalo.sa@consensys.net>\\n *\\n * @dev Bytes tightly packed arrays utility library for ethereum contracts written in Solidity.\\n *      The library lets you concatenate, slice and type cast bytes arrays both in memory and storage.\\n */\\n\\npragma solidity ^0.5.0;\\n\\n\\nlibrary BytesLib {\\n    function concat(\\n        bytes memory _preBytes,\\n        bytes memory _postBytes\\n    )\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        bytes memory tempBytes;\\n\\n        assembly {\\n            // Get a location of some free memory and store it in tempBytes as\\n            // Solidity does for memory variables.\\n            tempBytes := mload(0x40)\\n\\n            // Store the length of the first bytes array at the beginning of\\n            // the memory for tempBytes.\\n            let length := mload(_preBytes)\\n            mstore(tempBytes, length)\\n\\n            // Maintain a memory counter for the current write location in the\\n            // temp bytes array by adding the 32 bytes for the array length to\\n            // the starting location.\\n            let mc := add(tempBytes, 0x20)\\n            // Stop copying when the memory counter reaches the length of the\\n            // first bytes array.\\n            let end := add(mc, length)\\n\\n            for {\\n                // Initialize a copy counter to the start of the _preBytes data,\\n                // 32 bytes into its memory.\\n                let cc := add(_preBytes, 0x20)\\n            } lt(mc, end) {\\n                // Increase both counters by 32 bytes each iteration.\\n                mc := add(mc, 0x20)\\n                cc := add(cc, 0x20)\\n            } {\\n                // Write the _preBytes data into the tempBytes memory 32 bytes\\n                // at a time.\\n                mstore(mc, mload(cc))\\n            }\\n\\n            // Add the length of _postBytes to the current length of tempBytes\\n            // and store it as the new length in the first 32 bytes of the\\n            // tempBytes memory.\\n            length := mload(_postBytes)\\n            mstore(tempBytes, add(length, mload(tempBytes)))\\n\\n            // Move the memory counter back from a multiple of 0x20 to the\\n            // actual end of the _preBytes data.\\n            mc := end\\n            // Stop copying when the memory counter reaches the new combined\\n            // length of the arrays.\\n            end := add(mc, length)\\n\\n            for {\\n                let cc := add(_postBytes, 0x20)\\n            } lt(mc, end) {\\n                mc := add(mc, 0x20)\\n                cc := add(cc, 0x20)\\n            } {\\n                mstore(mc, mload(cc))\\n            }\\n\\n            // Update the free-memory pointer by padding our last write location\\n            // to 32 bytes: add 31 bytes to the end of tempBytes to move to the\\n            // next 32 byte block, then round down to the nearest multiple of\\n            // 32. If the sum of the length of the two arrays is zero then add \\n            // one before rounding down to leave a blank 32 bytes (the length block with 0).\\n            mstore(0x40, and(\\n              add(add(end, iszero(add(length, mload(_preBytes)))), 31),\\n              not(31) // Round down to the nearest 32 bytes.\\n            ))\\n        }\\n\\n        return tempBytes;\\n    }\\n\\n    function concatStorage(bytes storage _preBytes, bytes memory _postBytes) internal {\\n        assembly {\\n            // Read the first 32 bytes of _preBytes storage, which is the length\\n            // of the array. (We don't need to use the offset into the slot\\n            // because arrays use the entire slot.)\\n            let fslot := sload(_preBytes_slot)\\n            // Arrays of 31 bytes or less have an even value in their slot,\\n            // while longer arrays have an odd value. The actual length is\\n            // the slot divided by two for odd values, and the lowest order\\n            // byte divided by two for even values.\\n            // If the slot is even, bitwise and the slot with 255 and divide by\\n            // two to get the length. If the slot is odd, bitwise and the slot\\n            // with -1 and divide by two.\\n            let slength := div(and(fslot, sub(mul(0x100, iszero(and(fslot, 1))), 1)), 2)\\n            let mlength := mload(_postBytes)\\n            let newlength := add(slength, mlength)\\n            // slength can contain both the length and contents of the array\\n            // if length < 32 bytes so let's prepare for that\\n            // v. http://solidity.readthedocs.io/en/latest/miscellaneous.html#layout-of-state-variables-in-storage\\n            switch add(lt(slength, 32), lt(newlength, 32))\\n            case 2 {\\n                // Since the new array still fits in the slot, we just need to\\n                // update the contents of the slot.\\n                // uint256(bytes_storage) = uint256(bytes_storage) + uint256(bytes_memory) + new_length\\n                sstore(\\n                    _preBytes_slot,\\n                    // all the modifications to the slot are inside this\\n                    // next block\\n                    add(\\n                        // we can just add to the slot contents because the\\n                        // bytes we want to change are the LSBs\\n                        fslot,\\n                        add(\\n                            mul(\\n                                div(\\n                                    // load the bytes from memory\\n                                    mload(add(_postBytes, 0x20)),\\n                                    // zero all bytes to the right\\n                                    exp(0x100, sub(32, mlength))\\n                                ),\\n                                // and now shift left the number of bytes to\\n                                // leave space for the length in the slot\\n                                exp(0x100, sub(32, newlength))\\n                            ),\\n                            // increase length by the double of the memory\\n                            // bytes length\\n                            mul(mlength, 2)\\n                        )\\n                    )\\n                )\\n            }\\n            case 1 {\\n                // The stored value fits in the slot, but the combined value\\n                // will exceed it.\\n                // get the keccak hash to get the contents of the array\\n                mstore(0x0, _preBytes_slot)\\n                let sc := add(keccak256(0x0, 0x20), div(slength, 32))\\n\\n                // save new length\\n                sstore(_preBytes_slot, add(mul(newlength, 2), 1))\\n\\n                // The contents of the _postBytes array start 32 bytes into\\n                // the structure. Our first read should obtain the `submod`\\n                // bytes that can fit into the unused space in the last word\\n                // of the stored array. To get this, we read 32 bytes starting\\n                // from `submod`, so the data we read overlaps with the array\\n                // contents by `submod` bytes. Masking the lowest-order\\n                // `submod` bytes allows us to add that value directly to the\\n                // stored value.\\n\\n                let submod := sub(32, slength)\\n                let mc := add(_postBytes, submod)\\n                let end := add(_postBytes, mlength)\\n                let mask := sub(exp(0x100, submod), 1)\\n\\n                sstore(\\n                    sc,\\n                    add(\\n                        and(\\n                            fslot,\\n                            0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00\\n                        ),\\n                        and(mload(mc), mask)\\n                    )\\n                )\\n\\n                for {\\n                    mc := add(mc, 0x20)\\n                    sc := add(sc, 1)\\n                } lt(mc, end) {\\n                    sc := add(sc, 1)\\n                    mc := add(mc, 0x20)\\n                } {\\n                    sstore(sc, mload(mc))\\n                }\\n\\n                mask := exp(0x100, sub(mc, end))\\n\\n                sstore(sc, mul(div(mload(mc), mask), mask))\\n            }\\n            default {\\n                // get the keccak hash to get the contents of the array\\n                mstore(0x0, _preBytes_slot)\\n                // Start copying to the last used word of the stored array.\\n                let sc := add(keccak256(0x0, 0x20), div(slength, 32))\\n\\n                // save new length\\n                sstore(_preBytes_slot, add(mul(newlength, 2), 1))\\n\\n                // Copy over the first `submod` bytes of the new data as in\\n                // case 1 above.\\n                let slengthmod := mod(slength, 32)\\n                let mlengthmod := mod(mlength, 32)\\n                let submod := sub(32, slengthmod)\\n                let mc := add(_postBytes, submod)\\n                let end := add(_postBytes, mlength)\\n                let mask := sub(exp(0x100, submod), 1)\\n\\n                sstore(sc, add(sload(sc), and(mload(mc), mask)))\\n                \\n                for { \\n                    sc := add(sc, 1)\\n                    mc := add(mc, 0x20)\\n                } lt(mc, end) {\\n                    sc := add(sc, 1)\\n                    mc := add(mc, 0x20)\\n                } {\\n                    sstore(sc, mload(mc))\\n                }\\n\\n                mask := exp(0x100, sub(mc, end))\\n\\n                sstore(sc, mul(div(mload(mc), mask), mask))\\n            }\\n        }\\n    }\\n\\n    function slice(\\n        bytes memory _bytes,\\n        uint _start,\\n        uint _length\\n    )\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        require(_bytes.length >= (_start + _length));\\n\\n        bytes memory tempBytes;\\n\\n        assembly {\\n            switch iszero(_length)\\n            case 0 {\\n                // Get a location of some free memory and store it in tempBytes as\\n                // Solidity does for memory variables.\\n                tempBytes := mload(0x40)\\n\\n                // The first word of the slice result is potentially a partial\\n                // word read from the original array. To read it, we calculate\\n                // the length of that partial word and start copying that many\\n                // bytes into the array. The first word we copy will start with\\n                // data we don't care about, but the last `lengthmod` bytes will\\n                // land at the beginning of the contents of the new array. When\\n                // we're done copying, we overwrite the full first word with\\n                // the actual length of the slice.\\n                let lengthmod := and(_length, 31)\\n\\n                // The multiplication in the next line is necessary\\n                // because when slicing multiples of 32 bytes (lengthmod == 0)\\n                // the following copy loop was copying the origin's length\\n                // and then ending prematurely not copying everything it should.\\n                let mc := add(add(tempBytes, lengthmod), mul(0x20, iszero(lengthmod)))\\n                let end := add(mc, _length)\\n\\n                for {\\n                    // The multiplication in the next line has the same exact purpose\\n                    // as the one above.\\n                    let cc := add(add(add(_bytes, lengthmod), mul(0x20, iszero(lengthmod))), _start)\\n                } lt(mc, end) {\\n                    mc := add(mc, 0x20)\\n                    cc := add(cc, 0x20)\\n                } {\\n                    mstore(mc, mload(cc))\\n                }\\n\\n                mstore(tempBytes, _length)\\n\\n                //update free-memory pointer\\n                //allocating the array padded to 32 bytes like the compiler does now\\n                mstore(0x40, and(add(mc, 31), not(31)))\\n            }\\n            //if we want a zero-length slice let's just return a zero-length array\\n            default {\\n                tempBytes := mload(0x40)\\n\\n                mstore(0x40, add(tempBytes, 0x20))\\n            }\\n        }\\n\\n        return tempBytes;\\n    }\\n\\n    function toAddress(bytes memory _bytes, uint _start) internal  pure returns (address) {\\n        require(_bytes.length >= (_start + 20));\\n        address tempAddress;\\n\\n        assembly {\\n            tempAddress := div(mload(add(add(_bytes, 0x20), _start)), 0x1000000000000000000000000)\\n        }\\n\\n        return tempAddress;\\n    }\\n\\n    function toUint8(bytes memory _bytes, uint _start) internal  pure returns (uint8) {\\n        require(_bytes.length >= (_start + 1));\\n        uint8 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x1), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint16(bytes memory _bytes, uint _start) internal  pure returns (uint16) {\\n        require(_bytes.length >= (_start + 2));\\n        uint16 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x2), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint32(bytes memory _bytes, uint _start) internal  pure returns (uint32) {\\n        require(_bytes.length >= (_start + 4));\\n        uint32 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x4), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint(bytes memory _bytes, uint _start) internal  pure returns (uint256) {\\n        require(_bytes.length >= (_start + 32));\\n        uint256 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x20), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toBytes32(bytes memory _bytes, uint _start) internal  pure returns (bytes32) {\\n        require(_bytes.length >= (_start + 32));\\n        bytes32 tempBytes32;\\n\\n        assembly {\\n            tempBytes32 := mload(add(add(_bytes, 0x20), _start))\\n        }\\n\\n        return tempBytes32;\\n    }\\n\\n    function equal(bytes memory _preBytes, bytes memory _postBytes) internal pure returns (bool) {\\n        bool success = true;\\n\\n        assembly {\\n            let length := mload(_preBytes)\\n\\n            // if lengths don't match the arrays are not equal\\n            switch eq(length, mload(_postBytes))\\n            case 1 {\\n                // cb is a circuit breaker in the for loop since there's\\n                //  no said feature for inline assembly loops\\n                // cb = 1 - don't breaker\\n                // cb = 0 - break\\n                let cb := 1\\n\\n                let mc := add(_preBytes, 0x20)\\n                let end := add(mc, length)\\n\\n                for {\\n                    let cc := add(_postBytes, 0x20)\\n                // the next line is the loop condition:\\n                // while(uint(mc < end) + cb == 2)\\n                } eq(add(lt(mc, end), cb), 2) {\\n                    mc := add(mc, 0x20)\\n                    cc := add(cc, 0x20)\\n                } {\\n                    // if any of these checks fails then arrays are not equal\\n                    if iszero(eq(mload(mc), mload(cc))) {\\n                        // unsuccess:\\n                        success := 0\\n                        cb := 0\\n                    }\\n                }\\n            }\\n            default {\\n                // unsuccess:\\n                success := 0\\n            }\\n        }\\n\\n        return success;\\n    }\\n\\n    function equalStorage(\\n        bytes storage _preBytes,\\n        bytes memory _postBytes\\n    )\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        bool success = true;\\n\\n        assembly {\\n            // we know _preBytes_offset is 0\\n            let fslot := sload(_preBytes_slot)\\n            // Decode the length of the stored array like in concatStorage().\\n            let slength := div(and(fslot, sub(mul(0x100, iszero(and(fslot, 1))), 1)), 2)\\n            let mlength := mload(_postBytes)\\n\\n            // if lengths don't match the arrays are not equal\\n            switch eq(slength, mlength)\\n            case 1 {\\n                // slength can contain both the length and contents of the array\\n                // if length < 32 bytes so let's prepare for that\\n                // v. http://solidity.readthedocs.io/en/latest/miscellaneous.html#layout-of-state-variables-in-storage\\n                if iszero(iszero(slength)) {\\n                    switch lt(slength, 32)\\n                    case 1 {\\n                        // blank the last byte which is the length\\n                        fslot := mul(div(fslot, 0x100), 0x100)\\n\\n                        if iszero(eq(fslot, mload(add(_postBytes, 0x20)))) {\\n                            // unsuccess:\\n                            success := 0\\n                        }\\n                    }\\n                    default {\\n                        // cb is a circuit breaker in the for loop since there's\\n                        //  no said feature for inline assembly loops\\n                        // cb = 1 - don't breaker\\n                        // cb = 0 - break\\n                        let cb := 1\\n\\n                        // get the keccak hash to get the contents of the array\\n                        mstore(0x0, _preBytes_slot)\\n                        let sc := keccak256(0x0, 0x20)\\n\\n                        let mc := add(_postBytes, 0x20)\\n                        let end := add(mc, mlength)\\n\\n                        // the next line is the loop condition:\\n                        // while(uint(mc < end) + cb == 2)\\n                        for {} eq(add(lt(mc, end), cb), 2) {\\n                            sc := add(sc, 1)\\n                            mc := add(mc, 0x20)\\n                        } {\\n                            if iszero(eq(sload(sc), mload(mc))) {\\n                                // unsuccess:\\n                                success := 0\\n                                cb := 0\\n                            }\\n                        }\\n                    }\\n                }\\n            }\\n            default {\\n                // unsuccess:\\n                success := 0\\n            }\\n        }\\n\\n        return success;\\n    }\\n}\\n\",\"keccak256\":\"0xdd38cd94f336b6f3a7ab680b0c1c1b8b61af23a0197d80ee9c15ea883dab486a\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "",
  "sourceMap": "183:388:131:-;;;221:4;6690::100;698:17:4;718:12;:10;;;:12;;:::i;:::-;698:32;;749:9;740:6;;:18;;;;;;;;;;;;;;;;;;806:9;773:43;;802:1;773:43;;;;;;;;;;;;664:159;558:1:53;542:13;:17;;;;185::24;180:57;;226:4;212:11;;:18;;;;;;;;;;;;;;;;;;180:57;131:110;6646:52:100;183:388:131;;788:96:0;833:15;867:10;860:17;;788:96;:::o;183:388:131:-;;;;;;;",
  "deployedSourceMap": "183:388:131:-;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;183:388:131;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4258:34:100;;;:::i;:::-;;;;;;;;;;;;;;;;;;;36634:299;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;36634:299:100;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;52779:615;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;52779:615:100;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;3810:367:35;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;3810:367:35;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;103:23:24;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;41993:527:100;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;41993:527:100;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;80:1;75:3;71:11;64:39;52:2;49:1;45:10;40:15;;8:100;;;12:14;41993:527:100;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;80:1;75:3;71:11;64:39;52:2;49:1;45:10;40:15;;8:100;;;12:14;41993:527:100;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;15104:184;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;6346:266:35;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;6346:266:35;;;;;;;;;;;;;;;;;;;;;21:11:-1;8;5:28;2:2;;;46:1;43;36:12;2:2;6346:266:35;;35:9:-1;28:4;12:14;8:25;5:40;2:2;;;58:1;55;48:12;2:2;6346:266:35;;;;;;100:9:-1;95:1;81:12;77:20;67:8;63:35;60:50;39:11;25:12;22:29;11:107;8:2;;;131:1;128;121:12;8:2;6346:266:35;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;30:3:-1;22:6;14;1:33;99:1;93:3;85:6;81:16;74:27;137:4;133:9;126:4;121:3;117:14;113:30;106:37;;169:3;161:6;157:16;147:26;;6346:266:35;;;;;;;;;;;;;;;;;21:11:-1;8;5:28;2:2;;;46:1;43;36:12;2:2;6346:266:35;;35:9:-1;28:4;12:14;8:25;5:40;2:2;;;58:1;55;48:12;2:2;6346:266:35;;;;;;100:9:-1;95:1;81:12;77:20;67:8;63:35;60:50;39:11;25:12;22:29;11:107;8:2;;;131:1;128;121:12;8:2;6346:266:35;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;30:3:-1;22:6;14;1:33;99:1;93:3;85:6;81:16;74:27;137:4;133:9;126:4;121:3;117:14;113:30;106:37;;169:3;161:6;157:16;147:26;;6346:266:35;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;34456:350:100;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;34456:350:100;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;15643:679;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;15643:679:100;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;80:1;75:3;71:11;64:39;52:2;49:1;45:10;40:15;;8:100;;;12:14;15643:679:100;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;80:1;75:3;71:11;64:39;52:2;49:1;45:10;40:15;;8:100;;;12:14;15643:679:100;;;;;;;;;;;;;;;;;;;;;4210:44;;;:::i;:::-;;;;;;;;;;;;;;;;;;;43679:191;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;43679:191:100;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;2608:147:35;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;2608:147:35;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;46910:115:100;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;80:1;75:3;71:11;64:39;52:2;49:1;45:10;40:15;;8:100;;;12:14;46910:115:100;;;;;;;;;;;;;;;;;11227:89;;;:::i;:::-;;;;;;;;;;;;;;;;;;;8496:343:35;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;8496:343:35;;;;;;;;;;21:11:-1;8;5:28;2:2;;;46:1;43;36:12;2:2;8496:343:35;;35:9:-1;28:4;12:14;8:25;5:40;2:2;;;58:1;55;48:12;2:2;8496:343:35;;;;;;100:9:-1;95:1;81:12;77:20;67:8;63:35;60:50;39:11;25:12;22:29;11:107;8:2;;;131:1;128;121:12;8:2;8496:343:35;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;30:3:-1;22:6;14;1:33;99:1;93:3;85:6;81:16;74:27;137:4;133:9;126:4;121:3;117:14;113:30;106:37;;169:3;161:6;157:16;147:26;;8496:343:35;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;4025:38:100;;;:::i;:::-;;;;;;;;;;;;;;;;;;;27752:441;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;27752:441:100;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;21:11:-1;8;5:28;2:2;;;46:1;43;36:12;2:2;27752:441:100;;35:9:-1;28:4;12:14;8:25;5:40;2:2;;;58:1;55;48:12;2:2;27752:441:100;;;;;;100:9:-1;95:1;81:12;77:20;67:8;63:35;60:50;39:11;25:12;22:29;11:107;8:2;;;131:1;128;121:12;8:2;27752:441:100;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;45191:115;;;:::i;:::-;;;;;;;;;;;;;;;;;;;52254:258;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;52254:258:100;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;47233:110;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;47233:110:100;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;6380:117;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4067:27;;;:::i;:::-;;;;;;;;;;;;;;;;;;;11856:484;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;11856:484:100;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;4481:378:35;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;4481:378:35;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;32472:867:100;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;32472:867:100;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;7188:288:35;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;7188:288:35;;;;;;;;;;21:11:-1;8;5:28;2:2;;;46:1;43;36:12;2:2;7188:288:35;;35:9:-1;28:4;12:14;8:25;5:40;2:2;;;58:1;55;48:12;2:2;7188:288:35;;;;;;100:9:-1;95:1;81:12;77:20;67:8;63:35;60:50;39:11;25:12;22:29;11:107;8:2;;;131:1;128;121:12;8:2;7188:288:35;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;30:3:-1;22:6;14;1:33;99:1;93:3;85:6;81:16;74:27;137:4;133:9;126:4;121:3;117:14;113:30;106:37;;169:3;161:6;157:16;147:26;;7188:288:35;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;54811:135:100;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;54811:135:100;;;;;;;;;;;;;;;;;:::i;:::-;;8957:232;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;8957:232:100;;;;;;;;;;;;;;;;;:::i;:::-;;45812:174;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;44738:329;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;44738:329:100;;;;;;;;;;21:11:-1;8;5:28;2:2;;;46:1;43;36:12;2:2;44738:329:100;;35:9:-1;28:4;12:14;8:25;5:40;2:2;;;58:1;55;48:12;2:2;44738:329:100;;;;;;101:9:-1;95:2;81:12;77:21;67:8;63:36;60:51;39:11;25:12;22:29;11:108;8:2;;;132:1;129;122:12;8:2;44738:329:100;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;80:1;75:3;71:11;64:39;52:2;49:1;45:10;40:15;;8:100;;;12:14;44738:329:100;;;;;;;;;;;;;;;;;29696:626;;;;;;13:3:-1;8;5:12;2:2;;;30:1;27;20:12;2:2;29696:626:100;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;21:11:-1;8;5:28;2:2;;;46:1;43;36:12;2:2;29696:626:100;;35:9:-1;28:4;12:14;8:25;5:40;2:2;;;58:1;55;48:12;2:2;29696:626:100;;;;;;100:9:-1;95:1;81:12;77:20;67:8;63:35;60:50;39:11;25:12;22:29;11:107;8:2;;;131:1;128;121:12;8:2;29696:626:100;;;;;;;;;;;;;;21:11:-1;8;5:28;2:2;;;46:1;43;36:12;2:2;29696:626:100;;35:9:-1;28:4;12:14;8:25;5:40;2:2;;;58:1;55;48:12;2:2;29696:626:100;;;;;;100:9:-1;95:1;81:12;77:20;67:8;63:35;60:50;39:11;25:12;22:29;11:107;8:2;;;131:1;128;121:12;8:2;29696:626:100;;;;;;;;;;;;;;21:11:-1;8;5:28;2:2;;;46:1;43;36:12;2:2;29696:626:100;;35:9:-1;28:4;12:14;8:25;5:40;2:2;;;58:1;55;48:12;2:2;29696:626:100;;;;;;100:9:-1;95:1;81:12;77:20;67:8;63:35;60:50;39:11;25:12;22:29;11:107;8:2;;;131:1;128;121:12;8:2;29696:626:100;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;1684:137:4;;;:::i;:::-;;10031:112:35;;;:::i;:::-;;;;;;;;;;;;;;;;;;;7708:1099:100;;;;;;13:3:-1;8;5:12;2:2;;;30:1;27;20:12;2:2;7708:1099:100;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;12588:504;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;12588:504:100;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;17587:491;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;17587:491:100;;;;;;;;;;21:11:-1;8;5:28;2:2;;;46:1;43;36:12;2:2;17587:491:100;;35:9:-1;28:4;12:14;8:25;5:40;2:2;;;58:1;55;48:12;2:2;17587:491:100;;;;;;101:9:-1;95:2;81:12;77:21;67:8;63:36;60:51;39:11;25:12;22:29;11:108;8:2;;;132:1;129;122:12;8:2;17587:491:100;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;2636:25:36;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;38324:669:100;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;38324:669:100;;;;;;;;;;;;;;;;;:::i;:::-;;5037:326:35;;;:::i;:::-;;;;;;;;;;;;;;;;;;;6741:329;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;6741:329:35;;;;;;;;;;21:11:-1;8;5:28;2:2;;;46:1;43;36:12;2:2;6741:329:35;;35:9:-1;28:4;12:14;8:25;5:40;2:2;;;58:1;55;48:12;2:2;6741:329:35;;;;;;100:9:-1;95:1;81:12;77:20;67:8;63:35;60:50;39:11;25:12;22:29;11:107;8:2;;;131:1;128;121:12;8:2;6741:329:35;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;30:3:-1;22:6;14;1:33;99:1;93:3;85:6;81:16;74:27;137:4;133:9;126:4;121:3;117:14;113:30;106:37;;169:3;161:6;157:16;147:26;;6741:329:35;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;23032:992:100;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;23032:992:100;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;899:77:4;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;44119:397:100;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;44119:397:100;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;80:1;75:3;71:11;64:39;52:2;49:1;45:10;40:15;;8:100;;;12:14;44119:397:100;;;;;;;;;;;;;;;;;1250:92:4;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;16639:608:100;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;16639:608:100;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;37411:600;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;37411:600:100;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;2856:109:35;;;:::i;:::-;;;;;;;;;;;;;;;;;;;5579:321;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;5579:321:35;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;42945:540:100;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;42945:540:100;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;80:1;75:3;71:11;64:39;52:2;49:1;45:10;40:15;;8:100;;;12:14;42945:540:100;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;80:1;75:3;71:11;64:39;52:2;49:1;45:10;40:15;;8:100;;;12:14;42945:540:100;;;;;;;;;;;;;;;;;;;;;;;;55107:115;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;55107:115:100;;;;;;;;;;;;;;;;;:::i;:::-;;3185:230:36;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;3185:230:36;;;;;;;;;;;;;;;;;;;:::i;:::-;;24295:701:100;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;24295:701:100;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;41535:291;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;41535:291:100;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;80:1;75:3;71:11;64:39;52:2;49:1;45:10;40:15;;8:100;;;12:14;41535:291:100;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;55379:473;;;:::i;:::-;;11484:107;;;:::i;:::-;;;;;;;;;;;;;;;;;;;3838:61;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;25957:446;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;25957:446:100;;;;;;;;;;21:11:-1;8;5:28;2:2;;;46:1;43;36:12;2:2;25957:446:100;;35:9:-1;28:4;12:14;8:25;5:40;2:2;;;58:1;55;48:12;2:2;25957:446:100;;;;;;100:9:-1;95:1;81:12;77:20;67:8;63:35;60:50;39:11;25:12;22:29;11:107;8:2;;;131:1;128;121:12;8:2;25957:446:100;;;;;;;;;;;;;;21:11:-1;8;5:28;2:2;;;46:1;43;36:12;2:2;25957:446:100;;35:9:-1;28:4;12:14;8:25;5:40;2:2;;;58:1;55;48:12;2:2;25957:446:100;;;;;;100:9:-1;95:1;81:12;77:20;67:8;63:35;60:50;39:11;25:12;22:29;11:107;8:2;;;131:1;128;121:12;8:2;25957:446:100;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;231:146:131;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;231:146:131;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;45463:186:100;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;55966:340;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;55966:340:100;;;;;;;;;;;;;;;;;;;:::i;:::-;;40936:407;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;40936:407:100;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;3903:57;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;33646:300;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;33646:300:100;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;10407:676;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;10407:676:100;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;46400:361;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;80:1;75:3;71:11;64:39;52:2;49:1;45:10;40:15;;8:100;;;12:14;46400:361:100;;;;;;;;;;;;;;;;;381:188:131;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;381:188:131;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;46122:114:100;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;80:1;75:3;71:11;64:39;52:2;49:1;45:10;40:15;;8:100;;;12:14;46122:114:100;;;;;;;;;;;;;;;;;56441:264;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;56441:264:100;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;39974:740;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;39974:740:100;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;2178:266:35;;;:::i;:::-;;;;;;;;;;;;;;;;;;;4170:36:100;;;:::i;:::-;;;;;;;;;;;;;;;;;;;9347:271;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;9347:271:100;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;54332:323;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;54332:323:100;;;;;;;;;;;;;;;;;;;:::i;:::-;;9752:147:35;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;9752:147:35;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;39098:598:100;;;:::i;:::-;;13767:1070;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;13767:1070:100;;;;;;;;;;21:11:-1;8;5:28;2:2;;;46:1;43;36:12;2:2;13767:1070:100;;35:9:-1;28:4;12:14;8:25;5:40;2:2;;;58:1;55;48:12;2:2;13767:1070:100;;;;;;100:9:-1;95:1;81:12;77:20;67:8;63:35;60:50;39:11;25:12;22:29;11:107;8:2;;;131:1;128;121:12;8:2;13767:1070:100;;;;;;;;;;;;;;21:11:-1;8;5:28;2:2;;;46:1;43;36:12;2:2;13767:1070:100;;35:9:-1;28:4;12:14;8:25;5:40;2:2;;;58:1;55;48:12;2:2;13767:1070:100;;;;;;100:9:-1;95:1;81:12;77:20;67:8;63:35;60:50;39:11;25:12;22:29;11:107;8:2;;;131:1;128;121:12;8:2;13767:1070:100;;;;;;;;;;;;;;21:11:-1;8;5:28;2:2;;;46:1;43;36:12;2:2;13767:1070:100;;35:9:-1;28:4;12:14;8:25;5:40;2:2;;;58:1;55;48:12;2:2;13767:1070:100;;;;;;100:9:-1;95:1;81:12;77:20;67:8;63:35;60:50;39:11;25:12;22:29;11:107;8:2;;;131:1;128;121:12;8:2;13767:1070:100;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;57143:1008;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;57143:1008:100;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;1297:763:35;;;;;;13:3:-1;8;5:12;2:2;;;30:1;27;20:12;2:2;1297:763:35;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;30707:926:100;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;30707:926:100;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;9824:347;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;9824:347:100;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;1970:107:4;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;1970:107:4;;;;;;;;;;;;;;;;;;;:::i;:::-;;47539:128:100;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;47539:128:100;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;7767:322:35;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;7767:322:35;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;25214:384:100;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;4258:34;;;;:::o;36634:299::-;36706:4;970:1:53;953:13;;:18;;;;;;;;;;;977:20;1000:13;;977:36;;36718:15:100;36736:13;:11;:13::i;:::-;:38;;;36775:10;36736:50;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;36736:50:100;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;36736:50:100;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;36736:50:100;;;;;;;;;;;;;;;;36718:68;;36800:25;36817:7;36800:16;:25::i;:::-;:51;;;;;36829:22;36841:9;36829:11;:22::i;:::-;36800:51;36792:90;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;36895:33;36909:7;36918:9;36895:13;:33::i;:::-;36888:40;;;1050:13:53;;1034:12;:29;1026:56;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;36634:299:100;;;;:::o;52779:615::-;52851:7;52866:19;52888:16;:14;:16::i;:::-;52866:38;;52910:33;52946:10;:19;52957:7;52946:19;;;;;;;;;;;;;;;:37;;52910:73;;52989:12;53026:1;53004:7;:18;;;:23;:73;;53034:43;53051:25;53074:1;53051:7;:18;;;:22;;:25;;;;:::i;:::-;53034:7;:12;;;:16;;:43;;;;:::i;:::-;53004:73;;;53030:1;53004:73;52989:88;;53261:11;53224:7;:15;;:21;53240:4;53224:21;;;;;;;;;;;:33;;;:48;53220:130;;;53293:7;:12;;;53286:4;:19;53282:62;;;53324:11;53333:1;53324:4;:8;;:11;;;;:::i;:::-;53317:18;;53282:62;53220:130;53362:7;:15;;:21;53378:4;53362:21;;;;;;;;;;;:27;;;;;;;;;;;;53355:34;;;;;52779:615;;;:::o;3810:367:35:-;3892:7;3907:16;3929:12;409:8;3964:24;;4006:5;4021:12;3989:46;;;;;;;;;;;;;;;;;;;;;49:4:-1;39:7;30;26:21;22:32;13:7;6:49;3989:46:35;;;3964:72;;;;;;;;;;;;;36:153:-1;66:2;61:3;58:11;36:153;;182:3;176:10;171:3;164:23;98:2;93:3;89:12;82:19;;123:2;118:3;114:12;107:19;;148:2;143:3;139:12;132:19;;36:153;;;274:1;267:3;263:2;259:12;254:3;250:22;246:30;315:4;311:9;305:3;299:10;295:26;356:4;350:3;344:10;340:21;389:7;380;377:20;372:3;365:33;3:399;;;3964:72:35;;;;;;;;;;;;;;;;;;;;;;;14:1:-1;21;16:31;;;;75:4;69:11;64:16;;144:4;140:9;133:4;115:16;111:27;107:43;104:1;100:51;94:4;87:65;169:16;166:1;159:27;225:16;222:1;215:4;212:1;208:12;193:49;7:242;;16:31;36:4;31:9;;7:242;;3947:89:35;;;;;;;;4050:7;4042:81;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4144:27;4164:3;4169:1;4144:19;:27::i;:::-;4129:43;;;;3810:367;;;:::o;103:23:24:-;;;;;;;;;;;;;:::o;41993:527:100:-;42072:27;42107:25;42140:19;42167:13;42188:14;42225:20;42237:7;42225:11;:20::i;:::-;42217:48;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;42271:27;42301:10;:19;42312:7;42301:19;;;;;;;;;;;;;;;42271:49;;42341:9;:20;;:26;;42375:9;:20;;:24;;42407:9;:21;;;;;;;;;;;;42436:24;:9;:15;;:22;;;;;;;;;;;;;;;;;;:24::i;:::-;42468:13;:11;:13::i;:::-;:32;;;42501:7;42468:41;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;42468:41:100;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;42468:41:100;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;42468:41:100;;;;;;;;;;;;;;;;42326:189;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;41993:527;;;;;;;:::o;15104:184::-;15166:7;15175;15198:24;:33;;;15233:49;:24;:40;;:47;;;;;;;;;;;;;;;;;;:49::i;:::-;15190:93;;;;15104:184;;:::o;6346:266:35:-;6469:4;6483:12;355:8;6515:30;;6563:6;6571;6579;6546:40;;;;;;;;;;;;;;;;;;;;;;;;;;36:153:-1;66:2;61:3;58:11;36:153;;182:3;176:10;171:3;164:23;98:2;93:3;89:12;82:19;;123:2;118:3;114:12;107:19;;148:2;143:3;139:12;132:19;;36:153;;;274:1;267:3;263:2;259:12;254:3;250:22;246:30;315:4;311:9;305:3;299:10;295:26;356:4;350:3;344:10;340:21;389:7;380;377:20;372:3;365:33;3:399;;;6546:40:35;;;;;;;;;;;;;;;;36:153:-1;66:2;61:3;58:11;36:153;;182:3;176:10;171:3;164:23;98:2;93:3;89:12;82:19;;123:2;118:3;114:12;107:19;;148:2;143:3;139:12;132:19;;36:153;;;274:1;267:3;263:2;259:12;254:3;250:22;246:30;315:4;311:9;305:3;299:10;295:26;356:4;350:3;344:10;340:21;389:7;380;377:20;372:3;365:33;3:399;;;6546:40:35;;;;;;;;;;;;;49:4:-1;39:7;30;26:21;22:32;13:7;6:49;6546:40:35;;;6515:72;;;;;;;;;;;;;36:153:-1;66:2;61:3;58:11;36:153;;182:3;176:10;171:3;164:23;98:2;93:3;89:12;82:19;;123:2;118:3;114:12;107:19;;148:2;143:3;139:12;132:19;;36:153;;;274:1;267:3;263:2;259:12;254:3;250:22;246:30;315:4;311:9;305:3;299:10;295:26;356:4;350:3;344:10;340:21;389:7;380;377:20;372:3;365:33;3:399;;;6515:72:35;;;;;;;;;;;;;;;;;;;;;;;14:1:-1;21;16:31;;;;75:4;69:11;64:16;;144:4;140:9;133:4;115:16;111:27;107:43;104:1;100:51;94:4;87:65;169:16;166:1;159:27;225:16;222:1;215:4;212:1;208:12;193:49;7:242;;16:31;36:4;31:9;;7:242;;6501:86:35;;;;;6600:7;6593:14;;;6346:266;;;;;:::o;34456:350:100:-;34575:4;970:1:53;953:13;;:18;;;;;;;;;;;977:20;1000:13;;977:36;;34589:15:100;34607:13;:11;:13::i;:::-;:38;;;34646:10;34607:50;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;34607:50:100;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;34607:50:100;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;34607:50:100;;;;;;;;;;;;;;;;34589:68;;34710:1;34671:6;:15;34678:7;34671:15;;;;;;;;;;;;;;;:23;;:35;;;:40;34663:78;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;34754:47;34765:7;34774:9;34785:6;34793:7;34754:10;:47::i;:::-;34747:54;;;1050:13:53;;1034:12;:29;1026:56;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;34456:350:100;;;;;;:::o;15643:679::-;15725:16;15743;15761:7;15770;15787:33;15823:10;:19;15834:7;15823:19;;;;;;;;;;;;;;;:37;;15787:73;;15866:23;15906:7;:18;;;15892:33;;;;;;;;;;;;;;;;;;;;;;29:2:-1;21:6;17:15;117:4;105:10;97:6;88:34;148:4;140:6;136:17;126:27;;0:157;15892:33:100;;;;15866:59;;15931:33;15981:7;:18;;;15967:33;;;;;;;;;;;;;;;;;;;;;;29:2:-1;21:6;17:15;117:4;105:10;97:6;88:34;148:4;140:6;136:17;126:27;;0:157;15967:33:100;;;;15931:69;;16011:9;16023:1;16011:13;;16006:220;16030:7;:18;;;16026:1;:22;16006:220;;;16072:13;16088:19;16105:1;16088:7;:12;;;:16;;:19;;;;:::i;:::-;16072:35;;16127:7;:15;;:22;16143:5;16127:22;;;;;;;;;;;:34;;;16115:6;16122:1;16115:9;;;;;;;;;;;;;:46;;;;;16191:7;:15;;:22;16207:5;16191:22;;;;;;;;;;;:28;;;;;;;;;;;;16169:16;16186:1;16169:19;;;;;;;;;;;;;:50;;;;;;;;;;;16006:220;16054:8;16060:1;16054;:5;;:8;;;;:::i;:::-;16050:12;;16006:220;;;;16239:6;16247:16;16265:7;:37;;;16304:7;:12;;;16231:86;;;;;;;;;;;15643:679;;;;;:::o;4210:44::-;;;;:::o;43679:191::-;43745:7;43768:25;43785:7;43768:16;:25::i;:::-;43760:57;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;43830:6;:15;43837:7;43830:15;;;;;;;;;;;;;;;:23;;:35;;;43823:42;;43679:191;;;:::o;2608:147:35:-;2681:7;2703:47;2722:11;2735:14;:12;:14::i;:::-;2703:18;:47::i;:::-;2696:54;;2608:147;;;:::o;46910:115:100:-;46973:16;47004;46997:23;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;46910:115;:::o;11227:89::-;11277:7;11299:12;;11292:19;;11227:89;:::o;8496:343:35:-;8579:7;8594:16;8616:12;764:9;8651:35;;8704:6;8687:24;;;;;;;;;;;;;;;36:153:-1;66:2;61:3;58:11;36:153;;182:3;176:10;171:3;164:23;98:2;93:3;89:12;82:19;;123:2;118:3;114:12;107:19;;148:2;143:3;139:12;132:19;;36:153;;;274:1;267:3;263:2;259:12;254:3;250:22;246:30;315:4;311:9;305:3;299:10;295:26;356:4;350:3;344:10;340:21;389:7;380;377:20;372:3;365:33;3:399;;;8687:24:35;;;;;;;;;;;49:4:-1;39:7;30;26:21;22:32;13:7;6:49;8687:24:35;;;8651:61;;;;;;;;;;;;;36:153:-1;66:2;61:3;58:11;36:153;;182:3;176:10;171:3;164:23;98:2;93:3;89:12;82:19;;123:2;118:3;114:12;107:19;;148:2;143:3;139:12;132:19;;36:153;;;274:1;267:3;263:2;259:12;254:3;250:22;246:30;315:4;311:9;305:3;299:10;295:26;356:4;350:3;344:10;340:21;389:7;380;377:20;372:3;365:33;3:399;;;8651:61:35;;;;;;;;;;;;;;;;;;;;;;;14:1:-1;21;16:31;;;;75:4;69:11;64:16;;144:4;140:9;133:4;115:16;111:27;107:43;104:1;100:51;94:4;87:65;169:16;166:1;159:27;225:16;222:1;215:4;212:1;208:12;193:49;7:242;;16:31;36:4;31:9;;7:242;;8634:78:35;;;;;;;;8726:7;8718:76;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8807:27;8827:3;8832:1;8807:19;:27::i;:::-;8800:34;;;;8496:343;;;:::o;4025:38:100:-;;;;:::o;27752:441::-;27921:4;1093:28:36;;;;;;;;;;;;;;;;49:4:-1;39:7;30;26:21;22:32;13:7;6:49;1093:28:36;;;1083:39;;;;;;2783:10;2736:57;;:8;;;;;;;;;;;:27;;;2764:14;2736:43;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;2736:43:36;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;2736:43:36;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;2736:43:36;;;;;;;;;;;;;;;;:57;;;2728:94;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;27943:20:100;27955:7;27943:11;:20::i;:::-;27935:48;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;27989:27;28019:10;:19;28030:7;28019:19;;;;;;;;;;;;;;;27989:49;;28059:65;28081:9;28092:7;28101:6;28109:14;;28059:65;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;30:3:-1;22:6;14;1:33;99:1;93:3;85:6;81:16;74:27;137:4;133:9;126:4;121:3;117:14;113:30;106:37;;169:3;161:6;157:16;147:26;;28059:65:100;;;;;;:21;:65::i;:::-;28044:127;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;28184:4;28177:11;;;27752:441;;;;;;;:::o;45191:115::-;45252:7;45274:20;:27;;;;45267:34;;45191:115;:::o;52254:258::-;52337:7;52352:15;52370:13;:11;:13::i;:::-;:29;;;52400:6;52370:37;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;52370:37:100;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;52370:37:100;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;52370:37:100;;;;;;;;;;;;;;;;52352:55;;52421:20;52433:7;52421:11;:20::i;:::-;52413:48;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;52474:33;52499:7;52474:24;:33::i;:::-;52467:40;;;52254:258;;;:::o;47233:110::-;47297:4;47316:6;:15;47323:7;47316:15;;;;;;;;;;;;;;;:22;;;;;;;;;;;;47309:29;;47233:110;;;:::o;6380:117::-;6431:7;6440;6449;6458;6481:1;6484;6487;6490;6473:19;;;;;;;;;;;;;;;;;;;;6380:117;;;;:::o;4067:27::-;;;;:::o;11856:484::-;11967:4;1103:9:4;:7;:9::i;:::-;1095:54;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;11981:43:100;12027:27;11981:73;;12084:12;:18;;;12075:5;:27;;:64;;;;12118:12;:21;;;12106:8;:33;;12075:64;12060:125;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;12221:39;;;;;;;;12244:5;12221:39;;;;12251:8;12221:39;;;12191:27;:69;;;;;;;;;;;;;;;;;;;12271:47;12302:5;12309:8;12271:47;;;;;;;;;;;;;;;;;;;;;;;;12331:4;12324:11;;;11856:484;;;;:::o;4481:378:35:-;4589:7;4606:16;4628:12;409:8;4663:24;;4705:5;4712:11;4688:36;;;;;;;;;;;;;;;;;;;;;49:4:-1;39:7;30;26:21;22:32;13:7;6:49;4688:36:35;;;4663:62;;;;;;;;;;;;;36:153:-1;66:2;61:3;58:11;36:153;;182:3;176:10;171:3;164:23;98:2;93:3;89:12;82:19;;123:2;118:3;114:12;107:19;;148:2;143:3;139:12;132:19;;36:153;;;274:1;267:3;263:2;259:12;254:3;250:22;246:30;315:4;311:9;305:3;299:10;295:26;356:4;350:3;344:10;340:21;389:7;380;377:20;372:3;365:33;3:399;;;4663:62:35;;;;;;;;;;;;;;;;;;;;;;;14:1:-1;21;16:31;;;;75:4;69:11;64:16;;144:4;140:9;133:4;115:16;111:27;107:43;104:1;100:51;94:4;87:65;169:16;166:1;159:27;225:16;222:1;215:4;212:1;208:12;193:49;7:242;;16:31;36:4;31:9;;7:242;;4646:79:35;;;;;;;;4739:7;4731:74;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4826:27;4846:3;4851:1;4826:19;:27::i;:::-;4811:43;;;;4481:378;;;;:::o;32472:867:100:-;32552:4;970:1:53;953:13;;:18;;;;;;;;;;;977:20;1000:13;;977:36;;32564:15:100;32582:13;:11;:13::i;:::-;:38;;;32621:10;32582:50;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;32582:50:100;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;32582:50:100;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;32582:50:100;;;;;;;;;;;;;;;;32564:68;;32810:25;32827:7;32810:16;:25::i;:::-;32802:59;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;32914:1;32875:6;:15;32882:7;32875:15;;;;;;;;;;;;;;;:23;;:35;;;:40;32867:78;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;32951:29;32983:6;:15;32990:7;32983:15;;;;;;;;;;;;;;;:27;;32951:59;;33041:1;33020:11;:18;;;;:22;33016:175;;;33128:3;33069:56;33088:27;:36;;;33069:11;33081:1;33069:14;;;;;;;;;;;;;;;;:18;;:56;;;;:::i;:::-;:62;33052:132;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;33016:175;33203:6;:15;33210:7;33203:15;;;;;;;;;;;;;;;;33196:22;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;33224:47;33238:16;33256:7;33265:5;33224:13;:47::i;:::-;33309:7;33282:35;;;;;;;;;;;;33330:4;33323:11;;;;1050:13:53;;1034:12;:29;1026:56;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;32472:867:100;;;;:::o;7188:288:35:-;7250:7;7265:16;7287:12;635:8;7322:22;;7362:6;7345:24;;;;;;;;;;;;;;;36:153:-1;66:2;61:3;58:11;36:153;;182:3;176:10;171:3;164:23;98:2;93:3;89:12;82:19;;123:2;118:3;114:12;107:19;;148:2;143:3;139:12;132:19;;36:153;;;274:1;267:3;263:2;259:12;254:3;250:22;246:30;315:4;311:9;305:3;299:10;295:26;356:4;350:3;344:10;340:21;389:7;380;377:20;372:3;365:33;3:399;;;7345:24:35;;;;;;;;;;;49:4:-1;39:7;30;26:21;22:32;13:7;6:49;7345:24:35;;;7322:48;;;;;;;;;;;;;36:153:-1;66:2;61:3;58:11;36:153;;182:3;176:10;171:3;164:23;98:2;93:3;89:12;82:19;;123:2;118:3;114:12;107:19;;148:2;143:3;139:12;132:19;;36:153;;;274:1;267:3;263:2;259:12;254:3;250:22;246:30;315:4;311:9;305:3;299:10;295:26;356:4;350:3;344:10;340:21;389:7;380;377:20;372:3;365:33;3:399;;;7322:48:35;;;;;;;;;;;;;;;;;;;;;;;14:1:-1;21;16:31;;;;75:4;69:11;64:16;;144:4;140:9;133:4;115:16;111:27;107:43;104:1;100:51;94:4;87:65;169:16;166:1;159:27;225:16;222:1;215:4;212:1;208:12;193:49;7:242;;16:31;36:4;31:9;;7:242;;7305:65:35;;;;;;;;7384:7;7376:55;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;7444:27;7464:3;7469:1;7444:19;:27::i;:::-;7437:34;;;;7188:288;;;:::o;54811:135:100:-;970:1:53;953:13;;:18;;;;;;;;;;;977:20;1000:13;;977:36;;1103:9:4;:7;:9::i;:::-;1095:54;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;54936:5:100;54904:29;:37;;;;1050:13:53;;1034:12;:29;1026:56;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;54811:135:100;;:::o;8957:232::-;1103:9:4;:7;:9::i;:::-;1095:54;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;9046:21:100;;9037:5;:30;;9029:78;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;9137:5;9113:21;:29;;;;9153:31;9178:5;9153:31;;;;;;;;;;;;;;;;;;8957:232;:::o;45812:174::-;45877:7;45886;45909:27;:33;;;45944:27;:36;;;45901:80;;;;45812:174;;:::o;44738:329::-;44831:16;44857:27;44901:8;;:15;;44887:30;;;;;;;;;;;;;;;;;;;;;;29:2:-1;21:6;17:15;117:4;105:10;97:6;88:34;148:4;140:6;136:17;126:27;;0:157;44887:30:100;;;;44857:60;;44928:9;44940:1;44928:13;;44923:117;44947:8;;:15;;44943:1;:19;44923:117;;;45002:31;45021:8;;45030:1;45021:11;;;;;;;;;;;;;;;45002:18;:31::i;:::-;44986:10;44997:1;44986:13;;;;;;;;;;;;;:47;;;;;44968:8;44974:1;44968;:5;;:8;;;;:::i;:::-;44964:12;;44923:117;;;;45052:10;45045:17;;;44738:329;;;;:::o;29696:626::-;29925:4;1093:28:36;;;;;;;;;;;;;;;;49:4:-1;39:7;30;26:21;22:32;13:7;6:49;1093:28:36;;;1083:39;;;;;;2783:10;2736:57;;:8;;;;;;;;;;;:27;;;2764:14;2736:43;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;2736:43:36;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;2736:43:36;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;2736:43:36;;;;;;;;;;;;;;;;:57;;;2728:94;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;29945:20:100;29957:7;29945:11;:20::i;:::-;29937:48;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;29991:27;30021:10;:19;30032:7;30021:19;;;;;;;;;;;;;;;29991:49;;30061:65;30083:9;30094:7;30103:6;30111:14;;30061:65;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;30:3:-1;22:6;14;1:33;99:1;93:3;85:6;81:16;74:27;137:4;133:9;126:4;121:3;117:14;113:30;106:37;;169:3;161:6;157:16;147:26;;30061:65:100;;;;;;:21;:65::i;:::-;30046:127;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;30194:61;30214:9;30225:7;30234:12;;30194:61;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;30:3:-1;22:6;14;1:33;99:1;93:3;85:6;81:16;74:27;137:4;133:9;126:4;121:3;117:14;113:30;106:37;;169:3;161:6;157:16;147:26;;30194:61:100;;;;;;30248:6;;30194:61;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;30:3:-1;22:6;14;1:33;99:1;93:3;85:6;81:16;74:27;137:4;133:9;126:4;121:3;117:14;113:30;106:37;;169:3;161:6;157:16;147:26;;30194:61:100;;;;;;:19;:61::i;:::-;30179:121;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;30313:4;30306:11;;;29696:626;;;;;;;;;;;:::o;1684:137:4:-;1103:9;:7;:9::i;:::-;1095:54;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1782:1;1745:40;;1766:6;;;;;;;;;;;1745:40;;;;;;;;;;;;1812:1;1795:6;;:19;;;;;;;;;;;;;;;;;;1684:137::o;10031:112:35:-;10089:7;10111:27;10125:12;10111:13;:27::i;:::-;10104:34;;10031:112;:::o;7708:1099:100:-;283:11:24;;;;;;;;;;;282:12;274:53;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;347:4;333:11;;:18;;;;;;;;;;;;;;;;;;8200:30:100;8219:10;8200:18;:30::i;:::-;8236:28;8248:15;8236:11;:28::i;:::-;8270:79;8301:21;8324:24;8270:30;:79::i;:::-;;8355:91;8390:25;8417:28;8355:34;:91::i;:::-;;8452:82;8480:22;8504:29;8452:27;:82::i;:::-;;8540:30;8556:13;8540:15;:30::i;:::-;;8576:48;8601:22;8576:24;:48::i;:::-;8630:52;8657:24;8630:26;:52::i;:::-;;8688:64;8721:30;8688:32;:64::i;:::-;8758:44;8781:20;8758:22;:44::i;:::-;7708:1099;;;;;;;;;;;;:::o;12588:504::-;12703:4;1103:9:4;:7;:9::i;:::-;1095:54;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;12717:43:100;12763:31;12717:77;;12824:12;:18;;;12815:5;:27;;:64;;;;12858:12;:21;;;12846:8;:33;;12815:64;12800:129;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;12969:39;;;;;;;;12992:5;12969:39;;;;12999:8;12969:39;;;12935:31;:73;;;;;;;;;;;;;;;;;;;13019:51;13054:5;13061:8;13019:51;;;;;;;;;;;;;;;;;;;;;;;;13083:4;13076:11;;;12588:504;;;;:::o;17587:491::-;17672:7;17712:1;17695:7;;:14;;:18;17687:49;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;17768:12;;17750:7;;:14;;:30;;17742:86;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;17834:31;;:::i;:::-;17876:9;17888:1;17876:13;;17871:133;17895:7;;:14;;17891:1;:18;17871:133;;;17939:58;17947:49;17964:31;17984:7;;17992:1;17984:10;;;;;;;;;;;;;17964:19;:31::i;:::-;17947:16;:49::i;:::-;17939:3;:7;;:58;;;;:::i;:::-;17933:64;;17915:8;17921:1;17915;:5;;:8;;;;:::i;:::-;17911:12;;17871:133;;;;18016:57;:48;18027:36;18048:7;;:14;;18027:20;:36::i;:::-;18016:3;:10;;:48;;;;:::i;:::-;:55;:57::i;:::-;18009:64;;;17587:491;;;;:::o;2636:25:36:-;;;;;;;;;;;;;:::o;38324:669:100:-;38392:15;38410:13;:11;:13::i;:::-;:38;;;38449:10;38410:50;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;38410:50:100;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;38410:50:100;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;38410:50:100;;;;;;;;;;;;;;;;38392:68;;38474:25;38491:7;38474:16;:25::i;:::-;38466:59;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;38531:28;38562:6;:15;38569:7;38562:15;;;;;;;;;;;;;;;38531:46;;38605:29;:20;:18;:20::i;:::-;:27;:29::i;:::-;38591:10;:43;;38583:93;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;38704:25;:5;:16;;:23;;;;;;;;;;;;;;;;;;:25::i;:::-;38690:10;:39;;38682:80;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;38792:28;38809:10;38792:16;:28::i;:::-;38769:5;:20;;:51;;;;;;;;;;;38854:39;38871:21;;38854:12;:16;;:39;;;;:::i;:::-;38826:5;:25;;:67;;;;38941:7;38904:84;;;38950:10;38962:5;:25;;;38904:84;;;;;;;;;;;;;;;;;;;;;;;;38324:669;;;:::o;5037:326:35:-;5098:7;5113:16;5135:12;467:8;5170:28;;5224:12;5199:39;;;;;;;;;;;;;;;49:4:-1;39:7;30;26:21;22:32;13:7;6:49;5199:39:35;;;5170:69;;;;;;;;;;;;;36:153:-1;66:2;61:3;58:11;36:153;;182:3;176:10;171:3;164:23;98:2;93:3;89:12;82:19;;123:2;118:3;114:12;107:19;;148:2;143:3;139:12;132:19;;36:153;;;274:1;267:3;263:2;259:12;254:3;250:22;246:30;315:4;311:9;305:3;299:10;295:26;356:4;350:3;344:10;340:21;389:7;380;377:20;372:3;365:33;3:399;;;5170:69:35;;;;;;;;;;;;;;;;;;;;;;;14:1:-1;21;16:31;;;;75:4;69:11;64:16;;144:4;140:9;133:4;115:16;111:27;107:43;104:1;100:51;94:4;87:65;169:16;166:1;159:27;225:16;222:1;215:4;212:1;208:12;193:49;7:242;;16:31;36:4;31:9;;7:242;;5153:86:35;;;;;;;;5253:7;5245:73;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5331:27;5351:3;5356:1;5331:19;:27::i;:::-;5324:34;;;;5037:326;:::o;6741:329::-;6817:7;6832:16;6854:12;583:8;6889:35;;6942:6;6925:24;;;;;;;;;;;;;;;36:153:-1;66:2;61:3;58:11;36:153;;182:3;176:10;171:3;164:23;98:2;93:3;89:12;82:19;;123:2;118:3;114:12;107:19;;148:2;143:3;139:12;132:19;;36:153;;;274:1;267:3;263:2;259:12;254:3;250:22;246:30;315:4;311:9;305:3;299:10;295:26;356:4;350:3;344:10;340:21;389:7;380;377:20;372:3;365:33;3:399;;;6925:24:35;;;;;;;;;;;49:4:-1;39:7;30;26:21;22:32;13:7;6:49;6925:24:35;;;6889:61;;;;;;;;;;;;;36:153:-1;66:2;61:3;58:11;36:153;;182:3;176:10;171:3;164:23;98:2;93:3;89:12;82:19;;123:2;118:3;114:12;107:19;;148:2;143:3;139:12;132:19;;36:153;;;274:1;267:3;263:2;259:12;254:3;250:22;246:30;315:4;311:9;305:3;299:10;295:26;356:4;350:3;344:10;340:21;389:7;380;377:20;372:3;365:33;3:399;;;6889:61:35;;;;;;;;;;;;;;;;;;;;;;;14:1:-1;21;16:31;;;;75:4;69:11;64:16;;144:4;140:9;133:4;115:16;111:27;107:43;104:1;100:51;94:4;87:65;169:16;166:1;159:27;225:16;222:1;215:4;212:1;208:12;193:49;7:242;;16:31;36:4;31:9;;7:242;;6872:78:35;;;;;;;;6964:7;6956:69;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;7038:27;7058:3;7063:1;7038:19;:27::i;:::-;7031:34;;;;6741:329;;;:::o;23032:992:100:-;23107:4;970:1:53;953:13;;:18;;;;;;;;;;;977:20;1000:13;;977:36;;23119:15:100;23137:13;:11;:13::i;:::-;:38;;;23176:10;23137:50;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;23137:50:100;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;23137:50:100;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;23137:50:100;;;;;;;;;;;;;;;;23119:68;;23201:20;23213:7;23201:11;:20::i;:::-;23193:48;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23388:27;23418:10;:19;23429:7;23418:19;;;;;;;;;;;;;;;23388:49;;23480:1;23447:35;;:9;:21;;;;;;;;;;;;:35;;;23443:179;;23510:6;:29;23517:9;:21;;;;;;;;;;;;23510:29;;;;;;;;;;;;;;;:37;;:46;;;;23557:7;23510:55;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;23510:55:100;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;23510:55:100;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;23510:55:100;;;;;;;;;;;;;;;;23509:56;23492:123;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23443:179;23627:26;23656:115;23725:31;:40;;;23656:9;:27;;:57;;;:61;;:115;;;;:::i;:::-;23627:144;;23806:3;23785:18;:24;23777:65;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23878:51;23892:20;23914:7;23923:5;23878:13;:51::i;:::-;23942:10;:19;23953:7;23942:19;;;;;;;;;;;;;;;;23935:26;;;;;;;;;;;;:::i;:::-;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23994:7;23972:30;;;;;;;;;;;;24015:4;24008:11;;;;;1050:13:53;;1034:12;:29;1026:56;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23032:992:100;;;;:::o;899:77:4:-;937:7;963:6;;;;;;;;;;;956:13;;899:77;:::o;44119:397:100:-;44213:16;44239:28;44270:6;:15;44277:7;44270:15;;;;;;;;;;;;;;;:23;;:29;;;;44300:1;44270:32;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;44270:32:100;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;44270:32:100;;;;;;39:16:-1;36:1;17:17;2:54;44270:32:100;101:4:-1;97:9;90:4;84;80:15;76:31;69:5;65:43;126:6;120:4;113:20;0:138;13:2;8:3;5:11;2:2;;;29:1;26;19:12;2:2;44270:32:100;;;;;;;;;;;;;19:11:-1;14:3;11:20;8:2;;;44:1;41;34:12;8:2;71:11;66:3;62:21;55:28;;123:4;118:3;114:14;159:9;141:16;138:31;135:2;;;182:1;179;172:12;135:2;219:3;213:10;331:9;325:2;311:12;307:21;289:16;285:44;282:59;261:11;247:12;244:29;233:116;230:2;;;362:1;359;352:12;230:2;385:12;380:3;373:25;421:4;416:3;412:14;405:21;;0:433;;44270:32:100;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;80:1;75:3;71:11;64:39;52:2;49:1;45:10;40:15;;8:100;;;12:14;44270:32:100;;;;;;;;;;;44239:63;;44308:30;44355:1;44341:16;;;;;;;;;;;;;;;;;;;;;;29:2:-1;21:6;17:15;117:4;105:10;97:6;88:34;148:4;140:6;136:17;126:27;;0:157;44341:16:100;;;;44308:49;;44368:9;44380:1;44368:13;;44363:123;44387:1;44383;:5;44363:123;;;44431:13;:11;:13::i;:::-;:32;;;44464:11;44476:1;44464:14;;;;;;;;;;;;;;44431:48;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;44431:48:100;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;44431:48:100;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;44431:48:100;;;;;;;;;;;;;;;;44412:13;44426:1;44412:16;;;;;;;;;;;;;:67;;;;;;;;;;;44394:8;44400:1;44394;:5;;:8;;;;:::i;:::-;44390:12;;44363:123;;;;44498:13;44491:20;;;;44119:397;;;;:::o;1250:92:4:-;1290:4;1329:6;;;;;;;;;;;1313:22;;:12;:10;:12::i;:::-;:22;;;1306:29;;1250:92;:::o;16639:608:100:-;16705:7;16738:29;:20;:18;:20::i;:::-;:27;:29::i;:::-;16728:6;:39;;16720:84;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;16810:17;16833:19;16867:72;16876:31;16887:19;;16876:6;:10;;:31;;;;:::i;:::-;16909:29;:20;:18;:20::i;:::-;:27;:29::i;:::-;16867:8;:72::i;:::-;16858:81;;16972:196;16994:29;:20;:18;:20::i;:::-;:27;:29::i;:::-;17031;:20;:18;:20::i;:::-;:27;:29::i;:::-;17068:6;17082:29;:20;:18;:20::i;:::-;:27;:29::i;:::-;17119:24;:33;;;17160:2;16972:14;:196::i;:::-;16945:223;;;;;;;;17181:61;:52;17210:9;17221:11;17181:28;:52::i;:::-;:59;:61::i;:::-;17174:68;;;;16639:608;;;:::o;37411:600::-;37541:4;970:1:53;953:13;;:18;;;;;;;;;;;977:20;1000:13;;977:36;;37555:15:100;37573:13;:11;:13::i;:::-;:38;;;37612:10;37573:50;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;37573:50:100;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;37573:50:100;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;37573:50:100;;;;;;;;;;;;;;;;37555:68;;37637:25;37654:7;37637:16;:25::i;:::-;37629:49;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;37692:22;37704:9;37692:11;:22::i;:::-;37684:50;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;37740:28;37771:6;:15;37778:7;37771:15;;;;;;;;;;;;;;;37740:46;;37800:5;:13;;:22;;;;37823:9;37800:33;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;37800:33:100;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;37800:33:100;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;37800:33:100;;;;;;;;;;;;;;;;37792:71;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;37869:5;:13;;:20;;;;37890:9;37901:12;37915:13;37869:60;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;37869:60:100;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;37869:60:100;;;;37979:9;37940:49;;37970:7;37940:49;;;;;;;;;;;;38002:4;37995:11;;;;1050:13:53;;1034:12;:29;1026:56;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;37411:600:100;;;;;;:::o;2856:109:35:-;2903:7;2925:35;2947:12;2925:21;:35::i;:::-;2918:42;;2856:109;:::o;5579:321::-;5652:7;5667:16;5689:12;467:8;5724:28;;5770:11;5753:29;;;;;;;;;;;;;;;49:4:-1;39:7;30;26:21;22:32;13:7;6:49;5753:29:35;;;5724:59;;;;;;;;;;;;;36:153:-1;66:2;61:3;58:11;36:153;;182:3;176:10;171:3;164:23;98:2;93:3;89:12;82:19;;123:2;118:3;114:12;107:19;;148:2;143:3;139:12;132:19;;36:153;;;274:1;267:3;263:2;259:12;254:3;250:22;246:30;315:4;311:9;305:3;299:10;295:26;356:4;350:3;344:10;340:21;389:7;380;377:20;372:3;365:33;3:399;;;5724:59:35;;;;;;;;;;;;;;;;;;;;;;;14:1:-1;21;16:31;;;;75:4;69:11;64:16;;144:4;140:9;133:4;115:16;111:27;107:43;104:1;100:51;94:4;87:65;169:16;166:1;159:27;225:16;222:1;215:4;212:1;208:12;193:49;7:242;;16:31;36:4;31:9;;7:242;;5707:76:35;;;;;;;;5797:7;5789:66;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5868:27;5888:3;5893:1;5868:19;:27::i;:::-;5861:34;;;;5579:321;;;:::o;42945:540:100:-;43024:16;43042:7;43051;43060;43069:16;43087:7;43096;43121:25;43138:7;43121:16;:25::i;:::-;43113:59;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;43178:28;43209:6;:15;43216:7;43209:15;;;;;;;;;;;;;;;43178:46;;43245:5;:13;;:21;;;;:23;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;43245:23:100;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;43245:23:100;;;;;;39:16:-1;36:1;17:17;2:54;43245:23:100;101:4:-1;97:9;90:4;84;80:15;76:31;69:5;65:43;126:6;120:4;113:20;0:138;13:2;8:3;5:11;2:2;;;29:1;26;19:12;2:2;43245:23:100;;;;;;;;;;;;;19:11:-1;14:3;11:20;8:2;;;44:1;41;34:12;8:2;71:11;66:3;62:21;55:28;;123:4;118:3;114:14;159:9;141:16;138:31;135:2;;;182:1;179;172:12;135:2;219:3;213:10;331:9;325:2;311:12;307:21;289:16;285:44;282:59;261:11;247:12;244:29;233:116;230:2;;;362:1;359;352:12;230:2;385:12;380:3;373:25;421:4;416:3;412:14;405:21;;0:433;;43245:23:100;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;80:1;75:3;71:11;64:39;52:2;49:1;45:10;40:15;;8:100;;;12:14;43245:23:100;;;;;;;;;;;43276:25;:5;:16;;:23;;;;;;;;;;;;;;;;;;:25::i;:::-;43309:29;:5;:20;;:27;;;;;;;;;;;;;;;;;;:29::i;:::-;43346:5;:25;;;43379:5;:17;;43404:35;:5;:15;;:26;;:33;;;;;;;;;;;;;;;;;;:35::i;:::-;43447:5;:15;;:27;;;43230:250;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;42945:540;;;;;;;;;:::o;55107:115::-;970:1:53;953:13;;:18;;;;;;;;;;;977:20;1000:13;;977:36;;1103:9:4;:7;:9::i;:::-;1095:54;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;55212:5:100;55190:19;:27;;;;1050:13:53;;1034:12;:29;1026:56;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;55107:115:100;;:::o;3185:230:36:-;1103:9:4;:7;:9::i;:::-;1095:54;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3289:1:36;3262:29;;:15;:29;;;;3254:74;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3355:15;3334:8;;:37;;;;;;;;;;;;;;;;;;3394:15;3382:28;;;;;;;;;;;;3185:230;:::o;24295:701:100:-;24360:4;970:1:53;953:13;;:18;;;;;;;;;;;977:20;1000:13;;977:36;;24372:15:100;24390:13;:11;:13::i;:::-;:38;;;24429:10;24390:50;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;24390:50:100;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;24390:50:100;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;24390:50:100;;;;;;;;;;;;;;;;24372:68;;24454:20;24466:7;24454:11;:20::i;:::-;24446:48;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;24508:23;24525:5;24508:16;:23::i;:::-;24500:57;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;24571:43;24606:7;24571:34;:43::i;:::-;24563:91;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;24668:41;24703:5;24668:34;:41::i;:::-;24660:85;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;24751:27;24781:10;:19;24792:7;24781:19;;;;;;;;;;;;;;;24751:49;;24843:1;24810:35;;:9;:21;;;;;;;;;;;;:35;;;24806:88;;24855:32;24868:9;24879:7;24855:12;:32::i;:::-;;24806:88;24923:5;24899:9;:21;;;:29;;;;;;;;;;;;;;;;;;24968:5;24939:35;;24959:7;24939:35;;;;;;;;;;;;24987:4;24980:11;;;;1050:13:53;;1034:12;:29;1026:56;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;24295:701:100;;;;:::o;41535:291::-;41630:25;41665:15;41683:13;:11;:13::i;:::-;:29;;;41713:6;41683:37;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;41683:37:100;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;41683:37:100;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;41683:37:100;;;;;;;;;;;;;;;;41665:55;;41734:20;41746:7;41734:11;:20::i;:::-;41726:48;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;41787:10;:19;41798:7;41787:19;;;;;;;;;;;;;;;:30;;:34;;41780:41;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;41535:291;;;:::o;55379:473::-;970:1:53;953:13;;:18;;;;;;;;;;;977:20;1000:13;;977:36;;55442:15:100;55460:13;:11;:13::i;:::-;:38;;;55499:10;55460:50;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;55460:50:100;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;55460:50:100;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;55460:50:100;;;;;;;;;;;;;;;;55442:68;;55524:25;55541:7;55524:16;:25::i;:::-;55516:59;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;55581:28;55612:6;:15;55619:7;55612:15;;;;;;;;;;;;;;;55581:46;;55655:62;55687:29;;55655:5;:15;;:27;;;:31;;:62;;;;:::i;:::-;55648:3;:69;;55633:159;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;55827:20;:18;:20::i;:::-;55798:5;:15;;:26;;:49;;;;;;;;;;;1019:1:53;;1050:13;;1034:12;:29;1026:56;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;55379:473:100;:::o;11484:107::-;11543:7;11565:21;;11558:28;;11484:107;:::o;3838:61::-;;;;;;;;;;;;;;:::o;25957:446::-;26063:4;26077:15;26095:13;:11;:13::i;:::-;:38;;;26134:10;26095:50;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;26095:50:100;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;26095:50:100;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;26095:50:100;;;;;;;;;;;;;;;;26077:68;;26159:20;26171:7;26159:11;:20::i;:::-;26151:48;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;26205:27;26235:10;:19;26246:7;26235:19;;;;;;;;;;;;;;;26205:49;;26275:61;26295:9;26306:7;26315:12;;26275:61;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;30:3:-1;22:6;14;1:33;99:1;93:3;85:6;81:16;74:27;137:4;133:9;126:4;121:3;117:14;113:30;106:37;;169:3;161:6;157:16;147:26;;26275:61:100;;;;;;26329:6;;26275:61;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;30:3:-1;22:6;14;1:33;99:1;93:3;85:6;81:16;74:27;137:4;133:9;126:4;121:3;117:14;113:30;106:37;;169:3;161:6;157:16;147:26;;26275:61:100;;;;;;:19;:61::i;:::-;26260:121;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;26394:4;26387:11;;;;25957:446;;;;;;:::o;231:146:131:-;325:47;357:6;365;325:31;:47::i;:::-;231:146;;:::o;45463:186:100:-;45532:7;45541;45564:31;:37;;;45603:31;:40;;;45556:88;;;;45463:186;;:::o;55966:340::-;970:1:53;953:13;;:18;;;;;;;;;;;977:20;1000:13;;977:36;;6017:15:100;:13;:15::i;:::-;:25;;;6043:10;6017:37;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;6017:37:100;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;6017:37:100;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;6017:37:100;;;;;;;;;;;;;;;;6009:82;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;56064:25;56081:7;56064:16;:25::i;:::-;56056:59;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;56121:28;56152:6;:15;56159:7;56152:15;;;;;;;;;;;;;;;56121:46;;56202:60;56219:42;56259:1;56219:35;:5;:15;;:26;;:33;;;;;;;;;;;;;;;;;;:35::i;:::-;:39;;:42;;;;:::i;:::-;56202:16;:60::i;:::-;56173:5;:15;;:26;;:89;;;;;;;;;;;56298:3;56268:5;:15;;:27;;:33;;;;6097:1;1050:13:53;;1034:12;:29;1026:56;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;55966:340:100;;:::o;40936:407::-;41018:4;41030:15;41048;:13;:15::i;:::-;:41;;;41090:7;41048:50;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;41048:50:100;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;41048:50:100;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;41048:50:100;;;;;;;;;;;;;;;;41030:68;;41298:40;41330:7;41298:31;:40::i;:::-;41279:15;41291:2;41279:7;:11;;:15;;;;:::i;:::-;:59;;41272:66;;;40936:407;;;:::o;3903:57::-;;;;;;;;;;;;;;:::o;33646:300::-;33715:4;970:1:53;953:13;;:18;;;;;;;;;;;977:20;1000:13;;977:36;;33727:15:100;33745:13;:11;:13::i;:::-;:38;;;33784:10;33745:50;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;33745:50:100;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;33745:50:100;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;33745:50:100;;;;;;;;;;;;;;;;33727:68;;33847:1;33809:6;:15;33816:7;33809:15;;;;;;;;;;;;;;;:23;;:35;;;:39;33801:73;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;33887:54;33898:7;33907:9;33926:1;33938;33887:10;:54::i;:::-;33880:61;;;1050:13:53;;1034:12;:29;1026:56;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;33646:300:100;;;;:::o;10407:676::-;10525:4;1103:9:4;:7;:9::i;:::-;1095:54;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;10573:29:100;:20;:18;:20::i;:::-;:27;:29::i;:::-;10554:15;:48;;10539:119;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;10691:24;:33;;;10679:8;:45;;:140;;;;10737:82;10778:24;:40;;10737:82;;;;;;;;;;;;;;;;;:33;10754:15;10737:16;:33::i;:::-;:40;;:82;;;;:::i;:::-;10736:83;10679:140;10664:212;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;10909:87;;;;;;;;10941:8;10909:87;;;;10957:33;10974:15;10957:16;:33::i;:::-;10909:87;;;10882:24;:114;;;;;;;;;;;;;;;;;;;;;;;;;;;;11007:54;11035:8;11045:15;11007:54;;;;;;;;;;;;;;;;;;;;;;;;11074:4;11067:11;;10407:676;;;;:::o;46400:361::-;46464:16;46488:18;46509:13;:11;:13::i;:::-;46488:34;;46528:24;46569:20;:27;;;;46555:42;;;;;;;;;;;;;;;;;;;;;;29:2:-1;21:6;17:15;117:4;105:10;97:6;88:34;148:4;140:6;136:17;126:27;;0:157;46555:42:100;;;;46528:69;;46608:9;46620:1;46608:13;;46603:134;46627:7;:14;46623:1;:18;46603:134;;;46678:8;:27;;;46706:20;46727:1;46706:23;;;;;;;;;;;;;;;;;;;;;;;;;46678:52;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;46678:52:100;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;46678:52:100;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;46678:52:100;;;;;;;;;;;;;;;;46665:7;46673:1;46665:10;;;;;;;;;;;;;:65;;;;;;;;;;;46647:8;46653:1;46647;:5;;:8;;;;:::i;:::-;46643:12;;46603:134;;;;46749:7;46742:14;;;;46400:361;:::o;381:188:131:-;486:7;510:54;545:6;553:10;510:34;:54::i;:::-;503:61;;381:188;;;;:::o;46122:114:100:-;46180:16;46211:20;46204:27;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;46122:114;:::o;56441:264::-;56526:7;56549:25;56566:7;56549:16;:25::i;:::-;56541:59;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;56606:28;56637:6;:15;56644:7;56637:15;;;;;;;;;;;;;;;56606:46;;56665:35;:5;:15;;:26;;:33;;;;;;;;;;;;;;;;;;:35::i;:::-;56658:42;;;56441:264;;;:::o;39974:740::-;40053:7;40072:20;40084:7;40072:11;:20::i;:::-;40068:628;;;40109:31;:37;;;40102:44;;;;40068:628;40163:25;40180:7;40163:16;:25::i;:::-;40159:537;;;40198:18;40219:48;40228:1;40231:6;:15;40238:7;40231:15;;;;;;;;;;;;;;;:23;;:35;;;40219:8;:48::i;:::-;40198:69;;40275:29;40307:6;:15;40314:7;40307:15;;;;;;;;;;;;;;;:27;;40275:59;;40367:1;40346:11;:18;;;;:22;40342:284;;;40385:9;40397:25;40420:1;40397:11;:18;;;;:22;;:25;;;;:::i;:::-;40385:37;;40380:238;40428:1;40424;:5;40380:238;;;40521:3;40461:56;40480:27;:36;;;40461:11;40473:1;40461:14;;;;;;;;;;;;;;;;:18;;:56;;;;:::i;:::-;:63;40457:151;;40553:23;40562:1;40565:10;40553:8;:23::i;:::-;40540:36;;40590:5;;40457:151;40435:8;40441:1;40435;:5;;:8;;;;:::i;:::-;40431:12;;40380:238;;;;40342:284;40640:49;40678:10;40640:27;:33;;;:37;;:49;;;;:::i;:::-;40633:56;;;;;;40159:537;40708:1;40701:8;;39974:740;;;;:::o;2178:266:35:-;2223:7;2238:16;2260:12;518:8;2295:21;;2317:18;;;;;;49:4:-1;39:7;30;26:21;22:32;13:7;6:49;2317:18:35;;;2295:41;;;;;;;;;;;;;36:153:-1;66:2;61:3;58:11;36:153;;182:3;176:10;171:3;164:23;98:2;93:3;89:12;82:19;;123:2;118:3;114:12;107:19;;148:2;143:3;139:12;132:19;;36:153;;;274:1;267:3;263:2;259:12;254:3;250:22;246:30;315:4;311:9;305:3;299:10;295:26;356:4;350:3;344:10;340:21;389:7;380;377:20;372:3;365:33;3:399;;;2295:41:35;;;;;;;;;;;;;;;;;;;;;;;14:1:-1;21;16:31;;;;75:4;69:11;64:16;;144:4;140:9;133:4;115:16;111:27;107:43;104:1;100:51;94:4;87:65;169:16;166:1;159:27;225:16;222:1;215:4;212:1;208:12;193:49;7:242;;16:31;36:4;31:9;;7:242;;2278:58:35;;;;;;;;2350:7;2342:57;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2412:27;2432:3;2437:1;2412:19;:27::i;:::-;2405:34;;;;2178:266;:::o;4170:36:100:-;;;;:::o;9347:271::-;9412:4;1103:9:4;:7;:9::i;:::-;1095:54;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;9436:4:100;9432:1;:8;9424:50;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;9496:12;;9488:4;:20;;9480:59;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;9560:4;9545:12;:19;;;;9575:21;9591:4;9575:21;;;;;;;;;;;;;;;;;;9609:4;9602:11;;9347:271;;;:::o;54332:323::-;970:1:53;953:13;;:18;;;;;;;;;;;977:20;1000:13;;977:36;;6017:15:100;:13;:15::i;:::-;:25;;;6043:10;6017:37;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;6017:37:100;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;6017:37:100;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;6017:37:100;;;;;;;;;;;;;;;;6009:82;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;54439:29;54451:16;54439:11;:29::i;:::-;54435:216;;;54478:27;54508:10;:28;54519:16;54508:28;;;;;;;;;;;;;;;54478:58;;54581:1;54548:35;;:9;:21;;;;;;;;;;;;:35;;;54544:101;;54595:41;54608:9;54619:16;54595:12;:41::i;:::-;;54544:101;54435:216;;1050:13:53;;1034:12;:29;1026:56;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;54332:323:100;;:::o;9752:147:35:-;9817:7;9839:55;9892:1;9839:48;9885:1;9839:41;9878:1;9839:34;9861:11;9839:21;:34::i;:::-;:38;;:41;;;;:::i;:::-;:45;;:48;;;;:::i;:::-;:52;;:55;;;;:::i;:::-;9832:62;;9752:147;;;:::o;39098:598:100:-;39141:15;39159:13;:11;:13::i;:::-;:38;;;39198:10;39159:50;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;39159:50:100;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;39159:50:100;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;39159:50:100;;;;;;;;;;;;;;;;39141:68;;39223:25;39240:7;39223:16;:25::i;:::-;39215:59;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;39280:28;39311:6;:15;39318:7;39311:15;;;;;;;;;;;;;;;39280:46;;39370:1;39341:5;:25;;;:30;;39333:70;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;39446:12;39417:5;:25;;;:41;;39409:87;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;39522:5;:20;;39503:5;:16;;:39;;;;;;;;;;;39555:5;:20;;;39548:27;;;;;;;;39588:5;:25;;39581:32;;;39656:7;39624:67;;;39665:25;:5;:16;;:23;;;;;;;;;;;;;;;;;;:25::i;:::-;39624:67;;;;;;;;;;;;;;;;;;39098:598;;:::o;13767:1070::-;13924:4;970:1:53;953:13;;:18;;;;;;;;;;;977:20;1000:13;;977:36;;13936:15:100;13954:13;:11;:13::i;:::-;:38;;;13993:10;13954:50;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;13954:50:100;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;13954:50:100;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;13954:50:100;;;;;;;;;;;;;;;;13936:68;;14010:31;14033:7;14010:22;:31::i;:::-;;14056:20;14068:7;14056:11;:20::i;:::-;14055:21;:51;;;;;14081:25;14098:7;14081:16;:25::i;:::-;14080:26;14055:51;14047:82;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;14135:25;14163:15;:13;:15::i;:::-;:41;;;14205:7;14163:50;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;14163:50:100;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;14163:50:100;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;14163:50:100;;;;;;;;;;;;;;;;14135:78;;14248:31;:37;;;14227:17;:58;;14219:88;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;14313:27;14343:10;:19;14354:7;14343:19;;;;;;;;;;;;;;;14313:49;;14368:14;14385:13;:11;:13::i;:::-;:32;;;14418:7;14385:41;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;14385:41:100;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;14385:41:100;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;14385:41:100;;;;;;;;;;;;;;;;14368:58;;14447:65;14469:9;14480:7;14489:6;14497:14;;14447:65;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;30:3:-1;22:6;14;1:33;99:1;93:3;85:6;81:16;74:27;137:4;133:9;126:4;121:3;117:14;113:30;106:37;;169:3;161:6;157:16;147:26;;14447:65:100;;;;;;:21;:65::i;:::-;14432:127;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;14580:61;14600:9;14611:7;14620:12;;14580:61;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;30:3:-1;22:6;14;1:33;99:1;93:3;85:6;81:16;74:27;137:4;133:9;126:4;121:3;117:14;113:30;106:37;;169:3;161:6;157:16;147:26;;14580:61:100;;;;;;14634:6;;14580:61;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;30:3:-1;22:6;14;1:33;99:1;93:3;85:6;81:16;74:27;137:4;133:9;126:4;121:3;117:14;113:30;106:37;;169:3;161:6;157:16;147:26;;14580:61:100;;;;;;:19;:61::i;:::-;14565:121;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;14692:20;14718:7;14692:34;;39:1:-1;33:3;27:10;23:18;57:10;52:3;45:23;79:10;72:17;;0:93;14692:34:100;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;14732:44;14756:7;14773:1;14732:23;:44::i;:::-;;14807:7;14787:28;;;;;;;;;;;;14828:4;14821:11;;;;;;1050:13:53;;1034:12;:29;1026:56;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;13767:1070:100;;;;;;;;;:::o;57143:1008::-;57263:7;57288:20;57300:7;57288:11;:20::i;:::-;57280:48;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;57357:16;:14;:16::i;:::-;57342:11;:31;;57334:79;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;57419:33;57455:10;:19;57466:7;57455:19;;;;;;;;;;;;;;;:37;;57419:73;;57514:36;57531:7;:18;;;57514:7;:12;;;:16;;:36;;;;:::i;:::-;57506:5;:44;57498:76;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;57597:7;:12;;;57588:5;:21;;:47;;;;;57634:1;57613:7;:18;;;:22;57588:47;57580:79;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;57665:17;57723:11;57685:7;:15;;:22;57701:5;57685:22;;;;;;;;;;;:34;;;:49;57665:69;;57740:16;57786:25;57809:1;57786:7;:18;;;:22;;:25;;;;:::i;:::-;57759:23;57769:7;:12;;;57759:5;:9;;:23;;;;:::i;:::-;:52;57740:71;;57817:18;57875:11;57838:7;:15;;:22;57854:5;57838:22;;;;;;;;;;;:34;;;:48;:130;;;;;57941:11;57897:7;:15;;:29;57913:12;57923:1;57913:5;:9;;:12;;;;:::i;:::-;57897:29;;;;;;;;;;;:41;;;:55;:70;;;;57956:11;57897:70;57838:130;57817:151;;57989:12;:29;;;;58005:13;57989:29;57974:131;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;58118:7;:15;;:22;58134:5;58118:22;;;;;;;;;;;:28;;;;;;;;;;;;58111:35;;;;;;57143:1008;;;;;:::o;1297:763:35:-;1491:7;1500;1539:1;1523:12;:17;;:38;;;;;1560:1;1544:12;:17;;1523:38;1515:72;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1593:23;1622:25;1653:12;1671:16;295:8;1710:23;;1758:10;1770:12;1784:10;1796:12;1810:8;1820:9;1741:89;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;49:4:-1;39:7;30;26:21;22:32;13:7;6:49;1741:89:35;;;1710:126;;;;;;;;;;;;;36:153:-1;66:2;61:3;58:11;36:153;;182:3;176:10;171:3;164:23;98:2;93:3;89:12;82:19;;123:2;118:3;114:12;107:19;;148:2;143:3;139:12;132:19;;36:153;;;274:1;267:3;263:2;259:12;254:3;250:22;246:30;315:4;311:9;305:3;299:10;295:26;356:4;350:3;344:10;340:21;389:7;380;377:20;372:3;365:33;3:399;;;1710:126:35;;;;;;;;;;;;;;;;;;;;;;;14:1:-1;21;16:31;;;;75:4;69:11;64:16;;144:4;140:9;133:4;115:16;111:27;107:43;104:1;100:51;94:4;87:65;169:16;166:1;159:27;225:16;222:1;215:4;212:1;208:12;193:49;7:242;;16:31;36:4;31:9;;7:242;;1693:143:35;;;;;;;;1850:7;1842:59;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1925:27;1945:3;1950:1;1925:19;:27::i;:::-;1907:45;;1978:28;1998:3;2003:2;1978:19;:28::i;:::-;1958:48;;2020:15;2037:17;2012:43;;;;;;;;1297:763;;;;;;;;;:::o;30707:926:100:-;30790:4;970:1:53;953:13;;:18;;;;;;;;;;;977:20;1000:13;;977:36;;30824:29:100;:20;:18;:20::i;:::-;:27;:29::i;:::-;30810:10;:43;;30802:93;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;30901:15;30919:13;:11;:13::i;:::-;:38;;;30958:10;30919:50;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;30919:50:100;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;30919:50:100;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;30919:50:100;;;;;;;;;;;;;;;;30901:68;;30975:31;30998:7;30975:22;:31::i;:::-;;31021:20;31033:7;31021:11;:20::i;:::-;31020:21;31012:65;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;31092:25;31109:7;31092:16;:25::i;:::-;31091:26;31083:66;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;31155:25;31183:15;:13;:15::i;:::-;:41;;;31225:7;31183:50;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;31183:50:100;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;31183:50:100;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;31183:50:100;;;;;;;;;;;;;;;;31155:78;;31268:27;:33;;;31247:17;:54;;31239:89;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;31334:28;31365:6;:15;31372:7;31365:15;;;;;;;;;;;;;;;31334:46;;31401:4;31386:5;:12;;;:19;;;;;;;;;;;;;;;;;;31430:28;31447:10;31430:16;:28::i;:::-;31411:5;:16;;:47;;;;;;;;;;;31482:37;;;;;;;;31495:20;:18;:20::i;:::-;31482:37;;;;31517:1;31482:37;;;31464:5;:15;;:55;;;;;;;;;;;;;;;;;;;;;;;;;;;;31525:16;31547:7;31525:30;;39:1:-1;33:3;27:10;23:18;57:10;52:3;45:23;79:10;72:17;;0:93;31525:30:100;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;31591:7;31566:45;;;31600:10;31566:45;;;;;;;;;;;;;;;;;;31624:4;31617:11;;;;;1050:13:53;;1034:12;:29;1026:56;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;30707:926:100;;;;:::o;9824:347::-;9902:4;1103:9:4;:7;:9::i;:::-;1095:54;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;9926:6:100;9922:1;:10;9914:63;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;10001:23;;9991:6;:33;;9983:83;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;10098:6;10072:23;:32;;;;10115:34;10142:6;10115:34;;;;;;;;;;;;;;;;;;10162:4;10155:11;;9824:347;;;:::o;1970:107:4:-;1103:9;:7;:9::i;:::-;1095:54;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2042:28;2061:8;2042:18;:28::i;:::-;1970:107;:::o;47539:128:100:-;47598:4;47661:1;47617:10;:19;47628:7;47617:19;;;;;;;;;;;;;;;:30;;:34;;:41;;;;;;;;;;;;;;;;:45;47610:52;;47539:128;;;:::o;7767:322:35:-;7838:7;7853:16;7875:12;698:9;7910:33;;7961:11;7944:29;;;;;;;;;;;;;;;49:4:-1;39:7;30;26:21;22:32;13:7;6:49;7944:29:35;;;7910:64;;;;;;;;;;;;;36:153:-1;66:2;61:3;58:11;36:153;;182:3;176:10;171:3;164:23;98:2;93:3;89:12;82:19;;123:2;118:3;114:12;107:19;;148:2;143:3;139:12;132:19;;36:153;;;274:1;267:3;263:2;259:12;254:3;250:22;246:30;315:4;311:9;305:3;299:10;295:26;356:4;350:3;344:10;340:21;389:7;380;377:20;372:3;365:33;3:399;;;7910:64:35;;;;;;;;;;;;;;;;;;;;;;;14:1:-1;21;16:31;;;;75:4;69:11;64:16;;144:4;140:9;133:4;115:16;111:27;107:43;104:1;100:51;94:4;87:65;169:16;166:1;159:27;225:16;222:1;215:4;212:1;208:12;193:49;7:242;;16:31;36:4;31:9;;7:242;;7893:81:35;;;;;;;;7988:7;7980:64;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8057:27;8077:3;8082:1;8057:19;:27::i;:::-;8050:34;;;;7767:322;;;:::o;25214:384:100:-;25268:4;970:1:53;953:13;;:18;;;;;;;;;;;977:20;1000:13;;977:36;;25280:15:100;25298:13;:11;:13::i;:::-;:38;;;25337:10;25298:50;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;25298:50:100;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;25298:50:100;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;25298:50:100;;;;;;;;;;;;;;;;25280:68;;25362:20;25374:7;25362:11;:20::i;:::-;25354:48;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;25408:27;25438:10;:19;25449:7;25438:19;;;;;;;;;;;;;;;25408:49;;25504:1;25471:35;;:9;:21;;;;;;;;;;;;:35;;;;25463:75;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;25544:32;25557:9;25568:7;25544:12;:32::i;:::-;;25589:4;25582:11;;;;1050:13:53;;1034:12;:29;1026:56;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;25214:384:100;;:::o;3419:135:36:-;3465:9;3499:8;;;;;;;;;;;:27;;;1093:28;;;;;;;;;;;;;;;;49:4:-1;39:7;30;26:21;22:32;13:7;6:49;1093:28:36;;;1083:39;;;;;;3499:49;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;3499:49:36;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;3499:49:36;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;3499:49:36;;;;;;;;;;;;;;;;3482:67;;3419:135;:::o;48581:693:100:-;48655:4;48667:29;48699:6;:13;48706:5;48699:13;;;;;;;;;;;;;;;48667:45;;48763:5;48726:42;;:10;:21;48737:9;48726:21;;;;;;;;;;;;;;;:33;;;;;;;;;;;;:42;;;48718:78;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;48810:6;:14;;:23;;;;48834:9;48810:34;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;48810:34:100;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;48810:34:100;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;48810:34:100;;;;;;;;;;;;;;;;48802:72;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;48880:6;:14;;:21;;;;48902:9;48880:32;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;48880:32:100;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;48880:32:100;;;;48918:18;48939:6;:14;;:26;;;48918:47;;49038:1;49024:10;:15;49020:76;;;49049:13;:11;:13::i;:::-;:33;;;49083:5;49049:40;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;49049:40:100;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;49049:40:100;;;;49020:76;49101:46;49125:9;49144:1;49101:23;:46::i;:::-;;49153:43;49171:5;49178:17;49193:1;49178:10;:14;;:17;;;;:::i;:::-;49153;:43::i;:::-;49242:9;49207:45;;49235:5;49207:45;;;;;;;;;;;;49265:4;49258:11;;;;48581:693;;;;:::o;1274:134:3:-;1332:7;1358:43;1362:1;1365;1358:43;;;;;;;;;;;;;;;;;:3;:43::i;:::-;1351:50;;1274:134;;;;:::o;834:176::-;892:7;911:9;927:1;923;:5;911:17;;951:1;946;:6;;938:46;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1002:1;995:8;;;834:176;;;;:::o;8999:150:35:-;9083:7;9113:30;9133:2;9137:5;9113:19;:30::i;:::-;9105:39;;9098:46;;8999:150;;;;:::o;1724:92:20:-;1782:7;1804:1;:7;;;1797:14;;1724:92;;;:::o;35349:1051:100:-;35461:4;35483:23;35500:5;35483:16;:23::i;:::-;:49;;;;;35510:22;35522:9;35510:11;:22::i;:::-;35483:49;35475:85;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;35566:29;35598:6;:13;35605:5;35598:13;;;;;;;;;;;;;;;35566:45;;35654:12;;35625:6;:14;;:26;;;:41;35617:85;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;35753:5;35716:42;;:10;:21;35727:9;35716:21;;;;;;;;;;;;;;;:33;;;;;;;;;;;;:42;;;35708:78;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;35801:6;:14;;:23;;;;35825:9;35801:34;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;35801:34:100;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;35801:34:100;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;35801:34:100;;;;;;;;;;;;;;;;35800:35;35792:64;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;35862:18;35883:33;35914:1;35883:6;:14;;:26;;;:30;;:33;;;;:::i;:::-;35862:54;;35922:6;:14;;:19;;;;35942:9;35922:30;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;35922:30:100;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;35922:30:100;;;;35966:41;36001:5;35966:34;:41::i;:::-;35958:80;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;36052:45;36087:9;36052:34;:45::i;:::-;36044:88;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;36156:1;36142:10;:15;36138:91;;;36167:13;:11;:13::i;:::-;:31;;;36199:5;36206:6;36214:7;36167:55;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;36167:55:100;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;36167:55:100;;;;36138:91;36234:41;36258:9;36269:5;36234:23;:41::i;:::-;;36281:43;36299:5;36306:17;36321:1;36306:10;:14;;:17;;;;:::i;:::-;36281;:43::i;:::-;36368:9;36335:43;;36361:5;36335:43;;;;;;;;;;;;36391:4;36384:11;;;;35349:1051;;;;;;:::o;3177:379:35:-;3280:7;3388:19;3424:9;3410:11;:23;;;;;;3388:45;;3470:1;3457:9;3443:11;:23;;;;;;:28;3439:113;;;3488:11;3481:18;;;;;3439:113;3527:18;3543:1;3527:11;:15;;:18;;;;:::i;:::-;3520:25;;;3177:379;;;;;:::o;9309:255::-;9393:7;9429:13;9439:2;9429:5;:9;;:13;;;;:::i;:::-;9416:2;:9;:26;;9408:59;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;9473:9;9535:2;9528:5;9524:14;9520:2;9516:23;9510:30;9505:35;;9558:1;9551:8;;;9309:255;;;;:::o;28583:507:100:-;28742:4;28787:2;28762:14;:21;:27;28754:69;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;28900:6;28844:62;;28878:14;28868:25;;;;;;28860:34;;28844:62;;;28829:124;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;28988:14;28959:9;:20;;:26;;:43;;;;;;;;;;;;:::i;:::-;;29044:7;29013:55;;;29053:14;29013:55;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;80:1;75:3;71:11;64:39;52:2;49:1;45:10;40:15;;8:100;;;12:14;29013:55:100;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;29081:4;29074:11;;28583:507;;;;;;:::o;47878:325::-;47987:4;:11;;;;47979:5;:19;:45;;;;;48017:7;48002:22;;:4;48007:5;48002:11;;;;;;;;;;;;;;;;;;;;;;;;;:22;;;47979:45;47971:91;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;48068:17;48088:18;48104:1;48088:4;:11;;;;:15;;:18;;;;:::i;:::-;48068:38;;48126:4;48131:9;48126:15;;;;;;;;;;;;;;;;;;;;;;;;;48112:4;48117:5;48112:11;;;;;;;;;;;;;;;;:29;;;;;;;;;;;;;;;;;;48154:4;48159:9;48154:15;;;;;;;;;;;;;;;;48147:22;;;;;;;;;;;48189:9;48175:4;:23;;;;;:::i;:::-;;47878:325;;;;:::o;26911:511::-;27071:4;27114:2;27091:12;:19;:25;27083:65;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;27179:2;27162:6;:13;:19;27154:52;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;27220:53;27243:7;27252:12;27266:6;27220:22;:53::i;:::-;27212:81;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;27326:12;27299:9;:20;;:24;;:39;;;;;;;;;;;;:::i;:::-;;27378:7;27349:51;;;27387:12;27349:51;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;80:1;75:3;71:11;64:39;52:2;49:1;45:10;40:15;;8:100;;;12:14;27349:51:100;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;27413:4;27406:11;;26911:511;;;;;;:::o;2178:225:4:-;2271:1;2251:22;;:8;:22;;;;2243:73;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2360:8;2331:38;;2352:6;;;;;;;;;;;2331:38;;;;;;;;;;;;2388:8;2379:6;;:17;;;;;;;;;;;;;;;;;;2178:225;:::o;1552:94:20:-;1600:15;;:::i;:::-;1630:11;;;;;;;;1639:1;1630:11;;;1623:18;;1552:94;;;:::o;5108:207::-;5182:15;;:::i;:::-;5205:9;5227:1;:7;;;5217:1;:7;;;:17;5205:29;;5253:1;:7;;;5248:1;:12;;5240:46;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5299:11;;;;;;;;5308:1;5299:11;;;5292:18;;;5108:207;;;;:::o;2597:203::-;2649:15;;:::i;:::-;2685:13;:11;:13::i;:::-;2680:1;:18;;2672:85;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2770:25;;;;;;;;1046;2779:1;:15;2770:25;;;2763:32;;2597:203;;;:::o;9230:283::-;9307:15;;:::i;:::-;9349:1;9338;:7;;;:12;;9330:42;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;9378:9;1046:25;9390:1;:7;;;:21;9378:33;;9444:1;:7;;;1046:25;9425:1;:15;;;;;;:26;9417:57;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;9487:21;;;;;;;;9500:1;:7;;;9496:1;:11;;;;;;9487:21;;;9480:28;;;9230:283;;;;:::o;1230:97::-;1271:15;;:::i;:::-;1301:21;;;;;;;;1046:25;1301:21;;;1294:28;;1230:97;:::o;788:96:0:-;833:15;867:10;860:17;;788:96;:::o;358:104:2:-;416:7;446:1;442;:5;:13;;454:1;442:13;;;450:1;442:13;435:20;;358:104;;;;:::o;3565:314:20:-;3666:15;;:::i;:::-;3691:34;;:::i;:::-;3728:19;3737:9;3728:8;:19::i;:::-;3691:56;;3753:36;;:::i;:::-;3792:21;3801:11;3792:8;:21::i;:::-;3753:60;;3826:48;3833:18;3853:20;3826:6;:48::i;:::-;3819:55;;;;3565:314;;;;:::o;53695:450:100:-;53797:4;53811:19;53833:9;:21;;;;;;;;;;;;53811:43;;53860:28;53891:6;:19;53898:11;53891:19;;;;;;;;;;;;;;;53860:50;;53920:5;:13;;:22;;;;53943:16;53920:40;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;53920:40:100;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;53920:40:100;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;53920:40:100;;;;;;;;;;;;;;;;53916:105;;;53970:44;53984:11;53997:16;53970:13;:44::i;:::-;;53916:105;54058:1;54026:9;:21;;;:34;;;;;;;;;;;;;;;;;;54111:11;54071:52;;54093:16;54071:52;;;;;;;;;;;;54136:4;54129:11;;;;53695:450;;;;:::o;18929:867::-;19017:15;19035:13;:11;:13::i;:::-;:29;;;19065:6;19035:37;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;19035:37:100;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;19035:37:100;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;19035:37:100;;;;;;;;;;;;;;;;19017:55;;19086:20;19098:7;19086:11;:20::i;:::-;19078:48;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;19133:38;;:::i;:::-;19174:45;19191:27;19211:6;19191:19;:27::i;:::-;19174:16;:45::i;:::-;19133:86;;19225:40;;:::i;:::-;19268:73;19325:10;19268:24;:40;;:49;;;;;;;;;;;;;;;;;;;:73;;;;:::i;:::-;19225:116;;19348:44;;:::i;:::-;19395:83;19432:24;:40;;19395:83;;;;;;;;;;;;;;;;;:20;:18;:20::i;:::-;:29;;:83;;;;:::i;:::-;19348:130;;19503:52;19529:10;:19;19540:7;19529:19;;;;;;;;;;;;;;;:25;;19503:52;;;;;;;;;;;;;;;;;:16;:25;;:52;;;;:::i;:::-;19484:71;;19589:104;19613:74;19622:19;:10;:17;:19::i;:::-;19643:43;:34;19660:16;19643:12;:16;;:34;;;;:::i;:::-;:41;:43::i;:::-;19613:8;:74::i;:::-;19589:16;:104::i;:::-;19561:10;:19;19572:7;19561:19;;;;;;;;;;;;;;;:25;;:132;;;;;;;;;;;19726:7;19704:87;;;19735:34;:10;:19;19746:7;19735:19;;;;;;;;;;;;;;;:25;;:32;;;;;;;;;;;;;;;;;;:34::i;:::-;19771:19;:10;:17;:19::i;:::-;19704:87;;;;;;;;;;;;;;;;;;;;;;;;18929:867;;;;;;:::o;4606:144:36:-;4654:11;4692:8;;;;;;;;;;;:27;;;2132:30;;;;;;;;;;;;;;;;49:4:-1;39:7;30;26:21;22:32;13:7;6:49;2132:30:36;;;2122:41;;;;;;4692:52;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;4692:52:36;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;4692:52:36;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;4692:52:36;;;;;;;;;;;;;;;;4673:72;;4606:144;:::o;3073:130:3:-;3131:7;3157:39;3161:1;3164;3157:39;;;;;;;;;;;;;;;;;:3;:39::i;:::-;3150:46;;3073:130;;;;:::o;10151:119:20:-;10228:4;10258:1;:7;;;10247:1;:7;;;:18;10240:25;;10151:119;;;;:::o;20789:1941:100:-;20895:7;20912:15;20930:13;:11;:13::i;:::-;:29;;;20960:6;20930:37;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;20930:37:100;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;20930:37:100;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;20930:37:100;;;;;;;;;;;;;;;;20912:55;;20981:20;20993:7;20981:11;:20::i;:::-;20973:48;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;21147:13;21163:33;21188:7;21163:24;:33::i;:::-;21147:49;;21227:1;21210:19;;:5;:19;;;;21202:69;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;21410:43;21445:7;21410:34;:43::i;:::-;:88;;;;;21457:41;21492:5;21457:34;:41::i;:::-;21410:88;21406:1320;;;21508:40;;:::i;:::-;21551:140;21656:6;:13;21663:5;21656:13;;;;;;;;;;;;;;;:23;;:34;;21551:140;;;;;;;;;;;;;;;;;:86;21611:10;:19;21622:7;21611:19;;;;;;;;;;;;;;;:25;;21551:86;;;;;;;;;;;;;;;;;:41;21581:10;21551:29;:41::i;:::-;:59;;:86;;;;:::i;:::-;:104;;:140;;;;:::i;:::-;21508:183;;21699:20;21722:59;:47;21744:6;:13;21751:5;21744:13;;;;;;;;;;;;;;;:24;;21722:47;;;;;;;;;;;;;;;;;:12;:21;;:47;;;;:::i;:::-;:57;:59::i;:::-;21699:82;;21789:44;;:::i;:::-;21836:80;21866:42;21895:12;21866:24;:12;:22;:24::i;:::-;:28;;:42;;;;:::i;:::-;21836:20;:80::i;:::-;21789:127;;21925:19;21946:16;21966:13;:11;:13::i;:::-;:34;;;22001:7;21966:43;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;21966:43:100;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;21966:43:100;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;21966:43:100;;;;;;;;;;;;;;;;;;;;;;;;;21924:85;;;;22017:24;22044:65;:53;22070:26;22087:8;22070:16;:26::i;:::-;22044:16;:25;;:53;;;;:::i;:::-;:63;:65::i;:::-;22017:92;;22117:24;22144:50;22177:16;22144:28;:16;:26;:28::i;:::-;:32;;:50;;;;:::i;:::-;22117:77;;22202:24;22229:16;:14;:16::i;:::-;22202:43;;22261:11;:16;;;22278:5;22285:12;22261:37;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;22261:37:100;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;22261:37:100;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;22261:37:100;;;;;;;;;;;;;;;;22253:80;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;22349:11;:16;;;22366:7;22375:16;22349:43;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;22349:43:100;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;22349:43:100;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;22349:43:100;;;;;;;;;;;;;;;;22341:88;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;22453:1;22441:8;:13;22437:122;;22474:11;:16;;;22491:11;22504:16;22474:47;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;22474:47:100;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;22474:47:100;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;22474:47:100;;;;;;;;;;;;;;;;22466:84;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;22437:122;22631:5;22571:80;;22604:7;22571:80;;;22613:16;22638:12;22571:80;;;;;;;;;;;;;;;;;;;;;;;;22666:24;:12;:22;:24::i;:::-;22659:31;;;;;;;;;;;;;;21406:1320;22718:1;22711:8;;;;20789:1941;;;;;:::o;182:105:2:-;240:7;271:1;266;:6;;:14;;279:1;266:14;;;275:1;266:14;259:21;;182:105;;;;:::o;2159:459:3:-;2217:7;2463:1;2458;:6;2454:45;;;2487:1;2480:8;;;;2454:45;2509:9;2525:1;2521;:5;2509:17;;2553:1;2548;2544;:5;;;;;;:10;2536:56;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2610:1;2603:8;;;2159:459;;;;;:::o;31637:521:100:-;31703:4;31731:13;:11;:13::i;:::-;:48;;;31780:7;31731:57;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;31731:57:100;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;31731:57:100;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;31731:57:100;;;;;;;;;;;;;;;;31730:58;31715:135;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;32104:1;32043:15;:13;:15::i;:::-;:48;;;32092:7;32043:57;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;32043:57:100;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;32043:57:100;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;32043:57:100;;;;;;;;;;;;;;;;:62;31856:297;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;31637:521;;;:::o;49699:1672::-;49781:4;49793:33;49829:10;:19;49840:7;49829:19;;;;;;;;;;;;;;;:37;;49793:73;;49872:19;49894:16;:14;:16::i;:::-;49872:38;;49916:12;49953:1;49931:7;:18;;;:23;:73;;49961:43;49978:25;50001:1;49978:7;:18;;;:22;;:25;;;;:::i;:::-;49961:7;:12;;;:16;;:43;;;;:::i;:::-;49931:73;;;49957:1;49931:73;49916:88;;50036:1;50015:7;:18;;;:22;:45;;;;;50058:1;50041:19;;:5;:19;;;50015:45;50011:109;;;50110:3;50070:7;:37;;:43;;;;50011:109;50151:1;50130:7;:18;;;:22;:74;;;;;50193:11;50156:7;:15;;:21;50172:4;50156:21;;;;;;;;;;;:33;;;:48;50130:74;50126:302;;;50360:42;;;;;;;;50383:11;50360:42;;;;50396:5;50360:42;;;;;50336:7;:15;;:21;50352:4;50336:21;;;;;;;;;;;:66;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;50417:4;50410:11;;;;;;;50126:302;50532:13;50570:1;50548:7;:18;;;:23;:41;;50578:11;50587:1;50578:4;:8;;:11;;;;:::i;:::-;50548:41;;;50574:1;50548:41;50532:57;;50620:42;;;;;;;;50643:11;50620:42;;;;50656:5;50620:42;;;;;50595:7;:15;;:22;50611:5;50595:22;;;;;;;;;;;:67;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;50693:23;;50672:7;:18;;;:44;50668:682;;;50794:25;50817:1;50794:7;:18;;;:22;;:25;;;;:::i;:::-;50773:7;:18;;:46;;;;50668:682;;;50858:23;;50836:7;:18;;;:45;50832:518;;;50986:7;:15;;:29;51002:7;:12;;;50986:29;;;;;;;;;;;;50979:36;;;;;;;;;;;;;;;;;;;;;;;51038:19;51055:1;51038:7;:12;;;:16;;:19;;;;:::i;:::-;51023:7;:12;;:34;;;;50832:518;;;51167:7;:15;;:29;51183:7;:12;;;51167:29;;;;;;;;;;;;51160:36;;;;;;;;;;;;;;;;;;;;;;;51211:7;:15;;:36;51227:19;51244:1;51227:7;:12;;;:16;;:19;;;;:::i;:::-;51211:36;;;;;;;;;;;;51204:43;;;;;;;;;;;;;;;;;;;;;;;51276:25;51299:1;51276:7;:18;;;:22;;:25;;;;:::i;:::-;51255:7;:18;;:46;;;;51324:19;51341:1;51324:7;:12;;;:16;;:19;;;;:::i;:::-;51309:7;:12;;:34;;;;50832:518;50668:682;51362:4;51355:11;;;;;;49699:1672;;;;;:::o;3713:135:36:-;3759:9;3793:8;;;;;;;;;;;:27;;;1482:28;;;;;;;;;;;;;;;;49:4:-1;39:7;30;26:21;22:32;13:7;6:49;1482:28:36;;;1472:39;;;;;;3793:49;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;3793:49:36;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;3793:49:36;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;3793:49:36;;;;;;;;;;;;;;;;3776:67;;3713:135;:::o;51626:348:100:-;51696:29;51728:6;:13;51735:5;51728:13;;;;;;;;;;;;;;;:25;;51696:57;;51771:11;:18;;;;51763:4;:26;51759:211;;;51799:11;51816:3;51799:21;;39:1:-1;33:3;27:10;23:18;57:10;52:3;45:23;79:10;72:17;;0:93;51799:21:100;;;;;;;;;;;;;;;;;;;;;;51759:211;;;51844:11;:18;;;;51837:4;:25;51833:137;;;51892:3;51872:11;51884:4;51872:17;;;;;;;;;;;;;;;:23;;;;51833:137;;;51924:5;51916:47;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;51833:137;51759:211;51626:348;;;:::o;1732:187:3:-;1818:7;1850:1;1845;:6;;1853:12;1837:29;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;80:1;75:3;71:11;64:39;52:2;49:1;45:10;40:15;;8:100;;;12:14;1837:29:3;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1876:9;1892:1;1888;:5;1876:17;;1911:1;1904:8;;;1732:187;;;;;:::o;2213:127:20:-;2259:7;2281:54;2274:61;;2213:127;:::o;6256:1636::-;6335:15;;:::i;:::-;6373:1;6362;:7;;;:12;:28;;;;6389:1;6378;:7;;;:12;6362:28;6358:52;;;6399:11;;;;;;;;6408:1;6399:11;;;6392:18;;;;6358:52;1046:25;6420:1;:7;;;:22;6416:36;;;6451:1;6444:8;;;;6416:36;1046:25;6462:1;:7;;;:22;6458:36;;;6493:1;6486:8;;;;6458:36;6583:10;1046:25;6596:10;6604:1;6596:7;:10::i;:::-;:16;;;:30;;;;;;6583:43;;6632:10;6645:13;6656:1;6645:10;:13::i;:::-;:19;;;6632:32;;6670:10;1046:25;6683:10;6691:1;6683:7;:10::i;:::-;:16;;;:30;;;;;;6670:43;;6719:10;6732:13;6743:1;6732:10;:13::i;:::-;:19;;;6719:32;;6835:12;6855:2;6850;:7;6835:22;;6873:1;6867:2;:7;6863:63;;6897:2;6891;6884:4;:9;;;;;;:15;6876:50;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6863:63;7025:18;1046:25;7046:4;:18;7025:39;;7082:1;7074:4;:9;7070:91;;1046:25;7106:4;7093:10;:17;;;;;;:32;7085:76;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;7070:91;7174:10;7167:17;;7191:12;7211:2;7206;:7;7191:22;;7229:1;7223:2;:7;7219:63;;7253:2;7247;7240:4;:9;;;;;;:15;7232:50;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;7219:63;7289:12;7309:2;7304;:7;7289:22;;7327:1;7321:2;:7;7317:63;;7351:2;7345;7338:4;:9;;;;;;:15;7330:50;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;7317:63;7397:14;:12;:14::i;:::-;7392:2;:19;;;;;;7387:24;;7427:14;:12;:14::i;:::-;7422:2;:19;;;;;;7417:24;;7447:12;7467:2;7462;:7;7447:22;;7485:1;7479:2;:7;7475:63;;7509:2;7503;7496:4;:9;;;;;;:15;7488:50;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;7475:63;7622:22;;:::i;:::-;7647:14;;;;;;;;7656:4;7647:14;;;7622:39;;7676:27;7680:6;7688:14;;;;;;;;7697:4;7688:14;;;7676:3;:27::i;:::-;7667:36;;7745:27;7749:6;7757:14;;;;;;;;7766:4;7757:14;;;7745:3;:27::i;:::-;7736:36;;7814:27;7818:6;7826:14;;;;;;;;7835:4;7826:14;;;7814:3;:27::i;:::-;7805:36;;7881:6;7874:13;;;;;;;;;;;;6256:1636;;;;;:::o;5391:209::-;5470:15;;:::i;:::-;5512:1;:7;;;5501:1;:7;;;:18;;5493:62;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5568:27;;;;;;;;5587:1;:7;;;5577:1;:7;;;:17;5568:27;;;5561:34;;5391:209;;;;:::o;3718:338:3:-;3804:7;3901:1;3897;:5;3904:12;3889:28;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;80:1;75:3;71:11;64:39;52:2;49:1;45:10;40:15;;8:100;;;12:14;3889:28:3;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3927:9;3943:1;3939;:5;;;;;;3927:17;;4048:1;4041:8;;;3718:338;;;;;:::o;2959:109:20:-;3020:7;1046:25;3042:1;:7;;;:21;;;;;;3035:28;;2959:109;;;:::o;5180:148:36:-;5229:12;5269:8;;;;;;;;;;;:27;;;2475:31;;;;;;;;;;;;;;;;49:4:-1;39:7;30;26:21;22:32;13:7;6:49;2475:31:36;;;2465:42;;;;;;5269:53;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;5269:53:36;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;5269:53:36;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;5269:53:36;;;;;;;;;;;;;;;;5249:74;;5180:148;:::o;4118:159:20:-;4177:15;;:::i;:::-;4207:47;;;;;;;;1046:25;;4217:1;:7;;;:21;;;;;;4216:37;4207:47;;;4200:54;;4118:159;;;:::o;4564:172::-;4626:15;;:::i;:::-;4656:57;;;;;;;;1046:25;;4676:1;:7;;;:21;;;;;;4675:37;4665:1;:7;;;:47;4656:57;;;4649:64;;4564:172;;;:::o;1955:87::-;2002:7;2024:13;2017:20;;1955:87;:::o;183:388:131:-;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::o;:::-;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o",
  "source": "pragma solidity ^0.5.13;\n\nimport \"../Validators.sol\";\nimport \"../../common/FixidityLib.sol\";\n\n/**\n * @title A wrapper around Validators that exposes onlyVm functions for testing.\n */\ncontract ValidatorsTest is Validators(true) {\n  function updateValidatorScoreFromSigner(address signer, uint256 uptime) external {\n    return _updateValidatorScoreFromSigner(signer, uptime);\n  }\n\n  function distributeEpochPaymentsFromSigner(address signer, uint256 maxPayment)\n    external\n    returns (uint256)\n  {\n    return _distributeEpochPaymentsFromSigner(signer, maxPayment);\n  }\n}\n",
  "ast": {
    "absolutePath": "project:/contracts/governance/test/ValidatorsTest.sol",
    "exportedSymbols": {
      "ValidatorsTest": [
        46065
      ]
    },
    "id": 46066,
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 46031,
        "literals": [
          "solidity",
          "^",
          "0.5",
          ".13"
        ],
        "nodeType": "PragmaDirective",
        "src": "0:24:131"
      },
      {
        "absolutePath": "project:/contracts/governance/Validators.sol",
        "file": "../Validators.sol",
        "id": 46032,
        "nodeType": "ImportDirective",
        "scope": 46066,
        "sourceUnit": 43134,
        "src": "26:27:131",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "project:/contracts/common/FixidityLib.sol",
        "file": "../../common/FixidityLib.sol",
        "id": 46033,
        "nodeType": "ImportDirective",
        "scope": 46066,
        "sourceUnit": 6815,
        "src": "54:38:131",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "baseContracts": [
          {
            "arguments": [
              {
                "argumentTypes": null,
                "hexValue": "74727565",
                "id": 46035,
                "isConstant": false,
                "isLValue": false,
                "isPure": true,
                "kind": "bool",
                "lValueRequested": false,
                "nodeType": "Literal",
                "src": "221:4:131",
                "subdenomination": null,
                "typeDescriptions": {
                  "typeIdentifier": "t_bool",
                  "typeString": "bool"
                },
                "value": "true"
              }
            ],
            "baseName": {
              "contractScope": null,
              "id": 46034,
              "name": "Validators",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 43133,
              "src": "210:10:131",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_Validators_$43133",
                "typeString": "contract Validators"
              }
            },
            "id": 46036,
            "nodeType": "InheritanceSpecifier",
            "src": "210:16:131"
          }
        ],
        "contractDependencies": [
          26,
          481,
          4374,
          7598,
          11461,
          11867,
          12683,
          17579,
          43133,
          44304
        ],
        "contractKind": "contract",
        "documentation": "@title A wrapper around Validators that exposes onlyVm functions for testing.",
        "fullyImplemented": true,
        "id": 46065,
        "linearizedBaseContracts": [
          46065,
          43133,
          4374,
          11461,
          11867,
          7598,
          17579,
          481,
          26,
          12683,
          44304
        ],
        "name": "ValidatorsTest",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "body": {
              "id": 46048,
              "nodeType": "Block",
              "src": "312:65:131",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "id": 46044,
                        "name": "signer",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 46038,
                        "src": "357:6:131",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "id": 46045,
                        "name": "uptime",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 46040,
                        "src": "365:6:131",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 46043,
                      "name": "_updateValidatorScoreFromSigner",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 40457,
                      "src": "325:31:131",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$",
                        "typeString": "function (address,uint256)"
                      }
                    },
                    "id": 46046,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "325:47:131",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "functionReturnParameters": 46042,
                  "id": 46047,
                  "nodeType": "Return",
                  "src": "318:54:131"
                }
              ]
            },
            "documentation": null,
            "id": 46049,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "updateValidatorScoreFromSigner",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 46041,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 46038,
                  "name": "signer",
                  "nodeType": "VariableDeclaration",
                  "scope": 46049,
                  "src": "271:14:131",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 46037,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "271:7:131",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 46040,
                  "name": "uptime",
                  "nodeType": "VariableDeclaration",
                  "scope": 46049,
                  "src": "287:14:131",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 46039,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "287:7:131",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "270:32:131"
            },
            "returnParameters": {
              "id": 46042,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "312:0:131"
            },
            "scope": 46065,
            "src": "231:146:131",
            "stateMutability": "nonpayable",
            "superFunction": 40357,
            "visibility": "external"
          },
          {
            "body": {
              "id": 46063,
              "nodeType": "Block",
              "src": "497:72:131",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "id": 46059,
                        "name": "signer",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 46051,
                        "src": "545:6:131",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "id": 46060,
                        "name": "maxPayment",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 46053,
                        "src": "553:10:131",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 46058,
                      "name": "_distributeEpochPaymentsFromSigner",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 40653,
                      "src": "510:34:131",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$_t_uint256_$",
                        "typeString": "function (address,uint256) returns (uint256)"
                      }
                    },
                    "id": 46061,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "510:54:131",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "functionReturnParameters": 46057,
                  "id": 46062,
                  "nodeType": "Return",
                  "src": "503:61:131"
                }
              ]
            },
            "documentation": null,
            "id": 46064,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "distributeEpochPaymentsFromSigner",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 46054,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 46051,
                  "name": "signer",
                  "nodeType": "VariableDeclaration",
                  "scope": 46064,
                  "src": "424:14:131",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 46050,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "424:7:131",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 46053,
                  "name": "maxPayment",
                  "nodeType": "VariableDeclaration",
                  "scope": 46064,
                  "src": "440:18:131",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 46052,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "440:7:131",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "423:36:131"
            },
            "returnParameters": {
              "id": 46057,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 46056,
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 46064,
                  "src": "486:7:131",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 46055,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "486:7:131",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "485:9:131"
            },
            "scope": 46065,
            "src": "381:188:131",
            "stateMutability": "nonpayable",
            "superFunction": 40474,
            "visibility": "external"
          }
        ],
        "scope": 46066,
        "src": "183:388:131"
      }
    ],
    "src": "0:572:131"
  },
  "legacyAST": {
    "attributes": {
      "absolutePath": "project:/contracts/governance/test/ValidatorsTest.sol",
      "exportedSymbols": {
        "ValidatorsTest": [
          46065
        ]
      }
    },
    "children": [
      {
        "attributes": {
          "literals": [
            "solidity",
            "^",
            "0.5",
            ".13"
          ]
        },
        "id": 46031,
        "name": "PragmaDirective",
        "src": "0:24:131"
      },
      {
        "attributes": {
          "SourceUnit": 43134,
          "absolutePath": "project:/contracts/governance/Validators.sol",
          "file": "../Validators.sol",
          "scope": 46066,
          "symbolAliases": [
            null
          ],
          "unitAlias": ""
        },
        "id": 46032,
        "name": "ImportDirective",
        "src": "26:27:131"
      },
      {
        "attributes": {
          "SourceUnit": 6815,
          "absolutePath": "project:/contracts/common/FixidityLib.sol",
          "file": "../../common/FixidityLib.sol",
          "scope": 46066,
          "symbolAliases": [
            null
          ],
          "unitAlias": ""
        },
        "id": 46033,
        "name": "ImportDirective",
        "src": "54:38:131"
      },
      {
        "attributes": {
          "contractDependencies": [
            26,
            481,
            4374,
            7598,
            11461,
            11867,
            12683,
            17579,
            43133,
            44304
          ],
          "contractKind": "contract",
          "documentation": "@title A wrapper around Validators that exposes onlyVm functions for testing.",
          "fullyImplemented": true,
          "linearizedBaseContracts": [
            46065,
            43133,
            4374,
            11461,
            11867,
            7598,
            17579,
            481,
            26,
            12683,
            44304
          ],
          "name": "ValidatorsTest",
          "scope": 46066
        },
        "children": [
          {
            "children": [
              {
                "attributes": {
                  "contractScope": null,
                  "name": "Validators",
                  "referencedDeclaration": 43133,
                  "type": "contract Validators"
                },
                "id": 46034,
                "name": "UserDefinedTypeName",
                "src": "210:10:131"
              },
              {
                "attributes": {
                  "argumentTypes": null,
                  "hexvalue": "74727565",
                  "isConstant": false,
                  "isLValue": false,
                  "isPure": true,
                  "lValueRequested": false,
                  "subdenomination": null,
                  "token": "bool",
                  "type": "bool",
                  "value": "true"
                },
                "id": 46035,
                "name": "Literal",
                "src": "221:4:131"
              }
            ],
            "id": 46036,
            "name": "InheritanceSpecifier",
            "src": "210:16:131"
          },
          {
            "attributes": {
              "documentation": null,
              "implemented": true,
              "isConstructor": false,
              "kind": "function",
              "modifiers": [
                null
              ],
              "name": "updateValidatorScoreFromSigner",
              "scope": 46065,
              "stateMutability": "nonpayable",
              "superFunction": 40357,
              "visibility": "external"
            },
            "children": [
              {
                "children": [
                  {
                    "attributes": {
                      "constant": false,
                      "name": "signer",
                      "scope": 46049,
                      "stateVariable": false,
                      "storageLocation": "default",
                      "type": "address",
                      "value": null,
                      "visibility": "internal"
                    },
                    "children": [
                      {
                        "attributes": {
                          "name": "address",
                          "stateMutability": "nonpayable",
                          "type": "address"
                        },
                        "id": 46037,
                        "name": "ElementaryTypeName",
                        "src": "271:7:131"
                      }
                    ],
                    "id": 46038,
                    "name": "VariableDeclaration",
                    "src": "271:14:131"
                  },
                  {
                    "attributes": {
                      "constant": false,
                      "name": "uptime",
                      "scope": 46049,
                      "stateVariable": false,
                      "storageLocation": "default",
                      "type": "uint256",
                      "value": null,
                      "visibility": "internal"
                    },
                    "children": [
                      {
                        "attributes": {
                          "name": "uint256",
                          "type": "uint256"
                        },
                        "id": 46039,
                        "name": "ElementaryTypeName",
                        "src": "287:7:131"
                      }
                    ],
                    "id": 46040,
                    "name": "VariableDeclaration",
                    "src": "287:14:131"
                  }
                ],
                "id": 46041,
                "name": "ParameterList",
                "src": "270:32:131"
              },
              {
                "attributes": {
                  "parameters": [
                    null
                  ]
                },
                "children": [],
                "id": 46042,
                "name": "ParameterList",
                "src": "312:0:131"
              },
              {
                "children": [
                  {
                    "attributes": {
                      "functionReturnParameters": 46042
                    },
                    "children": [
                      {
                        "attributes": {
                          "argumentTypes": null,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "isStructConstructorCall": false,
                          "lValueRequested": false,
                          "names": [
                            null
                          ],
                          "type": "tuple()",
                          "type_conversion": false
                        },
                        "children": [
                          {
                            "attributes": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                },
                                {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              ],
                              "overloadedDeclarations": [
                                null
                              ],
                              "referencedDeclaration": 40457,
                              "type": "function (address,uint256)",
                              "value": "_updateValidatorScoreFromSigner"
                            },
                            "id": 46043,
                            "name": "Identifier",
                            "src": "325:31:131"
                          },
                          {
                            "attributes": {
                              "argumentTypes": null,
                              "overloadedDeclarations": [
                                null
                              ],
                              "referencedDeclaration": 46038,
                              "type": "address",
                              "value": "signer"
                            },
                            "id": 46044,
                            "name": "Identifier",
                            "src": "357:6:131"
                          },
                          {
                            "attributes": {
                              "argumentTypes": null,
                              "overloadedDeclarations": [
                                null
                              ],
                              "referencedDeclaration": 46040,
                              "type": "uint256",
                              "value": "uptime"
                            },
                            "id": 46045,
                            "name": "Identifier",
                            "src": "365:6:131"
                          }
                        ],
                        "id": 46046,
                        "name": "FunctionCall",
                        "src": "325:47:131"
                      }
                    ],
                    "id": 46047,
                    "name": "Return",
                    "src": "318:54:131"
                  }
                ],
                "id": 46048,
                "name": "Block",
                "src": "312:65:131"
              }
            ],
            "id": 46049,
            "name": "FunctionDefinition",
            "src": "231:146:131"
          },
          {
            "attributes": {
              "documentation": null,
              "implemented": true,
              "isConstructor": false,
              "kind": "function",
              "modifiers": [
                null
              ],
              "name": "distributeEpochPaymentsFromSigner",
              "scope": 46065,
              "stateMutability": "nonpayable",
              "superFunction": 40474,
              "visibility": "external"
            },
            "children": [
              {
                "children": [
                  {
                    "attributes": {
                      "constant": false,
                      "name": "signer",
                      "scope": 46064,
                      "stateVariable": false,
                      "storageLocation": "default",
                      "type": "address",
                      "value": null,
                      "visibility": "internal"
                    },
                    "children": [
                      {
                        "attributes": {
                          "name": "address",
                          "stateMutability": "nonpayable",
                          "type": "address"
                        },
                        "id": 46050,
                        "name": "ElementaryTypeName",
                        "src": "424:7:131"
                      }
                    ],
                    "id": 46051,
                    "name": "VariableDeclaration",
                    "src": "424:14:131"
                  },
                  {
                    "attributes": {
                      "constant": false,
                      "name": "maxPayment",
                      "scope": 46064,
                      "stateVariable": false,
                      "storageLocation": "default",
                      "type": "uint256",
                      "value": null,
                      "visibility": "internal"
                    },
                    "children": [
                      {
                        "attributes": {
                          "name": "uint256",
                          "type": "uint256"
                        },
                        "id": 46052,
                        "name": "ElementaryTypeName",
                        "src": "440:7:131"
                      }
                    ],
                    "id": 46053,
                    "name": "VariableDeclaration",
                    "src": "440:18:131"
                  }
                ],
                "id": 46054,
                "name": "ParameterList",
                "src": "423:36:131"
              },
              {
                "children": [
                  {
                    "attributes": {
                      "constant": false,
                      "name": "",
                      "scope": 46064,
                      "stateVariable": false,
                      "storageLocation": "default",
                      "type": "uint256",
                      "value": null,
                      "visibility": "internal"
                    },
                    "children": [
                      {
                        "attributes": {
                          "name": "uint256",
                          "type": "uint256"
                        },
                        "id": 46055,
                        "name": "ElementaryTypeName",
                        "src": "486:7:131"
                      }
                    ],
                    "id": 46056,
                    "name": "VariableDeclaration",
                    "src": "486:7:131"
                  }
                ],
                "id": 46057,
                "name": "ParameterList",
                "src": "485:9:131"
              },
              {
                "children": [
                  {
                    "attributes": {
                      "functionReturnParameters": 46057
                    },
                    "children": [
                      {
                        "attributes": {
                          "argumentTypes": null,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "isStructConstructorCall": false,
                          "lValueRequested": false,
                          "names": [
                            null
                          ],
                          "type": "uint256",
                          "type_conversion": false
                        },
                        "children": [
                          {
                            "attributes": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                },
                                {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              ],
                              "overloadedDeclarations": [
                                null
                              ],
                              "referencedDeclaration": 40653,
                              "type": "function (address,uint256) returns (uint256)",
                              "value": "_distributeEpochPaymentsFromSigner"
                            },
                            "id": 46058,
                            "name": "Identifier",
                            "src": "510:34:131"
                          },
                          {
                            "attributes": {
                              "argumentTypes": null,
                              "overloadedDeclarations": [
                                null
                              ],
                              "referencedDeclaration": 46051,
                              "type": "address",
                              "value": "signer"
                            },
                            "id": 46059,
                            "name": "Identifier",
                            "src": "545:6:131"
                          },
                          {
                            "attributes": {
                              "argumentTypes": null,
                              "overloadedDeclarations": [
                                null
                              ],
                              "referencedDeclaration": 46053,
                              "type": "uint256",
                              "value": "maxPayment"
                            },
                            "id": 46060,
                            "name": "Identifier",
                            "src": "553:10:131"
                          }
                        ],
                        "id": 46061,
                        "name": "FunctionCall",
                        "src": "510:54:131"
                      }
                    ],
                    "id": 46062,
                    "name": "Return",
                    "src": "503:61:131"
                  }
                ],
                "id": 46063,
                "name": "Block",
                "src": "497:72:131"
              }
            ],
            "id": 46064,
            "name": "FunctionDefinition",
            "src": "381:188:131"
          }
        ],
        "id": 46065,
        "name": "ContractDefinition",
        "src": "183:388:131"
      }
    ],
    "id": 46066,
    "name": "SourceUnit",
    "src": "0:572:131"
  },
  "compiler": {
    "name": "solc",
    "version": "0.5.13+commit.5b0b510c.Emscripten.clang"
  },
  "networks": {
    "1101": {
      "events": {},
      "links": {
        "AddressLinkedList": "0x0B1ba0af832d7C05fD64161E0Db78E85978E8082"
      }
    }
  },
  "schemaVersion": "3.4.13",
  "updatedAt": "2023-11-21T17:25:03.785Z",
  "networkType": "ethereum",
  "devdoc": {
    "methods": {
      "addFirstMember(address,address,address)": {
        "details": "Fails if `validator` has not set their affiliation to this account.Fails if the group has > 0 members.",
        "params": {
          "greater": "The address of the group that has received more votes than this group.",
          "lesser": "The address of the group that has received fewer votes than this group.",
          "validator": "The validator to add to the group"
        },
        "return": "True upon success."
      },
      "addMember(address)": {
        "details": "Fails if `validator` has not set their affiliation to this account.Fails if the group has zero members.",
        "params": {
          "validator": "The validator to add to the group"
        },
        "return": "True upon success."
      },
      "affiliate(address)": {
        "details": "De-affiliates with the previously affiliated group if present.",
        "params": {
          "group": "The validator group with which to affiliate."
        },
        "return": "True upon success."
      },
      "calculateEpochScore(uint256)": {
        "details": "epoch_score = uptime ** exponent",
        "params": {
          "uptime": "The Fixidity representation of the validator's uptime, between 0 and 1."
        },
        "return": "Fixidity representation of the epoch score between 0 and 1."
      },
      "calculateGroupEpochScore(uint256[])": {
        "details": "group_score = average(uptimes ** exponent)",
        "params": {
          "uptimes": "Array of Fixidity representations of the validators' uptimes, between 0 and 1."
        },
        "return": "Fixidity representation of the group epoch score between 0 and 1."
      },
      "checkProofOfPossession(address,bytes,bytes)": {
        "params": {
          "blsKey": "The BLS public key that the validator is using for consensus, should pass proof  of possession. 48 bytes.",
          "blsPop": "The BLS public key proof-of-possession, which consists of a signature on the  account address. 96 bytes.",
          "sender": "The address signed by the BLS key to generate the proof of possession."
        },
        "return": "True upon success."
      },
      "deaffiliate()": {
        "details": "Fails if the account is not a validator with non-zero affiliation.",
        "return": "True upon success."
      },
      "deregisterValidator(uint256)": {
        "details": "Fails if the account is not a validator.Fails if the validator has been a member of a group too recently.",
        "params": {
          "index": "The index of this validator in the list of all registered validators."
        },
        "return": "True upon success."
      },
      "deregisterValidatorGroup(uint256)": {
        "details": "Fails if the account is not a validator group with no members.Fails if the group has had members too recently.",
        "params": {
          "index": "The index of this validator group in the list of all validator groups."
        },
        "return": "True upon success."
      },
      "forceDeaffiliateIfValidator(address)": {
        "params": {
          "validatorAccount": "The validator to deaffiliate from their affiliated validator group."
        }
      },
      "fractionMulExp(uint256,uint256,uint256,uint256,uint256,uint256)": {
        "params": {
          "_decimals": "precision",
          "aDenominator": "Denominator of first fraction",
          "aNumerator": "Numerator of first fraction",
          "bDenominator": "Denominator of exponentiated fraction",
          "bNumerator": "Numerator of exponentiated fraction",
          "exponent": "exponent to raise b to"
        },
        "return": "Numerator of the computed quantity (not reduced).Denominator of the computed quantity (not reduced)."
      },
      "getAccountLockedGoldRequirement(address)": {
        "params": {
          "account": "The account that may have to meet locked gold balance requirements."
        },
        "return": "The current locked gold balance requirement for the supplied account."
      },
      "getBlockNumberFromHeader(bytes)": {
        "params": {
          "header": "RLP encoded header"
        },
        "return": "Block number."
      },
      "getCommissionUpdateDelay()": {
        "return": "The block delay for a ValidatorGroup's commission udpdate."
      },
      "getEpochNumber()": {
        "return": "Current epoch number."
      },
      "getEpochNumberOfBlock(uint256)": {
        "params": {
          "blockNumber": "Block number where epoch number is calculated."
        },
        "return": "Epoch number."
      },
      "getEpochSize()": {
        "return": "The current epoch size in blocks."
      },
      "getGroupLockedGoldRequirements()": {
        "return": "The Locked Gold value.The Locked Gold duration."
      },
      "getGroupNumMembers(address)": {
        "params": {
          "account": "The address of the validator group."
        },
        "return": "The number of members in a validator group."
      },
      "getGroupsNumMembers(address[])": {
        "params": {
          "accounts": "The addresses of the validator groups."
        },
        "return": "The number of members in the provided validator groups."
      },
      "getMaxGroupSize()": {
        "return": "The maximum number of members a group can add."
      },
      "getMembershipHistory(address)": {
        "params": {
          "account": "The validator whose membership history to return."
        },
        "return": "epochs The epochs of a validator.The membership groups of a validator.The last removed from group timestamp of a validator.The tail of a validator."
      },
      "getMembershipInLastEpoch(address)": {
        "params": {
          "account": "The account whose group membership should be returned."
        },
        "return": "The group that `account` was a member of at the end of the last epoch."
      },
      "getMembershipInLastEpochFromSigner(address)": {
        "params": {
          "signer": "The signer of the account whose group membership should be returned."
        },
        "return": "The group that `account` was a member of at the end of the last epoch."
      },
      "getNumRegisteredValidators()": {
        "return": "The number of registered validators."
      },
      "getParentSealBitmap(uint256)": {
        "params": {
          "blockNumber": "Block number to retrieve. Must be within 4 epochs of the current number."
        },
        "return": "Bitmap parent seal with set bits at indices corresponding to signing validators."
      },
      "getRegisteredValidatorGroups()": {
        "return": "The list of registered validator group addresses."
      },
      "getRegisteredValidatorSigners()": {
        "return": "The list of signers for registered validator accounts."
      },
      "getRegisteredValidators()": {
        "return": "The list of registered validator accounts."
      },
      "getTopGroupValidators(address,uint256)": {
        "params": {
          "account": "The address of the validator group.",
          "n": "The number of members to return."
        },
        "return": "The top n group members for a particular group."
      },
      "getValidator(address)": {
        "params": {
          "account": "The account that registered the validator."
        },
        "return": "The unpacked validator struct."
      },
      "getValidatorBlsPublicKeyFromSigner(address)": {
        "params": {
          "signer": "The account that registered the validator or its authorized signing address."
        },
        "return": "The validator BLS key."
      },
      "getValidatorGroup(address)": {
        "params": {
          "account": "The account that registered the validator group."
        },
        "return": "keys The Keys.commision The commision.nextCommision The next commision.nextCommisionBlock The next commision block.size The Size history.multiplier The multiplier.lastSlashed The last slashed."
      },
      "getValidatorGroupSlashingMultiplier(address)": {
        "params": {
          "account": "The group to fetch slashing multiplier for."
        }
      },
      "getValidatorLockedGoldRequirements()": {
        "return": "The Locked Gold value.The Locked Gold duration."
      },
      "getValidatorScoreParameters()": {
        "return": "The exponent that governs how a validator's score is calculated.The adjustment speed that governs how a validator's score is calculated."
      },
      "getVerifiedSealBitmapFromHeader(bytes)": {
        "params": {
          "header": "RLP encoded header"
        },
        "return": "Bitmap parent seal with set bits at indices correspoinding to signing validators."
      },
      "getVersionNumber()": {
        "return": "Storage version of the contract.Major version of the contract.Minor version of the contract.Patch version of the contract."
      },
      "groupMembershipInEpoch(address,uint256,uint256)": {
        "params": {
          "account": "The account whose group membership should be returned.",
          "epochNumber": "The epoch number we are querying this account's membership at.",
          "index": "The index into the validator's history struct for their history at `epochNumber`."
        },
        "return": "The group that `account` was a member of during `epochNumber`."
      },
      "halveSlashingMultiplier(address)": {
        "params": {
          "account": "The group being slashed."
        }
      },
      "hashHeader(bytes)": {
        "params": {
          "header": "RLP encoded header"
        },
        "return": "Header hash."
      },
      "initialize(address,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256)": {
        "details": "Should be called only once.",
        "params": {
          "_commissionUpdateDelay": "The number of blocks to delay a ValidatorGroup's commission update.",
          "_maxGroupSize": "The maximum group size.",
          "_membershipHistoryLength": "The max number of entries for validator membership history.",
          "groupRequirementDuration": "The Locked Gold requirement duration for groups.",
          "groupRequirementValue": "The Locked Gold requirement amount for groups.",
          "registryAddress": "The address of the registry core smart contract.",
          "validatorRequirementDuration": "The Locked Gold requirement duration for validators.",
          "validatorRequirementValue": "The Locked Gold requirement amount for validators.",
          "validatorScoreAdjustmentSpeed": "The speed at which validator scores are adjusted.",
          "validatorScoreExponent": "The exponent used in calculating validator scores."
        }
      },
      "isOwner()": {
        "details": "Returns true if the caller is the current owner."
      },
      "isValidator(address)": {
        "params": {
          "account": "The account."
        },
        "return": "Whether a particular address is a registered validator."
      },
      "isValidatorGroup(address)": {
        "params": {
          "account": "The account."
        },
        "return": "Whether a particular address is a registered validator group."
      },
      "meetsAccountLockedGoldRequirements(address)": {
        "params": {
          "account": "The address of the account."
        },
        "return": "Whether or not an account meets its Locked Gold requirements."
      },
      "minQuorumSize(uint256)": {
        "details": "Computed in celo-blockchain as int(math.Ceil(float64(2*valSet.Size()) / 3))"
      },
      "minQuorumSizeInCurrentSet()": {
        "return": "Byzantine quorum of validators."
      },
      "numberValidatorsInCurrentSet()": {
        "return": "Size of the current elected validator set."
      },
      "numberValidatorsInSet(uint256)": {
        "params": {
          "blockNumber": "Block number to retrieve the validator set from."
        },
        "return": "Size of the validator set."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "registerValidator(bytes,bytes,bytes)": {
        "details": "Fails if the account is already a validator or validator group.Fails if the account does not have sufficient Locked Gold.",
        "params": {
          "blsPop": "The BLS public key proof-of-possession, which consists of a signature on the  account address. 48 bytes.",
          "blsPublicKey": "The BLS public key that the validator is using for consensus, should pass  proof of possession. 96 bytes.",
          "ecdsaPublicKey": "The ECDSA public key that the validator is using for consensus, should  match the validator signer. 64 bytes."
        },
        "return": "True upon success."
      },
      "registerValidatorGroup(uint256)": {
        "details": "Fails if the account is already a validator or validator group.Fails if the account does not have sufficient weight.",
        "params": {
          "commission": "Fixidity representation of the commission this group receives on epoch  payments made to its members."
        },
        "return": "True upon success."
      },
      "removeMember(address)": {
        "details": "Fails if `validator` is not a member of the account's group.",
        "params": {
          "validator": "The validator to remove from the group"
        },
        "return": "True upon success."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner.     * NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "reorderMember(address,address,address)": {
        "details": "Fails if `validator` is not a member of the account's validator group.",
        "params": {
          "greaterMember": "The member who will be ahead of `validator`, or 0 if `validator` will be  the first member.",
          "lesserMember": "The member who will be behind `validator`, or 0 if `validator` will be the  last member.",
          "validator": "The validator to reorder."
        },
        "return": "True upon success."
      },
      "setCommissionUpdateDelay(uint256)": {
        "params": {
          "delay": "Number of blocks to delay the update"
        }
      },
      "setDowntimeGracePeriod(uint256)": {
        "params": {
          "value": "New downtime grace period for calculating epoch scores."
        }
      },
      "setGroupLockedGoldRequirements(uint256,uint256)": {
        "params": {
          "duration": "The time (in seconds) that these requirements persist for.",
          "value": "The per-member amount of Locked Gold required."
        },
        "return": "True upon success."
      },
      "setMaxGroupSize(uint256)": {
        "params": {
          "size": "The maximum group size."
        },
        "return": "True upon success."
      },
      "setMembershipHistoryLength(uint256)": {
        "params": {
          "length": "The number of validator group membership entries to store."
        },
        "return": "True upon success."
      },
      "setNextCommissionUpdate(uint256)": {
        "params": {
          "commission": "Fixidity representation of the commission this group receives on epoch  payments made to its members. Must be in the range [0, 1.0]."
        }
      },
      "setRegistry(address)": {
        "params": {
          "registryAddress": "The address of a registry contract for routing to other contracts."
        }
      },
      "setSlashingMultiplierResetPeriod(uint256)": {
        "params": {
          "value": "New reset period for slashing multiplier."
        }
      },
      "setValidatorLockedGoldRequirements(uint256,uint256)": {
        "params": {
          "duration": "The time (in seconds) that these requirements persist for.",
          "value": "The amount of Locked Gold required."
        },
        "return": "True upon success."
      },
      "setValidatorScoreParameters(uint256,uint256)": {
        "params": {
          "adjustmentSpeed": "The speed at which the score is adjusted.",
          "exponent": "The exponent used in calculating the score."
        },
        "return": "True upon success."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "updateBlsPublicKey(bytes,bytes)": {
        "params": {
          "blsPop": "The BLS public key proof-of-possession, which consists of a signature on the  account address. 48 bytes.",
          "blsPublicKey": "The BLS public key that the validator is using for consensus, should pass  proof of possession. 48 bytes."
        },
        "return": "True upon success."
      },
      "updateEcdsaPublicKey(address,address,bytes)": {
        "params": {
          "account": "The address under which the validator is registered.",
          "ecdsaPublicKey": "The ECDSA public key corresponding to `signer`.",
          "signer": "The address which the validator is using to sign consensus messages."
        },
        "return": "True upon success."
      },
      "updatePublicKeys(address,address,bytes,bytes,bytes)": {
        "params": {
          "account": "The address under which the validator is registered.",
          "blsPop": "The BLS public key proof-of-possession, which consists of a signature on the  account address. 48 bytes.",
          "blsPublicKey": "The BLS public key that the validator is using for consensus, should pass  proof of possession. 96 bytes.",
          "ecdsaPublicKey": "The ECDSA public key corresponding to `signer`.",
          "signer": "The address which the validator is using to sign consensus messages."
        },
        "return": "True upon success."
      },
      "validatorSignerAddressFromCurrentSet(uint256)": {
        "params": {
          "index": "Index of requested validator in the validator set."
        },
        "return": "Address of validator at the requested index."
      },
      "validatorSignerAddressFromSet(uint256,uint256)": {
        "params": {
          "blockNumber": "Block number to retrieve the validator set from.",
          "index": "Index of requested validator in the validator set."
        },
        "return": "Address of validator at the requested index."
      }
    },
    "title": "A wrapper around Validators that exposes onlyVm functions for testing."
  },
  "userdoc": {
    "methods": {
      "addFirstMember(address,address,address)": {
        "notice": "Adds the first member to a group's list of members and marks it eligible for election."
      },
      "addMember(address)": {
        "notice": "Adds a member to the end of a validator group's list of members."
      },
      "affiliate(address)": {
        "notice": "Affiliates a validator with a group, allowing it to be added as a member."
      },
      "calculateEpochScore(uint256)": {
        "notice": "Calculates the validator score for an epoch from the uptime value for the epoch."
      },
      "calculateGroupEpochScore(uint256[])": {
        "notice": "Calculates the aggregate score of a group for an epoch from individual uptimes."
      },
      "checkProofOfPossession(address,bytes,bytes)": {
        "notice": "Checks a BLS proof of possession."
      },
      "deaffiliate()": {
        "notice": "De-affiliates a validator, removing it from the group for which it is a member."
      },
      "deregisterValidator(uint256)": {
        "notice": "De-registers a validator."
      },
      "deregisterValidatorGroup(uint256)": {
        "notice": "De-registers a validator group."
      },
      "forceDeaffiliateIfValidator(address)": {
        "notice": "Removes a validator from the group for which it is a member."
      },
      "fractionMulExp(uint256,uint256,uint256,uint256,uint256,uint256)": {
        "notice": "calculate a * b^x for fractions a, b to `decimals` precision"
      },
      "getAccountLockedGoldRequirement(address)": {
        "notice": "Returns the current locked gold balance requirement for the supplied account."
      },
      "getBlockNumberFromHeader(bytes)": {
        "notice": "Parses block number out of header."
      },
      "getCommissionUpdateDelay()": {
        "notice": "Returns the block delay for a ValidatorGroup's commission udpdate."
      },
      "getEpochNumber()": {
        "notice": "Returns the epoch number at a block."
      },
      "getEpochNumberOfBlock(uint256)": {
        "notice": "Returns the epoch number at a block."
      },
      "getEpochSize()": {
        "notice": "Returns the current epoch size in blocks."
      },
      "getGroupLockedGoldRequirements()": {
        "notice": "Returns the Locked Gold requirements for validator groups."
      },
      "getGroupNumMembers(address)": {
        "notice": "Returns the number of members in a validator group."
      },
      "getGroupsNumMembers(address[])": {
        "notice": "Returns the number of members in the provided validator groups."
      },
      "getMaxGroupSize()": {
        "notice": "Returns the maximum number of members a group can add."
      },
      "getMembershipHistory(address)": {
        "notice": "Returns the group membership history of a validator."
      },
      "getMembershipInLastEpoch(address)": {
        "notice": "Returns the group that `account` was a member of at the end of the last epoch."
      },
      "getMembershipInLastEpochFromSigner(address)": {
        "notice": "Returns the group that `account` was a member of at the end of the last epoch."
      },
      "getNumRegisteredValidators()": {
        "notice": "Returns the number of registered validators."
      },
      "getParentSealBitmap(uint256)": {
        "notice": "Gets the parent seal bitmap from the header at the given block number."
      },
      "getRegisteredValidatorGroups()": {
        "notice": "Returns the list of registered validator group accounts."
      },
      "getRegisteredValidatorSigners()": {
        "notice": "Returns the list of signers for the registered validator accounts."
      },
      "getRegisteredValidators()": {
        "notice": "Returns the list of registered validator accounts."
      },
      "getTopGroupValidators(address,uint256)": {
        "notice": "Returns the top n group members for a particular group."
      },
      "getValidator(address)": {
        "notice": "Returns validator information."
      },
      "getValidatorBlsPublicKeyFromSigner(address)": {
        "notice": "Returns the validator BLS key."
      },
      "getValidatorGroup(address)": {
        "notice": "Returns validator group information."
      },
      "getValidatorGroupSlashingMultiplier(address)": {
        "notice": "Getter for a group's slashing multiplier."
      },
      "getValidatorLockedGoldRequirements()": {
        "notice": "Returns the Locked Gold requirements for validators."
      },
      "getValidatorScoreParameters()": {
        "notice": "Returns the parameters that govern how a validator's score is calculated."
      },
      "getVerifiedSealBitmapFromHeader(bytes)": {
        "notice": "Verifies the BLS signature on the header and returns the seal bitmap. The validator set used for verification is retrieved based on the parent hash field of the header.  If the parent hash is not in the blockchain, verification fails."
      },
      "getVersionNumber()": {
        "notice": "Returns the storage, major, minor, and patch version of the contract."
      },
      "groupMembershipInEpoch(address,uint256,uint256)": {
        "notice": "Returns the group that `account` was a member of during `epochNumber`."
      },
      "halveSlashingMultiplier(address)": {
        "notice": "Halves the group's slashing multiplier."
      },
      "hashHeader(bytes)": {
        "notice": "Computes hash of header."
      },
      "initialize(address,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256)": {
        "notice": "Used in place of the constructor to allow the contract to be upgradable via proxy."
      },
      "isValidator(address)": {
        "notice": "Returns whether a particular account has a registered validator."
      },
      "isValidatorGroup(address)": {
        "notice": "Returns whether a particular account has a registered validator group."
      },
      "meetsAccountLockedGoldRequirements(address)": {
        "notice": "Returns whether or not an account meets its Locked Gold requirements."
      },
      "minQuorumSize(uint256)": {
        "notice": "Returns the minimum number of required signers for a given block number."
      },
      "minQuorumSizeInCurrentSet()": {
        "notice": "Computes byzantine quorum from current validator set size"
      },
      "numberValidatorsInCurrentSet()": {
        "notice": "Gets the size of the current elected validator set."
      },
      "numberValidatorsInSet(uint256)": {
        "notice": "Gets the size of the validator set that must sign the given block number."
      },
      "registerValidator(bytes,bytes,bytes)": {
        "notice": "Registers a validator unaffiliated with any validator group."
      },
      "registerValidatorGroup(uint256)": {
        "notice": "Registers a validator group with no member validators."
      },
      "removeMember(address)": {
        "notice": "Removes a member from a validator group."
      },
      "reorderMember(address,address,address)": {
        "notice": "Reorders a member within a validator group."
      },
      "resetSlashingMultiplier()": {
        "notice": "Resets a group's slashing multiplier if it has been >= the reset period since        the last time the group was slashed."
      },
      "setCommissionUpdateDelay(uint256)": {
        "notice": "Updates the block delay for a ValidatorGroup's commission udpdate"
      },
      "setDowntimeGracePeriod(uint256)": {
        "notice": "Sets the downtimeGracePeriod property if called by owner."
      },
      "setGroupLockedGoldRequirements(uint256,uint256)": {
        "notice": "Updates the Locked Gold requirements for Validator Groups."
      },
      "setMaxGroupSize(uint256)": {
        "notice": "Updates the maximum number of members a group can have."
      },
      "setMembershipHistoryLength(uint256)": {
        "notice": "Updates the number of validator group membership entries to store."
      },
      "setNextCommissionUpdate(uint256)": {
        "notice": "Queues an update to a validator group's commission. If there was a previously scheduled update, that is overwritten."
      },
      "setRegistry(address)": {
        "notice": "Updates the address pointing to a Registry contract."
      },
      "setSlashingMultiplierResetPeriod(uint256)": {
        "notice": "Sets the slashingMultiplierRestPeriod property if called by owner."
      },
      "setValidatorLockedGoldRequirements(uint256,uint256)": {
        "notice": "Updates the Locked Gold requirements for Validators."
      },
      "setValidatorScoreParameters(uint256,uint256)": {
        "notice": "Updates the validator score parameters."
      },
      "updateBlsPublicKey(bytes,bytes)": {
        "notice": "Updates a validator's BLS key."
      },
      "updateCommission()": {
        "notice": "Updates a validator group's commission based on the previously queued update"
      },
      "updateEcdsaPublicKey(address,address,bytes)": {
        "notice": "Updates a validator's ECDSA key."
      },
      "updatePublicKeys(address,address,bytes,bytes,bytes)": {
        "notice": "Updates a validator's ECDSA and BLS keys."
      },
      "validatorSignerAddressFromCurrentSet(uint256)": {
        "notice": "Gets a validator address from the current validator set."
      },
      "validatorSignerAddressFromSet(uint256,uint256)": {
        "notice": "Gets a validator address from the validator set at the given block number."
      }
    }
  }
}