{
  "contractName": "ElectionTest",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "flag",
          "type": "bool"
        }
      ],
      "name": "AllowedToVoteOverMaxNumberOfGroups",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "electabilityThreshold",
          "type": "uint256"
        }
      ],
      "name": "ElectabilityThresholdSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "min",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "max",
          "type": "uint256"
        }
      ],
      "name": "ElectableValidatorsSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "group",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "EpochRewardsDistributedToVoters",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "maxNumGroupsVotedFor",
          "type": "uint256"
        }
      ],
      "name": "MaxNumGroupsVotedForSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "registryAddress",
          "type": "address"
        }
      ],
      "name": "RegistrySet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "group",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "units",
          "type": "uint256"
        }
      ],
      "name": "ValidatorGroupActiveVoteRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "group",
          "type": "address"
        }
      ],
      "name": "ValidatorGroupMarkedEligible",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "group",
          "type": "address"
        }
      ],
      "name": "ValidatorGroupMarkedIneligible",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "group",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "ValidatorGroupPendingVoteRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "group",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "units",
          "type": "uint256"
        }
      ],
      "name": "ValidatorGroupVoteActivated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "group",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "ValidatorGroupVoteCast",
      "type": "event"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "group",
          "type": "address"
        }
      ],
      "name": "activate",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "group",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "activateForAccount",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "allowedToVoteOverMaxNumberOfGroups",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "cachedVotesByAccount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "totalVotes",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "group",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "canReceiveVotes",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "blsKey",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "blsPop",
          "type": "bytes"
        }
      ],
      "name": "checkProofOfPossession",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "minElectableValidators",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxElectableValidators",
          "type": "uint256"
        }
      ],
      "name": "electNValidatorSigners",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "electValidatorSigners",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "electabilityThreshold",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "electableValidators",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "min",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "max",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "lessers",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "greaters",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "indices",
          "type": "uint256[]"
        }
      ],
      "name": "forceDecrementVotes",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "aNumerator",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "aDenominator",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "bNumerator",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "bDenominator",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "exponent",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_decimals",
          "type": "uint256"
        }
      ],
      "name": "fractionMulExp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "group",
          "type": "address"
        }
      ],
      "name": "getActiveVoteUnitsForGroup",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "group",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "getActiveVoteUnitsForGroupByAccount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "getActiveVotes",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "group",
          "type": "address"
        }
      ],
      "name": "getActiveVotesForGroup",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "group",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "getActiveVotesForGroupByAccount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "bytes",
          "name": "header",
          "type": "bytes"
        }
      ],
      "name": "getBlockNumberFromHeader",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "getCurrentValidatorSigners",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "getElectabilityThreshold",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "getElectableValidators",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "getEligibleValidatorGroups",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "getEpochNumber",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "blockNumber",
          "type": "uint256"
        }
      ],
      "name": "getEpochNumberOfBlock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "getEpochSize",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "group",
          "type": "address"
        }
      ],
      "name": "getGroupEligibility",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "group",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "totalEpochRewards",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "uptimes",
          "type": "uint256[]"
        }
      ],
      "name": "getGroupEpochRewards",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "getGroupsVotedForByAccount",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "group",
          "type": "address"
        }
      ],
      "name": "getNumVotesReceivable",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "blockNumber",
          "type": "uint256"
        }
      ],
      "name": "getParentSealBitmap",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "group",
          "type": "address"
        }
      ],
      "name": "getPendingVotesForGroup",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "group",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "getPendingVotesForGroupByAccount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "getTotalVotes",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "getTotalVotesByAccount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "getTotalVotesForEligibleValidatorGroups",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "groups",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "values",
          "type": "uint256[]"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "group",
          "type": "address"
        }
      ],
      "name": "getTotalVotesForGroup",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "group",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "getTotalVotesForGroupByAccount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "bytes",
          "name": "header",
          "type": "bytes"
        }
      ],
      "name": "getVerifiedSealBitmapFromHeader",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "getVersionNumber",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "group",
          "type": "address"
        }
      ],
      "name": "hasActivatablePendingVotes",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "bytes",
          "name": "header",
          "type": "bytes"
        }
      ],
      "name": "hashHeader",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "registryAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "minElectableValidators",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxElectableValidators",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_maxNumGroupsVotedFor",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_electabilityThreshold",
          "type": "uint256"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "initialized",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "isOwner",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "group",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "lesser",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "greater",
          "type": "address"
        }
      ],
      "name": "markGroupEligible",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "group",
          "type": "address"
        }
      ],
      "name": "markGroupIneligible",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "maxNumGroupsVotedFor",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "blockNumber",
          "type": "uint256"
        }
      ],
      "name": "minQuorumSize",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "minQuorumSizeInCurrentSet",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "numberValidatorsInCurrentSet",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "blockNumber",
          "type": "uint256"
        }
      ],
      "name": "numberValidatorsInSet",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "registry",
      "outputs": [
        {
          "internalType": "contract IRegistry",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "group",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "lesser",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "greater",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "revokeActive",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "group",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "lesser",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "greater",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "revokeAllActive",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "group",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "lesser",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "greater",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "revokePending",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "bool",
          "name": "flag",
          "type": "bool"
        }
      ],
      "name": "setAllowedToVoteOverMaxNumberOfGroups",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "threshold",
          "type": "uint256"
        }
      ],
      "name": "setElectabilityThreshold",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "min",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "max",
          "type": "uint256"
        }
      ],
      "name": "setElectableValidators",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_maxNumGroupsVotedFor",
          "type": "uint256"
        }
      ],
      "name": "setMaxNumGroupsVotedFor",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "registryAddress",
          "type": "address"
        }
      ],
      "name": "setRegistry",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "group",
          "type": "address"
        }
      ],
      "name": "updateTotalVotesByAccountForGroup",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "validatorSignerAddressFromCurrentSet",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "blockNumber",
          "type": "uint256"
        }
      ],
      "name": "validatorSignerAddressFromSet",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "group",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "lesser",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "greater",
          "type": "address"
        }
      ],
      "name": "vote",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "group",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "lesser",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "greater",
          "type": "address"
        }
      ],
      "name": "distributeEpochRewards",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "metadata": "{\"compiler\":{\"version\":\"0.5.13+commit.5b0b510c\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"flag\",\"type\":\"bool\"}],\"name\":\"AllowedToVoteOverMaxNumberOfGroups\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"electabilityThreshold\",\"type\":\"uint256\"}],\"name\":\"ElectabilityThresholdSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"min\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"max\",\"type\":\"uint256\"}],\"name\":\"ElectableValidatorsSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"group\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"EpochRewardsDistributedToVoters\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxNumGroupsVotedFor\",\"type\":\"uint256\"}],\"name\":\"MaxNumGroupsVotedForSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"registryAddress\",\"type\":\"address\"}],\"name\":\"RegistrySet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"group\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"units\",\"type\":\"uint256\"}],\"name\":\"ValidatorGroupActiveVoteRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"group\",\"type\":\"address\"}],\"name\":\"ValidatorGroupMarkedEligible\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"group\",\"type\":\"address\"}],\"name\":\"ValidatorGroupMarkedIneligible\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"group\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"ValidatorGroupPendingVoteRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"group\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"units\",\"type\":\"uint256\"}],\"name\":\"ValidatorGroupVoteActivated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"group\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"ValidatorGroupVoteCast\",\"type\":\"event\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"group\",\"type\":\"address\"}],\"name\":\"activate\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"group\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"activateForAccount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowedToVoteOverMaxNumberOfGroups\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"cachedVotesByAccount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalVotes\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"group\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"canReceiveVotes\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"blsKey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"blsPop\",\"type\":\"bytes\"}],\"name\":\"checkProofOfPossession\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"group\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"lesser\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"greater\",\"type\":\"address\"}],\"name\":\"distributeEpochRewards\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"minElectableValidators\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxElectableValidators\",\"type\":\"uint256\"}],\"name\":\"electNValidatorSigners\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"electValidatorSigners\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"electabilityThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"electableValidators\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"min\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"max\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"lessers\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"greaters\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"indices\",\"type\":\"uint256[]\"}],\"name\":\"forceDecrementVotes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"aNumerator\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"aDenominator\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bNumerator\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bDenominator\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"exponent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_decimals\",\"type\":\"uint256\"}],\"name\":\"fractionMulExp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"group\",\"type\":\"address\"}],\"name\":\"getActiveVoteUnitsForGroup\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"group\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getActiveVoteUnitsForGroupByAccount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getActiveVotes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"group\",\"type\":\"address\"}],\"name\":\"getActiveVotesForGroup\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"group\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getActiveVotesForGroupByAccount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"header\",\"type\":\"bytes\"}],\"name\":\"getBlockNumberFromHeader\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCurrentValidatorSigners\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getElectabilityThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getElectableValidators\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getEligibleValidatorGroups\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getEpochNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"getEpochNumberOfBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getEpochSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"group\",\"type\":\"address\"}],\"name\":\"getGroupEligibility\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"group\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalEpochRewards\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"uptimes\",\"type\":\"uint256[]\"}],\"name\":\"getGroupEpochRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getGroupsVotedForByAccount\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"group\",\"type\":\"address\"}],\"name\":\"getNumVotesReceivable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"getParentSealBitmap\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"group\",\"type\":\"address\"}],\"name\":\"getPendingVotesForGroup\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"group\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getPendingVotesForGroupByAccount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTotalVotes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getTotalVotesByAccount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTotalVotesForEligibleValidatorGroups\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"groups\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"group\",\"type\":\"address\"}],\"name\":\"getTotalVotesForGroup\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"group\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getTotalVotesForGroupByAccount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"header\",\"type\":\"bytes\"}],\"name\":\"getVerifiedSealBitmapFromHeader\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getVersionNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"group\",\"type\":\"address\"}],\"name\":\"hasActivatablePendingVotes\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"header\",\"type\":\"bytes\"}],\"name\":\"hashHeader\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"registryAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minElectableValidators\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxElectableValidators\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxNumGroupsVotedFor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_electabilityThreshold\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"initialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"group\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"lesser\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"greater\",\"type\":\"address\"}],\"name\":\"markGroupEligible\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"group\",\"type\":\"address\"}],\"name\":\"markGroupIneligible\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxNumGroupsVotedFor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"minQuorumSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minQuorumSizeInCurrentSet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"numberValidatorsInCurrentSet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"numberValidatorsInSet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"registry\",\"outputs\":[{\"internalType\":\"contract IRegistry\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"group\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"lesser\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"greater\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"revokeActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"group\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"lesser\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"greater\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"revokeAllActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"group\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"lesser\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"greater\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"revokePending\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bool\",\"name\":\"flag\",\"type\":\"bool\"}],\"name\":\"setAllowedToVoteOverMaxNumberOfGroups\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"threshold\",\"type\":\"uint256\"}],\"name\":\"setElectabilityThreshold\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"min\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"max\",\"type\":\"uint256\"}],\"name\":\"setElectableValidators\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxNumGroupsVotedFor\",\"type\":\"uint256\"}],\"name\":\"setMaxNumGroupsVotedFor\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"registryAddress\",\"type\":\"address\"}],\"name\":\"setRegistry\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"group\",\"type\":\"address\"}],\"name\":\"updateTotalVotesByAccountForGroup\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"validatorSignerAddressFromCurrentSet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"validatorSignerAddressFromSet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"group\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"lesser\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"greater\",\"type\":\"address\"}],\"name\":\"vote\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"methods\":{\"activate(address)\":{\"details\":\"Pending votes cannot be activated until an election has been held.\",\"params\":{\"group\":\"The validator group to vote for.\"},\"return\":\"True upon success.\"},\"activateForAccount(address,address)\":{\"details\":\"Pending votes cannot be activated until an election has been held.\",\"params\":{\"account\":\"The validateor group account's pending votes to active votes\",\"group\":\"The validator group to vote for.\"},\"return\":\"True upon success.\"},\"canReceiveVotes(address,uint256)\":{\"details\":\"Votes are not allowed to be cast that would increase a group's proportion of locked gold  voting for it to greater than  (numGroupMembers + 1) / min(maxElectableValidators, numRegisteredValidators)Note that groups may still receive additional votes via rewards even if this function  returns false.\",\"params\":{\"group\":\"The address of the group.\",\"value\":\"The number of votes.\"},\"return\":\"Whether or not a group can receive the specified number of votes.\"},\"checkProofOfPossession(address,bytes,bytes)\":{\"params\":{\"blsKey\":\"The BLS public key that the validator is using for consensus, should pass proof  of possession. 48 bytes.\",\"blsPop\":\"The BLS public key proof-of-possession, which consists of a signature on the  account address. 96 bytes.\",\"sender\":\"The address signed by the BLS key to generate the proof of possession.\"},\"return\":\"True upon success.\"},\"electNValidatorSigners(uint256,uint256)\":{\"details\":\"See https://en.wikipedia.org/wiki/D%27Hondt_method#Allocation for more information.\",\"return\":\"The list of elected validators.\"},\"electValidatorSigners()\":{\"return\":\"The list of elected validators.\"},\"forceDecrementVotes(address,uint256,address[],address[],uint256[])\":{\"params\":{\"account\":\"Address to revoke votes from.\",\"greaters\":\"The groups receivier more votes than the i'th `group`, or 0 if               the i'th `group` has the most votes of any validator group.\",\"indices\":\"The indices of the i'th group in the account's voting list.\",\"lessers\":\"The groups receiving fewer votes than the i'th `group`, or 0 if               the i'th `group` has the fewest votes of any validator group.\",\"value\":\"Maximum amount of votes to revoke.\"},\"return\":\"Number of votes successfully decremented.\"},\"fractionMulExp(uint256,uint256,uint256,uint256,uint256,uint256)\":{\"params\":{\"_decimals\":\"precision\",\"aDenominator\":\"Denominator of first fraction\",\"aNumerator\":\"Numerator of first fraction\",\"bDenominator\":\"Denominator of exponentiated fraction\",\"bNumerator\":\"Numerator of exponentiated fraction\",\"exponent\":\"exponent to raise b to\"},\"return\":\"Numerator of the computed quantity (not reduced).Denominator of the computed quantity (not reduced).\"},\"getActiveVoteUnitsForGroup(address)\":{\"params\":{\"group\":\"The address of the validator group.\"},\"return\":\"The total active vote units made for `group`.\"},\"getActiveVoteUnitsForGroupByAccount(address,address)\":{\"params\":{\"account\":\"The address of the voting account.\",\"group\":\"The address of the validator group.\"},\"return\":\"The active vote units for `group` made by `account`.\"},\"getActiveVotes()\":{\"return\":\"The active votes received across all groups.\"},\"getActiveVotesForGroup(address)\":{\"params\":{\"group\":\"The address of the validator group.\"},\"return\":\"The active votes made for `group`.\"},\"getActiveVotesForGroupByAccount(address,address)\":{\"params\":{\"account\":\"The address of the voting account.\",\"group\":\"The address of the validator group.\"},\"return\":\"The active votes for `group` made by `account`.\"},\"getBlockNumberFromHeader(bytes)\":{\"params\":{\"header\":\"RLP encoded header\"},\"return\":\"Block number.\"},\"getCurrentValidatorSigners()\":{\"return\":\"List of current validator signers.\"},\"getElectabilityThreshold()\":{\"return\":\"Threshold value as unwrapped fraction.\"},\"getElectableValidators()\":{\"return\":\"The minimum number of validators that can be elected.The maximum number of validators that can be elected.\"},\"getEligibleValidatorGroups()\":{\"return\":\"The list of validator groups eligible to elect validators.\"},\"getEpochNumber()\":{\"return\":\"Current epoch number.\"},\"getEpochNumberOfBlock(uint256)\":{\"params\":{\"blockNumber\":\"Block number where epoch number is calculated.\"},\"return\":\"Epoch number.\"},\"getEpochSize()\":{\"return\":\"The current epoch size in blocks.\"},\"getGroupEligibility(address)\":{\"details\":\"Eligible groups that have received their maximum number of votes cannot receive more.\",\"return\":\"Whether or not a group is eligible to receive votes.\"},\"getGroupEpochRewards(address,uint256,uint256[])\":{\"details\":\"Eligible groups that have received their maximum number of votes cannot receive more.\",\"params\":{\"group\":\"The group to calculate epoch rewards for.\",\"totalEpochRewards\":\"The total amount of rewards going to all voters.\",\"uptimes\":\"Array of Fixidity representations of the validators' uptimes, between 0 and 1.\"},\"return\":\"The amount of rewards that voters for `group` are due at the end of an epoch.\"},\"getGroupsVotedForByAccount(address)\":{\"params\":{\"account\":\"The address of the account casting votes.\"},\"return\":\"The groups that `account` has voted for.\"},\"getNumVotesReceivable(address)\":{\"details\":\"Votes are not allowed to be cast that would increase a group's proportion of locked gold  voting for it to greater than  (numGroupMembers + 1) / min(maxElectableValidators, numRegisteredValidators)Note that a group's vote total may exceed this number through rewards or config changes.\",\"params\":{\"group\":\"The address of the group.\"},\"return\":\"The number of votes that a group can receive.\"},\"getParentSealBitmap(uint256)\":{\"params\":{\"blockNumber\":\"Block number to retrieve. Must be within 4 epochs of the current number.\"},\"return\":\"Bitmap parent seal with set bits at indices corresponding to signing validators.\"},\"getPendingVotesForGroup(address)\":{\"params\":{\"group\":\"The address of the validator group.\"},\"return\":\"The pending votes made for `group`.\"},\"getPendingVotesForGroupByAccount(address,address)\":{\"params\":{\"account\":\"The address of the voting account.\",\"group\":\"The address of the validator group.\"},\"return\":\"The pending votes for `group` made by `account`.\"},\"getTotalVotes()\":{\"return\":\"The total votes received across all groups.\"},\"getTotalVotesByAccount(address)\":{\"params\":{\"account\":\"The address of the account.\"},\"return\":\"The total number of votes cast by an account.\"},\"getTotalVotesForEligibleValidatorGroups()\":{\"return\":\"List of all validator groupsNumber of votes each validator group received.\"},\"getTotalVotesForGroup(address)\":{\"params\":{\"group\":\"The address of the validator group.\"},\"return\":\"The total votes made for `group`.\"},\"getTotalVotesForGroupByAccount(address,address)\":{\"params\":{\"account\":\"The address of the voting account.\",\"group\":\"The address of the validator group.\"},\"return\":\"The total votes for `group` made by `account`.\"},\"getVerifiedSealBitmapFromHeader(bytes)\":{\"params\":{\"header\":\"RLP encoded header\"},\"return\":\"Bitmap parent seal with set bits at indices correspoinding to signing validators.\"},\"getVersionNumber()\":{\"return\":\"Storage version of the contract.Major version of the contract.Minor version of the contract.Patch version of the contract.\"},\"hasActivatablePendingVotes(address,address)\":{\"details\":\"Pending votes cannot be activated until an election has been held.\",\"params\":{\"account\":\"The account with pending votes.\",\"group\":\"The validator group that `account` has pending votes for.\"},\"return\":\"Whether or not `account` has activatable votes for `group`.\"},\"hashHeader(bytes)\":{\"params\":{\"header\":\"RLP encoded header\"},\"return\":\"Header hash.\"},\"initialize(address,uint256,uint256,uint256,uint256)\":{\"details\":\"Should be called only once.\",\"params\":{\"_electabilityThreshold\":\"The minimum ratio of votes a group needs before its members can  be elected.\",\"_maxNumGroupsVotedFor\":\"The maximum number of groups that an account can vote for at once.\",\"minElectableValidators\":\"The minimum number of validators that can be elected.\",\"registryAddress\":\"The address of the registry core smart contract.\"}},\"isOwner()\":{\"details\":\"Returns true if the caller is the current owner.\"},\"markGroupEligible(address,address,address)\":{\"params\":{\"greater\":\"The address of the group that has received more votes than this group.\",\"group\":\"The address of the validator group.\",\"lesser\":\"The address of the group that has received fewer votes than this group.\"}},\"markGroupIneligible(address)\":{\"details\":\"Can only be called by the registered \\\"Validators\\\" contract.\",\"params\":{\"group\":\"The address of the validator group.\"}},\"minQuorumSize(uint256)\":{\"details\":\"Computed in celo-blockchain as int(math.Ceil(float64(2*valSet.Size()) / 3))\"},\"minQuorumSizeInCurrentSet()\":{\"return\":\"Byzantine quorum of validators.\"},\"numberValidatorsInCurrentSet()\":{\"return\":\"Size of the current elected validator set.\"},\"numberValidatorsInSet(uint256)\":{\"params\":{\"blockNumber\":\"Block number to retrieve the validator set from.\"},\"return\":\"Size of the validator set.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner.     * NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"revokeActive(address,uint256,address,address,uint256)\":{\"details\":\"Fails if the account has not voted on a validator group.\",\"params\":{\"greater\":\"The group receiving more votes than the group for which the vote was revoked,  or 0 if that group has the most votes of any validator group.\",\"group\":\"The validator group to revoke votes from.\",\"index\":\"The index of the group in the account's voting list.\",\"lesser\":\"The group receiving fewer votes than the group for which the vote was revoked,  or 0 if that group has the fewest votes of any validator group.\",\"value\":\"The number of votes to revoke.\"},\"return\":\"True upon success.\"},\"revokeAllActive(address,address,address,uint256)\":{\"details\":\"Fails if the account has not voted on a validator group.\",\"params\":{\"greater\":\"The group receiving more votes than the group for which the vote was revoked,  or 0 if that group has the most votes of any validator group.\",\"group\":\"The validator group to revoke votes from.\",\"index\":\"The index of the group in the account's voting list.\",\"lesser\":\"The group receiving fewer votes than the group for which the vote was revoked,  or 0 if that group has the fewest votes of any validator group.\"},\"return\":\"True upon success.\"},\"revokePending(address,uint256,address,address,uint256)\":{\"details\":\"Fails if the account has not voted on a validator group.\",\"params\":{\"greater\":\"The group receiving more votes than the group for which the vote was revoked,  or 0 if that group has the most votes of any validator group.\",\"group\":\"The validator group to revoke votes from.\",\"index\":\"The index of the group in the account's voting list.\",\"lesser\":\"The group receiving fewer votes than the group for which the vote was revoked,  or 0 if that group has the fewest votes of any validator group.\",\"value\":\"The number of votes to revoke.\"},\"return\":\"True upon success.\"},\"setAllowedToVoteOverMaxNumberOfGroups(bool)\":{\"params\":{\"flag\":\"The on/off flag.\"}},\"setElectabilityThreshold(uint256)\":{\"params\":{\"threshold\":\"Electability threshold as unwrapped Fraction.\"},\"return\":\"True upon success.\"},\"setElectableValidators(uint256,uint256)\":{\"params\":{\"max\":\"The maximum number of validators that can be elected.\",\"min\":\"The minimum number of validators that can be elected.\"},\"return\":\"True upon success.\"},\"setMaxNumGroupsVotedFor(uint256)\":{\"params\":{\"_maxNumGroupsVotedFor\":\"The maximum number of groups an account can vote for.\"},\"return\":\"True upon success.\"},\"setRegistry(address)\":{\"params\":{\"registryAddress\":\"The address of a registry contract for routing to other contracts.\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"updateTotalVotesByAccountForGroup(address,address)\":{\"params\":{\"account\":\"The address of the voting account.\",\"group\":\"The address of the validator group.\"}},\"validatorSignerAddressFromCurrentSet(uint256)\":{\"params\":{\"index\":\"Index of requested validator in the validator set.\"},\"return\":\"Address of validator at the requested index.\"},\"validatorSignerAddressFromSet(uint256,uint256)\":{\"params\":{\"blockNumber\":\"Block number to retrieve the validator set from.\",\"index\":\"Index of requested validator in the validator set.\"},\"return\":\"Address of validator at the requested index.\"},\"vote(address,uint256,address,address)\":{\"details\":\"Fails if `group` is empty or not a validator group.\",\"params\":{\"greater\":\"The group receiving more votes than `group`, or 0 if `group` has the  most votes of any validator group.\",\"group\":\"The validator group to vote for.\",\"lesser\":\"The group receiving fewer votes than `group`, or 0 if `group` has the  fewest votes of any validator group.\",\"value\":\"The amount of gold to use to vote.\"},\"return\":\"True upon success.\"}},\"title\":\"A wrapper around Election that exposes onlyVm functions for testing.\"},\"userdoc\":{\"methods\":{\"activate(address)\":{\"notice\":\"Converts `account`'s pending votes for `group` to active votes.\"},\"activateForAccount(address,address)\":{\"notice\":\"Converts `account`'s pending votes for `group` to active votes.\"},\"canReceiveVotes(address,uint256)\":{\"notice\":\"Returns whether or not a group can receive the specified number of votes.\"},\"checkProofOfPossession(address,bytes,bytes)\":{\"notice\":\"Checks a BLS proof of possession.\"},\"electNValidatorSigners(uint256,uint256)\":{\"notice\":\"Returns a list of elected validators with seats allocated to groups via the D'Hondt  method.\"},\"electValidatorSigners()\":{\"notice\":\"Returns a list of elected validators with seats allocated to groups via the D'Hondt  method.\"},\"forceDecrementVotes(address,uint256,address[],address[],uint256[])\":{\"notice\":\"Reduces the total amount of `account`'s voting gold by `value` by        iterating over all groups voted for by account.\"},\"fractionMulExp(uint256,uint256,uint256,uint256,uint256,uint256)\":{\"notice\":\"calculate a * b^x for fractions a, b to `decimals` precision\"},\"getActiveVoteUnitsForGroup(address)\":{\"notice\":\"Returns the total active vote units made for `group`.\"},\"getActiveVoteUnitsForGroupByAccount(address,address)\":{\"notice\":\"Returns the active vote units for `group` made by `account`.\"},\"getActiveVotes()\":{\"notice\":\"Returns the active votes received across all groups.\"},\"getActiveVotesForGroup(address)\":{\"notice\":\"Returns the active votes made for `group`.\"},\"getActiveVotesForGroupByAccount(address,address)\":{\"notice\":\"Returns the active votes for `group` made by `account`.\"},\"getBlockNumberFromHeader(bytes)\":{\"notice\":\"Parses block number out of header.\"},\"getCurrentValidatorSigners()\":{\"notice\":\"Returns get current validator signers using the precompiles.\"},\"getElectabilityThreshold()\":{\"notice\":\"Gets the election threshold.\"},\"getElectableValidators()\":{\"notice\":\"Returns the minimum and maximum number of validators that can be elected.\"},\"getEligibleValidatorGroups()\":{\"notice\":\"Returns the list of validator groups eligible to elect validators.\"},\"getEpochNumber()\":{\"notice\":\"Returns the epoch number at a block.\"},\"getEpochNumberOfBlock(uint256)\":{\"notice\":\"Returns the epoch number at a block.\"},\"getEpochSize()\":{\"notice\":\"Returns the current epoch size in blocks.\"},\"getGroupEligibility(address)\":{\"notice\":\"Returns whether or not a group is eligible to receive votes.\"},\"getGroupEpochRewards(address,uint256,uint256[])\":{\"notice\":\"Returns the amount of rewards that voters for `group` are due at the end of an epoch.\"},\"getGroupsVotedForByAccount(address)\":{\"notice\":\"Returns the groups that `account` has voted for.\"},\"getNumVotesReceivable(address)\":{\"notice\":\"Returns the number of votes that a group can receive.\"},\"getParentSealBitmap(uint256)\":{\"notice\":\"Gets the parent seal bitmap from the header at the given block number.\"},\"getPendingVotesForGroup(address)\":{\"notice\":\"Returns the pending votes made for `group`.\"},\"getPendingVotesForGroupByAccount(address,address)\":{\"notice\":\"Returns the pending votes for `group` made by `account`.\"},\"getTotalVotes()\":{\"notice\":\"Returns the total votes received across all groups.\"},\"getTotalVotesByAccount(address)\":{\"notice\":\"Returns the total number of votes cast by an account.\"},\"getTotalVotesForEligibleValidatorGroups()\":{\"notice\":\"Returns list of all validator groups and the number of votes they've received.\"},\"getTotalVotesForGroup(address)\":{\"notice\":\"Returns the total votes made for `group`.\"},\"getTotalVotesForGroupByAccount(address,address)\":{\"notice\":\"Returns the total votes for `group` made by `account`.\"},\"getVerifiedSealBitmapFromHeader(bytes)\":{\"notice\":\"Verifies the BLS signature on the header and returns the seal bitmap. The validator set used for verification is retrieved based on the parent hash field of the header.  If the parent hash is not in the blockchain, verification fails.\"},\"getVersionNumber()\":{\"notice\":\"Returns the storage, major, minor, and patch version of the contract.\"},\"hasActivatablePendingVotes(address,address)\":{\"notice\":\"Returns whether or not an account's votes for the specified group can be activated.\"},\"hashHeader(bytes)\":{\"notice\":\"Computes hash of header.\"},\"initialize(address,uint256,uint256,uint256,uint256)\":{\"notice\":\"Used in place of the constructor to allow the contract to be upgradable via proxy.\"},\"markGroupEligible(address,address,address)\":{\"notice\":\"Marks a group eligible for electing validators.\"},\"markGroupIneligible(address)\":{\"notice\":\"Marks a group ineligible for electing validators.\"},\"minQuorumSize(uint256)\":{\"notice\":\"Returns the minimum number of required signers for a given block number.\"},\"minQuorumSizeInCurrentSet()\":{\"notice\":\"Computes byzantine quorum from current validator set size\"},\"numberValidatorsInCurrentSet()\":{\"notice\":\"Gets the size of the current elected validator set.\"},\"numberValidatorsInSet(uint256)\":{\"notice\":\"Gets the size of the validator set that must sign the given block number.\"},\"revokeActive(address,uint256,address,address,uint256)\":{\"notice\":\"Revokes `value` active votes for `group`\"},\"revokeAllActive(address,address,address,uint256)\":{\"notice\":\"Revokes all active votes for `group`\"},\"revokePending(address,uint256,address,address,uint256)\":{\"notice\":\"Revokes `value` pending votes for `group`\"},\"setAllowedToVoteOverMaxNumberOfGroups(bool)\":{\"notice\":\"Allows to turn on/off voting over maxNumGroupsVotedFor. Once this is turned on and account voted for more than maxNumGroupsVotedFor, it is account's obligation to run updateTotalVotesByAccountForGroup once a day. If not run, voting power of account will not reflect rewards awarded.\"},\"setElectabilityThreshold(uint256)\":{\"notice\":\"Sets the electability threshold.\"},\"setElectableValidators(uint256,uint256)\":{\"notice\":\"Updates the minimum and maximum number of validators that can be elected.\"},\"setMaxNumGroupsVotedFor(uint256)\":{\"notice\":\"Updates the maximum number of groups an account can be voting for at once.\"},\"setRegistry(address)\":{\"notice\":\"Updates the address pointing to a Registry contract.\"},\"updateTotalVotesByAccountForGroup(address,address)\":{\"notice\":\"Counts and caches account's votes for group.\"},\"validatorSignerAddressFromCurrentSet(uint256)\":{\"notice\":\"Gets a validator address from the current validator set.\"},\"validatorSignerAddressFromSet(uint256,uint256)\":{\"notice\":\"Gets a validator address from the validator set at the given block number.\"},\"vote(address,uint256,address,address)\":{\"notice\":\"Increments the number of total and pending votes for `group`.\"}}}},\"settings\":{\"compilationTarget\":{\"project:/contracts/governance/test/ElectionTest.sol\":\"ElectionTest\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"openzeppelin-solidity/contracts/GSN/Context.sol\":{\"content\":\"pragma solidity ^0.5.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\ncontract Context {\\n    // Empty internal constructor, to prevent people from mistakenly deploying\\n    // an instance of this contract, which should be used via inheritance.\\n    constructor () internal { }\\n    // solhint-disable-previous-line no-empty-blocks\\n\\n    function _msgSender() internal view returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x90a3995645af7562d84b9d69363ffa5ae7217714ab61e951bf7bc450f40e4061\"},\"openzeppelin-solidity/contracts/math/Math.sol\":{\"content\":\"pragma solidity ^0.5.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow, so we distribute\\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\\n    }\\n}\\n\",\"keccak256\":\"0x4b5aa451e4e8801478708f94b118a7821c0500d676255eaf89fc78c14856ce4e\"},\"openzeppelin-solidity/contracts/math/SafeMath.sol\":{\"content\":\"pragma solidity ^0.5.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        // Solidity only automatically asserts when dividing by 0\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0x640b6dee7a4b830bdfd52b5031a07fc2b12209f5b2e29e5d364a7d37f69d8076\"},\"openzeppelin-solidity/contracts/ownership/Ownable.sol\":{\"content\":\"pragma solidity ^0.5.0;\\n\\nimport \\\"../GSN/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\ncontract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(isOwner(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the caller is the current owner.\\n     */\\n    function isOwner() public view returns (bool) {\\n        return _msgSender() == _owner;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public onlyOwner {\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     */\\n    function _transferOwnership(address newOwner) internal {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x6fb9d7889769d7cc161225f9ef7a90e468ba9788b253816f8d8b6894d3472c24\"},\"openzeppelin-solidity/contracts/token/ERC20/IERC20.sol\":{\"content\":\"pragma solidity ^0.5.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\\n * the optional functions; to access them see {ERC20Detailed}.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xe5bb0f57cff3e299f360052ba50f1ea0fff046df2be070b6943e0e3c3fdad8a9\"},\"project:/contracts/common/CalledByVm.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.5.13 <0.9.0;\\n\\ncontract CalledByVm {\\n  modifier onlyVm() {\\n    require(msg.sender == address(0), \\\"Only VM can call\\\");\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0xb94d2b580a505f5d4ef51bb14b12b6fa19d69e4fa94c96f2f105091673a0a0a4\"},\"project:/contracts/common/FixidityLib.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.5.13 <0.9.0;\\n\\n/**\\n * @title FixidityLib\\n * @author Gadi Guy, Alberto Cuesta Canada\\n * @notice This library provides fixed point arithmetic with protection against\\n * overflow.\\n * All operations are done with uint256 and the operands must have been created\\n * with any of the newFrom* functions, which shift the comma digits() to the\\n * right and check for limits, or with wrap() which expects a number already\\n * in the internal representation of a fraction.\\n * When using this library be sure to use maxNewFixed() as the upper limit for\\n * creation of fixed point numbers.\\n * @dev All contained functions are pure and thus marked internal to be inlined\\n * on consuming contracts at compile time for gas efficiency.\\n */\\nlibrary FixidityLib {\\n  struct Fraction {\\n    uint256 value;\\n  }\\n\\n  /**\\n   * @notice Number of positions that the comma is shifted to the right.\\n   */\\n  function digits() internal pure returns (uint8) {\\n    return 24;\\n  }\\n\\n  uint256 private constant FIXED1_UINT = 1000000000000000000000000;\\n\\n  /**\\n   * @notice This is 1 in the fixed point units used in this library.\\n   * @dev Test fixed1() equals 10^digits()\\n   * Hardcoded to 24 digits.\\n   */\\n  function fixed1() internal pure returns (Fraction memory) {\\n    return Fraction(FIXED1_UINT);\\n  }\\n\\n  /**\\n   * @notice Wrap a uint256 that represents a 24-decimal fraction in a Fraction\\n   * struct.\\n   * @param x Number that already represents a 24-decimal fraction.\\n   * @return A Fraction struct with contents x.\\n   */\\n  function wrap(uint256 x) internal pure returns (Fraction memory) {\\n    return Fraction(x);\\n  }\\n\\n  /**\\n   * @notice Unwraps the uint256 inside of a Fraction struct.\\n   */\\n  function unwrap(Fraction memory x) internal pure returns (uint256) {\\n    return x.value;\\n  }\\n\\n  /**\\n   * @notice The amount of decimals lost on each multiplication operand.\\n   * @dev Test mulPrecision() equals sqrt(fixed1)\\n   */\\n  function mulPrecision() internal pure returns (uint256) {\\n    return 1000000000000;\\n  }\\n\\n  /**\\n   * @notice Maximum value that can be converted to fixed point. Optimize for deployment.\\n   * @dev\\n   * Test maxNewFixed() equals maxUint256() / fixed1()\\n   */\\n  function maxNewFixed() internal pure returns (uint256) {\\n    return 115792089237316195423570985008687907853269984665640564;\\n  }\\n\\n  /**\\n   * @notice Converts a uint256 to fixed point Fraction\\n   * @dev Test newFixed(0) returns 0\\n   * Test newFixed(1) returns fixed1()\\n   * Test newFixed(maxNewFixed()) returns maxNewFixed() * fixed1()\\n   * Test newFixed(maxNewFixed()+1) fails\\n   */\\n  function newFixed(uint256 x) internal pure returns (Fraction memory) {\\n    require(x <= maxNewFixed(), \\\"can't create fixidity number larger than maxNewFixed()\\\");\\n    return Fraction(x * FIXED1_UINT);\\n  }\\n\\n  /**\\n   * @notice Converts a uint256 in the fixed point representation of this\\n   * library to a non decimal. All decimal digits will be truncated.\\n   */\\n  function fromFixed(Fraction memory x) internal pure returns (uint256) {\\n    return x.value / FIXED1_UINT;\\n  }\\n\\n  /**\\n   * @notice Converts two uint256 representing a fraction to fixed point units,\\n   * equivalent to multiplying dividend and divisor by 10^digits().\\n   * @param numerator numerator must be <= maxNewFixed()\\n   * @param denominator denominator must be <= maxNewFixed() and denominator can't be 0\\n   * @dev\\n   * Test newFixedFraction(1,0) fails\\n   * Test newFixedFraction(0,1) returns 0\\n   * Test newFixedFraction(1,1) returns fixed1()\\n   * Test newFixedFraction(1,fixed1()) returns 1\\n   */\\n  function newFixedFraction(uint256 numerator, uint256 denominator)\\n    internal\\n    pure\\n    returns (Fraction memory)\\n  {\\n    Fraction memory convertedNumerator = newFixed(numerator);\\n    Fraction memory convertedDenominator = newFixed(denominator);\\n    return divide(convertedNumerator, convertedDenominator);\\n  }\\n\\n  /**\\n   * @notice Returns the integer part of a fixed point number.\\n   * @dev\\n   * Test integer(0) returns 0\\n   * Test integer(fixed1()) returns fixed1()\\n   * Test integer(newFixed(maxNewFixed())) returns maxNewFixed()*fixed1()\\n   */\\n  function integer(Fraction memory x) internal pure returns (Fraction memory) {\\n    return Fraction((x.value / FIXED1_UINT) * FIXED1_UINT); // Can't overflow\\n  }\\n\\n  /**\\n   * @notice Returns the fractional part of a fixed point number.\\n   * In the case of a negative number the fractional is also negative.\\n   * @dev\\n   * Test fractional(0) returns 0\\n   * Test fractional(fixed1()) returns 0\\n   * Test fractional(fixed1()-1) returns 10^24-1\\n   */\\n  function fractional(Fraction memory x) internal pure returns (Fraction memory) {\\n    return Fraction(x.value - (x.value / FIXED1_UINT) * FIXED1_UINT); // Can't overflow\\n  }\\n\\n  /**\\n   * @notice x+y.\\n   * @dev The maximum value that can be safely used as an addition operator is defined as\\n   * maxFixedAdd = maxUint256()-1 / 2, or\\n   * 57896044618658097711785492504343953926634992332820282019728792003956564819967.\\n   * Test add(maxFixedAdd,maxFixedAdd) equals maxFixedAdd + maxFixedAdd\\n   * Test add(maxFixedAdd+1,maxFixedAdd+1) throws\\n   */\\n  function add(Fraction memory x, Fraction memory y) internal pure returns (Fraction memory) {\\n    uint256 z = x.value + y.value;\\n    require(z >= x.value, \\\"add overflow detected\\\");\\n    return Fraction(z);\\n  }\\n\\n  /**\\n   * @notice x-y.\\n   * @dev\\n   * Test subtract(6, 10) fails\\n   */\\n  function subtract(Fraction memory x, Fraction memory y) internal pure returns (Fraction memory) {\\n    require(x.value >= y.value, \\\"substraction underflow detected\\\");\\n    return Fraction(x.value - y.value);\\n  }\\n\\n  /**\\n   * @notice x*y. If any of the operators is higher than the max multiplier value it\\n   * might overflow.\\n   * @dev The maximum value that can be safely used as a multiplication operator\\n   * (maxFixedMul) is calculated as sqrt(maxUint256()*fixed1()),\\n   * or 340282366920938463463374607431768211455999999999999\\n   * Test multiply(0,0) returns 0\\n   * Test multiply(maxFixedMul,0) returns 0\\n   * Test multiply(0,maxFixedMul) returns 0\\n   * Test multiply(fixed1()/mulPrecision(),fixed1()*mulPrecision()) returns fixed1()\\n   * Test multiply(maxFixedMul,maxFixedMul) is around maxUint256()\\n   * Test multiply(maxFixedMul+1,maxFixedMul+1) fails\\n   */\\n  function multiply(Fraction memory x, Fraction memory y) internal pure returns (Fraction memory) {\\n    if (x.value == 0 || y.value == 0) return Fraction(0);\\n    if (y.value == FIXED1_UINT) return x;\\n    if (x.value == FIXED1_UINT) return y;\\n\\n    // Separate into integer and fractional parts\\n    // x = x1 + x2, y = y1 + y2\\n    uint256 x1 = integer(x).value / FIXED1_UINT;\\n    uint256 x2 = fractional(x).value;\\n    uint256 y1 = integer(y).value / FIXED1_UINT;\\n    uint256 y2 = fractional(y).value;\\n\\n    // (x1 + x2) * (y1 + y2) = (x1 * y1) + (x1 * y2) + (x2 * y1) + (x2 * y2)\\n    uint256 x1y1 = x1 * y1;\\n    if (x1 != 0) require(x1y1 / x1 == y1, \\\"overflow x1y1 detected\\\");\\n\\n    // x1y1 needs to be multiplied back by fixed1\\n    // solium-disable-next-line mixedcase\\n    uint256 fixed_x1y1 = x1y1 * FIXED1_UINT;\\n    if (x1y1 != 0) require(fixed_x1y1 / x1y1 == FIXED1_UINT, \\\"overflow x1y1 * fixed1 detected\\\");\\n    x1y1 = fixed_x1y1;\\n\\n    uint256 x2y1 = x2 * y1;\\n    if (x2 != 0) require(x2y1 / x2 == y1, \\\"overflow x2y1 detected\\\");\\n\\n    uint256 x1y2 = x1 * y2;\\n    if (x1 != 0) require(x1y2 / x1 == y2, \\\"overflow x1y2 detected\\\");\\n\\n    x2 = x2 / mulPrecision();\\n    y2 = y2 / mulPrecision();\\n    uint256 x2y2 = x2 * y2;\\n    if (x2 != 0) require(x2y2 / x2 == y2, \\\"overflow x2y2 detected\\\");\\n\\n    // result = fixed1() * x1 * y1 + x1 * y2 + x2 * y1 + x2 * y2 / fixed1();\\n    Fraction memory result = Fraction(x1y1);\\n    result = add(result, Fraction(x2y1)); // Add checks for overflow\\n    result = add(result, Fraction(x1y2)); // Add checks for overflow\\n    result = add(result, Fraction(x2y2)); // Add checks for overflow\\n    return result;\\n  }\\n\\n  /**\\n   * @notice 1/x\\n   * @dev\\n   * Test reciprocal(0) fails\\n   * Test reciprocal(fixed1()) returns fixed1()\\n   * Test reciprocal(fixed1()*fixed1()) returns 1 // Testing how the fractional is truncated\\n   * Test reciprocal(1+fixed1()*fixed1()) returns 0 // Testing how the fractional is truncated\\n   * Test reciprocal(newFixedFraction(1, 1e24)) returns newFixed(1e24)\\n   */\\n  function reciprocal(Fraction memory x) internal pure returns (Fraction memory) {\\n    require(x.value != 0, \\\"can't call reciprocal(0)\\\");\\n    return Fraction((FIXED1_UINT * FIXED1_UINT) / x.value); // Can't overflow\\n  }\\n\\n  /**\\n   * @notice x/y. If the dividend is higher than the max dividend value, it\\n   * might overflow. You can use multiply(x,reciprocal(y)) instead.\\n   * @dev The maximum value that can be safely used as a dividend (maxNewFixed) is defined as\\n   * divide(maxNewFixed,newFixedFraction(1,fixed1())) is around maxUint256().\\n   * This yields the value 115792089237316195423570985008687907853269984665640564.\\n   * Test maxNewFixed equals maxUint256()/fixed1()\\n   * Test divide(maxNewFixed,1) equals maxNewFixed*(fixed1)\\n   * Test divide(maxNewFixed+1,multiply(mulPrecision(),mulPrecision())) throws\\n   * Test divide(fixed1(),0) fails\\n   * Test divide(maxNewFixed,1) = maxNewFixed*(10^digits())\\n   * Test divide(maxNewFixed+1,1) throws\\n   */\\n  function divide(Fraction memory x, Fraction memory y) internal pure returns (Fraction memory) {\\n    require(y.value != 0, \\\"can't divide by 0\\\");\\n    uint256 X = x.value * FIXED1_UINT;\\n    require(X / FIXED1_UINT == x.value, \\\"overflow at divide\\\");\\n    return Fraction(X / y.value);\\n  }\\n\\n  /**\\n   * @notice x > y\\n   */\\n  function gt(Fraction memory x, Fraction memory y) internal pure returns (bool) {\\n    return x.value > y.value;\\n  }\\n\\n  /**\\n   * @notice x >= y\\n   */\\n  function gte(Fraction memory x, Fraction memory y) internal pure returns (bool) {\\n    return x.value >= y.value;\\n  }\\n\\n  /**\\n   * @notice x < y\\n   */\\n  function lt(Fraction memory x, Fraction memory y) internal pure returns (bool) {\\n    return x.value < y.value;\\n  }\\n\\n  /**\\n   * @notice x <= y\\n   */\\n  function lte(Fraction memory x, Fraction memory y) internal pure returns (bool) {\\n    return x.value <= y.value;\\n  }\\n\\n  /**\\n   * @notice x == y\\n   */\\n  function equals(Fraction memory x, Fraction memory y) internal pure returns (bool) {\\n    return x.value == y.value;\\n  }\\n\\n  /**\\n   * @notice x <= 1\\n   */\\n  function isProperFraction(Fraction memory x) internal pure returns (bool) {\\n    return lte(x, fixed1());\\n  }\\n}\\n\",\"keccak256\":\"0xf1cebbfcf298ef05f24e940ab4351049e2da6e5ee77b272257d2c86b4cd1cc1c\"},\"project:/contracts/common/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.5.13 <0.9.0;\\n\\ncontract Initializable {\\n  bool public initialized;\\n\\n  constructor(bool testingDeployment) public {\\n    if (!testingDeployment) {\\n      initialized = true;\\n    }\\n  }\\n\\n  modifier initializer() {\\n    require(!initialized, \\\"contract already initialized\\\");\\n    initialized = true;\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0x27277d9f2c894659833be45eeca368a6d5ff060d944f0ad335e31003bf6477ed\"},\"project:/contracts/common/UsingPrecompiles.sol\":{\"content\":\"pragma solidity ^0.5.13;\\n\\nimport \\\"openzeppelin-solidity/contracts/math/SafeMath.sol\\\";\\nimport \\\"../common/interfaces/ICeloVersionedContract.sol\\\";\\n\\ncontract UsingPrecompiles {\\n  using SafeMath for uint256;\\n\\n  address constant TRANSFER = address(0xff - 2);\\n  address constant FRACTION_MUL = address(0xff - 3);\\n  address constant PROOF_OF_POSSESSION = address(0xff - 4);\\n  address constant GET_VALIDATOR = address(0xff - 5);\\n  address constant NUMBER_VALIDATORS = address(0xff - 6);\\n  address constant EPOCH_SIZE = address(0xff - 7);\\n  address constant BLOCK_NUMBER_FROM_HEADER = address(0xff - 8);\\n  address constant HASH_HEADER = address(0xff - 9);\\n  address constant GET_PARENT_SEAL_BITMAP = address(0xff - 10);\\n  address constant GET_VERIFIED_SEAL_BITMAP = address(0xff - 11);\\n\\n  /**\\n   * @notice calculate a * b^x for fractions a, b to `decimals` precision\\n   * @param aNumerator Numerator of first fraction\\n   * @param aDenominator Denominator of first fraction\\n   * @param bNumerator Numerator of exponentiated fraction\\n   * @param bDenominator Denominator of exponentiated fraction\\n   * @param exponent exponent to raise b to\\n   * @param _decimals precision\\n   * @return Numerator of the computed quantity (not reduced).\\n   * @return Denominator of the computed quantity (not reduced).\\n   */\\n  function fractionMulExp(\\n    uint256 aNumerator,\\n    uint256 aDenominator,\\n    uint256 bNumerator,\\n    uint256 bDenominator,\\n    uint256 exponent,\\n    uint256 _decimals\\n  ) public view returns (uint256, uint256) {\\n    require(aDenominator != 0 && bDenominator != 0, \\\"a denominator is zero\\\");\\n    uint256 returnNumerator;\\n    uint256 returnDenominator;\\n    bool success;\\n    bytes memory out;\\n    (success, out) = FRACTION_MUL.staticcall(\\n      abi.encodePacked(aNumerator, aDenominator, bNumerator, bDenominator, exponent, _decimals)\\n    );\\n    require(success, \\\"error calling fractionMulExp precompile\\\");\\n    returnNumerator = getUint256FromBytes(out, 0);\\n    returnDenominator = getUint256FromBytes(out, 32);\\n    return (returnNumerator, returnDenominator);\\n  }\\n\\n  /**\\n   * @notice Returns the current epoch size in blocks.\\n   * @return The current epoch size in blocks.\\n   */\\n  function getEpochSize() public view returns (uint256) {\\n    bytes memory out;\\n    bool success;\\n    (success, out) = EPOCH_SIZE.staticcall(abi.encodePacked());\\n    require(success, \\\"error calling getEpochSize precompile\\\");\\n    return getUint256FromBytes(out, 0);\\n  }\\n\\n  /**\\n   * @notice Returns the epoch number at a block.\\n   * @param blockNumber Block number where epoch number is calculated.\\n   * @return Epoch number.\\n   */\\n  function getEpochNumberOfBlock(uint256 blockNumber) public view returns (uint256) {\\n    return epochNumberOfBlock(blockNumber, getEpochSize());\\n  }\\n\\n  /**\\n   * @notice Returns the epoch number at a block.\\n   * @return Current epoch number.\\n   */\\n  function getEpochNumber() public view returns (uint256) {\\n    return getEpochNumberOfBlock(block.number);\\n  }\\n\\n  /**\\n   * @notice Returns the epoch number at a block.\\n   * @param blockNumber Block number where epoch number is calculated.\\n   * @param epochSize The epoch size in blocks.\\n   * @return Epoch number.\\n   */\\n  function epochNumberOfBlock(uint256 blockNumber, uint256 epochSize)\\n    internal\\n    pure\\n    returns (uint256)\\n  {\\n    // Follows GetEpochNumber from celo-blockchain/blob/master/consensus/istanbul/utils.go\\n    uint256 epochNumber = blockNumber / epochSize;\\n    if (blockNumber % epochSize == 0) {\\n      return epochNumber;\\n    } else {\\n      return epochNumber.add(1);\\n    }\\n  }\\n\\n  /**\\n   * @notice Gets a validator address from the current validator set.\\n   * @param index Index of requested validator in the validator set.\\n   * @return Address of validator at the requested index.\\n   */\\n  // TODO: (soloseng) add to precompiles\\n  function validatorSignerAddressFromCurrentSet(uint256 index) public view returns (address) {\\n    bytes memory out;\\n    bool success;\\n    (success, out) = GET_VALIDATOR.staticcall(abi.encodePacked(index, uint256(block.number)));\\n    require(success, \\\"error calling validatorSignerAddressFromCurrentSet precompile\\\");\\n    return address(getUint256FromBytes(out, 0));\\n  }\\n\\n  /**\\n   * @notice Gets a validator address from the validator set at the given block number.\\n   * @param index Index of requested validator in the validator set.\\n   * @param blockNumber Block number to retrieve the validator set from.\\n   * @return Address of validator at the requested index.\\n   */\\n  function validatorSignerAddressFromSet(uint256 index, uint256 blockNumber)\\n    public\\n    view\\n    returns (address)\\n  {\\n    bytes memory out;\\n    bool success;\\n    (success, out) = GET_VALIDATOR.staticcall(abi.encodePacked(index, blockNumber));\\n    require(success, \\\"error calling validatorSignerAddressFromSet precompile\\\");\\n    return address(getUint256FromBytes(out, 0));\\n  }\\n\\n  /**\\n   * @notice Gets the size of the current elected validator set.\\n   * @return Size of the current elected validator set.\\n   */\\n  // TODO:(soloseng) add to precompiles.\\n  function numberValidatorsInCurrentSet() public view returns (uint256) {\\n    bytes memory out;\\n    bool success;\\n    (success, out) = NUMBER_VALIDATORS.staticcall(abi.encodePacked(uint256(block.number)));\\n    require(success, \\\"error calling numberValidatorsInCurrentSet precompile\\\");\\n    return getUint256FromBytes(out, 0);\\n  }\\n\\n  /**\\n   * @notice Gets the size of the validator set that must sign the given block number.\\n   * @param blockNumber Block number to retrieve the validator set from.\\n   * @return Size of the validator set.\\n   */\\n  function numberValidatorsInSet(uint256 blockNumber) public view returns (uint256) {\\n    bytes memory out;\\n    bool success;\\n    (success, out) = NUMBER_VALIDATORS.staticcall(abi.encodePacked(blockNumber));\\n    require(success, \\\"error calling numberValidatorsInSet precompile\\\");\\n    return getUint256FromBytes(out, 0);\\n  }\\n\\n  /**\\n   * @notice Checks a BLS proof of possession.\\n   * @param sender The address signed by the BLS key to generate the proof of possession.\\n   * @param blsKey The BLS public key that the validator is using for consensus, should pass proof\\n   *   of possession. 48 bytes.\\n   * @param blsPop The BLS public key proof-of-possession, which consists of a signature on the\\n   *   account address. 96 bytes.\\n   * @return True upon success.\\n   */\\n  function checkProofOfPossession(address sender, bytes memory blsKey, bytes memory blsPop)\\n    public\\n    view\\n    returns (bool)\\n  {\\n    bool success;\\n    (success, ) = PROOF_OF_POSSESSION.staticcall(abi.encodePacked(sender, blsKey, blsPop));\\n    return success;\\n  }\\n\\n  /**\\n   * @notice Parses block number out of header.\\n   * @param header RLP encoded header\\n   * @return Block number.\\n   */\\n  function getBlockNumberFromHeader(bytes memory header) public view returns (uint256) {\\n    bytes memory out;\\n    bool success;\\n    (success, out) = BLOCK_NUMBER_FROM_HEADER.staticcall(abi.encodePacked(header));\\n    require(success, \\\"error calling getBlockNumberFromHeader precompile\\\");\\n    return getUint256FromBytes(out, 0);\\n  }\\n\\n  /**\\n   * @notice Computes hash of header.\\n   * @param header RLP encoded header\\n   * @return Header hash.\\n   */\\n  function hashHeader(bytes memory header) public view returns (bytes32) {\\n    bytes memory out;\\n    bool success;\\n    (success, out) = HASH_HEADER.staticcall(abi.encodePacked(header));\\n    require(success, \\\"error calling hashHeader precompile\\\");\\n    return getBytes32FromBytes(out, 0);\\n  }\\n\\n  /**\\n   * @notice Gets the parent seal bitmap from the header at the given block number.\\n   * @param blockNumber Block number to retrieve. Must be within 4 epochs of the current number.\\n   * @return Bitmap parent seal with set bits at indices corresponding to signing validators.\\n   */\\n  function getParentSealBitmap(uint256 blockNumber) public view returns (bytes32) {\\n    bytes memory out;\\n    bool success;\\n    (success, out) = GET_PARENT_SEAL_BITMAP.staticcall(abi.encodePacked(blockNumber));\\n    require(success, \\\"error calling getParentSealBitmap precompile\\\");\\n    return getBytes32FromBytes(out, 0);\\n  }\\n\\n  /**\\n   * @notice Verifies the BLS signature on the header and returns the seal bitmap.\\n   * The validator set used for verification is retrieved based on the parent hash field of the\\n   * header.  If the parent hash is not in the blockchain, verification fails.\\n   * @param header RLP encoded header\\n   * @return Bitmap parent seal with set bits at indices correspoinding to signing validators.\\n   */\\n  function getVerifiedSealBitmapFromHeader(bytes memory header) public view returns (bytes32) {\\n    bytes memory out;\\n    bool success;\\n    (success, out) = GET_VERIFIED_SEAL_BITMAP.staticcall(abi.encodePacked(header));\\n    require(success, \\\"error calling getVerifiedSealBitmapFromHeader precompile\\\");\\n    return getBytes32FromBytes(out, 0);\\n  }\\n\\n  /**\\n   * @notice Converts bytes to uint256.\\n   * @param bs byte[] data\\n   * @param start offset into byte data to convert\\n   * @return uint256 data\\n   */\\n  function getUint256FromBytes(bytes memory bs, uint256 start) internal pure returns (uint256) {\\n    return uint256(getBytes32FromBytes(bs, start));\\n  }\\n\\n  /**\\n   * @notice Converts bytes to bytes32.\\n   * @param bs byte[] data\\n   * @param start offset into byte data to convert\\n   * @return bytes32 data\\n   */\\n  function getBytes32FromBytes(bytes memory bs, uint256 start) internal pure returns (bytes32) {\\n    require(bs.length >= start.add(32), \\\"slicing out of range\\\");\\n    bytes32 x;\\n    assembly {\\n      x := mload(add(bs, add(start, 32)))\\n    }\\n    return x;\\n  }\\n\\n  /**\\n   * @notice Returns the minimum number of required signers for a given block number.\\n   * @dev Computed in celo-blockchain as int(math.Ceil(float64(2*valSet.Size()) / 3))\\n   */\\n  function minQuorumSize(uint256 blockNumber) public view returns (uint256) {\\n    return numberValidatorsInSet(blockNumber).mul(2).add(2).div(3);\\n  }\\n\\n  /**\\n   * @notice Computes byzantine quorum from current validator set size\\n   * @return Byzantine quorum of validators.\\n   */\\n  function minQuorumSizeInCurrentSet() public view returns (uint256) {\\n    return minQuorumSize(block.number);\\n  }\\n}\\n\",\"keccak256\":\"0xd46e05170295a0aed352f8fab6798fb37c72e487734b2c0762c8212ed88aa4c2\"},\"project:/contracts/common/UsingRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity ^0.5.13;\\n\\nimport \\\"openzeppelin-solidity/contracts/ownership/Ownable.sol\\\";\\nimport \\\"openzeppelin-solidity/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport \\\"./interfaces/IAccounts.sol\\\";\\nimport \\\"./interfaces/IFeeCurrencyWhitelist.sol\\\";\\nimport \\\"./interfaces/IFreezer.sol\\\";\\nimport \\\"./interfaces/IRegistry.sol\\\";\\n\\nimport \\\"../governance/interfaces/IElection.sol\\\";\\nimport \\\"../governance/interfaces/IGovernance.sol\\\";\\nimport \\\"../governance/interfaces/ILockedGold.sol\\\";\\nimport \\\"../governance/interfaces/IValidators.sol\\\";\\n\\nimport \\\"../identity/interfaces/IRandom.sol\\\";\\nimport \\\"../identity/interfaces/IAttestations.sol\\\";\\n\\nimport \\\"../../lib/mento-core/contracts/interfaces/IExchange.sol\\\";\\nimport \\\"../../lib/mento-core/contracts/interfaces/IReserve.sol\\\";\\nimport \\\"../../lib/mento-core/contracts/interfaces/IStableToken.sol\\\";\\nimport \\\"../stability/interfaces/ISortedOracles.sol\\\";\\n\\ncontract UsingRegistry is Ownable {\\n  event RegistrySet(address indexed registryAddress);\\n\\n  // solhint-disable state-visibility\\n  bytes32 constant ACCOUNTS_REGISTRY_ID = keccak256(abi.encodePacked(\\\"Accounts\\\"));\\n  bytes32 constant ATTESTATIONS_REGISTRY_ID = keccak256(abi.encodePacked(\\\"Attestations\\\"));\\n  bytes32 constant DOWNTIME_SLASHER_REGISTRY_ID = keccak256(abi.encodePacked(\\\"DowntimeSlasher\\\"));\\n  bytes32 constant DOUBLE_SIGNING_SLASHER_REGISTRY_ID = keccak256(\\n    abi.encodePacked(\\\"DoubleSigningSlasher\\\")\\n  );\\n  bytes32 constant ELECTION_REGISTRY_ID = keccak256(abi.encodePacked(\\\"Election\\\"));\\n  bytes32 constant EXCHANGE_REGISTRY_ID = keccak256(abi.encodePacked(\\\"Exchange\\\"));\\n  bytes32 constant FEE_CURRENCY_WHITELIST_REGISTRY_ID = keccak256(\\n    abi.encodePacked(\\\"FeeCurrencyWhitelist\\\")\\n  );\\n  bytes32 constant FREEZER_REGISTRY_ID = keccak256(abi.encodePacked(\\\"Freezer\\\"));\\n  bytes32 constant GOLD_TOKEN_REGISTRY_ID = keccak256(abi.encodePacked(\\\"GoldToken\\\"));\\n  bytes32 constant GOVERNANCE_REGISTRY_ID = keccak256(abi.encodePacked(\\\"Governance\\\"));\\n  bytes32 constant GOVERNANCE_SLASHER_REGISTRY_ID = keccak256(\\n    abi.encodePacked(\\\"GovernanceSlasher\\\")\\n  );\\n  bytes32 constant LOCKED_GOLD_REGISTRY_ID = keccak256(abi.encodePacked(\\\"LockedGold\\\"));\\n  bytes32 constant RESERVE_REGISTRY_ID = keccak256(abi.encodePacked(\\\"Reserve\\\"));\\n  bytes32 constant RANDOM_REGISTRY_ID = keccak256(abi.encodePacked(\\\"Random\\\"));\\n  bytes32 constant SORTED_ORACLES_REGISTRY_ID = keccak256(abi.encodePacked(\\\"SortedOracles\\\"));\\n  bytes32 constant STABLE_TOKEN_REGISTRY_ID = keccak256(abi.encodePacked(\\\"StableToken\\\"));\\n  bytes32 constant VALIDATORS_REGISTRY_ID = keccak256(abi.encodePacked(\\\"Validators\\\"));\\n  // solhint-enable state-visibility\\n\\n  IRegistry public registry;\\n\\n  modifier onlyRegisteredContract(bytes32 identifierHash) {\\n    require(registry.getAddressForOrDie(identifierHash) == msg.sender, \\\"only registered contract\\\");\\n    _;\\n  }\\n\\n  modifier onlyRegisteredContracts(bytes32[] memory identifierHashes) {\\n    require(registry.isOneOf(identifierHashes, msg.sender), \\\"only registered contracts\\\");\\n    _;\\n  }\\n\\n  /**\\n   * @notice Updates the address pointing to a Registry contract.\\n   * @param registryAddress The address of a registry contract for routing to other contracts.\\n   */\\n  function setRegistry(address registryAddress) public onlyOwner {\\n    require(registryAddress != address(0), \\\"Cannot register the null address\\\");\\n    registry = IRegistry(registryAddress);\\n    emit RegistrySet(registryAddress);\\n  }\\n\\n  function getAccounts() internal view returns (IAccounts) {\\n    return IAccounts(registry.getAddressForOrDie(ACCOUNTS_REGISTRY_ID));\\n  }\\n\\n  function getAttestations() internal view returns (IAttestations) {\\n    return IAttestations(registry.getAddressForOrDie(ATTESTATIONS_REGISTRY_ID));\\n  }\\n\\n  function getElection() internal view returns (IElection) {\\n    return IElection(registry.getAddressForOrDie(ELECTION_REGISTRY_ID));\\n  }\\n\\n  function getExchange() internal view returns (IExchange) {\\n    return IExchange(registry.getAddressForOrDie(EXCHANGE_REGISTRY_ID));\\n  }\\n\\n  function getFeeCurrencyWhitelistRegistry() internal view returns (IFeeCurrencyWhitelist) {\\n    return IFeeCurrencyWhitelist(registry.getAddressForOrDie(FEE_CURRENCY_WHITELIST_REGISTRY_ID));\\n  }\\n\\n  function getFreezer() internal view returns (IFreezer) {\\n    return IFreezer(registry.getAddressForOrDie(FREEZER_REGISTRY_ID));\\n  }\\n\\n  function getGoldToken() internal view returns (IERC20) {\\n    return IERC20(registry.getAddressForOrDie(GOLD_TOKEN_REGISTRY_ID));\\n  }\\n\\n  function getGovernance() internal view returns (IGovernance) {\\n    return IGovernance(registry.getAddressForOrDie(GOVERNANCE_REGISTRY_ID));\\n  }\\n\\n  function getLockedGold() internal view returns (ILockedGold) {\\n    return ILockedGold(registry.getAddressForOrDie(LOCKED_GOLD_REGISTRY_ID));\\n  }\\n\\n  function getRandom() internal view returns (IRandom) {\\n    return IRandom(registry.getAddressForOrDie(RANDOM_REGISTRY_ID));\\n  }\\n\\n  function getReserve() internal view returns (IReserve) {\\n    return IReserve(registry.getAddressForOrDie(RESERVE_REGISTRY_ID));\\n  }\\n\\n  function getSortedOracles() internal view returns (ISortedOracles) {\\n    return ISortedOracles(registry.getAddressForOrDie(SORTED_ORACLES_REGISTRY_ID));\\n  }\\n\\n  function getStableToken() internal view returns (IStableToken) {\\n    return IStableToken(registry.getAddressForOrDie(STABLE_TOKEN_REGISTRY_ID));\\n  }\\n\\n  function getValidators() internal view returns (IValidators) {\\n    return IValidators(registry.getAddressForOrDie(VALIDATORS_REGISTRY_ID));\\n  }\\n}\\n\",\"keccak256\":\"0x31ec0f16867a35046f9e1211ac3457198e39abc2362d2d559f4ccc4a3985a9ac\"},\"project:/contracts/common/interfaces/IAccounts.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.5.13 <0.9.0;\\n\\ninterface IAccounts {\\n  function isAccount(address) external view returns (bool);\\n  function voteSignerToAccount(address) external view returns (address);\\n  function validatorSignerToAccount(address) external view returns (address);\\n  function attestationSignerToAccount(address) external view returns (address);\\n  function signerToAccount(address) external view returns (address);\\n  function getAttestationSigner(address) external view returns (address);\\n  function getValidatorSigner(address) external view returns (address);\\n  function getVoteSigner(address) external view returns (address);\\n  function hasAuthorizedVoteSigner(address) external view returns (bool);\\n  function hasAuthorizedValidatorSigner(address) external view returns (bool);\\n  function hasAuthorizedAttestationSigner(address) external view returns (bool);\\n\\n  function setAccountDataEncryptionKey(bytes calldata) external;\\n  function setMetadataURL(string calldata) external;\\n  function setName(string calldata) external;\\n  function setWalletAddress(address, uint8, bytes32, bytes32) external;\\n  function setAccount(string calldata, bytes calldata, address, uint8, bytes32, bytes32) external;\\n\\n  function getDataEncryptionKey(address) external view returns (bytes memory);\\n  function getWalletAddress(address) external view returns (address);\\n  function getMetadataURL(address) external view returns (string memory);\\n  function batchGetMetadataURL(address[] calldata)\\n    external\\n    view\\n    returns (uint256[] memory, bytes memory);\\n  function getName(address) external view returns (string memory);\\n\\n  function authorizeVoteSigner(address, uint8, bytes32, bytes32) external;\\n  function authorizeValidatorSigner(address, uint8, bytes32, bytes32) external;\\n  function authorizeValidatorSignerWithPublicKey(address, uint8, bytes32, bytes32, bytes calldata)\\n    external;\\n  function authorizeValidatorSignerWithKeys(\\n    address,\\n    uint8,\\n    bytes32,\\n    bytes32,\\n    bytes calldata,\\n    bytes calldata,\\n    bytes calldata\\n  ) external;\\n  function authorizeAttestationSigner(address, uint8, bytes32, bytes32) external;\\n  function createAccount() external returns (bool);\\n\\n  function setPaymentDelegation(address, uint256) external;\\n  function getPaymentDelegation(address) external view returns (address, uint256);\\n  function isSigner(address, address, bytes32) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x17a0ff4b1c2da32f5de9c0fe230fcb325b2bbabcf51980cfb425cec75f678f5e\"},\"project:/contracts/common/interfaces/ICeloVersionedContract.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.5.13 <0.9.0;\\n\\ninterface ICeloVersionedContract {\\n  /**\\n   * @notice Returns the storage, major, minor, and patch version of the contract.\\n    * @return Storage version of the contract.\\n    * @return Major version of the contract.\\n    * @return Minor version of the contract.\\n    * @return Patch version of the contract.\\n   */\\n  function getVersionNumber() external pure returns (uint256, uint256, uint256, uint256);\\n}\\n\",\"keccak256\":\"0x27f0b14472db998eb8e4b529bbfd6a5879cbd842f8db8aa6c06ed7d2e0b17ac1\"},\"project:/contracts/common/interfaces/IFeeCurrencyWhitelist.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.5.13 <0.9.0;\\n\\ninterface IFeeCurrencyWhitelist {\\n  function addToken(address) external;\\n  function getWhitelist() external view returns (address[] memory);\\n}\\n\",\"keccak256\":\"0x4a91e634d22e8b8c36ef16113d7403029f334affb38f2453f0453f4ba06a925e\"},\"project:/contracts/common/interfaces/IFreezer.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.5.13 <0.9.0;\\n\\ninterface IFreezer {\\n  function isFrozen(address) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x6c34df21ba7ae83d9b47153bec2ffdb74128c11c0a9f20edaca927967fda4786\"},\"project:/contracts/common/interfaces/IRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.5.13 <0.9.0;\\n\\ninterface IRegistry {\\n  function setAddressFor(string calldata, address) external;\\n  function getAddressForOrDie(bytes32) external view returns (address);\\n  function getAddressFor(bytes32) external view returns (address);\\n  function getAddressForStringOrDie(string calldata identifier) external view returns (address);\\n  function getAddressForString(string calldata identifier) external view returns (address);\\n  function isOneOf(bytes32[] calldata, address) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x7737cbda6f3519bf6a4108e07b2c991a655e8731a4c040a3681e9629cfc4b52d\"},\"project:/contracts/common/libraries/Heap.sol\":{\"content\":\"pragma solidity ^0.5.13;\\n\\nimport \\\"openzeppelin-solidity/contracts/math/SafeMath.sol\\\";\\nimport \\\"../FixidityLib.sol\\\";\\n\\n/**\\n * @title Simple heap implementation\\n */\\nlibrary Heap {\\n  using FixidityLib for FixidityLib.Fraction;\\n  using SafeMath for uint256;\\n\\n  /**\\n   * @notice Fixes the heap invariant.\\n   * @param keys Pointers to values\\n   * @param values Values that are compared, only the pointers are changed by this method.\\n   * @param start Node for which the invariant might have changed.\\n   * @param length Size of the heap.\\n   */\\n  function siftDown(\\n    uint256[] memory keys,\\n    FixidityLib.Fraction[] memory values,\\n    uint256 start,\\n    uint256 length\\n  ) internal pure {\\n    require(keys.length == values.length, \\\"key and value array length mismatch\\\");\\n    require(start < keys.length, \\\"heap start index out of range\\\");\\n    require(length <= keys.length, \\\"heap length out of range\\\");\\n    uint256 i = start;\\n    while (true) {\\n      uint256 leftChild = i.mul(2).add(1);\\n      uint256 rightChild = i.mul(2).add(2);\\n      uint256 maxIndex = i;\\n      if (leftChild < length && values[keys[leftChild]].gt(values[keys[maxIndex]])) {\\n        maxIndex = leftChild;\\n      }\\n      if (rightChild < length && values[keys[rightChild]].gt(values[keys[maxIndex]])) {\\n        maxIndex = rightChild;\\n      }\\n      if (maxIndex == i) break;\\n      uint256 tmpKey = keys[i];\\n      keys[i] = keys[maxIndex];\\n      keys[maxIndex] = tmpKey;\\n      i = maxIndex;\\n    }\\n  }\\n\\n  /**\\n   * @notice Fixes the heap invariant if top has been changed.\\n   * @param keys Pointers to values\\n   * @param values Values that are compared, only the pointers are changed by this method.\\n   */\\n  function heapifyDown(uint256[] memory keys, FixidityLib.Fraction[] memory values) internal pure {\\n    siftDown(keys, values, 0, keys.length);\\n  }\\n\\n}\\n\",\"keccak256\":\"0x17743ec3187fe87a8e384bb5fdee6ba360481179e50af1ce2fab0f073833e622\"},\"project:/contracts/common/libraries/ReentrancyGuard.sol\":{\"content\":\"pragma solidity ^0.5.13;\\n\\n/**\\n * @title Helps contracts guard against reentrancy attacks.\\n * @author Remco Bloemen <remco@2\\u03c0.com>, Eenae <alexey@mixbytes.io>\\n * @dev If you mark a function `nonReentrant`, you should also\\n * mark it `external`.\\n */\\ncontract ReentrancyGuard {\\n  /// @dev counter to allow mutex lock with only one SSTORE operation\\n  uint256 private _guardCounter;\\n\\n  constructor() internal {\\n    // The counter starts at one to prevent changing it from zero to a non-zero\\n    // value, which is a more expensive operation.\\n    _guardCounter = 1;\\n  }\\n\\n  /**\\n   * @dev Prevents a contract from calling itself, directly or indirectly.\\n   * Calling a `nonReentrant` function from another `nonReentrant`\\n   * function is not supported. It is possible to prevent this from happening\\n   * by making the `nonReentrant` function external, and make it call a\\n   * `private` function that does the actual work.\\n   */\\n  modifier nonReentrant() {\\n    _guardCounter += 1;\\n    uint256 localCounter = _guardCounter;\\n    _;\\n    require(localCounter == _guardCounter, \\\"reentrant call\\\");\\n  }\\n}\\n\",\"keccak256\":\"0xa2584554532d7004ca3d2d168cd9dfb7694605f1a32431af4d1b7d834fa6b08d\"},\"project:/contracts/common/linkedlists/AddressSortedLinkedList.sol\":{\"content\":\"pragma solidity ^0.5.13;\\n\\nimport \\\"openzeppelin-solidity/contracts/math/Math.sol\\\";\\nimport \\\"openzeppelin-solidity/contracts/math/SafeMath.sol\\\";\\n\\nimport \\\"./SortedLinkedList.sol\\\";\\n\\n/**\\n * @title Maintains a sorted list of unsigned ints keyed by address.\\n */\\nlibrary AddressSortedLinkedList {\\n  using SafeMath for uint256;\\n  using SortedLinkedList for SortedLinkedList.List;\\n\\n  function toBytes(address a) public pure returns (bytes32) {\\n    return bytes32(uint256(a) << 96);\\n  }\\n\\n  function toAddress(bytes32 b) public pure returns (address) {\\n    return address(uint256(b) >> 96);\\n  }\\n\\n  /**\\n   * @notice Inserts an element into a doubly linked list.\\n   * @param list A storage pointer to the underlying list.\\n   * @param key The key of the element to insert.\\n   * @param value The element value.\\n   * @param lesserKey The key of the element less than the element to insert.\\n   * @param greaterKey The key of the element greater than the element to insert.\\n   */\\n  function insert(\\n    SortedLinkedList.List storage list,\\n    address key,\\n    uint256 value,\\n    address lesserKey,\\n    address greaterKey\\n  ) public {\\n    list.insert(toBytes(key), value, toBytes(lesserKey), toBytes(greaterKey));\\n  }\\n\\n  /**\\n   * @notice Removes an element from the doubly linked list.\\n   * @param list A storage pointer to the underlying list.\\n   * @param key The key of the element to remove.\\n   */\\n  function remove(SortedLinkedList.List storage list, address key) public {\\n    list.remove(toBytes(key));\\n  }\\n\\n  /**\\n   * @notice Updates an element in the list.\\n   * @param list A storage pointer to the underlying list.\\n   * @param key The element key.\\n   * @param value The element value.\\n   * @param lesserKey The key of the element will be just left of `key` after the update.\\n   * @param greaterKey The key of the element will be just right of `key` after the update.\\n   * @dev Note that only one of \\\"lesserKey\\\" or \\\"greaterKey\\\" needs to be correct to reduce friction.\\n   */\\n  function update(\\n    SortedLinkedList.List storage list,\\n    address key,\\n    uint256 value,\\n    address lesserKey,\\n    address greaterKey\\n  ) public {\\n    list.update(toBytes(key), value, toBytes(lesserKey), toBytes(greaterKey));\\n  }\\n\\n  /**\\n   * @notice Returns whether or not a particular key is present in the sorted list.\\n   * @param list A storage pointer to the underlying list.\\n   * @param key The element key.\\n   * @return Whether or not the key is in the sorted list.\\n   */\\n  function contains(SortedLinkedList.List storage list, address key) public view returns (bool) {\\n    return list.contains(toBytes(key));\\n  }\\n\\n  /**\\n   * @notice Returns the value for a particular key in the sorted list.\\n   * @param list A storage pointer to the underlying list.\\n   * @param key The element key.\\n   * @return The element value.\\n   */\\n  function getValue(SortedLinkedList.List storage list, address key) public view returns (uint256) {\\n    return list.getValue(toBytes(key));\\n  }\\n\\n  /**\\n   * @notice Gets all elements from the doubly linked list.\\n   * @return Array of all keys in the list.\\n   * @return Values corresponding to keys, which will be ordered largest to smallest.\\n   */\\n  function getElements(SortedLinkedList.List storage list)\\n    public\\n    view\\n    returns (address[] memory, uint256[] memory)\\n  {\\n    bytes32[] memory byteKeys = list.getKeys();\\n    address[] memory keys = new address[](byteKeys.length);\\n    uint256[] memory values = new uint256[](byteKeys.length);\\n    for (uint256 i = 0; i < byteKeys.length; i = i.add(1)) {\\n      keys[i] = toAddress(byteKeys[i]);\\n      values[i] = list.values[byteKeys[i]];\\n    }\\n    return (keys, values);\\n  }\\n\\n  /**\\n   * @notice Returns the minimum of `max` and the  number of elements in the list > threshold.\\n   * @param list A storage pointer to the underlying list.\\n   * @param threshold The number that the element must exceed to be included.\\n   * @param max The maximum number returned by this function.\\n   * @return The minimum of `max` and the  number of elements in the list > threshold.\\n   */\\n  function numElementsGreaterThan(\\n    SortedLinkedList.List storage list,\\n    uint256 threshold,\\n    uint256 max\\n  ) public view returns (uint256) {\\n    uint256 revisedMax = Math.min(max, list.list.numElements);\\n    bytes32 key = list.list.head;\\n    for (uint256 i = 0; i < revisedMax; i = i.add(1)) {\\n      if (list.getValue(key) < threshold) {\\n        return i;\\n      }\\n      key = list.list.elements[key].previousKey;\\n    }\\n    return revisedMax;\\n  }\\n\\n  /**\\n   * @notice Returns the N greatest elements of the list.\\n   * @param list A storage pointer to the underlying list.\\n   * @param n The number of elements to return.\\n   * @return The keys of the greatest elements.\\n   */\\n  function headN(SortedLinkedList.List storage list, uint256 n)\\n    public\\n    view\\n    returns (address[] memory)\\n  {\\n    bytes32[] memory byteKeys = list.headN(n);\\n    address[] memory keys = new address[](n);\\n    for (uint256 i = 0; i < n; i = i.add(1)) {\\n      keys[i] = toAddress(byteKeys[i]);\\n    }\\n    return keys;\\n  }\\n\\n  /**\\n   * @notice Gets all element keys from the doubly linked list.\\n   * @param list A storage pointer to the underlying list.\\n   * @return All element keys from head to tail.\\n   */\\n  function getKeys(SortedLinkedList.List storage list) public view returns (address[] memory) {\\n    return headN(list, list.list.numElements);\\n  }\\n}\\n\",\"keccak256\":\"0xa406bf0a6ac16bce7b9688f744ec59921f9219b5e8356e24b88693209e86613d\"},\"project:/contracts/common/linkedlists/LinkedList.sol\":{\"content\":\"pragma solidity ^0.5.13;\\n\\nimport \\\"openzeppelin-solidity/contracts/math/SafeMath.sol\\\";\\n\\n/**\\n * @title Maintains a doubly linked list keyed by bytes32.\\n * @dev Following the `next` pointers will lead you to the head, rather than the tail.\\n */\\nlibrary LinkedList {\\n  using SafeMath for uint256;\\n\\n  struct Element {\\n    bytes32 previousKey;\\n    bytes32 nextKey;\\n    bool exists;\\n  }\\n\\n  struct List {\\n    bytes32 head;\\n    bytes32 tail;\\n    uint256 numElements;\\n    mapping(bytes32 => Element) elements;\\n  }\\n\\n  /**\\n   * @notice Inserts an element into a doubly linked list.\\n   * @param list A storage pointer to the underlying list.\\n   * @param key The key of the element to insert.\\n   * @param previousKey The key of the element that comes before the element to insert.\\n   * @param nextKey The key of the element that comes after the element to insert.\\n   */\\n  function insert(List storage list, bytes32 key, bytes32 previousKey, bytes32 nextKey) internal {\\n    require(key != bytes32(0), \\\"Key must be defined\\\");\\n    require(!contains(list, key), \\\"Can't insert an existing element\\\");\\n    require(\\n      previousKey != key && nextKey != key,\\n      \\\"Key cannot be the same as previousKey or nextKey\\\"\\n    );\\n\\n    Element storage element = list.elements[key];\\n    element.exists = true;\\n\\n    if (list.numElements == 0) {\\n      list.tail = key;\\n      list.head = key;\\n    } else {\\n      require(\\n        previousKey != bytes32(0) || nextKey != bytes32(0),\\n        \\\"Either previousKey or nextKey must be defined\\\"\\n      );\\n\\n      element.previousKey = previousKey;\\n      element.nextKey = nextKey;\\n\\n      if (previousKey != bytes32(0)) {\\n        require(\\n          contains(list, previousKey),\\n          \\\"If previousKey is defined, it must exist in the list\\\"\\n        );\\n        Element storage previousElement = list.elements[previousKey];\\n        require(previousElement.nextKey == nextKey, \\\"previousKey must be adjacent to nextKey\\\");\\n        previousElement.nextKey = key;\\n      } else {\\n        list.tail = key;\\n      }\\n\\n      if (nextKey != bytes32(0)) {\\n        require(contains(list, nextKey), \\\"If nextKey is defined, it must exist in the list\\\");\\n        Element storage nextElement = list.elements[nextKey];\\n        require(nextElement.previousKey == previousKey, \\\"previousKey must be adjacent to nextKey\\\");\\n        nextElement.previousKey = key;\\n      } else {\\n        list.head = key;\\n      }\\n    }\\n\\n    list.numElements = list.numElements.add(1);\\n  }\\n\\n  /**\\n   * @notice Inserts an element at the tail of the doubly linked list.\\n   * @param list A storage pointer to the underlying list.\\n   * @param key The key of the element to insert.\\n   */\\n  function push(List storage list, bytes32 key) internal {\\n    insert(list, key, bytes32(0), list.tail);\\n  }\\n\\n  /**\\n   * @notice Removes an element from the doubly linked list.\\n   * @param list A storage pointer to the underlying list.\\n   * @param key The key of the element to remove.\\n   */\\n  function remove(List storage list, bytes32 key) internal {\\n    Element storage element = list.elements[key];\\n    require(key != bytes32(0) && contains(list, key), \\\"key not in list\\\");\\n    if (element.previousKey != bytes32(0)) {\\n      Element storage previousElement = list.elements[element.previousKey];\\n      previousElement.nextKey = element.nextKey;\\n    } else {\\n      list.tail = element.nextKey;\\n    }\\n\\n    if (element.nextKey != bytes32(0)) {\\n      Element storage nextElement = list.elements[element.nextKey];\\n      nextElement.previousKey = element.previousKey;\\n    } else {\\n      list.head = element.previousKey;\\n    }\\n\\n    delete list.elements[key];\\n    list.numElements = list.numElements.sub(1);\\n  }\\n\\n  /**\\n   * @notice Updates an element in the list.\\n   * @param list A storage pointer to the underlying list.\\n   * @param key The element key.\\n   * @param previousKey The key of the element that comes before the updated element.\\n   * @param nextKey The key of the element that comes after the updated element.\\n   */\\n  function update(List storage list, bytes32 key, bytes32 previousKey, bytes32 nextKey) internal {\\n    require(\\n      key != bytes32(0) && key != previousKey && key != nextKey && contains(list, key),\\n      \\\"key on in list\\\"\\n    );\\n    remove(list, key);\\n    insert(list, key, previousKey, nextKey);\\n  }\\n\\n  /**\\n   * @notice Returns whether or not a particular key is present in the sorted list.\\n   * @param list A storage pointer to the underlying list.\\n   * @param key The element key.\\n   * @return Whether or not the key is in the sorted list.\\n   */\\n  function contains(List storage list, bytes32 key) internal view returns (bool) {\\n    return list.elements[key].exists;\\n  }\\n\\n  /**\\n   * @notice Returns the keys of the N elements at the head of the list.\\n   * @param list A storage pointer to the underlying list.\\n   * @param n The number of elements to return.\\n   * @return The keys of the N elements at the head of the list.\\n   * @dev Reverts if n is greater than the number of elements in the list.\\n   */\\n  function headN(List storage list, uint256 n) internal view returns (bytes32[] memory) {\\n    require(n <= list.numElements, \\\"not enough elements\\\");\\n    bytes32[] memory keys = new bytes32[](n);\\n    bytes32 key = list.head;\\n    for (uint256 i = 0; i < n; i = i.add(1)) {\\n      keys[i] = key;\\n      key = list.elements[key].previousKey;\\n    }\\n    return keys;\\n  }\\n\\n  /**\\n   * @notice Gets all element keys from the doubly linked list.\\n   * @param list A storage pointer to the underlying list.\\n   * @return All element keys from head to tail.\\n   */\\n  function getKeys(List storage list) internal view returns (bytes32[] memory) {\\n    return headN(list, list.numElements);\\n  }\\n}\\n\",\"keccak256\":\"0x9104cbf273bd44a5845784a7540066ce80d543912b8b84742094e80adac3f1a3\"},\"project:/contracts/common/linkedlists/SortedLinkedList.sol\":{\"content\":\"pragma solidity ^0.5.13;\\n\\nimport \\\"openzeppelin-solidity/contracts/math/SafeMath.sol\\\";\\nimport \\\"./LinkedList.sol\\\";\\n\\n/**\\n * @title Maintains a sorted list of unsigned ints keyed by bytes32.\\n */\\nlibrary SortedLinkedList {\\n  using SafeMath for uint256;\\n  using LinkedList for LinkedList.List;\\n\\n  struct List {\\n    LinkedList.List list;\\n    mapping(bytes32 => uint256) values;\\n  }\\n\\n  /**\\n   * @notice Inserts an element into a doubly linked list.\\n   * @param list A storage pointer to the underlying list.\\n   * @param key The key of the element to insert.\\n   * @param value The element value.\\n   * @param lesserKey The key of the element less than the element to insert.\\n   * @param greaterKey The key of the element greater than the element to insert.\\n   */\\n  function insert(\\n    List storage list,\\n    bytes32 key,\\n    uint256 value,\\n    bytes32 lesserKey,\\n    bytes32 greaterKey\\n  ) internal {\\n    require(\\n      key != bytes32(0) && key != lesserKey && key != greaterKey && !contains(list, key),\\n      \\\"invalid key\\\"\\n    );\\n    require(\\n      (lesserKey != bytes32(0) || greaterKey != bytes32(0)) || list.list.numElements == 0,\\n      \\\"greater and lesser key zero\\\"\\n    );\\n    require(contains(list, lesserKey) || lesserKey == bytes32(0), \\\"invalid lesser key\\\");\\n    require(contains(list, greaterKey) || greaterKey == bytes32(0), \\\"invalid greater key\\\");\\n    (lesserKey, greaterKey) = getLesserAndGreater(list, value, lesserKey, greaterKey);\\n    list.list.insert(key, lesserKey, greaterKey);\\n    list.values[key] = value;\\n  }\\n\\n  /**\\n   * @notice Removes an element from the doubly linked list.\\n   * @param list A storage pointer to the underlying list.\\n   * @param key The key of the element to remove.\\n   */\\n  function remove(List storage list, bytes32 key) internal {\\n    list.list.remove(key);\\n    list.values[key] = 0;\\n  }\\n\\n  /**\\n   * @notice Updates an element in the list.\\n   * @param list A storage pointer to the underlying list.\\n   * @param key The element key.\\n   * @param value The element value.\\n   * @param lesserKey The key of the element will be just left of `key` after the update.\\n   * @param greaterKey The key of the element will be just right of `key` after the update.\\n   * @dev Note that only one of \\\"lesserKey\\\" or \\\"greaterKey\\\" needs to be correct to reduce friction.\\n   */\\n  function update(\\n    List storage list,\\n    bytes32 key,\\n    uint256 value,\\n    bytes32 lesserKey,\\n    bytes32 greaterKey\\n  ) internal {\\n    remove(list, key);\\n    insert(list, key, value, lesserKey, greaterKey);\\n  }\\n\\n  /**\\n   * @notice Inserts an element at the tail of the doubly linked list.\\n   * @param list A storage pointer to the underlying list.\\n   * @param key The key of the element to insert.\\n   */\\n  function push(List storage list, bytes32 key) internal {\\n    insert(list, key, 0, bytes32(0), list.list.tail);\\n  }\\n\\n  /**\\n   * @notice Removes N elements from the head of the list and returns their keys.\\n   * @param list A storage pointer to the underlying list.\\n   * @param n The number of elements to pop.\\n   * @return The keys of the popped elements.\\n   */\\n  function popN(List storage list, uint256 n) internal returns (bytes32[] memory) {\\n    require(n <= list.list.numElements, \\\"not enough elements\\\");\\n    bytes32[] memory keys = new bytes32[](n);\\n    for (uint256 i = 0; i < n; i = i.add(1)) {\\n      bytes32 key = list.list.head;\\n      keys[i] = key;\\n      remove(list, key);\\n    }\\n    return keys;\\n  }\\n\\n  /**\\n   * @notice Returns whether or not a particular key is present in the sorted list.\\n   * @param list A storage pointer to the underlying list.\\n   * @param key The element key.\\n   * @return Whether or not the key is in the sorted list.\\n   */\\n  function contains(List storage list, bytes32 key) internal view returns (bool) {\\n    return list.list.contains(key);\\n  }\\n\\n  /**\\n   * @notice Returns the value for a particular key in the sorted list.\\n   * @param list A storage pointer to the underlying list.\\n   * @param key The element key.\\n   * @return The element value.\\n   */\\n  function getValue(List storage list, bytes32 key) internal view returns (uint256) {\\n    return list.values[key];\\n  }\\n\\n  /**\\n   * @notice Gets all elements from the doubly linked list.\\n   * @param list A storage pointer to the underlying list.\\n   * @return Array of all keys in the list.\\n   * @return Values corresponding to keys, which will be ordered largest to smallest.\\n   */\\n  function getElements(List storage list)\\n    internal\\n    view\\n    returns (bytes32[] memory, uint256[] memory)\\n  {\\n    bytes32[] memory keys = getKeys(list);\\n    uint256[] memory values = new uint256[](keys.length);\\n    for (uint256 i = 0; i < keys.length; i = i.add(1)) {\\n      values[i] = list.values[keys[i]];\\n    }\\n    return (keys, values);\\n  }\\n\\n  /**\\n   * @notice Gets all element keys from the doubly linked list.\\n   * @param list A storage pointer to the underlying list.\\n   * @return All element keys from head to tail.\\n   */\\n  function getKeys(List storage list) internal view returns (bytes32[] memory) {\\n    return list.list.getKeys();\\n  }\\n\\n  /**\\n   * @notice Returns first N greatest elements of the list.\\n   * @param list A storage pointer to the underlying list.\\n   * @param n The number of elements to return.\\n   * @return The keys of the first n elements.\\n   * @dev Reverts if n is greater than the number of elements in the list.\\n   */\\n  function headN(List storage list, uint256 n) internal view returns (bytes32[] memory) {\\n    return list.list.headN(n);\\n  }\\n\\n  /**\\n   * @notice Returns the keys of the elements greaterKey than and less than the provided value.\\n   * @param list A storage pointer to the underlying list.\\n   * @param value The element value.\\n   * @param lesserKey The key of the element which could be just left of the new value.\\n   * @param greaterKey The key of the element which could be just right of the new value.\\n   * @return The correct lesserKey keys.\\n   * @return The correct greaterKey keys.\\n   */\\n  function getLesserAndGreater(\\n    List storage list,\\n    uint256 value,\\n    bytes32 lesserKey,\\n    bytes32 greaterKey\\n  ) private view returns (bytes32, bytes32) {\\n    // Check for one of the following conditions and fail if none are met:\\n    //   1. The value is less than the current lowest value\\n    //   2. The value is greater than the current greatest value\\n    //   3. The value is just greater than the value for `lesserKey`\\n    //   4. The value is just less than the value for `greaterKey`\\n    if (lesserKey == bytes32(0) && isValueBetween(list, value, lesserKey, list.list.tail)) {\\n      return (lesserKey, list.list.tail);\\n    } else if (\\n      greaterKey == bytes32(0) && isValueBetween(list, value, list.list.head, greaterKey)\\n    ) {\\n      return (list.list.head, greaterKey);\\n    } else if (\\n      lesserKey != bytes32(0) &&\\n      isValueBetween(list, value, lesserKey, list.list.elements[lesserKey].nextKey)\\n    ) {\\n      return (lesserKey, list.list.elements[lesserKey].nextKey);\\n    } else if (\\n      greaterKey != bytes32(0) &&\\n      isValueBetween(list, value, list.list.elements[greaterKey].previousKey, greaterKey)\\n    ) {\\n      return (list.list.elements[greaterKey].previousKey, greaterKey);\\n    } else {\\n      require(false, \\\"get lesser and greater failure\\\");\\n    }\\n  }\\n\\n  /**\\n   * @notice Returns whether or not a given element is between two other elements.\\n   * @param list A storage pointer to the underlying list.\\n   * @param value The element value.\\n   * @param lesserKey The key of the element whose value should be lesserKey.\\n   * @param greaterKey The key of the element whose value should be greaterKey.\\n   * @return True if the given element is between the two other elements.\\n   */\\n  function isValueBetween(List storage list, uint256 value, bytes32 lesserKey, bytes32 greaterKey)\\n    private\\n    view\\n    returns (bool)\\n  {\\n    bool isLesser = lesserKey == bytes32(0) || list.values[lesserKey] <= value;\\n    bool isGreater = greaterKey == bytes32(0) || list.values[greaterKey] >= value;\\n    return isLesser && isGreater;\\n  }\\n}\\n\",\"keccak256\":\"0x26ef33655ed20a0595dfa7783dc0f46444242e1846501353c276368e4250e73c\"},\"project:/contracts/governance/Election.sol\":{\"content\":\"pragma solidity ^0.5.13;\\n\\nimport \\\"openzeppelin-solidity/contracts/math/Math.sol\\\";\\nimport \\\"openzeppelin-solidity/contracts/math/SafeMath.sol\\\";\\nimport \\\"openzeppelin-solidity/contracts/ownership/Ownable.sol\\\";\\n\\nimport \\\"./interfaces/IElection.sol\\\";\\nimport \\\"./interfaces/IValidators.sol\\\";\\nimport \\\"../common/CalledByVm.sol\\\";\\nimport \\\"../common/Initializable.sol\\\";\\nimport \\\"../common/FixidityLib.sol\\\";\\nimport \\\"../common/linkedlists/AddressSortedLinkedList.sol\\\";\\nimport \\\"../common/UsingPrecompiles.sol\\\";\\nimport \\\"../common/UsingRegistry.sol\\\";\\nimport \\\"../common/interfaces/ICeloVersionedContract.sol\\\";\\nimport \\\"../common/libraries/Heap.sol\\\";\\nimport \\\"../common/libraries/ReentrancyGuard.sol\\\";\\n\\ncontract Election is\\n  IElection,\\n  ICeloVersionedContract,\\n  Ownable,\\n  ReentrancyGuard,\\n  Initializable,\\n  UsingRegistry,\\n  UsingPrecompiles,\\n  CalledByVm\\n{\\n  using AddressSortedLinkedList for SortedLinkedList.List;\\n  using FixidityLib for FixidityLib.Fraction;\\n  using SafeMath for uint256;\\n\\n  // 1e20 ensures that units can be represented as precisely as possible to avoid rounding errors\\n  // when translating to votes, without risking integer overflow.\\n  // A maximum of 1,000,000,000 CELO (1e27) yields a maximum of 1e47 units, whose product is at\\n  // most 1e74, which is less than 2^256.\\n  uint256 private constant UNIT_PRECISION_FACTOR = 100000000000000000000;\\n\\n  struct PendingVote {\\n    // The value of the vote, in gold.\\n    uint256 value;\\n    // The epoch at which the vote was cast.\\n    uint256 epoch;\\n  }\\n\\n  struct GroupPendingVotes {\\n    // The total number of pending votes that have been cast for this group.\\n    uint256 total;\\n    // Pending votes cast per voter.\\n    mapping(address => PendingVote) byAccount;\\n  }\\n\\n  // Pending votes are those for which no following elections have been held.\\n  // These votes have yet to contribute to the election of validators and thus do not accrue\\n  // rewards.\\n  struct PendingVotes {\\n    // The total number of pending votes cast across all groups.\\n    uint256 total;\\n    mapping(address => GroupPendingVotes) forGroup;\\n  }\\n\\n  struct GroupActiveVotes {\\n    // The total number of active votes that have been cast for this group.\\n    uint256 total;\\n    // The total number of active votes by a voter is equal to the number of active vote units for\\n    // that voter times the total number of active votes divided by the total number of active\\n    // vote units.\\n    uint256 totalUnits;\\n    mapping(address => uint256) unitsByAccount;\\n  }\\n\\n  // Active votes are those for which at least one following election has been held.\\n  // These votes have contributed to the election of validators and thus accrue rewards.\\n  struct ActiveVotes {\\n    // The total number of active votes cast across all groups.\\n    uint256 total;\\n    mapping(address => GroupActiveVotes) forGroup;\\n  }\\n\\n  struct TotalVotes {\\n    // A list of eligible ValidatorGroups sorted by total (pending+active) votes.\\n    // Note that this list will omit ineligible ValidatorGroups, including those that may have > 0\\n    // total votes.\\n    SortedLinkedList.List eligible;\\n  }\\n\\n  struct Votes {\\n    PendingVotes pending;\\n    ActiveVotes active;\\n    TotalVotes total;\\n    // Maps an account to the list of groups it's voting for.\\n    mapping(address => address[]) groupsVotedFor;\\n  }\\n\\n  struct ElectableValidators {\\n    uint256 min;\\n    uint256 max;\\n  }\\n\\n  struct CachedVotes {\\n    // group => votes\\n    mapping(address => uint256) cachedVotesPerGroup;\\n    uint256 totalVotes;\\n  }\\n\\n  Votes private votes;\\n  // Governs the minimum and maximum number of validators that can be elected.\\n  ElectableValidators public electableValidators;\\n  // Governs how many validator groups a single account can vote for.\\n  uint256 public maxNumGroupsVotedFor;\\n  // Groups must receive at least this fraction of the total votes in order to be considered in\\n  // elections.\\n  FixidityLib.Fraction public electabilityThreshold;\\n\\n  // If set to true for account, the account is able to vote for more\\n  // than max number of groups voted for.\\n  mapping(address => bool) public allowedToVoteOverMaxNumberOfGroups;\\n\\n  mapping(address => CachedVotes) public cachedVotesByAccount;\\n\\n  event ElectableValidatorsSet(uint256 min, uint256 max);\\n  event MaxNumGroupsVotedForSet(uint256 maxNumGroupsVotedFor);\\n  event ElectabilityThresholdSet(uint256 electabilityThreshold);\\n  event AllowedToVoteOverMaxNumberOfGroups(address indexed account, bool flag);\\n  event ValidatorGroupMarkedEligible(address indexed group);\\n  event ValidatorGroupMarkedIneligible(address indexed group);\\n  event ValidatorGroupVoteCast(address indexed account, address indexed group, uint256 value);\\n  event ValidatorGroupVoteActivated(\\n    address indexed account,\\n    address indexed group,\\n    uint256 value,\\n    uint256 units\\n  );\\n  event ValidatorGroupPendingVoteRevoked(\\n    address indexed account,\\n    address indexed group,\\n    uint256 value\\n  );\\n  event ValidatorGroupActiveVoteRevoked(\\n    address indexed account,\\n    address indexed group,\\n    uint256 value,\\n    uint256 units\\n  );\\n  event EpochRewardsDistributedToVoters(address indexed group, uint256 value);\\n\\n  /**\\n   * @notice Returns the storage, major, minor, and patch version of the contract.\\n   * @return Storage version of the contract.\\n   * @return Major version of the contract.\\n   * @return Minor version of the contract.\\n   * @return Patch version of the contract.\\n   */\\n  function getVersionNumber() external pure returns (uint256, uint256, uint256, uint256) {\\n    return (1, 1, 3, 0);\\n  }\\n\\n  /**\\n   * @notice Used in place of the constructor to allow the contract to be upgradable via proxy.\\n   * @param registryAddress The address of the registry core smart contract.\\n   * @param minElectableValidators The minimum number of validators that can be elected.\\n   * @param _maxNumGroupsVotedFor The maximum number of groups that an account can vote for at once.\\n   * @param _electabilityThreshold The minimum ratio of votes a group needs before its members can\\n   *   be elected.\\n   * @dev Should be called only once.\\n   */\\n  function initialize(\\n    address registryAddress,\\n    uint256 minElectableValidators,\\n    uint256 maxElectableValidators,\\n    uint256 _maxNumGroupsVotedFor,\\n    uint256 _electabilityThreshold\\n  ) external initializer {\\n    _transferOwnership(msg.sender);\\n    setRegistry(registryAddress);\\n    setElectableValidators(minElectableValidators, maxElectableValidators);\\n    setMaxNumGroupsVotedFor(_maxNumGroupsVotedFor);\\n    setElectabilityThreshold(_electabilityThreshold);\\n  }\\n\\n  /**\\n   * @notice Sets initialized == true on implementation contracts\\n   * @param test Set to true to skip implementation initialization\\n   */\\n  constructor(bool test) public Initializable(test) {}\\n\\n  /**\\n   * @notice Updates the minimum and maximum number of validators that can be elected.\\n   * @param min The minimum number of validators that can be elected.\\n   * @param max The maximum number of validators that can be elected.\\n   * @return True upon success.\\n   */\\n  function setElectableValidators(uint256 min, uint256 max) public onlyOwner returns (bool) {\\n    require(0 < min, \\\"Minimum electable validators cannot be zero\\\");\\n    require(min <= max, \\\"Maximum electable validators cannot be smaller than minimum\\\");\\n    require(\\n      min != electableValidators.min || max != electableValidators.max,\\n      \\\"Electable validators not changed\\\"\\n    );\\n    electableValidators = ElectableValidators(min, max);\\n    emit ElectableValidatorsSet(min, max);\\n    return true;\\n  }\\n\\n  /**\\n   * @notice Returns the minimum and maximum number of validators that can be elected.\\n   * @return The minimum number of validators that can be elected.\\n   * @return The maximum number of validators that can be elected.\\n   */\\n  function getElectableValidators() external view returns (uint256, uint256) {\\n    return (electableValidators.min, electableValidators.max);\\n  }\\n\\n  /**\\n   * @notice Updates the maximum number of groups an account can be voting for at once.\\n   * @param _maxNumGroupsVotedFor The maximum number of groups an account can vote for.\\n   * @return True upon success.\\n   */\\n  function setMaxNumGroupsVotedFor(uint256 _maxNumGroupsVotedFor) public onlyOwner returns (bool) {\\n    require(_maxNumGroupsVotedFor != maxNumGroupsVotedFor, \\\"Max groups voted for not changed\\\");\\n    maxNumGroupsVotedFor = _maxNumGroupsVotedFor;\\n    emit MaxNumGroupsVotedForSet(_maxNumGroupsVotedFor);\\n    return true;\\n  }\\n\\n  /**\\n   * @notice Sets the electability threshold.\\n   * @param threshold Electability threshold as unwrapped Fraction.\\n   * @return True upon success.\\n   */\\n  function setElectabilityThreshold(uint256 threshold) public onlyOwner returns (bool) {\\n    electabilityThreshold = FixidityLib.wrap(threshold);\\n    require(\\n      electabilityThreshold.lt(FixidityLib.fixed1()),\\n      \\\"Electability threshold must be lower than 100%\\\"\\n    );\\n    emit ElectabilityThresholdSet(threshold);\\n    return true;\\n  }\\n\\n  /**\\n   * @notice Gets the election threshold.\\n   * @return Threshold value as unwrapped fraction.\\n   */\\n  function getElectabilityThreshold() external view returns (uint256) {\\n    return electabilityThreshold.unwrap();\\n  }\\n\\n  /**\\n   * @notice Increments the number of total and pending votes for `group`.\\n   * @param group The validator group to vote for.\\n   * @param value The amount of gold to use to vote.\\n   * @param lesser The group receiving fewer votes than `group`, or 0 if `group` has the\\n   *   fewest votes of any validator group.\\n   * @param greater The group receiving more votes than `group`, or 0 if `group` has the\\n   *   most votes of any validator group.\\n   * @return True upon success.\\n   * @dev Fails if `group` is empty or not a validator group.\\n   */\\n  function vote(address group, uint256 value, address lesser, address greater)\\n    external\\n    nonReentrant\\n    returns (bool)\\n  {\\n    require(votes.total.eligible.contains(group), \\\"Group not eligible\\\");\\n    require(0 < value, \\\"Vote value cannot be zero\\\");\\n    require(canReceiveVotes(group, value), \\\"Group cannot receive votes\\\");\\n    address account = getAccounts().voteSignerToAccount(msg.sender);\\n\\n    // Add group to the groups voted for by the account.\\n    bool alreadyVotedForGroup = false;\\n    address[] storage groups = votes.groupsVotedFor[account];\\n    for (uint256 i = 0; i < groups.length; i = i.add(1)) {\\n      alreadyVotedForGroup = alreadyVotedForGroup || groups[i] == group;\\n    }\\n    if (!alreadyVotedForGroup) {\\n      require(\\n        allowedToVoteOverMaxNumberOfGroups[msg.sender] || groups.length < maxNumGroupsVotedFor,\\n        \\\"Voted for too many groups\\\"\\n      );\\n      groups.push(group);\\n    }\\n\\n    incrementPendingVotes(group, account, value);\\n    incrementTotalVotes(account, group, value, lesser, greater);\\n    getLockedGold().decrementNonvotingAccountBalance(account, value);\\n    emit ValidatorGroupVoteCast(account, group, value);\\n    return true;\\n  }\\n\\n  /**\\n   * @notice Converts `account`'s pending votes for `group` to active votes.\\n   * @param group The validator group to vote for.\\n   * @return True upon success.\\n   * @dev Pending votes cannot be activated until an election has been held.\\n   */\\n  function activate(address group) external nonReentrant returns (bool) {\\n    address account = getAccounts().voteSignerToAccount(msg.sender);\\n    return _activate(group, account);\\n  }\\n\\n  /**\\n   * @notice Converts `account`'s pending votes for `group` to active votes.\\n   * @param group The validator group to vote for.\\n   * @param account The validateor group account's pending votes to active votes\\n   * @return True upon success.\\n   * @dev Pending votes cannot be activated until an election has been held.\\n   */\\n  function activateForAccount(address group, address account) external nonReentrant returns (bool) {\\n    return _activate(group, account);\\n  }\\n\\n  function _activate(address group, address account) internal returns (bool) {\\n    PendingVote storage pendingVote = votes.pending.forGroup[group].byAccount[account];\\n    require(pendingVote.epoch < getEpochNumber(), \\\"Pending vote epoch not passed\\\");\\n    uint256 value = pendingVote.value;\\n    require(value > 0, \\\"Vote value cannot be zero\\\");\\n    decrementPendingVotes(group, account, value);\\n    uint256 units = incrementActiveVotes(group, account, value);\\n    emit ValidatorGroupVoteActivated(account, group, value, units);\\n    return true;\\n  }\\n\\n  /**\\n   * @notice Returns whether or not an account's votes for the specified group can be activated.\\n   * @param account The account with pending votes.\\n   * @param group The validator group that `account` has pending votes for.\\n   * @return Whether or not `account` has activatable votes for `group`.\\n   * @dev Pending votes cannot be activated until an election has been held.\\n   */\\n  function hasActivatablePendingVotes(address account, address group) external view returns (bool) {\\n    PendingVote storage pendingVote = votes.pending.forGroup[group].byAccount[account];\\n    return pendingVote.epoch < getEpochNumber() && pendingVote.value > 0;\\n  }\\n\\n  /**\\n   * @notice Revokes `value` pending votes for `group`\\n   * @param group The validator group to revoke votes from.\\n   * @param value The number of votes to revoke.\\n   * @param lesser The group receiving fewer votes than the group for which the vote was revoked,\\n   *   or 0 if that group has the fewest votes of any validator group.\\n   * @param greater The group receiving more votes than the group for which the vote was revoked,\\n   *   or 0 if that group has the most votes of any validator group.\\n   * @param index The index of the group in the account's voting list.\\n   * @return True upon success.\\n   * @dev Fails if the account has not voted on a validator group.\\n   */\\n  function revokePending(\\n    address group,\\n    uint256 value,\\n    address lesser,\\n    address greater,\\n    uint256 index\\n  ) external nonReentrant returns (bool) {\\n    require(group != address(0), \\\"Group address zero\\\");\\n    address account = getAccounts().voteSignerToAccount(msg.sender);\\n    require(0 < value, \\\"Vote value cannot be zero\\\");\\n    require(\\n      value <= getPendingVotesForGroupByAccount(group, account),\\n      \\\"Vote value larger than pending votes\\\"\\n    );\\n    decrementPendingVotes(group, account, value);\\n    decrementTotalVotes(account, group, value, lesser, greater);\\n    getLockedGold().incrementNonvotingAccountBalance(account, value);\\n    if (getTotalVotesForGroupByAccount(group, account) == 0) {\\n      deleteElement(votes.groupsVotedFor[account], group, index);\\n    }\\n    emit ValidatorGroupPendingVoteRevoked(account, group, value);\\n    return true;\\n  }\\n\\n  /**\\n   * @notice Revokes all active votes for `group`\\n   * @param group The validator group to revoke votes from.\\n   * @param lesser The group receiving fewer votes than the group for which the vote was revoked,\\n   *   or 0 if that group has the fewest votes of any validator group.\\n   * @param greater The group receiving more votes than the group for which the vote was revoked,\\n   *   or 0 if that group has the most votes of any validator group.\\n   * @param index The index of the group in the account's voting list.\\n   * @return True upon success.\\n   * @dev Fails if the account has not voted on a validator group.\\n   */\\n  function revokeAllActive(address group, address lesser, address greater, uint256 index)\\n    external\\n    nonReentrant\\n    returns (bool)\\n  {\\n    address account = getAccounts().voteSignerToAccount(msg.sender);\\n    uint256 value = getActiveVotesForGroupByAccount(group, account);\\n    return _revokeActive(group, value, lesser, greater, index);\\n  }\\n\\n  /**\\n   * @notice Revokes `value` active votes for `group`\\n   * @param group The validator group to revoke votes from.\\n   * @param value The number of votes to revoke.\\n   * @param lesser The group receiving fewer votes than the group for which the vote was revoked,\\n   *   or 0 if that group has the fewest votes of any validator group.\\n   * @param greater The group receiving more votes than the group for which the vote was revoked,\\n   *   or 0 if that group has the most votes of any validator group.\\n   * @param index The index of the group in the account's voting list.\\n   * @return True upon success.\\n   * @dev Fails if the account has not voted on a validator group.\\n   */\\n  function revokeActive(\\n    address group,\\n    uint256 value,\\n    address lesser,\\n    address greater,\\n    uint256 index\\n  ) external nonReentrant returns (bool) {\\n    return _revokeActive(group, value, lesser, greater, index);\\n  }\\n\\n  function _revokeActive(\\n    address group,\\n    uint256 value,\\n    address lesser,\\n    address greater,\\n    uint256 index\\n  ) internal returns (bool) {\\n    // TODO(asa): Dedup with revokePending.\\n    require(group != address(0), \\\"Group address zero\\\");\\n    address account = getAccounts().voteSignerToAccount(msg.sender);\\n    require(0 < value, \\\"Vote value cannot be zero\\\");\\n    require(\\n      value <= getActiveVotesForGroupByAccount(group, account),\\n      \\\"Vote value larger than active votes\\\"\\n    );\\n    uint256 units = decrementActiveVotes(group, account, value);\\n    decrementTotalVotes(account, group, value, lesser, greater);\\n    getLockedGold().incrementNonvotingAccountBalance(account, value);\\n    if (getTotalVotesForGroupByAccount(group, account) == 0) {\\n      deleteElement(votes.groupsVotedFor[account], group, index);\\n    }\\n    emit ValidatorGroupActiveVoteRevoked(account, group, value, units);\\n    return true;\\n  }\\n\\n  /**\\n   * @notice Decrements `value` pending or active votes for `group` from `account`.\\n   *         First revokes all pending votes and then, if `value` votes haven't\\n   *         been revoked yet, revokes additional active votes.\\n   *         Fundamentally calls `revokePending` and `revokeActive` but only resorts groups once.\\n   * @param account The account whose votes to `group` should be decremented.\\n   * @param group The validator group to decrement votes from.\\n   * @param maxValue The maxinum number of votes to decrement and revoke.\\n   * @param lesser The group receiving fewer votes than the group for which the vote was revoked,\\n   *               or 0 if that group has the fewest votes of any validator group.\\n   * @param greater The group receiving more votes than the group for which the vote was revoked,\\n   *                or 0 if that group has the most votes of any validator group.\\n   * @param index The index of the group in the account's voting list.\\n   * @return uint256 Number of votes successfully decremented and revoked, with a max of `value`.\\n   */\\n  function _decrementVotes(\\n    address account,\\n    address group,\\n    uint256 maxValue,\\n    address lesser,\\n    address greater,\\n    uint256 index\\n  ) internal returns (uint256) {\\n    uint256 remainingValue = maxValue;\\n    uint256 pendingVotes = getPendingVotesForGroupByAccount(group, account);\\n    if (pendingVotes > 0) {\\n      uint256 decrementValue = Math.min(remainingValue, pendingVotes);\\n      decrementPendingVotes(group, account, decrementValue);\\n      emit ValidatorGroupPendingVoteRevoked(account, group, decrementValue);\\n      remainingValue = remainingValue.sub(decrementValue);\\n    }\\n    uint256 activeVotes = getActiveVotesForGroupByAccount(group, account);\\n    if (activeVotes > 0 && remainingValue > 0) {\\n      uint256 decrementValue = Math.min(remainingValue, activeVotes);\\n      uint256 units = decrementActiveVotes(group, account, decrementValue);\\n      emit ValidatorGroupActiveVoteRevoked(account, group, decrementValue, units);\\n      remainingValue = remainingValue.sub(decrementValue);\\n    }\\n    uint256 decrementedValue = maxValue.sub(remainingValue);\\n    if (decrementedValue > 0) {\\n      decrementTotalVotes(account, group, decrementedValue, lesser, greater);\\n      if (getTotalVotesForGroupByAccount(group, account) == 0) {\\n        deleteElement(votes.groupsVotedFor[account], group, index);\\n      }\\n    }\\n    return decrementedValue;\\n  }\\n\\n  /**\\n   * @notice Returns the total number of votes cast by an account.\\n   * @param account The address of the account.\\n   * @return The total number of votes cast by an account.\\n   */\\n  function getTotalVotesByAccount(address account) external view returns (uint256) {\\n    address[] memory groups = votes.groupsVotedFor[account];\\n\\n    if (groups.length > maxNumGroupsVotedFor) {\\n      return cachedVotesByAccount[account].totalVotes;\\n    }\\n\\n    uint256 total = 0;\\n    for (uint256 i = 0; i < groups.length; i = i.add(1)) {\\n      total = total.add(getTotalVotesForGroupByAccount(groups[i], account));\\n    }\\n    return total;\\n  }\\n\\n  /**\\n   * @notice Counts and caches account's votes for group.\\n   * @param account The address of the voting account.\\n   * @param group The address of the validator group.\\n   */\\n  function updateTotalVotesByAccountForGroup(address account, address group) public {\\n    cachedVotesByAccount[account].totalVotes -= cachedVotesByAccount[account]\\n      .cachedVotesPerGroup[group];\\n    uint256 newTotalVotesForGroupByAccount = getTotalVotesForGroupByAccount(group, account);\\n    cachedVotesByAccount[account].cachedVotesPerGroup[group] = newTotalVotesForGroupByAccount;\\n    cachedVotesByAccount[account].totalVotes += newTotalVotesForGroupByAccount;\\n  }\\n\\n  /**\\n   * @notice Returns the pending votes for `group` made by `account`.\\n   * @param group The address of the validator group.\\n   * @param account The address of the voting account.\\n   * @return The pending votes for `group` made by `account`.\\n   */\\n  function getPendingVotesForGroupByAccount(address group, address account)\\n    public\\n    view\\n    returns (uint256)\\n  {\\n    return votes.pending.forGroup[group].byAccount[account].value;\\n  }\\n\\n  /**\\n   * @notice Returns the active votes for `group` made by `account`.\\n   * @param group The address of the validator group.\\n   * @param account The address of the voting account.\\n   * @return The active votes for `group` made by `account`.\\n   */\\n  function getActiveVotesForGroupByAccount(address group, address account)\\n    public\\n    view\\n    returns (uint256)\\n  {\\n    return unitsToVotes(group, votes.active.forGroup[group].unitsByAccount[account]);\\n  }\\n\\n  /**\\n   * @notice Returns the total votes for `group` made by `account`.\\n   * @param group The address of the validator group.\\n   * @param account The address of the voting account.\\n   * @return The total votes for `group` made by `account`.\\n   */\\n  function getTotalVotesForGroupByAccount(address group, address account)\\n    public\\n    view\\n    returns (uint256)\\n  {\\n    uint256 pending = getPendingVotesForGroupByAccount(group, account);\\n    uint256 active = getActiveVotesForGroupByAccount(group, account);\\n    return pending.add(active);\\n  }\\n\\n  /**\\n   * @notice Returns the active vote units for `group` made by `account`.\\n   * @param group The address of the validator group.\\n   * @param account The address of the voting account.\\n   * @return The active vote units for `group` made by `account`.\\n   */\\n  function getActiveVoteUnitsForGroupByAccount(address group, address account)\\n    external\\n    view\\n    returns (uint256)\\n  {\\n    return votes.active.forGroup[group].unitsByAccount[account];\\n  }\\n\\n  /**\\n   * @notice Returns the total active vote units made for `group`.\\n   * @param group The address of the validator group.\\n   * @return The total active vote units made for `group`.\\n   */\\n  function getActiveVoteUnitsForGroup(address group) external view returns (uint256) {\\n    return votes.active.forGroup[group].totalUnits;\\n  }\\n\\n  /**\\n   * @notice Returns the total votes made for `group`.\\n   * @param group The address of the validator group.\\n   * @return The total votes made for `group`.\\n   */\\n  function getTotalVotesForGroup(address group) public view returns (uint256) {\\n    return votes.pending.forGroup[group].total.add(votes.active.forGroup[group].total);\\n  }\\n\\n  /**\\n   * @notice Returns the active votes made for `group`.\\n   * @param group The address of the validator group.\\n   * @return The active votes made for `group`.\\n   */\\n  function getActiveVotesForGroup(address group) public view returns (uint256) {\\n    return votes.active.forGroup[group].total;\\n  }\\n\\n  /**\\n   * @notice Returns the pending votes made for `group`.\\n   * @param group The address of the validator group.\\n   * @return The pending votes made for `group`.\\n   */\\n  function getPendingVotesForGroup(address group) public view returns (uint256) {\\n    return votes.pending.forGroup[group].total;\\n  }\\n\\n  /**\\n   * @notice Returns whether or not a group is eligible to receive votes.\\n   * @return Whether or not a group is eligible to receive votes.\\n   * @dev Eligible groups that have received their maximum number of votes cannot receive more.\\n   */\\n  function getGroupEligibility(address group) external view returns (bool) {\\n    return votes.total.eligible.contains(group);\\n  }\\n\\n  /**\\n   * @notice Returns the amount of rewards that voters for `group` are due at the end of an epoch.\\n   * @param group The group to calculate epoch rewards for.\\n   * @param totalEpochRewards The total amount of rewards going to all voters.\\n   * @param uptimes Array of Fixidity representations of the validators' uptimes, between 0 and 1.\\n   * @return The amount of rewards that voters for `group` are due at the end of an epoch.\\n   * @dev Eligible groups that have received their maximum number of votes cannot receive more.\\n   */\\n  function getGroupEpochRewards(\\n    address group,\\n    uint256 totalEpochRewards,\\n    uint256[] calldata uptimes\\n  ) external view returns (uint256) {\\n    IValidators validators = getValidators();\\n    // The group must meet the balance requirements for their voters to receive epoch rewards.\\n    if (!validators.meetsAccountLockedGoldRequirements(group) || votes.active.total <= 0) {\\n      return 0;\\n    }\\n\\n    FixidityLib.Fraction memory votePortion = FixidityLib.newFixedFraction(\\n      votes.active.forGroup[group].total,\\n      votes.active.total\\n    );\\n    FixidityLib.Fraction memory score = FixidityLib.wrap(\\n      validators.calculateGroupEpochScore(uptimes)\\n    );\\n    FixidityLib.Fraction memory slashingMultiplier = FixidityLib.wrap(\\n      validators.getValidatorGroupSlashingMultiplier(group)\\n    );\\n    return\\n      FixidityLib\\n        .newFixed(totalEpochRewards)\\n        .multiply(votePortion)\\n        .multiply(score)\\n        .multiply(slashingMultiplier)\\n        .fromFixed();\\n  }\\n\\n  /**\\n   * @notice Distributes epoch rewards to voters for `group` in the form of active votes.\\n   * @param group The group whose voters will receive rewards.\\n   * @param value The amount of rewards to distribute to voters for the group.\\n   * @param lesser The group receiving fewer votes than `group` after the rewards are added.\\n   * @param greater The group receiving more votes than `group` after the rewards are added.\\n   * @dev Can only be called directly by the protocol.\\n   */\\n  function distributeEpochRewards(address group, uint256 value, address lesser, address greater)\\n    external\\n    onlyVm\\n  {\\n    _distributeEpochRewards(group, value, lesser, greater);\\n  }\\n\\n  /**\\n   * @notice Distributes epoch rewards to voters for `group` in the form of active votes.\\n   * @param group The group whose voters will receive rewards.\\n   * @param value The amount of rewards to distribute to voters for the group.\\n   * @param lesser The group receiving fewer votes than `group` after the rewards are added.\\n   * @param greater The group receiving more votes than `group` after the rewards are added.\\n   */\\n  function _distributeEpochRewards(address group, uint256 value, address lesser, address greater)\\n    internal\\n  {\\n    if (votes.total.eligible.contains(group)) {\\n      uint256 newVoteTotal = votes.total.eligible.getValue(group).add(value);\\n      votes.total.eligible.update(group, newVoteTotal, lesser, greater);\\n    }\\n\\n    votes.active.forGroup[group].total = votes.active.forGroup[group].total.add(value);\\n    votes.active.total = votes.active.total.add(value);\\n    emit EpochRewardsDistributedToVoters(group, value);\\n  }\\n\\n  /**\\n   * @notice Increments the number of total votes for `group` by `value`.\\n   * @param group The validator group whose vote total should be incremented.\\n   * @param value The number of votes to increment.\\n   * @param lesser The group receiving fewer votes than the group for which the vote was cast,\\n   *   or 0 if that group has the fewest votes of any validator group.\\n   * @param greater The group receiving more votes than the group for which the vote was cast,\\n   *   or 0 if that group has the most votes of any validator group.\\n   */\\n  function incrementTotalVotes(\\n    address account,\\n    address group,\\n    uint256 value,\\n    address lesser,\\n    address greater\\n  ) private {\\n    uint256 newVoteTotal = votes.total.eligible.getValue(group).add(value);\\n    votes.total.eligible.update(group, newVoteTotal, lesser, greater);\\n\\n    if (allowedToVoteOverMaxNumberOfGroups[account]) {\\n      updateTotalVotesByAccountForGroup(account, group);\\n    }\\n  }\\n\\n  /**\\n   * @notice Decrements the number of total votes for `group` by `value`.\\n   * @param account The address of the voting account.\\n   * @param group The validator group whose vote total should be decremented.\\n   * @param value The number of votes to decrement.\\n   * @param lesser The group receiving fewer votes than the group for which the vote was revoked,\\n   *   or 0 if that group has the fewest votes of any validator group.\\n   * @param greater The group receiving more votes than the group for which the vote was revoked,\\n   *   or 0 if that group has the most votes of any validator group.\\n   */\\n  function decrementTotalVotes(\\n    address account,\\n    address group,\\n    uint256 value,\\n    address lesser,\\n    address greater\\n  ) private {\\n    if (votes.total.eligible.contains(group)) {\\n      uint256 newVoteTotal = votes.total.eligible.getValue(group).sub(value);\\n      votes.total.eligible.update(group, newVoteTotal, lesser, greater);\\n    }\\n\\n    if (allowedToVoteOverMaxNumberOfGroups[account]) {\\n      updateTotalVotesByAccountForGroup(account, group);\\n    }\\n  }\\n\\n  /**\\n   * @notice Marks a group ineligible for electing validators.\\n   * @param group The address of the validator group.\\n   * @dev Can only be called by the registered \\\"Validators\\\" contract.\\n   */\\n  function markGroupIneligible(address group)\\n    external\\n    onlyRegisteredContract(VALIDATORS_REGISTRY_ID)\\n  {\\n    votes.total.eligible.remove(group);\\n    emit ValidatorGroupMarkedIneligible(group);\\n  }\\n\\n  /**\\n   * @notice Marks a group eligible for electing validators.\\n   * @param group The address of the validator group.\\n   * @param lesser The address of the group that has received fewer votes than this group.\\n   * @param greater The address of the group that has received more votes than this group.\\n   */\\n  function markGroupEligible(address group, address lesser, address greater)\\n    external\\n    onlyRegisteredContract(VALIDATORS_REGISTRY_ID)\\n  {\\n    uint256 value = getTotalVotesForGroup(group);\\n    votes.total.eligible.insert(group, value, lesser, greater);\\n    emit ValidatorGroupMarkedEligible(group);\\n  }\\n\\n  /**\\n   * @notice Increments the number of pending votes for `group` made by `account`.\\n   * @param group The address of the validator group.\\n   * @param account The address of the voting account.\\n   * @param value The number of votes.\\n   */\\n  function incrementPendingVotes(address group, address account, uint256 value) private {\\n    PendingVotes storage pending = votes.pending;\\n    pending.total = pending.total.add(value);\\n\\n    GroupPendingVotes storage groupPending = pending.forGroup[group];\\n    groupPending.total = groupPending.total.add(value);\\n\\n    PendingVote storage pendingVote = groupPending.byAccount[account];\\n    pendingVote.value = pendingVote.value.add(value);\\n    pendingVote.epoch = getEpochNumber();\\n  }\\n\\n  /**\\n   * @notice Decrements the number of pending votes for `group` made by `account`.\\n   * @param group The address of the validator group.\\n   * @param account The address of the voting account.\\n   * @param value The number of votes.\\n   */\\n  function decrementPendingVotes(address group, address account, uint256 value) private {\\n    PendingVotes storage pending = votes.pending;\\n    pending.total = pending.total.sub(value);\\n\\n    GroupPendingVotes storage groupPending = pending.forGroup[group];\\n    groupPending.total = groupPending.total.sub(value);\\n\\n    PendingVote storage pendingVote = groupPending.byAccount[account];\\n    pendingVote.value = pendingVote.value.sub(value);\\n    if (pendingVote.value == 0) {\\n      pendingVote.epoch = 0;\\n    }\\n  }\\n\\n  /**\\n   * @notice Increments the number of active votes for `group` made by `account`.\\n   * @param group The address of the validator group.\\n   * @param account The address of the voting account.\\n   * @param value The number of votes.\\n   */\\n  function incrementActiveVotes(address group, address account, uint256 value)\\n    private\\n    returns (uint256)\\n  {\\n    ActiveVotes storage active = votes.active;\\n    active.total = active.total.add(value);\\n\\n    uint256 units = votesToUnits(group, value);\\n\\n    GroupActiveVotes storage groupActive = active.forGroup[group];\\n    groupActive.total = groupActive.total.add(value);\\n\\n    groupActive.totalUnits = groupActive.totalUnits.add(units);\\n    groupActive.unitsByAccount[account] = groupActive.unitsByAccount[account].add(units);\\n    return units;\\n  }\\n\\n  /**\\n   * @notice Decrements the number of active votes for `group` made by `account`.\\n   * @param group The address of the validator group.\\n   * @param account The address of the voting account.\\n   * @param value The number of votes.\\n   */\\n  function decrementActiveVotes(address group, address account, uint256 value)\\n    private\\n    returns (uint256)\\n  {\\n    ActiveVotes storage active = votes.active;\\n    active.total = active.total.sub(value);\\n\\n    // Rounding may cause votesToUnits to return 0 for value != 0, preventing users\\n    // from revoking the last of their votes. The case where value == votes is special cased\\n    // to prevent this.\\n    uint256 units = 0;\\n    uint256 activeVotes = getActiveVotesForGroupByAccount(group, account);\\n    GroupActiveVotes storage groupActive = active.forGroup[group];\\n    if (activeVotes == value) {\\n      units = groupActive.unitsByAccount[account];\\n    } else {\\n      units = votesToUnits(group, value);\\n    }\\n\\n    groupActive.total = groupActive.total.sub(value);\\n    groupActive.totalUnits = groupActive.totalUnits.sub(units);\\n    groupActive.unitsByAccount[account] = groupActive.unitsByAccount[account].sub(units);\\n    return units;\\n  }\\n\\n  /**\\n   * @notice Returns the number of units corresponding to `value` active votes.\\n   * @param group The address of the validator group.\\n   * @param value The number of active votes.\\n   * @return The corresponding number of units.\\n   */\\n  function votesToUnits(address group, uint256 value) private view returns (uint256) {\\n    if (votes.active.forGroup[group].totalUnits == 0) {\\n      return value.mul(UNIT_PRECISION_FACTOR);\\n    } else {\\n      return\\n        value.mul(votes.active.forGroup[group].totalUnits).div(votes.active.forGroup[group].total);\\n    }\\n  }\\n\\n  /**\\n   * @notice Returns the number of active votes corresponding to `value` units.\\n   * @param group The address of the validator group.\\n   * @param value The number of units.\\n   * @return The corresponding number of active votes.\\n   */\\n  function unitsToVotes(address group, uint256 value) private view returns (uint256) {\\n    if (votes.active.forGroup[group].totalUnits == 0) {\\n      return 0;\\n    } else {\\n      return\\n        value.mul(votes.active.forGroup[group].total).div(votes.active.forGroup[group].totalUnits);\\n    }\\n  }\\n\\n  /**\\n   * @notice Returns the groups that `account` has voted for.\\n   * @param account The address of the account casting votes.\\n   * @return The groups that `account` has voted for.\\n   */\\n  function getGroupsVotedForByAccount(address account) external view returns (address[] memory) {\\n    return votes.groupsVotedFor[account];\\n  }\\n\\n  /**\\n   * @notice Deletes an element from a list of addresses.\\n   * @param list The list of addresses.\\n   * @param element The address to delete.\\n   * @param index The index of `element` in the list.\\n   */\\n  function deleteElement(address[] storage list, address element, uint256 index) private {\\n    require(index < list.length && list[index] == element, \\\"Bad index\\\");\\n    uint256 lastIndex = list.length.sub(1);\\n    list[index] = list[lastIndex];\\n    list.length = lastIndex;\\n  }\\n\\n  /**\\n   * @notice Returns whether or not a group can receive the specified number of votes.\\n   * @param group The address of the group.\\n   * @param value The number of votes.\\n   * @return Whether or not a group can receive the specified number of votes.\\n   * @dev Votes are not allowed to be cast that would increase a group's proportion of locked gold\\n   *   voting for it to greater than\\n   *   (numGroupMembers + 1) / min(maxElectableValidators, numRegisteredValidators)\\n   * @dev Note that groups may still receive additional votes via rewards even if this function\\n   *   returns false.\\n   */\\n  function canReceiveVotes(address group, uint256 value) public view returns (bool) {\\n    uint256 totalVotesForGroup = getTotalVotesForGroup(group).add(value);\\n    uint256 left = totalVotesForGroup.mul(\\n      Math.min(electableValidators.max, getValidators().getNumRegisteredValidators())\\n    );\\n    uint256 right = getValidators().getGroupNumMembers(group).add(1).mul(\\n      getLockedGold().getTotalLockedGold()\\n    );\\n    return left <= right;\\n  }\\n\\n  /**\\n   * @notice Returns the number of votes that a group can receive.\\n   * @param group The address of the group.\\n   * @return The number of votes that a group can receive.\\n   * @dev Votes are not allowed to be cast that would increase a group's proportion of locked gold\\n   *   voting for it to greater than\\n   *   (numGroupMembers + 1) / min(maxElectableValidators, numRegisteredValidators)\\n   * @dev Note that a group's vote total may exceed this number through rewards or config changes.\\n   */\\n  function getNumVotesReceivable(address group) external view returns (uint256) {\\n    uint256 numerator = getValidators().getGroupNumMembers(group).add(1).mul(\\n      getLockedGold().getTotalLockedGold()\\n    );\\n    uint256 denominator = Math.min(\\n      electableValidators.max,\\n      getValidators().getNumRegisteredValidators()\\n    );\\n    return numerator.div(denominator);\\n  }\\n\\n  /**\\n   * @notice Returns the total votes received across all groups.\\n   * @return The total votes received across all groups.\\n   */\\n  function getTotalVotes() public view returns (uint256) {\\n    return votes.active.total.add(votes.pending.total);\\n  }\\n\\n  /**\\n   * @notice Returns the active votes received across all groups.\\n   * @return The active votes received across all groups.\\n   */\\n  function getActiveVotes() public view returns (uint256) {\\n    return votes.active.total;\\n  }\\n\\n  /**\\n   * @notice Returns the list of validator groups eligible to elect validators.\\n   * @return The list of validator groups eligible to elect validators.\\n   */\\n  function getEligibleValidatorGroups() external view returns (address[] memory) {\\n    return votes.total.eligible.getKeys();\\n  }\\n\\n  /**\\n   * @notice Returns list of all validator groups and the number of votes they've received.\\n   * @return List of all validator groups\\n   * @return Number of votes each validator group received.\\n   */\\n  function getTotalVotesForEligibleValidatorGroups()\\n    external\\n    view\\n    returns (address[] memory groups, uint256[] memory values)\\n  {\\n    return votes.total.eligible.getElements();\\n  }\\n\\n  /**\\n   * @notice Returns a list of elected validators with seats allocated to groups via the D'Hondt\\n   *   method.\\n   * @return The list of elected validators.\\n   */\\n  function electValidatorSigners() external view returns (address[] memory) {\\n    return electNValidatorSigners(electableValidators.min, electableValidators.max);\\n  }\\n\\n  /**\\n   * @notice Returns a list of elected validators with seats allocated to groups via the D'Hondt\\n   *   method.\\n   * @return The list of elected validators.\\n   * @dev See https://en.wikipedia.org/wiki/D%27Hondt_method#Allocation for more information.\\n   */\\n  function electNValidatorSigners(uint256 minElectableValidators, uint256 maxElectableValidators)\\n    public\\n    view\\n    returns (address[] memory)\\n  {\\n    // Groups must have at least `electabilityThreshold` proportion of the total votes to be\\n    // considered for the election.\\n    uint256 requiredVotes = electabilityThreshold\\n      .multiply(FixidityLib.newFixed(getTotalVotes()))\\n      .fromFixed();\\n    // Only consider groups with at least `requiredVotes` but do not consider more groups than the\\n    // max number of electable validators.\\n    uint256 numElectionGroups = votes.total.eligible.numElementsGreaterThan(\\n      requiredVotes,\\n      maxElectableValidators\\n    );\\n    address[] memory electionGroups = votes.total.eligible.headN(numElectionGroups);\\n    uint256[] memory numMembers = getValidators().getGroupsNumMembers(electionGroups);\\n    // Holds the number of members elected for each of the eligible validator groups.\\n    uint256[] memory numMembersElected = new uint256[](electionGroups.length);\\n    uint256 totalNumMembersElected = 0;\\n\\n    uint256[] memory keys = new uint256[](electionGroups.length);\\n    FixidityLib.Fraction[] memory votesForNextMember = new FixidityLib.Fraction[](\\n      electionGroups.length\\n    );\\n    for (uint256 i = 0; i < electionGroups.length; i = i.add(1)) {\\n      keys[i] = i;\\n      votesForNextMember[i] = FixidityLib.newFixed(\\n        votes.total.eligible.getValue(electionGroups[i])\\n      );\\n    }\\n\\n    // Assign a number of seats to each validator group.\\n    while (totalNumMembersElected < maxElectableValidators && electionGroups.length > 0) {\\n      uint256 groupIndex = keys[0];\\n      // All electable validators have been elected.\\n      if (votesForNextMember[groupIndex].unwrap() == 0) break;\\n      // All members of the group have been elected\\n      if (numMembers[groupIndex] <= numMembersElected[groupIndex]) {\\n        votesForNextMember[groupIndex] = FixidityLib.wrap(0);\\n      } else {\\n        // Elect the next member from the validator group\\n        numMembersElected[groupIndex] = numMembersElected[groupIndex].add(1);\\n        totalNumMembersElected = totalNumMembersElected.add(1);\\n        // If there are already n elected members in a group, the votes for the next member\\n        // are total votes of group divided by n+1\\n        votesForNextMember[groupIndex] = FixidityLib\\n          .newFixed(votes.total.eligible.getValue(electionGroups[groupIndex]))\\n          .divide(FixidityLib.newFixed(numMembersElected[groupIndex].add(1)));\\n      }\\n      Heap.heapifyDown(keys, votesForNextMember);\\n    }\\n    require(totalNumMembersElected >= minElectableValidators, \\\"Not enough elected validators\\\");\\n    // Grab the top validators from each group that won seats.\\n    address[] memory electedValidators = new address[](totalNumMembersElected);\\n    totalNumMembersElected = 0;\\n    for (uint256 i = 0; i < electionGroups.length; i = i.add(1)) {\\n      // We use the validating delegate if one is set.\\n      address[] memory electedGroupValidators = getValidators().getTopGroupValidators(\\n        electionGroups[i],\\n        numMembersElected[i]\\n      );\\n      for (uint256 j = 0; j < electedGroupValidators.length; j = j.add(1)) {\\n        electedValidators[totalNumMembersElected] = electedGroupValidators[j];\\n        totalNumMembersElected = totalNumMembersElected.add(1);\\n      }\\n    }\\n    return electedValidators;\\n  }\\n\\n  /**\\n   * @notice Returns get current validator signers using the precompiles.\\n   * @return List of current validator signers.\\n   */\\n  function getCurrentValidatorSigners() public view returns (address[] memory) {\\n    uint256 n = numberValidatorsInCurrentSet();\\n    address[] memory res = new address[](n);\\n    for (uint256 i = 0; i < n; i = i.add(1)) {\\n      res[i] = validatorSignerAddressFromCurrentSet(i);\\n    }\\n    return res;\\n  }\\n\\n  /**\\n   * @notice Allows to turn on/off voting over maxNumGroupsVotedFor.\\n   * Once this is turned on and account voted for more than maxNumGroupsVotedFor,\\n   * it is account's obligation to run updateTotalVotesByAccountForGroup once a day.\\n   * If not run, voting power of account will not reflect rewards awarded.\\n   * @param flag The on/off flag.\\n   */\\n  function setAllowedToVoteOverMaxNumberOfGroups(bool flag) public {\\n    address account = getAccounts().voteSignerToAccount(msg.sender);\\n    IValidators validators = getValidators();\\n    require(\\n      !validators.isValidator(account),\\n      \\\"Validators cannot vote for more than max number of groups\\\"\\n    );\\n    require(\\n      !validators.isValidatorGroup(account),\\n      \\\"Validator groups cannot vote for more than max number of groups\\\"\\n    );\\n\\n    if (!flag) {\\n      require(\\n        votes.groupsVotedFor[account].length <= maxNumGroupsVotedFor,\\n        \\\"Too many groups voted for!\\\"\\n      );\\n    }\\n\\n    allowedToVoteOverMaxNumberOfGroups[account] = flag;\\n    emit AllowedToVoteOverMaxNumberOfGroups(account, flag);\\n  }\\n\\n  // Struct to hold local variables for `forceDecrementVotes`.\\n  // Needed to prevent solc error of \\\"stack too deep\\\" from too many local vars.\\n  struct DecrementVotesInfo {\\n    address[] groups;\\n    uint256 remainingValue;\\n  }\\n\\n  /**\\n   * @notice Reduces the total amount of `account`'s voting gold by `value` by\\n   *         iterating over all groups voted for by account.\\n   * @param account Address to revoke votes from.\\n   * @param value Maximum amount of votes to revoke.\\n   * @param lessers The groups receiving fewer votes than the i'th `group`, or 0 if\\n   *                the i'th `group` has the fewest votes of any validator group.\\n   * @param greaters The groups receivier more votes than the i'th `group`, or 0 if\\n   *                the i'th `group` has the most votes of any validator group.\\n   * @param indices The indices of the i'th group in the account's voting list.\\n   * @return Number of votes successfully decremented.\\n   */\\n  function forceDecrementVotes(\\n    address account,\\n    uint256 value,\\n    address[] calldata lessers,\\n    address[] calldata greaters,\\n    uint256[] calldata indices\\n  ) external nonReentrant onlyRegisteredContract(LOCKED_GOLD_REGISTRY_ID) returns (uint256) {\\n    require(value > 0, \\\"Decrement value must be greater than 0.\\\");\\n    DecrementVotesInfo memory info = DecrementVotesInfo(votes.groupsVotedFor[account], value);\\n    require(\\n      lessers.length <= info.groups.length &&\\n        lessers.length == greaters.length &&\\n        greaters.length == indices.length,\\n      \\\"Input lengths must be correspond.\\\"\\n    );\\n    // Iterate in reverse order to hopefully optimize removing pending votes before active votes\\n    // And to attempt to preserve `account`'s earliest votes (assuming earliest = prefered)\\n    for (uint256 i = info.groups.length; i > 0; i = i.sub(1)) {\\n      info.remainingValue = info.remainingValue.sub(\\n        _decrementVotes(\\n          account,\\n          info.groups[i.sub(1)],\\n          info.remainingValue,\\n          lessers[i.sub(1)],\\n          greaters[i.sub(1)],\\n          indices[i.sub(1)]\\n        )\\n      );\\n      if (info.remainingValue == 0) {\\n        break;\\n      }\\n    }\\n    require(info.remainingValue == 0, \\\"Failure to decrement all votes.\\\");\\n    return value;\\n  }\\n}\\n\",\"keccak256\":\"0xedb95a713fb9c9f4476f268025534756639fb2861590e3cb1fb86824864c18c2\"},\"project:/contracts/governance/interfaces/IElection.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.5.13 <0.9.0;\\n\\ninterface IElection {\\n  function electValidatorSigners() external view returns (address[] memory);\\n  function electNValidatorSigners(uint256, uint256) external view returns (address[] memory);\\n  function vote(address, uint256, address, address) external returns (bool);\\n  function activate(address) external returns (bool);\\n  function revokeActive(address, uint256, address, address, uint256) external returns (bool);\\n  function revokeAllActive(address, address, address, uint256) external returns (bool);\\n  function revokePending(address, uint256, address, address, uint256) external returns (bool);\\n  function markGroupIneligible(address) external;\\n  function markGroupEligible(address, address, address) external;\\n  function allowedToVoteOverMaxNumberOfGroups(address) external returns (bool);\\n  function forceDecrementVotes(\\n    address,\\n    uint256,\\n    address[] calldata,\\n    address[] calldata,\\n    uint256[] calldata\\n  ) external returns (uint256);\\n  function setAllowedToVoteOverMaxNumberOfGroups(bool flag) external;\\n\\n  // view functions\\n  function getElectableValidators() external view returns (uint256, uint256);\\n  function getElectabilityThreshold() external view returns (uint256);\\n  function getNumVotesReceivable(address) external view returns (uint256);\\n  function getTotalVotes() external view returns (uint256);\\n  function getActiveVotes() external view returns (uint256);\\n  function getTotalVotesByAccount(address) external view returns (uint256);\\n  function getPendingVotesForGroupByAccount(address, address) external view returns (uint256);\\n  function getActiveVotesForGroupByAccount(address, address) external view returns (uint256);\\n  function getTotalVotesForGroupByAccount(address, address) external view returns (uint256);\\n  function getActiveVoteUnitsForGroupByAccount(address, address) external view returns (uint256);\\n  function getTotalVotesForGroup(address) external view returns (uint256);\\n  function getActiveVotesForGroup(address) external view returns (uint256);\\n  function getPendingVotesForGroup(address) external view returns (uint256);\\n  function getGroupEligibility(address) external view returns (bool);\\n  function getGroupEpochRewards(address, uint256, uint256[] calldata)\\n    external\\n    view\\n    returns (uint256);\\n  function getGroupsVotedForByAccount(address) external view returns (address[] memory);\\n  function getEligibleValidatorGroups() external view returns (address[] memory);\\n  function getTotalVotesForEligibleValidatorGroups()\\n    external\\n    view\\n    returns (address[] memory, uint256[] memory);\\n  function getCurrentValidatorSigners() external view returns (address[] memory);\\n  function canReceiveVotes(address, uint256) external view returns (bool);\\n  function hasActivatablePendingVotes(address, address) external view returns (bool);\\n  function validatorSignerAddressFromCurrentSet(uint256 index) external view returns (address);\\n  function numberValidatorsInCurrentSet() external view returns (uint256);\\n\\n  // only owner\\n  function setElectableValidators(uint256, uint256) external returns (bool);\\n  function setMaxNumGroupsVotedFor(uint256) external returns (bool);\\n  function setElectabilityThreshold(uint256) external returns (bool);\\n\\n  // only VM\\n  function distributeEpochRewards(address, uint256, address, address) external;\\n}\\n\",\"keccak256\":\"0x2b7195aaef2f49cfd9a5b1106fd6841701e0dc92752b97d4909947b3127460c7\"},\"project:/contracts/governance/interfaces/IGovernance.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.5.13 <0.9.0;\\n\\ninterface IGovernance {\\n  function removeVotesWhenRevokingDelegatedVotes(address account, uint256 maxAmountAllowed)\\n    external;\\n  function votePartially(\\n    uint256 proposalId,\\n    uint256 index,\\n    uint256 yesVotes,\\n    uint256 noVotes,\\n    uint256 abstainVotes\\n  ) external returns (bool);\\n\\n  function isVoting(address) external view returns (bool);\\n  function getAmountOfGoldUsedForVoting(address account) external view returns (uint256);\\n\\n  function getProposal(uint256 proposalId)\\n    external\\n    view\\n    returns (address, uint256, uint256, uint256, string memory, uint256, bool);\\n\\n  function getReferendumStageDuration() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x19499ae304c70805e523ebf674c2983e8dc428f49a9da5b89e8450c2cd12997b\"},\"project:/contracts/governance/interfaces/ILockedGold.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.5.13 <0.9.0;\\n\\ninterface ILockedGold {\\n  function lock() external payable;\\n  function incrementNonvotingAccountBalance(address, uint256) external;\\n  function decrementNonvotingAccountBalance(address, uint256) external;\\n  function getAccountTotalLockedGold(address) external view returns (uint256);\\n  function getTotalLockedGold() external view returns (uint256);\\n  function getPendingWithdrawals(address)\\n    external\\n    view\\n    returns (uint256[] memory, uint256[] memory);\\n  function getPendingWithdrawal(address account, uint256 index)\\n    external\\n    view\\n    returns (uint256, uint256);\\n  function getTotalPendingWithdrawals(address) external view returns (uint256);\\n  function unlock(uint256) external;\\n  function relock(uint256, uint256) external;\\n  function withdraw(uint256) external;\\n  function slash(\\n    address account,\\n    uint256 penalty,\\n    address reporter,\\n    uint256 reward,\\n    address[] calldata lessers,\\n    address[] calldata greaters,\\n    uint256[] calldata indices\\n  ) external;\\n  function isSlasher(address) external view returns (bool);\\n\\n  function getAccountTotalDelegatedFraction(address account) external view returns (uint256);\\n\\n  function getAccountTotalGovernanceVotingPower(address account) external view returns (uint256);\\n  function unlockingPeriod() external view returns (uint256);\\n  function getAccountNonvotingLockedGold(address account) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xcb6530457f85fc492a9714baca95f52a915dc91472cbd1f987ab4347d2e2d1bc\"},\"project:/contracts/governance/interfaces/IValidators.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.5.13 <0.9.0;\\n\\ninterface IValidators {\\n  function registerValidator(bytes calldata, bytes calldata, bytes calldata)\\n    external\\n    returns (bool);\\n  function deregisterValidator(uint256) external returns (bool);\\n  function affiliate(address) external returns (bool);\\n  function deaffiliate() external returns (bool);\\n  function updateBlsPublicKey(bytes calldata, bytes calldata) external returns (bool);\\n  function registerValidatorGroup(uint256) external returns (bool);\\n  function deregisterValidatorGroup(uint256) external returns (bool);\\n  function addMember(address) external returns (bool);\\n  function addFirstMember(address, address, address) external returns (bool);\\n  function removeMember(address) external returns (bool);\\n  function reorderMember(address, address, address) external returns (bool);\\n  function updateCommission() external;\\n  function setNextCommissionUpdate(uint256) external;\\n  function resetSlashingMultiplier() external;\\n\\n  // only owner\\n  function setCommissionUpdateDelay(uint256) external;\\n  function setMaxGroupSize(uint256) external returns (bool);\\n  function setMembershipHistoryLength(uint256) external returns (bool);\\n  function setValidatorScoreParameters(uint256, uint256) external returns (bool);\\n  function setGroupLockedGoldRequirements(uint256, uint256) external returns (bool);\\n  function setValidatorLockedGoldRequirements(uint256, uint256) external returns (bool);\\n  function setSlashingMultiplierResetPeriod(uint256) external;\\n\\n  // view functions\\n  function getMaxGroupSize() external view returns (uint256);\\n  function getCommissionUpdateDelay() external view returns (uint256);\\n  function getValidatorScoreParameters() external view returns (uint256, uint256);\\n  function getMembershipHistory(address)\\n    external\\n    view\\n    returns (uint256[] memory, address[] memory, uint256, uint256);\\n  function calculateEpochScore(uint256) external view returns (uint256);\\n  function calculateGroupEpochScore(uint256[] calldata) external view returns (uint256);\\n  function getAccountLockedGoldRequirement(address) external view returns (uint256);\\n  function meetsAccountLockedGoldRequirements(address) external view returns (bool);\\n  function getValidatorBlsPublicKeyFromSigner(address) external view returns (bytes memory);\\n  function getValidator(address account)\\n    external\\n    view\\n    returns (bytes memory, bytes memory, address, uint256, address);\\n  function getValidatorGroup(address)\\n    external\\n    view\\n    returns (address[] memory, uint256, uint256, uint256, uint256[] memory, uint256, uint256);\\n  function getGroupNumMembers(address) external view returns (uint256);\\n  function getTopGroupValidators(address, uint256) external view returns (address[] memory);\\n  function getGroupsNumMembers(address[] calldata accounts)\\n    external\\n    view\\n    returns (uint256[] memory);\\n  function getNumRegisteredValidators() external view returns (uint256);\\n  function groupMembershipInEpoch(address, uint256, uint256) external view returns (address);\\n\\n  // only registered contract\\n  function updateEcdsaPublicKey(address, address, bytes calldata) external returns (bool);\\n  function updatePublicKeys(address, address, bytes calldata, bytes calldata, bytes calldata)\\n    external\\n    returns (bool);\\n  function getValidatorLockedGoldRequirements() external view returns (uint256, uint256);\\n  function getGroupLockedGoldRequirements() external view returns (uint256, uint256);\\n  function getRegisteredValidators() external view returns (address[] memory);\\n  function getRegisteredValidatorSigners() external view returns (address[] memory);\\n  function getRegisteredValidatorGroups() external view returns (address[] memory);\\n  function isValidatorGroup(address) external view returns (bool);\\n  function isValidator(address) external view returns (bool);\\n  function getValidatorGroupSlashingMultiplier(address) external view returns (uint256);\\n  function getMembershipInLastEpoch(address) external view returns (address);\\n  function getMembershipInLastEpochFromSigner(address) external view returns (address);\\n\\n  // only VM\\n  function updateValidatorScoreFromSigner(address, uint256) external;\\n  function distributeEpochPaymentsFromSigner(address, uint256) external returns (uint256);\\n\\n  // only slasher\\n  function forceDeaffiliateIfValidator(address) external;\\n  function halveSlashingMultiplier(address) external;\\n\\n}\\n\",\"keccak256\":\"0xedb1f9717f0ea77f30cb7fa40bfd3704dcfdc17252082c4bf5caaea205c83d9a\"},\"project:/contracts/governance/test/ElectionTest.sol\":{\"content\":\"pragma solidity ^0.5.13;\\n\\nimport \\\"../Election.sol\\\";\\nimport \\\"../../common/FixidityLib.sol\\\";\\n\\n/**\\n * @title A wrapper around Election that exposes onlyVm functions for testing.\\n */\\ncontract ElectionTest is Election(true) {\\n  function distributeEpochRewards(address group, uint256 value, address lesser, address greater)\\n    external\\n  {\\n    return _distributeEpochRewards(group, value, lesser, greater);\\n  }\\n}\\n\",\"keccak256\":\"0xc125bc8939dfc32319965eb5f0b92f5279e3686643cf1c50f141bc81016afcb1\"},\"project:/contracts/identity/interfaces/IAttestations.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.5.13 <0.9.0;\\n\\ninterface IAttestations {\\n  function revoke(bytes32, uint256) external;\\n  function withdraw(address) external;\\n\\n  // view functions\\n  function getUnselectedRequest(bytes32, address) external view returns (uint32, uint32, address);\\n  function getAttestationIssuers(bytes32, address) external view returns (address[] memory);\\n  function getAttestationStats(bytes32, address) external view returns (uint32, uint32);\\n  function batchGetAttestationStats(bytes32[] calldata)\\n    external\\n    view\\n    returns (uint256[] memory, address[] memory, uint64[] memory, uint64[] memory);\\n  function getAttestationState(bytes32, address, address)\\n    external\\n    view\\n    returns (uint8, uint32, address);\\n  function getCompletableAttestations(bytes32, address)\\n    external\\n    view\\n    returns (uint32[] memory, address[] memory, uint256[] memory, bytes memory);\\n  function getAttestationRequestFee(address) external view returns (uint256);\\n  function getMaxAttestations() external view returns (uint256);\\n  function validateAttestationCode(bytes32, address, uint8, bytes32, bytes32)\\n    external\\n    view\\n    returns (address);\\n  function lookupAccountsForIdentifier(bytes32) external view returns (address[] memory);\\n  function requireNAttestationsRequested(bytes32, address, uint32) external view;\\n\\n  // only owner\\n  function setAttestationRequestFee(address, uint256) external;\\n  function setAttestationExpiryBlocks(uint256) external;\\n  function setSelectIssuersWaitBlocks(uint256) external;\\n  function setMaxAttestations(uint256) external;\\n}\\n\",\"keccak256\":\"0x18698a475dc0c9ea8a4c53ab5e42407f34a7c676d7b713c1507b43669f860e74\"},\"project:/contracts/identity/interfaces/IRandom.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.5.13 <0.9.0;\\n\\ninterface IRandom {\\n  function revealAndCommit(bytes32, bytes32, address) external;\\n  function randomnessBlockRetentionWindow() external view returns (uint256);\\n  function random() external view returns (bytes32);\\n  function getBlockRandomness(uint256) external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xdb545530be6397d23692e4465f4514cf3c87c1d4f553323964694818c375c08d\"},\"project:/contracts/stability/interfaces/ISortedOracles.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.5.13 <0.9.0;\\n\\ninterface ISortedOracles {\\n  function addOracle(address, address) external;\\n  function removeOracle(address, address, uint256) external;\\n  function report(address, uint256, address, address) external;\\n  function removeExpiredReports(address, uint256) external;\\n  function isOldestReportExpired(address token) external view returns (bool, address);\\n  function numRates(address) external view returns (uint256);\\n  function medianRate(address) external view returns (uint256, uint256);\\n  function numTimestamps(address) external view returns (uint256);\\n  function medianTimestamp(address) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xc9d69b608b060effe4a0b246e7fad096b524b848aa51d8f4eccad36c1aa0479d\"},\"project:/lib/mento-core/contracts/interfaces/IExchange.sol\":{\"content\":\"pragma solidity ^0.5.13;\\n\\ninterface IExchange {\\n    function buy(\\n        uint256,\\n        uint256,\\n        bool\\n    ) external returns (uint256);\\n\\n    function sell(\\n        uint256,\\n        uint256,\\n        bool\\n    ) external returns (uint256);\\n\\n    function exchange(\\n        uint256,\\n        uint256,\\n        bool\\n    ) external returns (uint256);\\n\\n    function setUpdateFrequency(uint256) external;\\n\\n    function getBuyTokenAmount(uint256, bool) external view returns (uint256);\\n\\n    function getSellTokenAmount(uint256, bool) external view returns (uint256);\\n\\n    function getBuyAndSellBuckets(bool) external view returns (uint256, uint256);\\n}\\n\",\"keccak256\":\"0x320488022d1066ac81797b9e7a3dc303d1c8e9a48597972d4686e00f9554ade9\"},\"project:/lib/mento-core/contracts/interfaces/IReserve.sol\":{\"content\":\"pragma solidity ^0.5.13;\\n\\ninterface IReserve {\\n    function setTobinTaxStalenessThreshold(uint256) external;\\n\\n    function addToken(address) external returns (bool);\\n\\n    function removeToken(address, uint256) external returns (bool);\\n\\n    function transferGold(address payable, uint256) external returns (bool);\\n\\n    function transferExchangeGold(address payable, uint256) external returns (bool);\\n\\n    function getReserveGoldBalance() external view returns (uint256);\\n\\n    function getUnfrozenReserveGoldBalance() external view returns (uint256);\\n\\n    function getOrComputeTobinTax() external returns (uint256, uint256);\\n\\n    function getTokens() external view returns (address[] memory);\\n\\n    function getReserveRatio() external view returns (uint256);\\n\\n    function addExchangeSpender(address) external;\\n\\n    function removeExchangeSpender(address, uint256) external;\\n\\n    function addSpender(address) external;\\n\\n    function removeSpender(address) external;\\n}\\n\",\"keccak256\":\"0x9162b458dc21fe7e6cfc5d4722b3db3001b1c54ecdcefa703ff9d902084150b7\"},\"project:/lib/mento-core/contracts/interfaces/IStableToken.sol\":{\"content\":\"pragma solidity ^0.5.13;\\n\\n/**\\n * @title This interface describes the functions specific to Celo Stable Tokens, and in the\\n * absence of interface inheritance is intended as a companion to IERC20.sol and ICeloToken.sol.\\n */\\ninterface IStableToken {\\n    function mint(address, uint256) external returns (bool);\\n\\n    function burn(uint256) external returns (bool);\\n\\n    function setInflationParameters(uint256, uint256) external;\\n\\n    function valueToUnits(uint256) external view returns (uint256);\\n\\n    function unitsToValue(uint256) external view returns (uint256);\\n\\n    function getInflationParameters()\\n        external\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256\\n        );\\n\\n    // NOTE: duplicated with IERC20.sol, remove once interface inheritance is supported.\\n    function balanceOf(address) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xcb6440c9b161b26a5b062e6c74d6fd1ed9736f292161c757406a9c39e942d20a\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "",
  "sourceMap": "179:228:121:-;;;213:4;6709::90;698:17:4;718:12;:10;;;:12;;:::i;:::-;698:32;;749:9;740:6;;:18;;;;;;;;;;;;;;;;;;806:9;773:43;;802:1;773:43;;;;;;;;;;;;664:159;558:1:53;542:13;:17;;;;185::24;180:57;;226:4;212:11;;:18;;;;;;;;;;;;;;;;;;180:57;131:110;6665:52:90;179:228:121;;788:96:0;833:15;867:10;860:17;;788:96;:::o;179:228:121:-;;;;;;;",
  "deployedSourceMap": "179:228:121:-;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;179:228:121;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3810:367:35;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;3810:367:35;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;223:182:121;;;;;;13:3:-1;8;5:12;2:2;;;30:1;27;20:12;2:2;223:182:121;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;103:23:24;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;11131:182:90;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;11131:182:90;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;38653:92;;;:::i;:::-;;;;;;;;;;;;;;;;;;;6346:266:35;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;6346:266:35;;;;;;;;;;;;;;;;;;;;;21:11:-1;8;5:28;2:2;;;46:1;43;36:12;2:2;6346:266:35;;35:9:-1;28:4;12:14;8:25;5:40;2:2;;;58:1;55;48:12;2:2;6346:266:35;;;;;;100:9:-1;95:1;81:12;77:20;67:8;63:35;60:50;39:11;25:12;22:29;11:107;8:2;;;131:1;128;121:12;8:2;6346:266:35;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;30:3:-1;22:6;14;1:33;99:1;93:3;85:6;81:16;74:27;137:4;133:9;126:4;121:3;117:14;113:30;106:37;;169:3;161:6;157:16;147:26;;6346:266:35;;;;;;;;;;;;;;;;;21:11:-1;8;5:28;2:2;;;46:1;43;36:12;2:2;6346:266:35;;35:9:-1;28:4;12:14;8:25;5:40;2:2;;;58:1;55;48:12;2:2;6346:266:35;;;;;;100:9:-1;95:1;81:12;77:20;67:8;63:35;60:50;39:11;25:12;22:29;11:107;8:2;;;131:1;128;121:12;8:2;6346:266:35;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;30:3:-1;22:6;14;1:33;99:1;93:3;85:6;81:16;74:27;137:4;133:9;126:4;121:3;117:14;113:30;106:37;;169:3;161:6;157:16;147:26;;6346:266:35;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;12726:264:90;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;12726:264:90;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;39613:164;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;80:1;75:3;71:11;64:39;52:2;49:1;45:10;40:15;;8:100;;;12:14;39613:164:90;;;;;;;;;;;;;;;;;37884:375;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;37884:375:90;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;20646:468;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;20646:468:90;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;22277:295;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;22277:295:90;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;2608:147:35;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;2608:147:35;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;8098:321:90;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;8098:321:90;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;43564:300;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;80:1;75:3;71:11;64:39;52:2;49:1;45:10;40:15;;8:100;;;12:14;43564:300:90;;;;;;;;;;;;;;;;;35704:141;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;35704:141:90;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;80:1;75:3;71:11;64:39;52:2;49:1;45:10;40:15;;8:100;;;12:14;35704:141:90;;;;;;;;;;;;;;;;;8496:343:35;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;8496:343:35;;;;;;;;;;21:11:-1;8;5:28;2:2;;;46:1;43;36:12;2:2;8496:343:35;;35:9:-1;28:4;12:14;8:25;5:40;2:2;;;58:1;55;48:12;2:2;8496:343:35;;;;;;100:9:-1;95:1;81:12;77:20;67:8;63:35;60:50;39:11;25:12;22:29;11:107;8:2;;;131:1;128;121:12;8:2;8496:343:35;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;30:3:-1;22:6;14;1:33;99:1;93:3;85:6;81:16;74:27;137:4;133:9;126:4;121:3;117:14;113:30;106:37;;169:3;161:6;157:16;147:26;;8496:343:35;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;3856:49:90;;;:::i;:::-;;;;;;;;;;;;;;;;;;;5390:117;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;9699:1179;;;;;;13:3:-1;8;5:12;2:2;;;30:1;27;20:12;2:2;9699:1179:90;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;23226:140;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;23226:140:90;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;4481:378:35;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;4481:378:35;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;8581:339:90;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;8581:339:90;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;7188:288:35;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;7188:288:35;;;;;;;;;;21:11:-1;8;5:28;2:2;;;46:1;43;36:12;2:2;7188:288:35;;35:9:-1;28:4;12:14;8:25;5:40;2:2;;;58:1;55;48:12;2:2;7188:288:35;;;;;;100:9:-1;95:1;81:12;77:20;67:8;63:35;60:50;39:11;25:12;22:29;11:107;8:2;;;131:1;128;121:12;8:2;7188:288:35;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;30:3:-1;22:6;14;1:33;99:1;93:3;85:6;81:16;74:27;137:4;133:9;126:4;121:3;117:14;113:30;106:37;;169:3;161:6;157:16;147:26;;7188:288:35;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;20022:441:90;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;20022:441:90;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;16217:230;;;;;;13:3:-1;8;5:12;2:2;;;30:1;27;20:12;2:2;16217:230:90;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;39250:190;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;80:1;75:3;71:11;64:39;52:2;49:1;45:10;40:15;;8:100;;;12:14;39250:190:90;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;80:1;75:3;71:11;64:39;52:2;49:1;45:10;40:15;;8:100;;;12:14;39250:190:90;;;;;;;;;;;;;;;;;;;1684:137:4;;;:::i;:::-;;10031:112:35;;;:::i;:::-;;;;;;;;;;;;;;;;;;;2636:25:36;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;5037:326:35;;;:::i;:::-;;;;;;;;;;;;;;;;;;;6741:329;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;6741:329:35;;;;;;;;;;21:11:-1;8;5:28;2:2;;;46:1;43;36:12;2:2;6741:329:35;;35:9:-1;28:4;12:14;8:25;5:40;2:2;;;58:1;55;48:12;2:2;6741:329:35;;;;;;100:9:-1;95:1;81:12;77:20;67:8;63:35;60:50;39:11;25:12;22:29;11:107;8:2;;;131:1;128;121:12;8:2;6741:329:35;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;30:3:-1;22:6;14;1:33;99:1;93:3;85:6;81:16;74:27;137:4;133:9;126:4;121:3;117:14;113:30;106:37;;169:3;161:6;157:16;147:26;;6741:329:35;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;24569:127:90;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;24569:127:90;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;899:77:4;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;45897:1300:90;;;;;;13:3:-1;8;5:12;2:2;;;30:1;27;20:12;2:2;45897:1300:90;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;21:11:-1;8;5:28;2:2;;;46:1;43;36:12;2:2;45897:1300:90;;35:9:-1;28:4;12:14;8:25;5:40;2:2;;;58:1;55;48:12;2:2;45897:1300:90;;;;;;101:9:-1;95:2;81:12;77:21;67:8;63:36;60:51;39:11;25:12;22:29;11:108;8:2;;;132:1;129;122:12;8:2;45897:1300:90;;;;;;;;;;;;;;21:11:-1;8;5:28;2:2;;;46:1;43;36:12;2:2;45897:1300:90;;35:9:-1;28:4;12:14;8:25;5:40;2:2;;;58:1;55;48:12;2:2;45897:1300:90;;;;;;101:9:-1;95:2;81:12;77:21;67:8;63:36;60:51;39:11;25:12;22:29;11:108;8:2;;;132:1;129;122:12;8:2;45897:1300:90;;;;;;;;;;;;;;21:11:-1;8;5:28;2:2;;;46:1;43;36:12;2:2;45897:1300:90;;35:9:-1;28:4;12:14;8:25;5:40;2:2;;;58:1;55;48:12;2:2;45897:1300:90;;;;;;101:9:-1;95:2;81:12;77:21;67:8;63:36;60:51;39:11;25:12;22:29;11:108;8:2;;;132:1;129;122:12;8:2;45897:1300:90;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;1250:92:4;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;40044:3382:90;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;40044:3382:90;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;80:1;75:3;71:11;64:39;52:2;49:1;45:10;40:15;;8:100;;;12:14;40044:3382:90;;;;;;;;;;;;;;;;;23881:129;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;23881:129:90;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;24186:131;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;24186:131:90;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;38397:116;;;:::i;:::-;;;;;;;;;;;;;;;;;;;2856:109:35;;;:::i;:::-;;;;;;;;;;;;;;;;;;;5579:321;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;5579:321:35;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;21371:190:90;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;21371:190:90;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;13676:878;;;;;;13:3:-1;8;5:12;2:2;;;30:1;27;20:12;2:2;13676:878:90;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;30624:306;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;30624:306:90;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;22837:193;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;22837:193:90;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;38913:127;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;80:1;75:3;71:11;64:39;52:2;49:1;45:10;40:15;;8:100;;;12:14;38913:127:90;;;;;;;;;;;;;;;;;30108:203;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;30108:203:90;;;;;;;;;;;;;;;;;;;:::i;:::-;;3185:230:36;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;3185:230:36;;;;;;;;;;;;;;;;;;;:::i;:::-;;3705:35:90;;;:::i;:::-;;;;;;;;;;;;;;;;;;;9030:116;;;:::i;:::-;;;;;;;;;;;;;;;;;;;11647:140;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;11647:140:90;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;4022:66;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;4022:66:90;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;4093:59;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;4093:59:90;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;21816:208;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;21816:208:90;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;44225:720;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;44225:720:90;;;;;;;;;;;;;;;;;;;:::i;:::-;;23538:169;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;23538:169:90;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;2178:266:35;;;:::i;:::-;;;;;;;;;;;;;;;;;;;15186:346:90;;;;;;13:3:-1;8;5:12;2:2;;;30:1;27;20:12;2:2;15186:346:90;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;9752:147:35;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;9752:147:35;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;36932:447:90;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;36932:447:90;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;1297:763:35;;;;;;13:3:-1;8;5:12;2:2;;;30:1;27;20:12;2:2;1297:763:35;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;25236:995:90;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;25236:995:90;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;21:11:-1;8;5:28;2:2;;;46:1;43;36:12;2:2;25236:995:90;;35:9:-1;28:4;12:14;8:25;5:40;2:2;;;58:1;55;48:12;2:2;25236:995:90;;;;;;101:9:-1;95:2;81:12;77:21;67:8;63:36;60:51;39:11;25:12;22:29;11:108;8:2;;;132:1;129;122:12;8:2;25236:995:90;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;1970:107:4;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;1970:107:4;;;;;;;;;;;;;;;;;;;:::i;:::-;;6992:502:90;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;6992:502:90;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;6042:474;;;;;;13:3:-1;8;5:12;2:2;;;30:1;27;20:12;2:2;6042:474:90;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;3585:46;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;7731:143;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;7767:322:35;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;7767:322:35;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;3810:367;3892:7;3907:16;3929:12;409:8;3964:24;;4006:5;4021:12;3989:46;;;;;;;;;;;;;;;;;;;;;49:4:-1;39:7;30;26:21;22:32;13:7;6:49;3989:46:35;;;3964:72;;;;;;;;;;;;;36:153:-1;66:2;61:3;58:11;36:153;;182:3;176:10;171:3;164:23;98:2;93:3;89:12;82:19;;123:2;118:3;114:12;107:19;;148:2;143:3;139:12;132:19;;36:153;;;274:1;267:3;263:2;259:12;254:3;250:22;246:30;315:4;311:9;305:3;299:10;295:26;356:4;350:3;344:10;340:21;389:7;380;377:20;372:3;365:33;3:399;;;3964:72:35;;;;;;;;;;;;;;;;;;;;;;;14:1:-1;21;16:31;;;;75:4;69:11;64:16;;144:4;140:9;133:4;115:16;111:27;107:43;104:1;100:51;94:4;87:65;169:16;166:1;159:27;225:16;222:1;215:4;212:1;208:12;193:49;7:242;;16:31;36:4;31:9;;7:242;;3947:89:35;;;;;;;;4050:7;4042:81;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4144:27;4164:3;4169:1;4144:19;:27::i;:::-;4129:43;;;;3810:367;;;:::o;223:182:121:-;346:54;370:5;377;384:6;392:7;346:23;:54::i;:::-;223:182;;;;:::o;103:23:24:-;;;;;;;;;;;;;:::o;11131:182:90:-;11195:4;970:1:53;953:13;;:18;;;;;;;;;;;977:20;1000:13;;977:36;;11207:15:90;11225:13;:11;:13::i;:::-;:33;;;11259:10;11225:45;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;11225:45:90;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;11225:45:90;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;11225:45:90;;;;;;;;;;;;;;;;11207:63;;11283:25;11293:5;11300:7;11283:9;:25::i;:::-;11276:32;;;1050:13:53;;1034:12;:29;1026:56;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;11131:182:90;;;;:::o;38653:92::-;38700:7;38722:5;:12;;:18;;;38715:25;;38653:92;:::o;6346:266:35:-;6469:4;6483:12;355:8;6515:30;;6563:6;6571;6579;6546:40;;;;;;;;;;;;;;;;;;;;;;;;;;36:153:-1;66:2;61:3;58:11;36:153;;182:3;176:10;171:3;164:23;98:2;93:3;89:12;82:19;;123:2;118:3;114:12;107:19;;148:2;143:3;139:12;132:19;;36:153;;;274:1;267:3;263:2;259:12;254:3;250:22;246:30;315:4;311:9;305:3;299:10;295:26;356:4;350:3;344:10;340:21;389:7;380;377:20;372:3;365:33;3:399;;;6546:40:35;;;;;;;;;;;;;;;;36:153:-1;66:2;61:3;58:11;36:153;;182:3;176:10;171:3;164:23;98:2;93:3;89:12;82:19;;123:2;118:3;114:12;107:19;;148:2;143:3;139:12;132:19;;36:153;;;274:1;267:3;263:2;259:12;254:3;250:22;246:30;315:4;311:9;305:3;299:10;295:26;356:4;350:3;344:10;340:21;389:7;380;377:20;372:3;365:33;3:399;;;6546:40:35;;;;;;;;;;;;;49:4:-1;39:7;30;26:21;22:32;13:7;6:49;6546:40:35;;;6515:72;;;;;;;;;;;;;36:153:-1;66:2;61:3;58:11;36:153;;182:3;176:10;171:3;164:23;98:2;93:3;89:12;82:19;;123:2;118:3;114:12;107:19;;148:2;143:3;139:12;132:19;;36:153;;;274:1;267:3;263:2;259:12;254:3;250:22;246:30;315:4;311:9;305:3;299:10;295:26;356:4;350:3;344:10;340:21;389:7;380;377:20;372:3;365:33;3:399;;;6515:72:35;;;;;;;;;;;;;;;;;;;;;;;14:1:-1;21;16:31;;;;75:4;69:11;64:16;;144:4;140:9;133:4;115:16;111:27;107:43;104:1;100:51;94:4;87:65;169:16;166:1;159:27;225:16;222:1;215:4;212:1;208:12;193:49;7:242;;16:31;36:4;31:9;;7:242;;6501:86:35;;;;;6600:7;6593:14;;;6346:266;;;;;:::o;12726:264:90:-;12817:4;12829:31;12863:5;:13;;:22;;:29;12886:5;12863:29;;;;;;;;;;;;;;;:39;;:48;12903:7;12863:48;;;;;;;;;;;;;;;12829:82;;12944:16;:14;:16::i;:::-;12924:11;:17;;;:36;:61;;;;;12984:1;12964:11;:17;;;:21;12924:61;12917:68;;;12726:264;;;;:::o;39613:164::-;39669:16;39700:72;39723:19;:23;;;39748:19;:23;;;39700:22;:72::i;:::-;39693:79;;39613:164;:::o;37884:375::-;37953:7;37968:17;37988:102;38048:15;:13;:15::i;:::-;:34;;;:36;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;38048:36:90;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;38048:36:90;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;38048:36:90;;;;;;;;;;;;;;;;37988:48;38034:1;37988:15;:13;:15::i;:::-;:34;;;38023:5;37988:41;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;37988:41:90;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;37988:41:90;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;37988:41:90;;;;;;;;;;;;;;;;:45;;:48;;;;:::i;:::-;:52;;:102;;;;:::i;:::-;37968:122;;38096:19;38118:97;38134:19;:23;;;38165:15;:13;:15::i;:::-;:42;;;:44;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;38165:44:90;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;38165:44:90;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;38165:44:90;;;;;;;;;;;;;;;;38118:8;:97::i;:::-;38096:119;;38228:26;38242:11;38228:9;:13;;:26;;;;:::i;:::-;38221:33;;;;37884:375;;;:::o;20646:468::-;20778:20;:29;20799:7;20778:29;;;;;;;;;;;;;;;:56;;:63;20835:5;20778:63;;;;;;;;;;;;;;;;20734:20;:29;20755:7;20734:29;;;;;;;;;;;;;;;:40;;;:107;;;;;;;;;;;20847:38;20888:46;20919:5;20926:7;20888:30;:46::i;:::-;20847:87;;20999:30;20940:20;:29;20961:7;20940:29;;;;;;;;;;;;;;;:49;;:56;20990:5;20940:56;;;;;;;;;;;;;;;:89;;;;21079:30;21035:20;:29;21056:7;21035:29;;;;;;;;;;;;;;;:40;;;:74;;;;;;;;;;;20646:468;;;:::o;22277:295::-;22382:7;22399:15;22417:48;22450:5;22457:7;22417:32;:48::i;:::-;22399:66;;22471:14;22488:47;22520:5;22527:7;22488:31;:47::i;:::-;22471:64;;22548:19;22560:6;22548:7;:11;;:19;;;;:::i;:::-;22541:26;;;;22277:295;;;;:::o;2608:147:35:-;2681:7;2703:47;2722:11;2735:14;:12;:14::i;:::-;2703:18;:47::i;:::-;2696:54;;2608:147;;;:::o;8098:321:90:-;8188:4;1103:9:4;:7;:9::i;:::-;1095:54;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8233:20:90;;8208:21;:45;;8200:90;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8319:21;8296:20;:44;;;;8351:46;8375:21;8351:46;;;;;;;;;;;;;;;;;;8410:4;8403:11;;8098:321;;;:::o;43564:300::-;43623:16;43647:9;43659:30;:28;:30::i;:::-;43647:42;;43695:20;43732:1;43718:16;;;;;;;;;;;;;;;;;;;;;;29:2:-1;21:6;17:15;117:4;105:10;97:6;88:34;148:4;140:6;136:17;126:27;;0:157;43718:16:90;;;;43695:39;;43745:9;43757:1;43745:13;;43740:104;43764:1;43760;:5;43740:104;;;43798:39;43835:1;43798:36;:39::i;:::-;43789:3;43793:1;43789:6;;;;;;;;;;;;;:48;;;;;;;;;;;43771:8;43777:1;43771;:5;;:8;;;;:::i;:::-;43767:12;;43740:104;;;;43856:3;43849:10;;;;43564:300;:::o;35704:141::-;35780:16;35811:5;:20;;:29;35832:7;35811:29;;;;;;;;;;;;;;;35804:36;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;35704:141;;;:::o;8496:343:35:-;8579:7;8594:16;8616:12;764:9;8651:35;;8704:6;8687:24;;;;;;;;;;;;;;;36:153:-1;66:2;61:3;58:11;36:153;;182:3;176:10;171:3;164:23;98:2;93:3;89:12;82:19;;123:2;118:3;114:12;107:19;;148:2;143:3;139:12;132:19;;36:153;;;274:1;267:3;263:2;259:12;254:3;250:22;246:30;315:4;311:9;305:3;299:10;295:26;356:4;350:3;344:10;340:21;389:7;380;377:20;372:3;365:33;3:399;;;8687:24:35;;;;;;;;;;;49:4:-1;39:7;30;26:21;22:32;13:7;6:49;8687:24:35;;;8651:61;;;;;;;;;;;;;36:153:-1;66:2;61:3;58:11;36:153;;182:3;176:10;171:3;164:23;98:2;93:3;89:12;82:19;;123:2;118:3;114:12;107:19;;148:2;143:3;139:12;132:19;;36:153;;;274:1;267:3;263:2;259:12;254:3;250:22;246:30;315:4;311:9;305:3;299:10;295:26;356:4;350:3;344:10;340:21;389:7;380;377:20;372:3;365:33;3:399;;;8651:61:35;;;;;;;;;;;;;;;;;;;;;;;14:1:-1;21;16:31;;;;75:4;69:11;64:16;;144:4;140:9;133:4;115:16;111:27;107:43;104:1;100:51;94:4;87:65;169:16;166:1;159:27;225:16;222:1;215:4;212:1;208:12;193:49;7:242;;16:31;36:4;31:9;;7:242;;8634:78:35;;;;;;;;8726:7;8718:76;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8807:27;8827:3;8832:1;8807:19;:27::i;:::-;8800:34;;;;8496:343;;;:::o;3856:49:90:-;;;;;;;;;:::o;5390:117::-;5441:7;5450;5459;5468;5491:1;5494;5497;5500;5483:19;;;;;;;;;;;;;;;;;;;;5390:117;;;;:::o;9699:1179::-;9819:4;970:1:53;953:13;;:18;;;;;;;;;;;977:20;1000:13;;977:36;;9841:5:90;:11;;:20;;:29;;;;9871:5;9841:36;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;9841:36:90;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;9841:36:90;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;9841:36:90;;;;;;;;;;;;;;;;9833:67;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;9918:5;9914:1;:9;9906:47;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;9967:29;9983:5;9990;9967:15;:29::i;:::-;9959:68;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;10033:15;10051:13;:11;:13::i;:::-;:33;;;10085:10;10051:45;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;10051:45:90;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;10051:45:90;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;10051:45:90;;;;;;;;;;;;;;;;10033:63;;10160:25;10188:5;10160:33;;10199:24;10226:5;:20;;:29;10247:7;10226:29;;;;;;;;;;;;;;;10199:56;;10266:9;10278:1;10266:13;;10261:133;10285:6;:13;;;;10281:1;:17;10261:133;;;10345:20;:42;;;;10382:5;10369:18;;:6;10376:1;10369:9;;;;;;;;;;;;;;;;;;;;;;;;;:18;;;10345:42;10322:65;;10304:8;10310:1;10304;:5;;:8;;;;:::i;:::-;10300:12;;10261:133;;;;10404:20;10399:216;;10451:34;:46;10486:10;10451:46;;;;;;;;;;;;;;;;;;;;;;;;;:86;;;;10517:20;;10501:6;:13;;;;:36;10451:86;10434:148;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;10590:6;10602:5;10590:18;;39:1:-1;33:3;27:10;23:18;57:10;52:3;45:23;79:10;72:17;;0:93;10590:18:90;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;10399:216;10621:44;10643:5;10650:7;10659:5;10621:21;:44::i;:::-;10671:59;10691:7;10700:5;10707;10714:6;10722:7;10671:19;:59::i;:::-;10736:15;:13;:15::i;:::-;:48;;;10785:7;10794:5;10736:64;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;10736:64:90;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;10736:64:90;;;;10843:5;10811:45;;10834:7;10811:45;;;10850:5;10811:45;;;;;;;;;;;;;;;;;;10869:4;10862:11;;;;;1050:13:53;;1034:12;:29;1026:56;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;9699:1179:90;;;;;;;:::o;23226:140::-;23300:7;23322:5;:12;;:21;;:28;23344:5;23322:28;;;;;;;;;;;;;;;:39;;;23315:46;;23226:140;;;:::o;4481:378:35:-;4589:7;4606:16;4628:12;409:8;4663:24;;4705:5;4712:11;4688:36;;;;;;;;;;;;;;;;;;;;;49:4:-1;39:7;30;26:21;22:32;13:7;6:49;4688:36:35;;;4663:62;;;;;;;;;;;;;36:153:-1;66:2;61:3;58:11;36:153;;182:3;176:10;171:3;164:23;98:2;93:3;89:12;82:19;;123:2;118:3;114:12;107:19;;148:2;143:3;139:12;132:19;;36:153;;;274:1;267:3;263:2;259:12;254:3;250:22;246:30;315:4;311:9;305:3;299:10;295:26;356:4;350:3;344:10;340:21;389:7;380;377:20;372:3;365:33;3:399;;;4663:62:35;;;;;;;;;;;;;;;;;;;;;;;14:1:-1;21;16:31;;;;75:4;69:11;64:16;;144:4;140:9;133:4;115:16;111:27;107:43;104:1;100:51;94:4;87:65;169:16;166:1;159:27;225:16;222:1;215:4;212:1;208:12;193:49;7:242;;16:31;36:4;31:9;;7:242;;4646:79:35;;;;;;;;4739:7;4731:74;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4826:27;4846:3;4851:1;4826:19;:27::i;:::-;4811:43;;;;4481:378;;;;:::o;8581:339:90:-;8660:4;1103:9:4;:7;:9::i;:::-;1095:54;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8696:27:90;8713:9;8696:16;:27::i;:::-;8672:21;:51;;;;;;;;;;;8744:46;8769:20;:18;:20::i;:::-;8744:21;:24;;;;;;;;;;;;;;;;;;;:46;;;;:::i;:::-;8729:123;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8863:35;8888:9;8863:35;;;;;;;;;;;;;;;;;;8911:4;8904:11;;8581:339;;;:::o;7188:288:35:-;7250:7;7265:16;7287:12;635:8;7322:22;;7362:6;7345:24;;;;;;;;;;;;;;;36:153:-1;66:2;61:3;58:11;36:153;;182:3;176:10;171:3;164:23;98:2;93:3;89:12;82:19;;123:2;118:3;114:12;107:19;;148:2;143:3;139:12;132:19;;36:153;;;274:1;267:3;263:2;259:12;254:3;250:22;246:30;315:4;311:9;305:3;299:10;295:26;356:4;350:3;344:10;340:21;389:7;380;377:20;372:3;365:33;3:399;;;7345:24:35;;;;;;;;;;;49:4:-1;39:7;30;26:21;22:32;13:7;6:49;7345:24:35;;;7322:48;;;;;;;;;;;;;36:153:-1;66:2;61:3;58:11;36:153;;182:3;176:10;171:3;164:23;98:2;93:3;89:12;82:19;;123:2;118:3;114:12;107:19;;148:2;143:3;139:12;132:19;;36:153;;;274:1;267:3;263:2;259:12;254:3;250:22;246:30;315:4;311:9;305:3;299:10;295:26;356:4;350:3;344:10;340:21;389:7;380;377:20;372:3;365:33;3:399;;;7322:48:35;;;;;;;;;;;;;;;;;;;;;;;14:1:-1;21;16:31;;;;75:4;69:11;64:16;;144:4;140:9;133:4;115:16;111:27;107:43;104:1;100:51;94:4;87:65;169:16;166:1;159:27;225:16;222:1;215:4;212:1;208:12;193:49;7:242;;16:31;36:4;31:9;;7:242;;7305:65:35;;;;;;;;7384:7;7376:55;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;7444:27;7464:3;7469:1;7444:19;:27::i;:::-;7437:34;;;;7188:288;;;:::o;20022:441:90:-;20094:7;20109:23;20135:5;:20;;:29;20156:7;20135:29;;;;;;;;;;;;;;;20109:55;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;20191:20;;20175:6;:13;:36;20171:104;;;20228:20;:29;20249:7;20228:29;;;;;;;;;;;;;;;:40;;;20221:47;;;;;20171:104;20281:13;20297:1;20281:17;;20309:9;20321:1;20309:13;;20304:137;20328:6;:13;20324:1;:17;20304:137;;;20373:61;20383:50;20414:6;20421:1;20414:9;;;;;;;;;;;;;;20425:7;20383:30;:50::i;:::-;20373:5;:9;;:61;;;;:::i;:::-;20365:69;;20347:8;20353:1;20347;:5;;:8;;;;:::i;:::-;20343:12;;20304:137;;;;20453:5;20446:12;;;;20022:441;;;;:::o;16217:230::-;16372:4;970:1:53;953:13;;:18;;;;;;;;;;;977:20;1000:13;;977:36;;16391:51:90;16405:5;16412;16419:6;16427:7;16436:5;16391:13;:51::i;:::-;16384:58;;1050:13:53;;1034:12;:29;1026:56;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;16217:230:90;;;;;;;;:::o;39250:190::-;39336:23;39361;39401:5;:11;;:20;;:32;;;;:34;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;39401:34:90;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;39401:34:90;;;;;;39:16:-1;36:1;17:17;2:54;39401:34:90;101:4:-1;97:9;90:4;84;80:15;76:31;69:5;65:43;126:6;120:4;113:20;0:138;13:2;8:3;5:11;2:2;;;29:1;26;19:12;2:2;39401:34:90;;;;;;;;;;;;;19:11:-1;14:3;11:20;8:2;;;44:1;41;34:12;8:2;71:11;66:3;62:21;55:28;;123:4;118:3;114:14;159:9;141:16;138:31;135:2;;;182:1;179;172:12;135:2;219:3;213:10;331:9;325:2;311:12;307:21;289:16;285:44;282:59;261:11;247:12;244:29;233:116;230:2;;;362:1;359;352:12;230:2;385:12;380:3;373:25;421:4;416:3;412:14;405:21;;0:433;;39401:34:90;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;80:1;75:3;71:11;64:39;52:2;49:1;45:10;40:15;;8:100;;;12:14;39401:34:90;;;;;;;;;;;;;;;;;;;19:11:-1;14:3;11:20;8:2;;;44:1;41;34:12;8:2;71:11;66:3;62:21;55:28;;123:4;118:3;114:14;159:9;141:16;138:31;135:2;;;182:1;179;172:12;135:2;219:3;213:10;331:9;325:2;311:12;307:21;289:16;285:44;282:59;261:11;247:12;244:29;233:116;230:2;;;362:1;359;352:12;230:2;385:12;380:3;373:25;421:4;416:3;412:14;405:21;;0:433;;39401:34:90;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;80:1;75:3;71:11;64:39;52:2;49:1;45:10;40:15;;8:100;;;12:14;39401:34:90;;;;;;;;;;;39394:41;;;;39250:190;;:::o;1684:137:4:-;1103:9;:7;:9::i;:::-;1095:54;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1782:1;1745:40;;1766:6;;;;;;;;;;;1745:40;;;;;;;;;;;;1812:1;1795:6;;:19;;;;;;;;;;;;;;;;;;1684:137::o;10031:112:35:-;10089:7;10111:27;10125:12;10111:13;:27::i;:::-;10104:34;;10031:112;:::o;2636:25:36:-;;;;;;;;;;;;;:::o;5037:326:35:-;5098:7;5113:16;5135:12;467:8;5170:28;;5224:12;5199:39;;;;;;;;;;;;;;;49:4:-1;39:7;30;26:21;22:32;13:7;6:49;5199:39:35;;;5170:69;;;;;;;;;;;;;36:153:-1;66:2;61:3;58:11;36:153;;182:3;176:10;171:3;164:23;98:2;93:3;89:12;82:19;;123:2;118:3;114:12;107:19;;148:2;143:3;139:12;132:19;;36:153;;;274:1;267:3;263:2;259:12;254:3;250:22;246:30;315:4;311:9;305:3;299:10;295:26;356:4;350:3;344:10;340:21;389:7;380;377:20;372:3;365:33;3:399;;;5170:69:35;;;;;;;;;;;;;;;;;;;;;;;14:1:-1;21;16:31;;;;75:4;69:11;64:16;;144:4;140:9;133:4;115:16;111:27;107:43;104:1;100:51;94:4;87:65;169:16;166:1;159:27;225:16;222:1;215:4;212:1;208:12;193:49;7:242;;16:31;36:4;31:9;;7:242;;5153:86:35;;;;;;;;5253:7;5245:73;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5331:27;5351:3;5356:1;5331:19;:27::i;:::-;5324:34;;;;5037:326;:::o;6741:329::-;6817:7;6832:16;6854:12;583:8;6889:35;;6942:6;6925:24;;;;;;;;;;;;;;;36:153:-1;66:2;61:3;58:11;36:153;;182:3;176:10;171:3;164:23;98:2;93:3;89:12;82:19;;123:2;118:3;114:12;107:19;;148:2;143:3;139:12;132:19;;36:153;;;274:1;267:3;263:2;259:12;254:3;250:22;246:30;315:4;311:9;305:3;299:10;295:26;356:4;350:3;344:10;340:21;389:7;380;377:20;372:3;365:33;3:399;;;6925:24:35;;;;;;;;;;;49:4:-1;39:7;30;26:21;22:32;13:7;6:49;6925:24:35;;;6889:61;;;;;;;;;;;;;36:153:-1;66:2;61:3;58:11;36:153;;182:3;176:10;171:3;164:23;98:2;93:3;89:12;82:19;;123:2;118:3;114:12;107:19;;148:2;143:3;139:12;132:19;;36:153;;;274:1;267:3;263:2;259:12;254:3;250:22;246:30;315:4;311:9;305:3;299:10;295:26;356:4;350:3;344:10;340:21;389:7;380;377:20;372:3;365:33;3:399;;;6889:61:35;;;;;;;;;;;;;;;;;;;;;;;14:1:-1;21;16:31;;;;75:4;69:11;64:16;;144:4;140:9;133:4;115:16;111:27;107:43;104:1;100:51;94:4;87:65;169:16;166:1;159:27;225:16;222:1;215:4;212:1;208:12;193:49;7:242;;16:31;36:4;31:9;;7:242;;6872:78:35;;;;;;;;6964:7;6956:69;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;7038:27;7058:3;7063:1;7038:19;:27::i;:::-;7031:34;;;;6741:329;;;:::o;24569:127:90:-;24636:4;24655:5;:11;;:20;;:29;;;;24685:5;24655:36;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;24655:36:90;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;24655:36:90;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;24655:36:90;;;;;;;;;;;;;;;;24648:43;;24569:127;;;:::o;899:77:4:-;937:7;963:6;;;;;;;;;;;956:13;;899:77;:::o;45897:1300:90:-;46146:7;970:1:53;953:13;;:18;;;;;;;;;;;977:20;1000:13;;977:36;;2132:30:36;;;;;;;;;;;;;;;;49:4:-1;39:7;30;26:21;22:32;13:7;6:49;2132:30:36;;;2122:41;;;;;;2783:10;2736:57;;:8;;;;;;;;;;;:27;;;2764:14;2736:43;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;2736:43:36;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;2736:43:36;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;2736:43:36;;;;;;;;;;;;;;;;:57;;;2728:94;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;46177:1:90;46169:5;:9;46161:61;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;46228:30;;:::i;:::-;46261:56;;;;;;;;46280:5;:20;;:29;46301:7;46280:29;;;;;;;;;;;;;;;46261:56;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;46311:5;46261:56;;;46228:89;;46356:4;:11;;;:18;46338:7;;:14;;:36;;:81;;;;;46404:8;;:15;;46386:7;;:14;;:33;46338:81;:126;;;;;46450:7;;:14;;46431:8;;:15;;:33;46338:126;46323:190;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;46713:9;46725:4;:11;;;:18;46713:30;;46708:393;46749:1;46745;:5;46708:393;;;46796:237;46829:196;46856:7;46875:4;:11;;;46887:8;46893:1;46887;:5;;:8;;;;:::i;:::-;46875:21;;;;;;;;;;;;;;46908:4;:19;;;46939:7;;46947:8;46953:1;46947;:5;;:8;;;;:::i;:::-;46939:17;;;;;;;;;;;;;;;46968:8;;46977;46983:1;46977;:5;;:8;;;;:::i;:::-;46968:18;;;;;;;;;;;;;;;46998:7;;47006:8;47012:1;47006;:5;;:8;;;;:::i;:::-;46998:17;;;;;;;;;;;;;46829:15;:196::i;:::-;46796:4;:19;;;:23;;:237;;;;:::i;:::-;46774:4;:19;;:259;;;;;47068:1;47045:4;:19;;;:24;47041:54;;;47081:5;;47041:54;46756:8;46762:1;46756;:5;;:8;;;;:::i;:::-;46752:12;;46708:393;;;;47137:1;47114:4;:19;;;:24;47106:68;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;47187:5;47180:12;;;1019:1:53;1050:13;;1034:12;:29;1026:56;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;45897:1300:90;;;;;;;;;;;:::o;1250:92:4:-;1290:4;1329:6;;;;;;;;;;;1313:22;;:12;:10;:12::i;:::-;:22;;;1306:29;;1250:92;:::o;40044:3382:90:-;40173:16;40328:21;40352:95;:76;40390:37;40411:15;:13;:15::i;:::-;40390:20;:37::i;:::-;40352:21;:37;;;;;;;;;;;;;;;;;;;:76;;;;:::i;:::-;:93;:95::i;:::-;40328:119;;40595:25;40623:5;:11;;:20;;:43;;;;40674:13;40695:22;40623:100;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;40623:100:90;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;40623:100:90;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;40623:100:90;;;;;;;;;;;;;;;;40595:128;;40729:31;40763:5;:11;;:20;;:26;;;;40790:17;40763:45;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;40763:45:90;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;40763:45:90;;;;;;39:16:-1;36:1;17:17;2:54;40763:45:90;101:4:-1;97:9;90:4;84;80:15;76:31;69:5;65:43;126:6;120:4;113:20;0:138;13:2;8:3;5:11;2:2;;;29:1;26;19:12;2:2;40763:45:90;;;;;;;;;;;;;19:11:-1;14:3;11:20;8:2;;;44:1;41;34:12;8:2;71:11;66:3;62:21;55:28;;123:4;118:3;114:14;159:9;141:16;138:31;135:2;;;182:1;179;172:12;135:2;219:3;213:10;331:9;325:2;311:12;307:21;289:16;285:44;282:59;261:11;247:12;244:29;233:116;230:2;;;362:1;359;352:12;230:2;385:12;380:3;373:25;421:4;416:3;412:14;405:21;;0:433;;40763:45:90;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;80:1;75:3;71:11;64:39;52:2;49:1;45:10;40:15;;8:100;;;12:14;40763:45:90;;;;;;;;;;;40729:79;;40814:27;40844:15;:13;:15::i;:::-;:35;;;40880:14;40844:51;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;80:1;75:3;71:11;64:39;52:2;49:1;45:10;40:15;;8:100;;;12:14;40844:51:90;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;40844:51:90;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;40844:51:90;;;;;;39:16:-1;36:1;17:17;2:54;40844:51:90;101:4:-1;97:9;90:4;84;80:15;76:31;69:5;65:43;126:6;120:4;113:20;0:138;13:2;8:3;5:11;2:2;;;29:1;26;19:12;2:2;40844:51:90;;;;;;;;;;;;;19:11:-1;14:3;11:20;8:2;;;44:1;41;34:12;8:2;71:11;66:3;62:21;55:28;;123:4;118:3;114:14;159:9;141:16;138:31;135:2;;;182:1;179;172:12;135:2;219:3;213:10;331:9;325:2;311:12;307:21;289:16;285:44;282:59;261:11;247:12;244:29;233:116;230:2;;;362:1;359;352:12;230:2;385:12;380:3;373:25;421:4;416:3;412:14;405:21;;0:433;;40844:51:90;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;80:1;75:3;71:11;64:39;52:2;49:1;45:10;40:15;;8:100;;;12:14;40844:51:90;;;;;;;;;;;40814:81;;40987:34;41038:14;:21;41024:36;;;;;;;;;;;;;;;;;;;;;;29:2:-1;21:6;17:15;117:4;105:10;97:6;88:34;148:4;140:6;136:17;126:27;;0:157;41024:36:90;;;;40987:73;;41066:30;41099:1;41066:34;;41107:21;41145:14;:21;41131:36;;;;;;;;;;;;;;;;;;;;;;29:2:-1;21:6;17:15;117:4;105:10;97:6;88:34;148:4;140:6;136:17;126:27;;0:157;41131:36:90;;;;41107:60;;41173:48;41258:14;:21;41224:61;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;41173:112;;41296:9;41308:1;41296:13;;41291:205;41315:14;:21;41311:1;:25;41291:205;;;41370:1;41360:4;41365:1;41360:7;;;;;;;;;;;;;:11;;;;;41403:86;41433:5;:11;;:20;;:29;;;;41463:14;41478:1;41463:17;;;;;;;;;;;;;;41433:48;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;41433:48:90;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;41433:48:90;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;41433:48:90;;;;;;;;;;;;;;;;41403:20;:86::i;:::-;41379:18;41398:1;41379:21;;;;;;;;;;;;;:110;;;;41342:8;41348:1;41342;:5;;:8;;;;:::i;:::-;41338:12;;41291:205;;;;41559:1054;41591:22;41566;:47;:76;;;;;41641:1;41617:14;:21;:25;41566:76;41559:1054;;;41652:18;41673:4;41678:1;41673:7;;;;;;;;;;;;;;41652:28;;41788:1;41745:39;:18;41764:10;41745:30;;;;;;;;;;;;;;:37;:39::i;:::-;:44;41741:55;;;41791:5;;;41741:55;41886:17;41904:10;41886:29;;;;;;;;;;;;;;41860:10;41871;41860:22;;;;;;;;;;;;;;:55;41856:701;;41960:19;41977:1;41960:16;:19::i;:::-;41927:18;41946:10;41927:30;;;;;;;;;;;;;:52;;;;41856:701;;;42094:36;42128:1;42094:17;42112:10;42094:29;;;;;;;;;;;;;;:33;;:36;;;;:::i;:::-;42062:17;42080:10;42062:29;;;;;;;;;;;;;:68;;;;;42165:29;42192:1;42165:22;:26;;:29;;;;:::i;:::-;42140:54;;42380:168;42489:58;42510:36;42544:1;42510:17;42528:10;42510:29;;;;;;;;;;;;;;:33;;:36;;;;:::i;:::-;42489:20;:58::i;:::-;42380:90;42412:5;:11;;:20;;:29;;;;42442:14;42457:10;42442:26;;;;;;;;;;;;;;42412:57;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;42412:57:90;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;42412:57:90;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;42412:57:90;;;;;;;;;;;;;;;;42380:31;:90::i;:::-;:108;;:168;;;;:::i;:::-;42347:18;42366:10;42347:30;;;;;;;;;;;;;:201;;;;41856:701;42564:42;42581:4;42587:18;42564:16;:42::i;:::-;41559:1054;;;;42652:22;42626;:48;;42618:90;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;42777:34;42828:22;42814:37;;;;;;;;;;;;;;;;;;;;;;29:2:-1;21:6;17:15;117:4;105:10;97:6;88:34;148:4;140:6;136:17;126:27;;0:157;42814:37:90;;;;42777:74;;42882:1;42857:26;;42894:9;42906:1;42894:13;;42889:503;42913:14;:21;42909:1;:25;42889:503;;;43013:39;43055:15;:13;:15::i;:::-;:37;;;43102:14;43117:1;43102:17;;;;;;;;;;;;;;43129;43147:1;43129:20;;;;;;;;;;;;;;43055:102;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;43055:102:90;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;43055:102:90;;;;;;39:16:-1;36:1;17:17;2:54;43055:102:90;101:4:-1;97:9;90:4;84;80:15;76:31;69:5;65:43;126:6;120:4;113:20;0:138;13:2;8:3;5:11;2:2;;;29:1;26;19:12;2:2;43055:102:90;;;;;;;;;;;;;19:11:-1;14:3;11:20;8:2;;;44:1;41;34:12;8:2;71:11;66:3;62:21;55:28;;123:4;118:3;114:14;159:9;141:16;138:31;135:2;;;182:1;179;172:12;135:2;219:3;213:10;331:9;325:2;311:12;307:21;289:16;285:44;282:59;261:11;247:12;244:29;233:116;230:2;;;362:1;359;352:12;230:2;385:12;380:3;373:25;421:4;416:3;412:14;405:21;;0:433;;43055:102:90;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;80:1;75:3;71:11;64:39;52:2;49:1;45:10;40:15;;8:100;;;12:14;43055:102:90;;;;;;;;;;;43013:144;;43170:9;43182:1;43170:13;;43165:221;43189:22;:29;43185:1;:33;43165:221;;;43288:22;43311:1;43288:25;;;;;;;;;;;;;;43244:17;43262:22;43244:41;;;;;;;;;;;;;:69;;;;;;;;;;;43348:29;43375:1;43348:22;:26;;:29;;;;:::i;:::-;43323:54;;43224:8;43230:1;43224;:5;;:8;;;;:::i;:::-;43220:12;;43165:221;;;;42889:503;42940:8;42946:1;42940;:5;;:8;;;;:::i;:::-;42936:12;;42889:503;;;;43404:17;43397:24;;;;;;;;;;;40044:3382;;;;:::o;23881:129::-;23949:7;23971:5;:12;;:21;;:28;23993:5;23971:28;;;;;;;;;;;;;;;:34;;;23964:41;;23881:129;;;:::o;24186:131::-;24255:7;24277:5;:13;;:22;;:29;24300:5;24277:29;;;;;;;;;;;;;;;:35;;;24270:42;;24186:131;;;:::o;38397:116::-;38443:7;38465:43;38488:5;:13;;:19;;;38465:5;:12;;:18;;;:22;;:43;;;;:::i;:::-;38458:50;;38397:116;:::o;2856:109:35:-;2903:7;2925:35;2947:12;2925:21;:35::i;:::-;2918:42;;2856:109;:::o;5579:321::-;5652:7;5667:16;5689:12;467:8;5724:28;;5770:11;5753:29;;;;;;;;;;;;;;;49:4:-1;39:7;30;26:21;22:32;13:7;6:49;5753:29:35;;;5724:59;;;;;;;;;;;;;36:153:-1;66:2;61:3;58:11;36:153;;182:3;176:10;171:3;164:23;98:2;93:3;89:12;82:19;;123:2;118:3;114:12;107:19;;148:2;143:3;139:12;132:19;;36:153;;;274:1;267:3;263:2;259:12;254:3;250:22;246:30;315:4;311:9;305:3;299:10;295:26;356:4;350:3;344:10;340:21;389:7;380;377:20;372:3;365:33;3:399;;;5724:59:35;;;;;;;;;;;;;;;;;;;;;;;14:1:-1;21;16:31;;;;75:4;69:11;64:16;;144:4;140:9;133:4;115:16;111:27;107:43;104:1;100:51;94:4;87:65;169:16;166:1;159:27;225:16;222:1;215:4;212:1;208:12;193:49;7:242;;16:31;36:4;31:9;;7:242;;5707:76:35;;;;;;;;5797:7;5789:66;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5868:27;5888:3;5893:1;5868:19;:27::i;:::-;5861:34;;;;5579:321;;;:::o;21371:190:90:-;21478:7;21502:5;:13;;:22;;:29;21525:5;21502:29;;;;;;;;;;;;;;;:39;;:48;21542:7;21502:48;;;;;;;;;;;;;;;:54;;;21495:61;;21371:190;;;;:::o;13676:878::-;13832:4;970:1:53;953:13;;:18;;;;;;;;;;;977:20;1000:13;;977:36;;13869:1:90;13852:19;;:5;:19;;;;13844:50;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;13900:15;13918:13;:11;:13::i;:::-;:33;;;13952:10;13918:45;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;13918:45:90;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;13918:45:90;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;13918:45:90;;;;;;;;;;;;;;;;13900:63;;13981:5;13977:1;:9;13969:47;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;14046:48;14079:5;14086:7;14046:32;:48::i;:::-;14037:5;:57;;14022:124;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;14152:44;14174:5;14181:7;14190:5;14152:21;:44::i;:::-;14202:59;14222:7;14231:5;14238;14245:6;14253:7;14202:19;:59::i;:::-;14267:15;:13;:15::i;:::-;:48;;;14316:7;14325:5;14267:64;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;14267:64:90;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;14267:64:90;;;;14391:1;14341:46;14372:5;14379:7;14341:30;:46::i;:::-;:51;14337:130;;;14402:58;14416:5;:20;;:29;14437:7;14416:29;;;;;;;;;;;;;;;14447:5;14454;14402:13;:58::i;:::-;14337:130;14519:5;14477:55;;14510:7;14477:55;;;14526:5;14477:55;;;;;;;;;;;;;;;;;;14545:4;14538:11;;;1050:13:53;;1034:12;:29;1026:56;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;13676:878:90;;;;;;;;:::o;30624:306::-;2563:30:36;;;;;;;;;;;;;;;;49:4:-1;39:7;30;26:21;22:32;13:7;6:49;2563:30:36;;;2553:41;;;;;;2783:10;2736:57;;:8;;;;;;;;;;;:27;;;2764:14;2736:43;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;2736:43:36;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;2736:43:36;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;2736:43:36;;;;;;;;;;;;;;;;:57;;;2728:94;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;30771:13:90;30787:28;30809:5;30787:21;:28::i;:::-;30771:44;;30821:5;:11;;:20;;:27;;;;30849:5;30856;30863:6;30871:7;30821:58;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;30821:58:90;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;30821:58:90;;;;30919:5;30890:35;;;;;;;;;;;;2828:1:36;30624:306:90;;;;:::o;22837:193::-;22949:7;22973:5;:12;;:21;;:28;22995:5;22973:28;;;;;;;;;;;;;;;:43;;:52;23017:7;22973:52;;;;;;;;;;;;;;;;22966:59;;22837:193;;;;:::o;38913:127::-;38974:16;39005:5;:11;;:20;;:28;;;;:30;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;39005:30:90;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;39005:30:90;;;;;;39:16:-1;36:1;17:17;2:54;39005:30:90;101:4:-1;97:9;90:4;84;80:15;76:31;69:5;65:43;126:6;120:4;113:20;0:138;13:2;8:3;5:11;2:2;;;29:1;26;19:12;2:2;39005:30:90;;;;;;;;;;;;;19:11:-1;14:3;11:20;8:2;;;44:1;41;34:12;8:2;71:11;66:3;62:21;55:28;;123:4;118:3;114:14;159:9;141:16;138:31;135:2;;;182:1;179;172:12;135:2;219:3;213:10;331:9;325:2;311:12;307:21;289:16;285:44;282:59;261:11;247:12;244:29;233:116;230:2;;;362:1;359;352:12;230:2;385:12;380:3;373:25;421:4;416:3;412:14;405:21;;0:433;;39005:30:90;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;80:1;75:3;71:11;64:39;52:2;49:1;45:10;40:15;;8:100;;;12:14;39005:30:90;;;;;;;;;;;38998:37;;38913:127;:::o;30108:203::-;2563:30:36;;;;;;;;;;;;;;;;49:4:-1;39:7;30;26:21;22:32;13:7;6:49;2563:30:36;;;2553:41;;;;;;2783:10;2736:57;;:8;;;;;;;;;;;:27;;;2764:14;2736:43;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;2736:43:36;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;2736:43:36;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;2736:43:36;;;;;;;;;;;;;;;;:57;;;2728:94;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;30224:5:90;:11;;:20;;:27;;;;30252:5;30224:34;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;30224:34:90;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;30224:34:90;;;;30300:5;30269:37;;;;;;;;;;;;30108:203;;:::o;3185:230:36:-;1103:9:4;:7;:9::i;:::-;1095:54;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3289:1:36;3262:29;;:15;:29;;;;3254:74;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3355:15;3334:8;;:37;;;;;;;;;;;;;;;;;;3394:15;3382:28;;;;;;;;;;;;3185:230;:::o;3705:35:90:-;;;;:::o;9030:116::-;9089:7;9111:30;:21;:28;;;;;;;;;;;;;;;;;;:30::i;:::-;9104:37;;9030:116;:::o;11647:140::-;11738:4;970:1:53;953:13;;:18;;;;;;;;;;;977:20;1000:13;;977:36;;11757:25:90;11767:5;11774:7;11757:9;:25::i;:::-;11750:32;;1050:13:53;;1034:12;:29;1026:56;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;11647:140:90;;;;;:::o;4022:66::-;;;;;;;;;;;;;;;;;;;;;;:::o;4093:59::-;;;;;;;;;;;;;;;;;;;;;;:::o;21816:208::-;21922:7;21946:73;21959:5;21966;:12;;:21;;:28;21988:5;21966:28;;;;;;;;;;;;;;;:43;;:52;22010:7;21966:52;;;;;;;;;;;;;;;;21946:12;:73::i;:::-;21939:80;;21816:208;;;;:::o;44225:720::-;44296:15;44314:13;:11;:13::i;:::-;:33;;;44348:10;44314:45;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;44314:45:90;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;44314:45:90;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;44314:45:90;;;;;;;;;;;;;;;;44296:63;;44365:22;44390:15;:13;:15::i;:::-;44365:40;;44427:10;:22;;;44450:7;44427:31;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;44427:31:90;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;44427:31:90;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;44427:31:90;;;;;;;;;;;;;;;;44426:32;44411:120;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;44553:10;:27;;;44581:7;44553:36;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;44553:36:90;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;44553:36:90;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;44553:36:90;;;;;;;;;;;;;;;;44552:37;44537:131;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;44680:4;44675:149;;44751:20;;44711:5;:20;;:29;44732:7;44711:29;;;;;;;;;;;;;;;:36;;;;:60;;44694:123;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;44675:149;44876:4;44830:34;:43;44865:7;44830:43;;;;;;;;;;;;;;;;:50;;;;;;;;;;;;;;;;;;44926:7;44891:49;;;44935:4;44891:49;;;;;;;;;;;;;;;;;;;;;;44225:720;;;:::o;23538:169::-;23605:7;23627:75;23667:5;:12;;:21;;:28;23689:5;23667:28;;;;;;;;;;;;;;;:34;;;23627:5;:13;;:22;;:29;23650:5;23627:29;;;;;;;;;;;;;;;:35;;;:39;;:75;;;;:::i;:::-;23620:82;;23538:169;;;:::o;2178:266:35:-;2223:7;2238:16;2260:12;518:8;2295:21;;2317:18;;;;;;49:4:-1;39:7;30;26:21;22:32;13:7;6:49;2317:18:35;;;2295:41;;;;;;;;;;;;;36:153:-1;66:2;61:3;58:11;36:153;;182:3;176:10;171:3;164:23;98:2;93:3;89:12;82:19;;123:2;118:3;114:12;107:19;;148:2;143:3;139:12;132:19;;36:153;;;274:1;267:3;263:2;259:12;254:3;250:22;246:30;315:4;311:9;305:3;299:10;295:26;356:4;350:3;344:10;340:21;389:7;380;377:20;372:3;365:33;3:399;;;2295:41:35;;;;;;;;;;;;;;;;;;;;;;;14:1:-1;21;16:31;;;;75:4;69:11;64:16;;144:4;140:9;133:4;115:16;111:27;107:43;104:1;100:51;94:4;87:65;169:16;166:1;159:27;225:16;222:1;215:4;212:1;208:12;193:49;7:242;;16:31;36:4;31:9;;7:242;;2278:58:35;;;;;;;;2350:7;2342:57;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2412:27;2432:3;2437:1;2412:19;:27::i;:::-;2405:34;;;;2178:266;:::o;15186:346:90:-;15317:4;970:1:53;953:13;;:18;;;;;;;;;;;977:20;1000:13;;977:36;;15331:15:90;15349:13;:11;:13::i;:::-;:33;;;15383:10;15349:45;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;15349:45:90;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;15349:45:90;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;15349:45:90;;;;;;;;;;;;;;;;15331:63;;15400:13;15416:47;15448:5;15455:7;15416:31;:47::i;:::-;15400:63;;15476:51;15490:5;15497;15504:6;15512:7;15521:5;15476:13;:51::i;:::-;15469:58;;;;1050:13:53;;1034:12;:29;1026:56;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;15186:346:90;;;;;;;:::o;9752:147:35:-;9817:7;9839:55;9892:1;9839:48;9885:1;9839:41;9878:1;9839:34;9861:11;9839:21;:34::i;:::-;:38;;:41;;;;:::i;:::-;:45;;:48;;;;:::i;:::-;:52;;:55;;;;:::i;:::-;9832:62;;9752:147;;;:::o;36932:447:90:-;37008:4;37020:26;37049:39;37082:5;37049:28;37071:5;37049:21;:28::i;:::-;:32;;:39;;;;:::i;:::-;37020:68;;37094:12;37109:115;37139:79;37148:19;:23;;;37173:15;:13;:15::i;:::-;:42;;;:44;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;37173:44:90;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;37173:44:90;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;37173:44:90;;;;;;;;;;;;;;;;37139:8;:79::i;:::-;37109:18;:22;;:115;;;;:::i;:::-;37094:130;;37230:13;37246:102;37306:15;:13;:15::i;:::-;:34;;;:36;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;37306:36:90;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;37306:36:90;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;37306:36:90;;;;;;;;;;;;;;;;37246:48;37292:1;37246:15;:13;:15::i;:::-;:34;;;37281:5;37246:41;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;37246:41:90;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;37246:41:90;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;37246:41:90;;;;;;;;;;;;;;;;:45;;:48;;;;:::i;:::-;:52;;:102;;;;:::i;:::-;37230:118;;37369:5;37361:4;:13;;37354:20;;;;;36932:447;;;;:::o;1297:763:35:-;1491:7;1500;1539:1;1523:12;:17;;:38;;;;;1560:1;1544:12;:17;;1523:38;1515:72;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1593:23;1622:25;1653:12;1671:16;295:8;1710:23;;1758:10;1770:12;1784:10;1796:12;1810:8;1820:9;1741:89;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;49:4:-1;39:7;30;26:21;22:32;13:7;6:49;1741:89:35;;;1710:126;;;;;;;;;;;;;36:153:-1;66:2;61:3;58:11;36:153;;182:3;176:10;171:3;164:23;98:2;93:3;89:12;82:19;;123:2;118:3;114:12;107:19;;148:2;143:3;139:12;132:19;;36:153;;;274:1;267:3;263:2;259:12;254:3;250:22;246:30;315:4;311:9;305:3;299:10;295:26;356:4;350:3;344:10;340:21;389:7;380;377:20;372:3;365:33;3:399;;;1710:126:35;;;;;;;;;;;;;;;;;;;;;;;14:1:-1;21;16:31;;;;75:4;69:11;64:16;;144:4;140:9;133:4;115:16;111:27;107:43;104:1;100:51;94:4;87:65;169:16;166:1;159:27;225:16;222:1;215:4;212:1;208:12;193:49;7:242;;16:31;36:4;31:9;;7:242;;1693:143:35;;;;;;;;1850:7;1842:59;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1925:27;1945:3;1950:1;1925:19;:27::i;:::-;1907:45;;1978:28;1998:3;2003:2;1978:19;:28::i;:::-;1958:48;;2020:15;2037:17;2012:43;;;;;;;;1297:763;;;;;;;;;:::o;25236:995:90:-;25375:7;25390:22;25415:15;:13;:15::i;:::-;25390:40;;25536:10;:45;;;25582:5;25536:52;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;25536:52:90;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;25536:52:90;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;25536:52:90;;;;;;;;;;;;;;;;25535:53;:80;;;;25614:1;25592:5;:12;;:18;;;:23;;25535:80;25531:109;;;25632:1;25625:8;;;;;25531:109;25646:39;;:::i;:::-;25688:102;25724:5;:12;;:21;;:28;25746:5;25724:28;;;;;;;;;;;;;;;:34;;;25766:5;:12;;:18;;;25688:28;:102::i;:::-;25646:144;;25796:33;;:::i;:::-;25832:74;25856:10;:35;;;25892:7;;25856:44;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;30:3:-1;22:6;14;1:33;99:1;93:3;85:6;81:16;74:27;137:4;133:9;126:4;121:3;117:14;113:30;106:37;;169:3;161:6;157:16;147:26;;25856:44:90;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;25856:44:90;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;25856:44:90;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;25856:44:90;;;;;;;;;;;;;;;;25832:16;:74::i;:::-;25796:110;;25912:46;;:::i;:::-;25961:83;25985:10;:46;;;26032:5;25985:53;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;25985:53:90;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;25985:53:90;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;25985:53:90;;;;;;;;;;;;;;;;25961:16;:83::i;:::-;25912:132;;26063:163;:142;26186:18;26063:104;26161:5;26063:79;26130:11;26063:48;26093:17;26063:29;:48::i;:::-;:66;;:79;;;;:::i;:::-;:97;;:104;;;;:::i;:::-;:122;;:142;;;;:::i;:::-;:161;:163::i;:::-;26050:176;;;;;;25236:995;;;;;;;:::o;1970:107:4:-;1103:9;:7;:9::i;:::-;1095:54;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2042:28;2061:8;2042:18;:28::i;:::-;1970:107;:::o;6992:502:90:-;7076:4;1103:9:4;:7;:9::i;:::-;1095:54;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;7100:3:90;7096:1;:7;7088:63;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;7172:3;7165;:10;;7157:82;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;7267:19;:23;;;7260:3;:30;;:64;;;;7301:19;:23;;;7294:3;:30;;7260:64;7245:127;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;7400:29;;;;;;;;7420:3;7400:29;;;;7425:3;7400:29;;;7378:19;:51;;;;;;;;;;;;;;;;;;;7440:32;7463:3;7468;7440:32;;;;;;;;;;;;;;;;;;;;;;;;7485:4;7478:11;;6992:502;;;;:::o;6042:474::-;283:11:24;;;;;;;;;;;282:12;274:53;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;347:4;333:11;;:18;;;;;;;;;;;;;;;;;;6265:30:90;6284:10;6265:18;:30::i;:::-;6301:28;6313:15;6301:11;:28::i;:::-;6335:70;6358:22;6382;6335;:70::i;:::-;;6411:46;6435:21;6411:23;:46::i;:::-;;6463:48;6488:22;6463:24;:48::i;:::-;;6042:474;;;;;:::o;3585:46::-;;;;;;;;;;;;;;:::o;7731:143::-;7788:7;7797;7820:19;:23;;;7845:19;:23;;;7812:57;;;;7731:143;;:::o;7767:322:35:-;7838:7;7853:16;7875:12;698:9;7910:33;;7961:11;7944:29;;;;;;;;;;;;;;;49:4:-1;39:7;30;26:21;22:32;13:7;6:49;7944:29:35;;;7910:64;;;;;;;;;;;;;36:153:-1;66:2;61:3;58:11;36:153;;182:3;176:10;171:3;164:23;98:2;93:3;89:12;82:19;;123:2;118:3;114:12;107:19;;148:2;143:3;139:12;132:19;;36:153;;;274:1;267:3;263:2;259:12;254:3;250:22;246:30;315:4;311:9;305:3;299:10;295:26;356:4;350:3;344:10;340:21;389:7;380;377:20;372:3;365:33;3:399;;;7910:64:35;;;;;;;;;;;;;;;;;;;;;;;14:1:-1;21;16:31;;;;75:4;69:11;64:16;;144:4;140:9;133:4;115:16;111:27;107:43;104:1;100:51;94:4;87:65;169:16;166:1;159:27;225:16;222:1;215:4;212:1;208:12;193:49;7:242;;16:31;36:4;31:9;;7:242;;7893:81:35;;;;;;;;7988:7;7980:64;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8057:27;8077:3;8082:1;8057:19;:27::i;:::-;8050:34;;;;7767:322;;;:::o;8999:150::-;9083:7;9113:30;9133:2;9137:5;9113:19;:30::i;:::-;9105:39;;9098:46;;8999:150;;;;:::o;27340:522:90:-;27461:5;:11;;:20;;:29;;;;27491:5;27461:36;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;27461:36:90;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;27461:36:90;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;27461:36:90;;;;;;;;;;;;;;;;27457:200;;;27507:20;27530:47;27571:5;27530;:11;;:20;;:29;;;;27560:5;27530:36;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;27530:36:90;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;27530:36:90;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;27530:36:90;;;;;;;;;;;;;;;;:40;;:47;;;;:::i;:::-;27507:70;;27585:5;:11;;:20;;:27;;;;27613:5;27620:12;27634:6;27642:7;27585:65;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;27585:65:90;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;27585:65:90;;;;27457:200;;27700:45;27739:5;27700;:12;;:21;;:28;27722:5;27700:28;;;;;;;;;;;;;;;:34;;;:38;;:45;;;;:::i;:::-;27663:5;:12;;:21;;:28;27685:5;27663:28;;;;;;;;;;;;;;;:34;;:82;;;;27772:29;27795:5;27772;:12;;:18;;;:22;;:29;;;;:::i;:::-;27751:5;:12;;:18;;:50;;;;27844:5;27812:45;;;27851:5;27812:45;;;;;;;;;;;;;;;;;;27340:522;;;;:::o;3419:135:36:-;3465:9;3499:8;;;;;;;;;;;:27;;;1093:28;;;;;;;;;;;;;;;;49:4:-1;39:7;30;26:21;22:32;13:7;6:49;1093:28:36;;;1083:39;;;;;;3499:49;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;3499:49:36;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;3499:49:36;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;3499:49:36;;;;;;;;;;;;;;;;3482:67;;3419:135;:::o;11791:544:90:-;11860:4;11872:31;11906:5;:13;;:22;;:29;11929:5;11906:29;;;;;;;;;;;;;;;:39;;:48;11946:7;11906:48;;;;;;;;;;;;;;;11872:82;;11988:16;:14;:16::i;:::-;11968:11;:17;;;:36;11960:78;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;12044:13;12060:11;:17;;;12044:33;;12099:1;12091:5;:9;12083:47;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;12136:44;12158:5;12165:7;12174:5;12136:21;:44::i;:::-;12186:13;12202:43;12223:5;12230:7;12239:5;12202:20;:43::i;:::-;12186:59;;12293:5;12256:57;;12284:7;12256:57;;;12300:5;12307;12256:57;;;;;;;;;;;;;;;;;;;;;;;;12326:4;12319:11;;;;;11791:544;;;;:::o;4606:144:36:-;4654:11;4692:8;;;;;;;;;;;:27;;;2132:30;;;;;;;;;;;;;;;;49:4:-1;39:7;30;26:21;22:32;13:7;6:49;2132:30:36;;;2122:41;;;;;;4692:52;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;4692:52:36;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;4692:52:36;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;4692:52:36;;;;;;;;;;;;;;;;4673:72;;4606:144;:::o;5332:143::-;5380:11;5418:8;;;;;;;;;;;:27;;;2563:30;;;;;;;;;;;;;;;;49:4:-1;39:7;30;26:21;22:32;13:7;6:49;2563:30:36;;;2553:41;;;;;;5418:51;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;5418:51:36;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;5418:51:36;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;5418:51:36;;;;;;;;;;;;;;;;5399:71;;5332:143;:::o;834:176:3:-;892:7;911:9;927:1;923;:5;911:17;;951:1;946;:6;;938:46;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1002:1;995:8;;;834:176;;;;:::o;2159:459::-;2217:7;2463:1;2458;:6;2454:45;;;2487:1;2480:8;;;;2454:45;2509:9;2525:1;2521;:5;2509:17;;2553:1;2548;2544;:5;;;;;;:10;2536:56;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2610:1;2603:8;;;2159:459;;;;;:::o;358:104:2:-;416:7;446:1;442;:5;:13;;454:1;442:13;;;450:1;442:13;435:20;;358:104;;;;:::o;3073:130:3:-;3131:7;3157:39;3161:1;3164;3157:39;;;;;;;;;;;;;;;;;:3;:39::i;:::-;3150:46;;3073:130;;;;:::o;3177:379:35:-;3280:7;3388:19;3424:9;3410:11;:23;;;;;;3388:45;;3470:1;3457:9;3443:11;:23;;;;;;:28;3439:113;;;3488:11;3481:18;;;;;3439:113;3527:18;3543:1;3527:11;:15;;:18;;;;:::i;:::-;3520:25;;;3177:379;;;;;:::o;9309:255::-;9393:7;9429:13;9439:2;9429:5;:9;;:13;;;;:::i;:::-;9416:2;:9;:26;;9408:59;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;9473:9;9535:2;9528:5;9524:14;9520:2;9516:23;9510:30;9505:35;;9558:1;9551:8;;;9309:255;;;;:::o;31177:482:90:-;31269:28;31300:5;:13;;31269:44;;31335:24;31353:5;31335:7;:13;;;:17;;:24;;;;:::i;:::-;31319:7;:13;;:40;;;;31366:38;31407:7;:16;;:23;31424:5;31407:23;;;;;;;;;;;;;;;31366:64;;31457:29;31480:5;31457:12;:18;;;:22;;:29;;;;:::i;:::-;31436:12;:18;;:50;;;;31493:31;31527:12;:22;;:31;31550:7;31527:31;;;;;;;;;;;;;;;31493:65;;31584:28;31606:5;31584:11;:17;;;:21;;:28;;;;:::i;:::-;31564:11;:17;;:48;;;;31638:16;:14;:16::i;:::-;31618:11;:17;;:36;;;;31177:482;;;;;;:::o;28412:412::-;28559:20;28582:47;28623:5;28582;:11;;:20;;:29;;;;28612:5;28582:36;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;28582:36:90;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;28582:36:90;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;28582:36:90;;;;;;;;;;;;;;;;:40;;:47;;;;:::i;:::-;28559:70;;28635:5;:11;;:20;;:27;;;;28663:5;28670:12;28684:6;28692:7;28635:65;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;28635:65:90;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;28635:65:90;;;;28711:34;:43;28746:7;28711:43;;;;;;;;;;;;;;;;;;;;;;;;;28707:113;;;28764:49;28798:7;28807:5;28764:33;:49::i;:::-;28707:113;28412:412;;;;;;:::o;1552:94:20:-;1600:15;;:::i;:::-;1630:11;;;;;;;;1639:1;1630:11;;;1623:18;;1552:94;;;:::o;1230:97::-;1271:15;;:::i;:::-;1301:21;;;;;;;;1046:25;1301:21;;;1294:28;;1230:97;:::o;9849:114::-;9922:4;9951:1;:7;;;9941:1;:7;;;:17;9934:24;;9849:114;;;;:::o;16451:928:90:-;16594:4;16675:1;16658:19;;:5;:19;;;;16650:50;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;16706:15;16724:13;:11;:13::i;:::-;:33;;;16758:10;16724:45;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;16724:45:90;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;16724:45:90;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;16724:45:90;;;;;;;;;;;;;;;;16706:63;;16787:5;16783:1;:9;16775:47;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;16852;16884:5;16891:7;16852:31;:47::i;:::-;16843:5;:56;;16828:122;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;16956:13;16972:43;16993:5;17000:7;17009:5;16972:20;:43::i;:::-;16956:59;;17021;17041:7;17050:5;17057;17064:6;17072:7;17021:19;:59::i;:::-;17086:15;:13;:15::i;:::-;:48;;;17135:7;17144:5;17086:64;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;17086:64:90;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;17086:64:90;;;;17210:1;17160:46;17191:5;17198:7;17160:30;:46::i;:::-;:51;17156:130;;;17221:58;17235:5;:20;;:29;17256:7;17235:29;;;;;;;;;;;;;;;17266:5;17273;17221:13;:58::i;:::-;17156:130;17337:5;17296:61;;17328:7;17296:61;;;17344:5;17351;17296:61;;;;;;;;;;;;;;;;;;;;;;;;17370:4;17363:11;;;;16451:928;;;;;;;:::o;1274:134:3:-;1332:7;1358:43;1362:1;1365;1358:43;;;;;;;;;;;;;;;;;:3;:43::i;:::-;1351:50;;1274:134;;;;:::o;18466:1366:90:-;18635:7;18650:22;18675:8;18650:33;;18689:20;18712:48;18745:5;18752:7;18712:32;:48::i;:::-;18689:71;;18785:1;18770:12;:16;18766:297;;;18796:22;18821:38;18830:14;18846:12;18821:8;:38::i;:::-;18796:63;;18867:53;18889:5;18896:7;18905:14;18867:21;:53::i;:::-;18975:5;18933:64;;18966:7;18933:64;;;18982:14;18933:64;;;;;;;;;;;;;;;;;;19022:34;19041:14;19022;:18;;:34;;;;:::i;:::-;19005:51;;18766:297;;19068:19;19090:47;19122:5;19129:7;19090:31;:47::i;:::-;19068:69;;19161:1;19147:11;:15;:37;;;;;19183:1;19166:14;:18;19147:37;19143:338;;;19194:22;19219:37;19228:14;19244:11;19219:8;:37::i;:::-;19194:62;;19264:13;19280:52;19301:5;19308:7;19317:14;19280:20;:52::i;:::-;19264:68;;19386:5;19345:70;;19377:7;19345:70;;;19393:14;19409:5;19345:70;;;;;;;;;;;;;;;;;;;;;;;;19440:34;19459:14;19440;:18;;:34;;;;:::i;:::-;19423:51;;19143:338;;;19486:24;19513:28;19526:14;19513:8;:12;;:28;;;;:::i;:::-;19486:55;;19570:1;19551:16;:20;19547:252;;;19581:70;19601:7;19610:5;19617:16;19635:6;19643:7;19581:19;:70::i;:::-;19713:1;19663:46;19694:5;19701:7;19663:30;:46::i;:::-;:51;19659:134;;;19726:58;19740:5;:20;;:29;19761:7;19740:29;;;;;;;;;;;;;;;19771:5;19778;19726:13;:58::i;:::-;19659:134;19547:252;19811:16;19804:23;;;;;;18466:1366;;;;;;;;:::o;788:96:0:-;833:15;867:10;860:17;;788:96;:::o;2597:203:20:-;2649:15;;:::i;:::-;2685:13;:11;:13::i;:::-;2680:1;:18;;2672:85;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2770:25;;;;;;;;1046;2779:1;:15;2770:25;;;2763:32;;2597:203;;;:::o;6256:1636::-;6335:15;;:::i;:::-;6373:1;6362;:7;;;:12;:28;;;;6389:1;6378;:7;;;:12;6362:28;6358:52;;;6399:11;;;;;;;;6408:1;6399:11;;;6392:18;;;;6358:52;1046:25;6420:1;:7;;;:22;6416:36;;;6451:1;6444:8;;;;6416:36;1046:25;6462:1;:7;;;:22;6458:36;;;6493:1;6486:8;;;;6458:36;6583:10;1046:25;6596:10;6604:1;6596:7;:10::i;:::-;:16;;;:30;;;;;;6583:43;;6632:10;6645:13;6656:1;6645:10;:13::i;:::-;:19;;;6632:32;;6670:10;1046:25;6683:10;6691:1;6683:7;:10::i;:::-;:16;;;:30;;;;;;6670:43;;6719:10;6732:13;6743:1;6732:10;:13::i;:::-;:19;;;6719:32;;6835:12;6855:2;6850;:7;6835:22;;6873:1;6867:2;:7;6863:63;;6897:2;6891;6884:4;:9;;;;;;:15;6876:50;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6863:63;7025:18;1046:25;7046:4;:18;7025:39;;7082:1;7074:4;:9;7070:91;;1046:25;7106:4;7093:10;:17;;;;;;:32;7085:76;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;7070:91;7174:10;7167:17;;7191:12;7211:2;7206;:7;7191:22;;7229:1;7223:2;:7;7219:63;;7253:2;7247;7240:4;:9;;;;;;:15;7232:50;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;7219:63;7289:12;7309:2;7304;:7;7289:22;;7327:1;7321:2;:7;7317:63;;7351:2;7345;7338:4;:9;;;;;;:15;7330:50;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;7317:63;7397:14;:12;:14::i;:::-;7392:2;:19;;;;;;7387:24;;7427:14;:12;:14::i;:::-;7422:2;:19;;;;;;7417:24;;7447:12;7467:2;7462;:7;7447:22;;7485:1;7479:2;:7;7475:63;;7509:2;7503;7496:4;:9;;;;;;:15;7488:50;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;7475:63;7622:22;;:::i;:::-;7647:14;;;;;;;;7656:4;7647:14;;;7622:39;;7676:27;7680:6;7688:14;;;;;;;;7697:4;7688:14;;;7676:3;:27::i;:::-;7667:36;;7745:27;7749:6;7757:14;;;;;;;;7766:4;7757:14;;;7745:3;:27::i;:::-;7736:36;;7814:27;7818:6;7826:14;;;;;;;;7835:4;7826:14;;;7814:3;:27::i;:::-;7805:36;;7881:6;7874:13;;;;;;;;;;;;6256:1636;;;;;:::o;2959:109::-;3020:7;1046:25;3042:1;:7;;;:21;;;;;;3035:28;;2959:109;;;:::o;1724:92::-;1782:7;1804:1;:7;;;1797:14;;1724:92;;;:::o;9230:283::-;9307:15;;:::i;:::-;9349:1;9338;:7;;;:12;;9330:42;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;9378:9;1046:25;9390:1;:7;;;:21;9378:33;;9444:1;:7;;;1046:25;9425:1;:15;;;;;;:26;9417:57;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;9487:21;;;;;;;;9500:1;:7;;;9496:1;:11;;;;;;9487:21;;;9480:28;;;9230:283;;;;:::o;1666:145:52:-;1768:38;1777:4;1783:6;1791:1;1794:4;:11;1768:8;:38::i;:::-;1666:145;;:::o;31906:509:90:-;31998:28;32029:5;:13;;31998:44;;32064:24;32082:5;32064:7;:13;;;:17;;:24;;;;:::i;:::-;32048:7;:13;;:40;;;;32095:38;32136:7;:16;;:23;32153:5;32136:23;;;;;;;;;;;;;;;32095:64;;32186:29;32209:5;32186:12;:18;;;:22;;:29;;;;:::i;:::-;32165:12;:18;;:50;;;;32222:31;32256:12;:22;;:31;32279:7;32256:31;;;;;;;;;;;;;;;32222:65;;32313:28;32335:5;32313:11;:17;;;:21;;:28;;;;:::i;:::-;32293:11;:17;;:48;;;;32372:1;32351:11;:17;;;:22;32347:64;;;32403:1;32383:11;:17;;:21;;;;32347:64;31906:509;;;;;;:::o;29435:470::-;29586:5;:11;;:20;;:29;;;;29616:5;29586:36;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;29586:36:90;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;29586:36:90;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;29586:36:90;;;;;;;;;;;;;;;;29582:200;;;29632:20;29655:47;29696:5;29655;:11;;:20;;:29;;;;29685:5;29655:36;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;29655:36:90;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;29655:36:90;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;29655:36:90;;;;;;;;;;;;;;;;:40;;:47;;;;:::i;:::-;29632:70;;29710:5;:11;;:20;;:27;;;;29738:5;29745:12;29759:6;29767:7;29710:65;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;29710:65:90;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;29710:65:90;;;;29582:200;;29792:34;:43;29827:7;29792:43;;;;;;;;;;;;;;;;;;;;;;;;;29788:113;;;29845:49;29879:7;29888:5;29845:33;:49::i;:::-;29788:113;29435:470;;;;;:::o;36056:273::-;36165:4;:11;;;;36157:5;:19;:45;;;;;36195:7;36180:22;;:4;36185:5;36180:11;;;;;;;;;;;;;;;;;;;;;;;;;:22;;;36157:45;36149:67;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;36222:17;36242:18;36258:1;36242:4;:11;;;;:15;;:18;;;;:::i;:::-;36222:38;;36280:4;36285:9;36280:15;;;;;;;;;;;;;;;;;;;;;;;;;36266:4;36271:5;36266:11;;;;;;;;;;;;;;;;:29;;;;;;;;;;;;;;;;;;36315:9;36301:4;:23;;;;;:::i;:::-;;36056:273;;;;:::o;35218:292::-;35292:7;35354:1;35311:5;:12;;:21;;:28;35333:5;35311:28;;;;;;;;;;;;;;;:39;;;:44;35307:199;;;35372:1;35365:8;;;;35307:199;35409:90;35459:5;:12;;:21;;:28;35481:5;35459:28;;;;;;;;;;;;;;;:39;;;35409:45;35419:5;:12;;:21;;:28;35441:5;35419:28;;;;;;;;;;;;;;;:34;;;35409:5;:9;;:45;;;;:::i;:::-;:49;;:90;;;;:::i;:::-;35394:105;;35218:292;;;;;:::o;3565:314:20:-;3666:15;;:::i;:::-;3691:34;;:::i;:::-;3728:19;3737:9;3728:8;:19::i;:::-;3691:56;;3753:36;;:::i;:::-;3792:21;3801:11;3792:8;:21::i;:::-;3753:60;;3826:48;3833:18;3853:20;3826:6;:48::i;:::-;3819:55;;;;3565:314;;;;:::o;2178:225:4:-;2271:1;2251:22;;:8;:22;;;;2243:73;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2360:8;2331:38;;2352:6;;;;;;;;;;;2331:38;;;;;;;;;;;;2388:8;2379:6;;:17;;;;;;;;;;;;;;;;;;2178:225;:::o;32661:553:90:-;32763:7;32780:26;32809:5;:12;;32780:41;;32842:23;32859:5;32842:6;:12;;;:16;;:23;;;;:::i;:::-;32827:6;:12;;:38;;;;32872:13;32888:26;32901:5;32908;32888:12;:26::i;:::-;32872:42;;32921:36;32960:6;:15;;:22;32976:5;32960:22;;;;;;;;;;;;;;;32921:61;;33008:28;33030:5;33008:11;:17;;;:21;;:28;;;;:::i;:::-;32988:11;:17;;:48;;;;33068:33;33095:5;33068:11;:22;;;:26;;:33;;;;:::i;:::-;33043:11;:22;;:58;;;;33145:46;33185:5;33145:11;:26;;:35;33172:7;33145:35;;;;;;;;;;;;;;;;:39;;:46;;;;:::i;:::-;33107:11;:26;;:35;33134:7;33107:35;;;;;;;;;;;;;;;:84;;;;33204:5;33197:12;;;;;32661:553;;;;;:::o;3718:338:3:-;3804:7;3901:1;3897;:5;3904:12;3889:28;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;80:1;75:3;71:11;64:39;52:2;49:1;45:10;40:15;;8:100;;;12:14;3889:28:3;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3927:9;3943:1;3939;:5;;;;;;3927:17;;4048:1;4041:8;;;3718:338;;;;;:::o;33460:947:90:-;33562:7;33579:26;33608:5;:12;;33579:41;;33641:23;33658:5;33641:6;:12;;;:16;;:23;;;;:::i;:::-;33626:6;:12;;:38;;;;33872:13;33888:1;33872:17;;33895:19;33917:47;33949:5;33956:7;33917:31;:47::i;:::-;33895:69;;33970:36;34009:6;:15;;:22;34025:5;34009:22;;;;;;;;;;;;;;;33970:61;;34056:5;34041:11;:20;34037:139;;;34079:11;:26;;:35;34106:7;34079:35;;;;;;;;;;;;;;;;34071:43;;34037:139;;;34143:26;34156:5;34163;34143:12;:26::i;:::-;34135:34;;34037:139;34202:28;34224:5;34202:11;:17;;;:21;;:28;;;;:::i;:::-;34182:11;:17;;:48;;;;34261:33;34288:5;34261:11;:22;;;:26;;:33;;;;:::i;:::-;34236:11;:22;;:58;;;;34338:46;34378:5;34338:11;:26;;:35;34365:7;34338:35;;;;;;;;;;;;;;;;:39;;:46;;;;:::i;:::-;34300:11;:26;;:35;34327:7;34300:35;;;;;;;;;;;;;;;:84;;;;34397:5;34390:12;;;;;;33460:947;;;;;:::o;1732:187:3:-;1818:7;1850:1;1845;:6;;1853:12;1837:29;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;80:1;75:3;71:11;64:39;52:2;49:1;45:10;40:15;;8:100;;;12:14;1837:29:3;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1876:9;1892:1;1888;:5;1876:17;;1911:1;1904:8;;;1732:187;;;;;:::o;2213:127:20:-;2259:7;2281:54;2274:61;;2213:127;:::o;4118:159::-;4177:15;;:::i;:::-;4207:47;;;;;;;;1046:25;;4217:1;:7;;;:21;;;;;;4216:37;4207:47;;;4200:54;;4118:159;;;:::o;4564:172::-;4626:15;;:::i;:::-;4656:57;;;;;;;;1046:25;;4676:1;:7;;;:21;;;;;;4675:37;4665:1;:7;;;:47;4656:57;;;4649:64;;4564:172;;;:::o;1955:87::-;2002:7;2024:13;2017:20;;1955:87;:::o;5108:207::-;5182:15;;:::i;:::-;5205:9;5227:1;:7;;;5217:1;:7;;;:17;5205:29;;5253:1;:7;;;5248:1;:12;;5240:46;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5299:11;;;;;;;;5308:1;5299:11;;;5292:18;;;5108:207;;;;:::o;537:923:52:-;710:6;:13;695:4;:11;:28;687:76;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;785:4;:11;777:5;:19;769:61;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;854:4;:11;844:6;:21;;836:58;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;900:9;912:5;900:17;;923:533;930:4;923:533;;;944:17;964:15;977:1;964:8;970:1;964;:5;;:8;;;;:::i;:::-;:12;;:15;;;;:::i;:::-;944:35;;987:18;1008:15;1021:1;1008:8;1014:1;1008;:5;;:8;;;;:::i;:::-;:12;;:15;;;;:::i;:::-;987:36;;1031:16;1050:1;1031:20;;1075:6;1063:9;:18;:72;;;;;1085:50;1112:6;1119:4;1124:8;1119:14;;;;;;;;;;;;;;1112:22;;;;;;;;;;;;;;1085:6;1092:4;1097:9;1092:15;;;;;;;;;;;;;;1085:23;;;;;;;;;;;;;;:26;;:50;;;;:::i;:::-;1063:72;1059:117;;;1158:9;1147:20;;1059:117;1200:6;1187:10;:19;:74;;;;;1210:51;1238:6;1245:4;1250:8;1245:14;;;;;;;;;;;;;;1238:22;;;;;;;;;;;;;;1210:6;1217:4;1222:10;1217:16;;;;;;;;;;;;;;1210:24;;;;;;;;;;;;;;:27;;:51;;;;:::i;:::-;1187:74;1183:120;;;1284:10;1273:21;;1183:120;1326:1;1314:8;:13;1310:24;;;1329:5;;;;;1310:24;1342:14;1359:4;1364:1;1359:7;;;;;;;;;;;;;;1342:24;;1384:4;1389:8;1384:14;;;;;;;;;;;;;;1374:4;1379:1;1374:7;;;;;;;;;;;;;:24;;;;;1423:6;1406:4;1411:8;1406:14;;;;;;;;;;;;;:23;;;;;1441:8;1437:12;;923:533;;;;;;;537:923;;;;;:::o;34651:323:90:-;34725:7;34787:1;34744:5;:12;;:21;;:28;34766:5;34744:28;;;;;;;;;;;;;;;:39;;;:44;34740:230;;;34805:32;1327:21;34805:5;:9;;:32;;;;:::i;:::-;34798:39;;;;34740:230;34873:90;34928:5;:12;;:21;;:28;34950:5;34928:28;;;;;;;;;;;;;;;:34;;;34873:50;34883:5;:12;;:21;;:28;34905:5;34883:28;;;;;;;;;;;;;;;:39;;;34873:5;:9;;:50;;;;:::i;:::-;:54;;:90;;;;:::i;:::-;34858:105;;34651:323;;;;;:::o;9548:114:20:-;9621:4;9650:1;:7;;;9640:1;:7;;;:17;9633:24;;9548:114;;;;:::o;179:228:121:-;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o",
  "source": "pragma solidity ^0.5.13;\n\nimport \"../Election.sol\";\nimport \"../../common/FixidityLib.sol\";\n\n/**\n * @title A wrapper around Election that exposes onlyVm functions for testing.\n */\ncontract ElectionTest is Election(true) {\n  function distributeEpochRewards(address group, uint256 value, address lesser, address greater)\n    external\n  {\n    return _distributeEpochRewards(group, value, lesser, greater);\n  }\n}\n",
  "sourcePath": "/Users/beaver/Development/celo/celo-monorepo/packages/protocol/contracts/governance/test/ElectionTest.sol",
  "ast": {
    "absolutePath": "project:/contracts/governance/test/ElectionTest.sol",
    "exportedSymbols": {
      "ElectionTest": [
        44433
      ]
    },
    "id": 44434,
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 44408,
        "literals": [
          "solidity",
          "^",
          "0.5",
          ".13"
        ],
        "nodeType": "PragmaDirective",
        "src": "0:24:121"
      },
      {
        "absolutePath": "project:/contracts/governance/Election.sol",
        "file": "../Election.sol",
        "id": 44409,
        "nodeType": "ImportDirective",
        "scope": 44434,
        "sourceUnit": 29085,
        "src": "26:25:121",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "project:/contracts/common/FixidityLib.sol",
        "file": "../../common/FixidityLib.sol",
        "id": 44410,
        "nodeType": "ImportDirective",
        "scope": 44434,
        "sourceUnit": 6815,
        "src": "52:38:121",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "baseContracts": [
          {
            "arguments": [
              {
                "argumentTypes": null,
                "hexValue": "74727565",
                "id": 44412,
                "isConstant": false,
                "isLValue": false,
                "isPure": true,
                "kind": "bool",
                "lValueRequested": false,
                "nodeType": "Literal",
                "src": "213:4:121",
                "subdenomination": null,
                "typeDescriptions": {
                  "typeIdentifier": "t_bool",
                  "typeString": "bool"
                },
                "value": "true"
              }
            ],
            "baseName": {
              "contractScope": null,
              "id": 44411,
              "name": "Election",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 29084,
              "src": "204:8:121",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_Election_$29084",
                "typeString": "contract Election"
              }
            },
            "id": 44413,
            "nodeType": "InheritanceSpecifier",
            "src": "204:14:121"
          }
        ],
        "contractDependencies": [
          26,
          481,
          4374,
          7598,
          11461,
          11867,
          12683,
          17579,
          29084,
          43464
        ],
        "contractKind": "contract",
        "documentation": "@title A wrapper around Election that exposes onlyVm functions for testing.",
        "fullyImplemented": true,
        "id": 44433,
        "linearizedBaseContracts": [
          44433,
          29084,
          4374,
          11461,
          11867,
          7598,
          17579,
          481,
          26,
          12683,
          43464
        ],
        "name": "ElectionTest",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "body": {
              "id": 44431,
              "nodeType": "Block",
              "src": "333:72:121",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "id": 44425,
                        "name": "group",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 44415,
                        "src": "370:5:121",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "id": 44426,
                        "name": "value",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 44417,
                        "src": "377:5:121",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "id": 44427,
                        "name": "lesser",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 44419,
                        "src": "384:6:121",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "id": 44428,
                        "name": "greater",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 44421,
                        "src": "392:7:121",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "id": 44424,
                      "name": "_distributeEpochRewards",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 27722,
                      "src": "346:23:121",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$_t_address_$_t_address_$returns$__$",
                        "typeString": "function (address,uint256,address,address)"
                      }
                    },
                    "id": 44429,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "346:54:121",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "functionReturnParameters": 44423,
                  "id": 44430,
                  "nodeType": "Return",
                  "src": "339:61:121"
                }
              ]
            },
            "documentation": null,
            "id": 44432,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "distributeEpochRewards",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 44422,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 44415,
                  "name": "group",
                  "nodeType": "VariableDeclaration",
                  "scope": 44432,
                  "src": "255:13:121",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 44414,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "255:7:121",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 44417,
                  "name": "value",
                  "nodeType": "VariableDeclaration",
                  "scope": 44432,
                  "src": "270:13:121",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 44416,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "270:7:121",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 44419,
                  "name": "lesser",
                  "nodeType": "VariableDeclaration",
                  "scope": 44432,
                  "src": "285:14:121",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 44418,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "285:7:121",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 44421,
                  "name": "greater",
                  "nodeType": "VariableDeclaration",
                  "scope": 44432,
                  "src": "301:15:121",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 44420,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "301:7:121",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "254:63:121"
            },
            "returnParameters": {
              "id": 44423,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "333:0:121"
            },
            "scope": 44433,
            "src": "223:182:121",
            "stateMutability": "nonpayable",
            "superFunction": 27640,
            "visibility": "external"
          }
        ],
        "scope": 44434,
        "src": "179:228:121"
      }
    ],
    "src": "0:408:121"
  },
  "legacyAST": {
    "attributes": {
      "absolutePath": "project:/contracts/governance/test/ElectionTest.sol",
      "exportedSymbols": {
        "ElectionTest": [
          44433
        ]
      }
    },
    "children": [
      {
        "attributes": {
          "literals": [
            "solidity",
            "^",
            "0.5",
            ".13"
          ]
        },
        "id": 44408,
        "name": "PragmaDirective",
        "src": "0:24:121"
      },
      {
        "attributes": {
          "SourceUnit": 29085,
          "absolutePath": "project:/contracts/governance/Election.sol",
          "file": "../Election.sol",
          "scope": 44434,
          "symbolAliases": [
            null
          ],
          "unitAlias": ""
        },
        "id": 44409,
        "name": "ImportDirective",
        "src": "26:25:121"
      },
      {
        "attributes": {
          "SourceUnit": 6815,
          "absolutePath": "project:/contracts/common/FixidityLib.sol",
          "file": "../../common/FixidityLib.sol",
          "scope": 44434,
          "symbolAliases": [
            null
          ],
          "unitAlias": ""
        },
        "id": 44410,
        "name": "ImportDirective",
        "src": "52:38:121"
      },
      {
        "attributes": {
          "contractDependencies": [
            26,
            481,
            4374,
            7598,
            11461,
            11867,
            12683,
            17579,
            29084,
            43464
          ],
          "contractKind": "contract",
          "documentation": "@title A wrapper around Election that exposes onlyVm functions for testing.",
          "fullyImplemented": true,
          "linearizedBaseContracts": [
            44433,
            29084,
            4374,
            11461,
            11867,
            7598,
            17579,
            481,
            26,
            12683,
            43464
          ],
          "name": "ElectionTest",
          "scope": 44434
        },
        "children": [
          {
            "children": [
              {
                "attributes": {
                  "contractScope": null,
                  "name": "Election",
                  "referencedDeclaration": 29084,
                  "type": "contract Election"
                },
                "id": 44411,
                "name": "UserDefinedTypeName",
                "src": "204:8:121"
              },
              {
                "attributes": {
                  "argumentTypes": null,
                  "hexvalue": "74727565",
                  "isConstant": false,
                  "isLValue": false,
                  "isPure": true,
                  "lValueRequested": false,
                  "subdenomination": null,
                  "token": "bool",
                  "type": "bool",
                  "value": "true"
                },
                "id": 44412,
                "name": "Literal",
                "src": "213:4:121"
              }
            ],
            "id": 44413,
            "name": "InheritanceSpecifier",
            "src": "204:14:121"
          },
          {
            "attributes": {
              "documentation": null,
              "implemented": true,
              "isConstructor": false,
              "kind": "function",
              "modifiers": [
                null
              ],
              "name": "distributeEpochRewards",
              "scope": 44433,
              "stateMutability": "nonpayable",
              "superFunction": 27640,
              "visibility": "external"
            },
            "children": [
              {
                "children": [
                  {
                    "attributes": {
                      "constant": false,
                      "name": "group",
                      "scope": 44432,
                      "stateVariable": false,
                      "storageLocation": "default",
                      "type": "address",
                      "value": null,
                      "visibility": "internal"
                    },
                    "children": [
                      {
                        "attributes": {
                          "name": "address",
                          "stateMutability": "nonpayable",
                          "type": "address"
                        },
                        "id": 44414,
                        "name": "ElementaryTypeName",
                        "src": "255:7:121"
                      }
                    ],
                    "id": 44415,
                    "name": "VariableDeclaration",
                    "src": "255:13:121"
                  },
                  {
                    "attributes": {
                      "constant": false,
                      "name": "value",
                      "scope": 44432,
                      "stateVariable": false,
                      "storageLocation": "default",
                      "type": "uint256",
                      "value": null,
                      "visibility": "internal"
                    },
                    "children": [
                      {
                        "attributes": {
                          "name": "uint256",
                          "type": "uint256"
                        },
                        "id": 44416,
                        "name": "ElementaryTypeName",
                        "src": "270:7:121"
                      }
                    ],
                    "id": 44417,
                    "name": "VariableDeclaration",
                    "src": "270:13:121"
                  },
                  {
                    "attributes": {
                      "constant": false,
                      "name": "lesser",
                      "scope": 44432,
                      "stateVariable": false,
                      "storageLocation": "default",
                      "type": "address",
                      "value": null,
                      "visibility": "internal"
                    },
                    "children": [
                      {
                        "attributes": {
                          "name": "address",
                          "stateMutability": "nonpayable",
                          "type": "address"
                        },
                        "id": 44418,
                        "name": "ElementaryTypeName",
                        "src": "285:7:121"
                      }
                    ],
                    "id": 44419,
                    "name": "VariableDeclaration",
                    "src": "285:14:121"
                  },
                  {
                    "attributes": {
                      "constant": false,
                      "name": "greater",
                      "scope": 44432,
                      "stateVariable": false,
                      "storageLocation": "default",
                      "type": "address",
                      "value": null,
                      "visibility": "internal"
                    },
                    "children": [
                      {
                        "attributes": {
                          "name": "address",
                          "stateMutability": "nonpayable",
                          "type": "address"
                        },
                        "id": 44420,
                        "name": "ElementaryTypeName",
                        "src": "301:7:121"
                      }
                    ],
                    "id": 44421,
                    "name": "VariableDeclaration",
                    "src": "301:15:121"
                  }
                ],
                "id": 44422,
                "name": "ParameterList",
                "src": "254:63:121"
              },
              {
                "attributes": {
                  "parameters": [
                    null
                  ]
                },
                "children": [],
                "id": 44423,
                "name": "ParameterList",
                "src": "333:0:121"
              },
              {
                "children": [
                  {
                    "attributes": {
                      "functionReturnParameters": 44423
                    },
                    "children": [
                      {
                        "attributes": {
                          "argumentTypes": null,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "isStructConstructorCall": false,
                          "lValueRequested": false,
                          "names": [
                            null
                          ],
                          "type": "tuple()",
                          "type_conversion": false
                        },
                        "children": [
                          {
                            "attributes": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                },
                                {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                },
                                {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                },
                                {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              ],
                              "overloadedDeclarations": [
                                null
                              ],
                              "referencedDeclaration": 27722,
                              "type": "function (address,uint256,address,address)",
                              "value": "_distributeEpochRewards"
                            },
                            "id": 44424,
                            "name": "Identifier",
                            "src": "346:23:121"
                          },
                          {
                            "attributes": {
                              "argumentTypes": null,
                              "overloadedDeclarations": [
                                null
                              ],
                              "referencedDeclaration": 44415,
                              "type": "address",
                              "value": "group"
                            },
                            "id": 44425,
                            "name": "Identifier",
                            "src": "370:5:121"
                          },
                          {
                            "attributes": {
                              "argumentTypes": null,
                              "overloadedDeclarations": [
                                null
                              ],
                              "referencedDeclaration": 44417,
                              "type": "uint256",
                              "value": "value"
                            },
                            "id": 44426,
                            "name": "Identifier",
                            "src": "377:5:121"
                          },
                          {
                            "attributes": {
                              "argumentTypes": null,
                              "overloadedDeclarations": [
                                null
                              ],
                              "referencedDeclaration": 44419,
                              "type": "address",
                              "value": "lesser"
                            },
                            "id": 44427,
                            "name": "Identifier",
                            "src": "384:6:121"
                          },
                          {
                            "attributes": {
                              "argumentTypes": null,
                              "overloadedDeclarations": [
                                null
                              ],
                              "referencedDeclaration": 44421,
                              "type": "address",
                              "value": "greater"
                            },
                            "id": 44428,
                            "name": "Identifier",
                            "src": "392:7:121"
                          }
                        ],
                        "id": 44429,
                        "name": "FunctionCall",
                        "src": "346:54:121"
                      }
                    ],
                    "id": 44430,
                    "name": "Return",
                    "src": "339:61:121"
                  }
                ],
                "id": 44431,
                "name": "Block",
                "src": "333:72:121"
              }
            ],
            "id": 44432,
            "name": "FunctionDefinition",
            "src": "223:182:121"
          }
        ],
        "id": 44433,
        "name": "ContractDefinition",
        "src": "179:228:121"
      }
    ],
    "id": 44434,
    "name": "SourceUnit",
    "src": "0:408:121"
  },
  "compiler": {
    "name": "solc",
    "version": "0.5.13+commit.5b0b510c.Emscripten.clang"
  },
  "networks": {
    "1101": {
      "events": {},
      "links": {
        "AddressSortedLinkedList": "0x48BaCB9266a570d521063EF5dD96e61686DbE788"
      }
    }
  },
  "schemaVersion": "3.4.13",
  "updatedAt": "2023-11-21T17:25:03.824Z",
  "networkType": "ethereum",
  "devdoc": {
    "methods": {
      "activate(address)": {
        "details": "Pending votes cannot be activated until an election has been held.",
        "params": {
          "group": "The validator group to vote for."
        },
        "return": "True upon success."
      },
      "activateForAccount(address,address)": {
        "details": "Pending votes cannot be activated until an election has been held.",
        "params": {
          "account": "The validateor group account's pending votes to active votes",
          "group": "The validator group to vote for."
        },
        "return": "True upon success."
      },
      "canReceiveVotes(address,uint256)": {
        "details": "Votes are not allowed to be cast that would increase a group's proportion of locked gold  voting for it to greater than  (numGroupMembers + 1) / min(maxElectableValidators, numRegisteredValidators)Note that groups may still receive additional votes via rewards even if this function  returns false.",
        "params": {
          "group": "The address of the group.",
          "value": "The number of votes."
        },
        "return": "Whether or not a group can receive the specified number of votes."
      },
      "checkProofOfPossession(address,bytes,bytes)": {
        "params": {
          "blsKey": "The BLS public key that the validator is using for consensus, should pass proof  of possession. 48 bytes.",
          "blsPop": "The BLS public key proof-of-possession, which consists of a signature on the  account address. 96 bytes.",
          "sender": "The address signed by the BLS key to generate the proof of possession."
        },
        "return": "True upon success."
      },
      "electNValidatorSigners(uint256,uint256)": {
        "details": "See https://en.wikipedia.org/wiki/D%27Hondt_method#Allocation for more information.",
        "return": "The list of elected validators."
      },
      "electValidatorSigners()": {
        "return": "The list of elected validators."
      },
      "forceDecrementVotes(address,uint256,address[],address[],uint256[])": {
        "params": {
          "account": "Address to revoke votes from.",
          "greaters": "The groups receivier more votes than the i'th `group`, or 0 if               the i'th `group` has the most votes of any validator group.",
          "indices": "The indices of the i'th group in the account's voting list.",
          "lessers": "The groups receiving fewer votes than the i'th `group`, or 0 if               the i'th `group` has the fewest votes of any validator group.",
          "value": "Maximum amount of votes to revoke."
        },
        "return": "Number of votes successfully decremented."
      },
      "fractionMulExp(uint256,uint256,uint256,uint256,uint256,uint256)": {
        "params": {
          "_decimals": "precision",
          "aDenominator": "Denominator of first fraction",
          "aNumerator": "Numerator of first fraction",
          "bDenominator": "Denominator of exponentiated fraction",
          "bNumerator": "Numerator of exponentiated fraction",
          "exponent": "exponent to raise b to"
        },
        "return": "Numerator of the computed quantity (not reduced).Denominator of the computed quantity (not reduced)."
      },
      "getActiveVoteUnitsForGroup(address)": {
        "params": {
          "group": "The address of the validator group."
        },
        "return": "The total active vote units made for `group`."
      },
      "getActiveVoteUnitsForGroupByAccount(address,address)": {
        "params": {
          "account": "The address of the voting account.",
          "group": "The address of the validator group."
        },
        "return": "The active vote units for `group` made by `account`."
      },
      "getActiveVotes()": {
        "return": "The active votes received across all groups."
      },
      "getActiveVotesForGroup(address)": {
        "params": {
          "group": "The address of the validator group."
        },
        "return": "The active votes made for `group`."
      },
      "getActiveVotesForGroupByAccount(address,address)": {
        "params": {
          "account": "The address of the voting account.",
          "group": "The address of the validator group."
        },
        "return": "The active votes for `group` made by `account`."
      },
      "getBlockNumberFromHeader(bytes)": {
        "params": {
          "header": "RLP encoded header"
        },
        "return": "Block number."
      },
      "getCurrentValidatorSigners()": {
        "return": "List of current validator signers."
      },
      "getElectabilityThreshold()": {
        "return": "Threshold value as unwrapped fraction."
      },
      "getElectableValidators()": {
        "return": "The minimum number of validators that can be elected.The maximum number of validators that can be elected."
      },
      "getEligibleValidatorGroups()": {
        "return": "The list of validator groups eligible to elect validators."
      },
      "getEpochNumber()": {
        "return": "Current epoch number."
      },
      "getEpochNumberOfBlock(uint256)": {
        "params": {
          "blockNumber": "Block number where epoch number is calculated."
        },
        "return": "Epoch number."
      },
      "getEpochSize()": {
        "return": "The current epoch size in blocks."
      },
      "getGroupEligibility(address)": {
        "details": "Eligible groups that have received their maximum number of votes cannot receive more.",
        "return": "Whether or not a group is eligible to receive votes."
      },
      "getGroupEpochRewards(address,uint256,uint256[])": {
        "details": "Eligible groups that have received their maximum number of votes cannot receive more.",
        "params": {
          "group": "The group to calculate epoch rewards for.",
          "totalEpochRewards": "The total amount of rewards going to all voters.",
          "uptimes": "Array of Fixidity representations of the validators' uptimes, between 0 and 1."
        },
        "return": "The amount of rewards that voters for `group` are due at the end of an epoch."
      },
      "getGroupsVotedForByAccount(address)": {
        "params": {
          "account": "The address of the account casting votes."
        },
        "return": "The groups that `account` has voted for."
      },
      "getNumVotesReceivable(address)": {
        "details": "Votes are not allowed to be cast that would increase a group's proportion of locked gold  voting for it to greater than  (numGroupMembers + 1) / min(maxElectableValidators, numRegisteredValidators)Note that a group's vote total may exceed this number through rewards or config changes.",
        "params": {
          "group": "The address of the group."
        },
        "return": "The number of votes that a group can receive."
      },
      "getParentSealBitmap(uint256)": {
        "params": {
          "blockNumber": "Block number to retrieve. Must be within 4 epochs of the current number."
        },
        "return": "Bitmap parent seal with set bits at indices corresponding to signing validators."
      },
      "getPendingVotesForGroup(address)": {
        "params": {
          "group": "The address of the validator group."
        },
        "return": "The pending votes made for `group`."
      },
      "getPendingVotesForGroupByAccount(address,address)": {
        "params": {
          "account": "The address of the voting account.",
          "group": "The address of the validator group."
        },
        "return": "The pending votes for `group` made by `account`."
      },
      "getTotalVotes()": {
        "return": "The total votes received across all groups."
      },
      "getTotalVotesByAccount(address)": {
        "params": {
          "account": "The address of the account."
        },
        "return": "The total number of votes cast by an account."
      },
      "getTotalVotesForEligibleValidatorGroups()": {
        "return": "List of all validator groupsNumber of votes each validator group received."
      },
      "getTotalVotesForGroup(address)": {
        "params": {
          "group": "The address of the validator group."
        },
        "return": "The total votes made for `group`."
      },
      "getTotalVotesForGroupByAccount(address,address)": {
        "params": {
          "account": "The address of the voting account.",
          "group": "The address of the validator group."
        },
        "return": "The total votes for `group` made by `account`."
      },
      "getVerifiedSealBitmapFromHeader(bytes)": {
        "params": {
          "header": "RLP encoded header"
        },
        "return": "Bitmap parent seal with set bits at indices correspoinding to signing validators."
      },
      "getVersionNumber()": {
        "return": "Storage version of the contract.Major version of the contract.Minor version of the contract.Patch version of the contract."
      },
      "hasActivatablePendingVotes(address,address)": {
        "details": "Pending votes cannot be activated until an election has been held.",
        "params": {
          "account": "The account with pending votes.",
          "group": "The validator group that `account` has pending votes for."
        },
        "return": "Whether or not `account` has activatable votes for `group`."
      },
      "hashHeader(bytes)": {
        "params": {
          "header": "RLP encoded header"
        },
        "return": "Header hash."
      },
      "initialize(address,uint256,uint256,uint256,uint256)": {
        "details": "Should be called only once.",
        "params": {
          "_electabilityThreshold": "The minimum ratio of votes a group needs before its members can  be elected.",
          "_maxNumGroupsVotedFor": "The maximum number of groups that an account can vote for at once.",
          "minElectableValidators": "The minimum number of validators that can be elected.",
          "registryAddress": "The address of the registry core smart contract."
        }
      },
      "isOwner()": {
        "details": "Returns true if the caller is the current owner."
      },
      "markGroupEligible(address,address,address)": {
        "params": {
          "greater": "The address of the group that has received more votes than this group.",
          "group": "The address of the validator group.",
          "lesser": "The address of the group that has received fewer votes than this group."
        }
      },
      "markGroupIneligible(address)": {
        "details": "Can only be called by the registered \"Validators\" contract.",
        "params": {
          "group": "The address of the validator group."
        }
      },
      "minQuorumSize(uint256)": {
        "details": "Computed in celo-blockchain as int(math.Ceil(float64(2*valSet.Size()) / 3))"
      },
      "minQuorumSizeInCurrentSet()": {
        "return": "Byzantine quorum of validators."
      },
      "numberValidatorsInCurrentSet()": {
        "return": "Size of the current elected validator set."
      },
      "numberValidatorsInSet(uint256)": {
        "params": {
          "blockNumber": "Block number to retrieve the validator set from."
        },
        "return": "Size of the validator set."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner.     * NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "revokeActive(address,uint256,address,address,uint256)": {
        "details": "Fails if the account has not voted on a validator group.",
        "params": {
          "greater": "The group receiving more votes than the group for which the vote was revoked,  or 0 if that group has the most votes of any validator group.",
          "group": "The validator group to revoke votes from.",
          "index": "The index of the group in the account's voting list.",
          "lesser": "The group receiving fewer votes than the group for which the vote was revoked,  or 0 if that group has the fewest votes of any validator group.",
          "value": "The number of votes to revoke."
        },
        "return": "True upon success."
      },
      "revokeAllActive(address,address,address,uint256)": {
        "details": "Fails if the account has not voted on a validator group.",
        "params": {
          "greater": "The group receiving more votes than the group for which the vote was revoked,  or 0 if that group has the most votes of any validator group.",
          "group": "The validator group to revoke votes from.",
          "index": "The index of the group in the account's voting list.",
          "lesser": "The group receiving fewer votes than the group for which the vote was revoked,  or 0 if that group has the fewest votes of any validator group."
        },
        "return": "True upon success."
      },
      "revokePending(address,uint256,address,address,uint256)": {
        "details": "Fails if the account has not voted on a validator group.",
        "params": {
          "greater": "The group receiving more votes than the group for which the vote was revoked,  or 0 if that group has the most votes of any validator group.",
          "group": "The validator group to revoke votes from.",
          "index": "The index of the group in the account's voting list.",
          "lesser": "The group receiving fewer votes than the group for which the vote was revoked,  or 0 if that group has the fewest votes of any validator group.",
          "value": "The number of votes to revoke."
        },
        "return": "True upon success."
      },
      "setAllowedToVoteOverMaxNumberOfGroups(bool)": {
        "params": {
          "flag": "The on/off flag."
        }
      },
      "setElectabilityThreshold(uint256)": {
        "params": {
          "threshold": "Electability threshold as unwrapped Fraction."
        },
        "return": "True upon success."
      },
      "setElectableValidators(uint256,uint256)": {
        "params": {
          "max": "The maximum number of validators that can be elected.",
          "min": "The minimum number of validators that can be elected."
        },
        "return": "True upon success."
      },
      "setMaxNumGroupsVotedFor(uint256)": {
        "params": {
          "_maxNumGroupsVotedFor": "The maximum number of groups an account can vote for."
        },
        "return": "True upon success."
      },
      "setRegistry(address)": {
        "params": {
          "registryAddress": "The address of a registry contract for routing to other contracts."
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "updateTotalVotesByAccountForGroup(address,address)": {
        "params": {
          "account": "The address of the voting account.",
          "group": "The address of the validator group."
        }
      },
      "validatorSignerAddressFromCurrentSet(uint256)": {
        "params": {
          "index": "Index of requested validator in the validator set."
        },
        "return": "Address of validator at the requested index."
      },
      "validatorSignerAddressFromSet(uint256,uint256)": {
        "params": {
          "blockNumber": "Block number to retrieve the validator set from.",
          "index": "Index of requested validator in the validator set."
        },
        "return": "Address of validator at the requested index."
      },
      "vote(address,uint256,address,address)": {
        "details": "Fails if `group` is empty or not a validator group.",
        "params": {
          "greater": "The group receiving more votes than `group`, or 0 if `group` has the  most votes of any validator group.",
          "group": "The validator group to vote for.",
          "lesser": "The group receiving fewer votes than `group`, or 0 if `group` has the  fewest votes of any validator group.",
          "value": "The amount of gold to use to vote."
        },
        "return": "True upon success."
      }
    },
    "title": "A wrapper around Election that exposes onlyVm functions for testing."
  },
  "userdoc": {
    "methods": {
      "activate(address)": {
        "notice": "Converts `account`'s pending votes for `group` to active votes."
      },
      "activateForAccount(address,address)": {
        "notice": "Converts `account`'s pending votes for `group` to active votes."
      },
      "canReceiveVotes(address,uint256)": {
        "notice": "Returns whether or not a group can receive the specified number of votes."
      },
      "checkProofOfPossession(address,bytes,bytes)": {
        "notice": "Checks a BLS proof of possession."
      },
      "electNValidatorSigners(uint256,uint256)": {
        "notice": "Returns a list of elected validators with seats allocated to groups via the D'Hondt  method."
      },
      "electValidatorSigners()": {
        "notice": "Returns a list of elected validators with seats allocated to groups via the D'Hondt  method."
      },
      "forceDecrementVotes(address,uint256,address[],address[],uint256[])": {
        "notice": "Reduces the total amount of `account`'s voting gold by `value` by        iterating over all groups voted for by account."
      },
      "fractionMulExp(uint256,uint256,uint256,uint256,uint256,uint256)": {
        "notice": "calculate a * b^x for fractions a, b to `decimals` precision"
      },
      "getActiveVoteUnitsForGroup(address)": {
        "notice": "Returns the total active vote units made for `group`."
      },
      "getActiveVoteUnitsForGroupByAccount(address,address)": {
        "notice": "Returns the active vote units for `group` made by `account`."
      },
      "getActiveVotes()": {
        "notice": "Returns the active votes received across all groups."
      },
      "getActiveVotesForGroup(address)": {
        "notice": "Returns the active votes made for `group`."
      },
      "getActiveVotesForGroupByAccount(address,address)": {
        "notice": "Returns the active votes for `group` made by `account`."
      },
      "getBlockNumberFromHeader(bytes)": {
        "notice": "Parses block number out of header."
      },
      "getCurrentValidatorSigners()": {
        "notice": "Returns get current validator signers using the precompiles."
      },
      "getElectabilityThreshold()": {
        "notice": "Gets the election threshold."
      },
      "getElectableValidators()": {
        "notice": "Returns the minimum and maximum number of validators that can be elected."
      },
      "getEligibleValidatorGroups()": {
        "notice": "Returns the list of validator groups eligible to elect validators."
      },
      "getEpochNumber()": {
        "notice": "Returns the epoch number at a block."
      },
      "getEpochNumberOfBlock(uint256)": {
        "notice": "Returns the epoch number at a block."
      },
      "getEpochSize()": {
        "notice": "Returns the current epoch size in blocks."
      },
      "getGroupEligibility(address)": {
        "notice": "Returns whether or not a group is eligible to receive votes."
      },
      "getGroupEpochRewards(address,uint256,uint256[])": {
        "notice": "Returns the amount of rewards that voters for `group` are due at the end of an epoch."
      },
      "getGroupsVotedForByAccount(address)": {
        "notice": "Returns the groups that `account` has voted for."
      },
      "getNumVotesReceivable(address)": {
        "notice": "Returns the number of votes that a group can receive."
      },
      "getParentSealBitmap(uint256)": {
        "notice": "Gets the parent seal bitmap from the header at the given block number."
      },
      "getPendingVotesForGroup(address)": {
        "notice": "Returns the pending votes made for `group`."
      },
      "getPendingVotesForGroupByAccount(address,address)": {
        "notice": "Returns the pending votes for `group` made by `account`."
      },
      "getTotalVotes()": {
        "notice": "Returns the total votes received across all groups."
      },
      "getTotalVotesByAccount(address)": {
        "notice": "Returns the total number of votes cast by an account."
      },
      "getTotalVotesForEligibleValidatorGroups()": {
        "notice": "Returns list of all validator groups and the number of votes they've received."
      },
      "getTotalVotesForGroup(address)": {
        "notice": "Returns the total votes made for `group`."
      },
      "getTotalVotesForGroupByAccount(address,address)": {
        "notice": "Returns the total votes for `group` made by `account`."
      },
      "getVerifiedSealBitmapFromHeader(bytes)": {
        "notice": "Verifies the BLS signature on the header and returns the seal bitmap. The validator set used for verification is retrieved based on the parent hash field of the header.  If the parent hash is not in the blockchain, verification fails."
      },
      "getVersionNumber()": {
        "notice": "Returns the storage, major, minor, and patch version of the contract."
      },
      "hasActivatablePendingVotes(address,address)": {
        "notice": "Returns whether or not an account's votes for the specified group can be activated."
      },
      "hashHeader(bytes)": {
        "notice": "Computes hash of header."
      },
      "initialize(address,uint256,uint256,uint256,uint256)": {
        "notice": "Used in place of the constructor to allow the contract to be upgradable via proxy."
      },
      "markGroupEligible(address,address,address)": {
        "notice": "Marks a group eligible for electing validators."
      },
      "markGroupIneligible(address)": {
        "notice": "Marks a group ineligible for electing validators."
      },
      "minQuorumSize(uint256)": {
        "notice": "Returns the minimum number of required signers for a given block number."
      },
      "minQuorumSizeInCurrentSet()": {
        "notice": "Computes byzantine quorum from current validator set size"
      },
      "numberValidatorsInCurrentSet()": {
        "notice": "Gets the size of the current elected validator set."
      },
      "numberValidatorsInSet(uint256)": {
        "notice": "Gets the size of the validator set that must sign the given block number."
      },
      "revokeActive(address,uint256,address,address,uint256)": {
        "notice": "Revokes `value` active votes for `group`"
      },
      "revokeAllActive(address,address,address,uint256)": {
        "notice": "Revokes all active votes for `group`"
      },
      "revokePending(address,uint256,address,address,uint256)": {
        "notice": "Revokes `value` pending votes for `group`"
      },
      "setAllowedToVoteOverMaxNumberOfGroups(bool)": {
        "notice": "Allows to turn on/off voting over maxNumGroupsVotedFor. Once this is turned on and account voted for more than maxNumGroupsVotedFor, it is account's obligation to run updateTotalVotesByAccountForGroup once a day. If not run, voting power of account will not reflect rewards awarded."
      },
      "setElectabilityThreshold(uint256)": {
        "notice": "Sets the electability threshold."
      },
      "setElectableValidators(uint256,uint256)": {
        "notice": "Updates the minimum and maximum number of validators that can be elected."
      },
      "setMaxNumGroupsVotedFor(uint256)": {
        "notice": "Updates the maximum number of groups an account can be voting for at once."
      },
      "setRegistry(address)": {
        "notice": "Updates the address pointing to a Registry contract."
      },
      "updateTotalVotesByAccountForGroup(address,address)": {
        "notice": "Counts and caches account's votes for group."
      },
      "validatorSignerAddressFromCurrentSet(uint256)": {
        "notice": "Gets a validator address from the current validator set."
      },
      "validatorSignerAddressFromSet(uint256,uint256)": {
        "notice": "Gets a validator address from the validator set at the given block number."
      },
      "vote(address,uint256,address,address)": {
        "notice": "Increments the number of total and pending votes for `group`."
      }
    }
  }
}