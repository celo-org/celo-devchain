{
  "contractName": "GovernanceTest",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "approver",
          "type": "address"
        }
      ],
      "name": "ApproverSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "concurrentProposals",
          "type": "uint256"
        }
      ],
      "name": "ConcurrentProposalsSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "destination",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "bytes4",
          "name": "functionId",
          "type": "bytes4"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "threshold",
          "type": "uint256"
        }
      ],
      "name": "ConstitutionSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "dequeueFrequency",
          "type": "uint256"
        }
      ],
      "name": "DequeueFrequencySet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "executionStageDuration",
          "type": "uint256"
        }
      ],
      "name": "ExecutionStageDurationSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "hash",
          "type": "bytes32"
        }
      ],
      "name": "HotfixApproved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "hash",
          "type": "bytes32"
        }
      ],
      "name": "HotfixExecuted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "hash",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "epoch",
          "type": "uint256"
        }
      ],
      "name": "HotfixPrepared",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "hash",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "whitelister",
          "type": "address"
        }
      ],
      "name": "HotfixWhitelisted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "minDeposit",
          "type": "uint256"
        }
      ],
      "name": "MinDepositSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "baselineQuorumFactor",
          "type": "uint256"
        }
      ],
      "name": "ParticipationBaselineQuorumFactorSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "baselineUpdateFactor",
          "type": "uint256"
        }
      ],
      "name": "ParticipationBaselineUpdateFactorSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "participationBaseline",
          "type": "uint256"
        }
      ],
      "name": "ParticipationBaselineUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "participationFloor",
          "type": "uint256"
        }
      ],
      "name": "ParticipationFloorSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        }
      ],
      "name": "ProposalApproved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "ProposalDequeued",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        }
      ],
      "name": "ProposalExecuted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        }
      ],
      "name": "ProposalExpired",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "proposer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "transactionCount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "deposit",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "ProposalQueued",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "revokedUpvotes",
          "type": "uint256"
        }
      ],
      "name": "ProposalUpvoteRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "upvotes",
          "type": "uint256"
        }
      ],
      "name": "ProposalUpvoted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "weight",
          "type": "uint256"
        }
      ],
      "name": "ProposalVoteRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "yesVotes",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "noVotes",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "abstainVotes",
          "type": "uint256"
        }
      ],
      "name": "ProposalVoteRevokedV2",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "weight",
          "type": "uint256"
        }
      ],
      "name": "ProposalVoted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "yesVotes",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "noVotes",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "abstainVotes",
          "type": "uint256"
        }
      ],
      "name": "ProposalVotedV2",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "queueExpiry",
          "type": "uint256"
        }
      ],
      "name": "QueueExpirySet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "referendumStageDuration",
          "type": "uint256"
        }
      ],
      "name": "ReferendumStageDurationSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "registryAddress",
          "type": "address"
        }
      ],
      "name": "RegistrySet",
      "type": "event"
    },
    {
      "payable": true,
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "hash",
          "type": "bytes32"
        }
      ],
      "name": "approveHotfix",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "approver",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "blsKey",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "blsPop",
          "type": "bytes"
        }
      ],
      "name": "checkProofOfPossession",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "concurrentProposals",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "dequeueFrequency",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [],
      "name": "dequeueProposalsIfReady",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "dequeued",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "emptyIndices",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "execute",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "values",
          "type": "uint256[]"
        },
        {
          "internalType": "address[]",
          "name": "destinations",
          "type": "address[]"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        },
        {
          "internalType": "uint256[]",
          "name": "dataLengths",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes32",
          "name": "salt",
          "type": "bytes32"
        }
      ],
      "name": "executeHotfix",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "aNumerator",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "aDenominator",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "bNumerator",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "bDenominator",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "exponent",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_decimals",
          "type": "uint256"
        }
      ],
      "name": "fractionMulExp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "getAmountOfGoldUsedForVoting",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "bytes",
          "name": "header",
          "type": "bytes"
        }
      ],
      "name": "getBlockNumberFromHeader",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "destination",
          "type": "address"
        },
        {
          "internalType": "bytes4",
          "name": "functionId",
          "type": "bytes4"
        }
      ],
      "name": "getConstitution",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "getDequeue",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "getEpochNumber",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "blockNumber",
          "type": "uint256"
        }
      ],
      "name": "getEpochNumberOfBlock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "getEpochSize",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "getExecutionStageDuration",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "hash",
          "type": "bytes32"
        }
      ],
      "name": "getHotfixRecord",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "getMostRecentReferendumProposal",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "blockNumber",
          "type": "uint256"
        }
      ],
      "name": "getParentSealBitmap",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "getParticipationParameters",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        }
      ],
      "name": "getProposal",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        }
      ],
      "name": "getProposalStage",
      "outputs": [
        {
          "internalType": "enum Proposals.Stage",
          "name": "",
          "type": "uint8"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getProposalTransaction",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "getQueue",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "getQueueLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "getReferendumStageDuration",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "getUpvoteRecord",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        }
      ],
      "name": "getUpvotes",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "bytes",
          "name": "header",
          "type": "bytes"
        }
      ],
      "name": "getVerifiedSealBitmapFromHeader",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "getVersionNumber",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getVoteRecord",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        }
      ],
      "name": "getVoteTotals",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "bytes",
          "name": "header",
          "type": "bytes"
        }
      ],
      "name": "hashHeader",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "hash",
          "type": "bytes32"
        }
      ],
      "name": "hotfixWhitelistValidatorTally",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "hotfixes",
      "outputs": [
        {
          "internalType": "bool",
          "name": "executed",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "preparedEpoch",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "registryAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_approver",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_concurrentProposals",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_minDeposit",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_queueExpiry",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_dequeueFrequency",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "referendumStageDuration",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "executionStageDuration",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "participationBaseline",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "participationFloor",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "baselineUpdateFactor",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "baselineQuorumFactor",
          "type": "uint256"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "initialized",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        }
      ],
      "name": "isApproved",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "isDequeuedProposal",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        }
      ],
      "name": "isDequeuedProposalExpired",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "hash",
          "type": "bytes32"
        }
      ],
      "name": "isHotfixPassing",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "hash",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "whitelister",
          "type": "address"
        }
      ],
      "name": "isHotfixWhitelistedBy",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "isOwner",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        }
      ],
      "name": "isProposalPassing",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        }
      ],
      "name": "isQueued",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        }
      ],
      "name": "isQueuedProposalExpired",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "isVoting",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "lastDequeue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "minDeposit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "blockNumber",
          "type": "uint256"
        }
      ],
      "name": "minQuorumSize",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "minQuorumSizeInCurrentSet",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "hash",
          "type": "bytes32"
        }
      ],
      "name": "prepareHotfix",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "proposalCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        }
      ],
      "name": "proposalExists",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "values",
          "type": "uint256[]"
        },
        {
          "internalType": "address[]",
          "name": "destinations",
          "type": "address[]"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        },
        {
          "internalType": "uint256[]",
          "name": "dataLengths",
          "type": "uint256[]"
        },
        {
          "internalType": "string",
          "name": "descriptionUrl",
          "type": "string"
        }
      ],
      "name": "propose",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": true,
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "queueExpiry",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "refundedDeposits",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "registry",
      "outputs": [
        {
          "internalType": "contract IRegistry",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "newVotingPower",
          "type": "uint256"
        }
      ],
      "name": "removeVotesWhenRevokingDelegatedVotes",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "lesser",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "greater",
          "type": "uint256"
        }
      ],
      "name": "revokeUpvote",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [],
      "name": "revokeVotes",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "_approver",
          "type": "address"
        }
      ],
      "name": "setApprover",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "baselineQuorumFactor",
          "type": "uint256"
        }
      ],
      "name": "setBaselineQuorumFactor",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "baselineUpdateFactor",
          "type": "uint256"
        }
      ],
      "name": "setBaselineUpdateFactor",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_concurrentProposals",
          "type": "uint256"
        }
      ],
      "name": "setConcurrentProposals",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "destination",
          "type": "address"
        },
        {
          "internalType": "bytes4",
          "name": "functionId",
          "type": "bytes4"
        },
        {
          "internalType": "uint256",
          "name": "threshold",
          "type": "uint256"
        }
      ],
      "name": "setConstitution",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_dequeueFrequency",
          "type": "uint256"
        }
      ],
      "name": "setDequeueFrequency",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "executionStageDuration",
          "type": "uint256"
        }
      ],
      "name": "setExecutionStageDuration",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_minDeposit",
          "type": "uint256"
        }
      ],
      "name": "setMinDeposit",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "participationBaseline",
          "type": "uint256"
        }
      ],
      "name": "setParticipationBaseline",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "participationFloor",
          "type": "uint256"
        }
      ],
      "name": "setParticipationFloor",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_queueExpiry",
          "type": "uint256"
        }
      ],
      "name": "setQueueExpiry",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "referendumStageDuration",
          "type": "uint256"
        }
      ],
      "name": "setReferendumStageDuration",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "registryAddress",
          "type": "address"
        }
      ],
      "name": "setRegistry",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "stageDurations",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "approval",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "referendum",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "execution",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lesser",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "greater",
          "type": "uint256"
        }
      ],
      "name": "upvote",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "blockNumber",
          "type": "uint256"
        }
      ],
      "name": "validatorSignerAddressFromSet",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        },
        {
          "internalType": "enum Proposals.VoteValue",
          "name": "value",
          "type": "uint8"
        }
      ],
      "name": "vote",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "yesVotes",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "noVotes",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "abstainVotes",
          "type": "uint256"
        }
      ],
      "name": "votePartially",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "hash",
          "type": "bytes32"
        }
      ],
      "name": "whitelistHotfix",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [],
      "name": "withdraw",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "numberValidatorsInCurrentSet",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "numberValidatorsInSet",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "validatorSignerAddressFromCurrentSet",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "validator",
          "type": "address"
        }
      ],
      "name": "addValidator",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "maxAmountAllowed",
          "type": "uint256"
        }
      ],
      "name": "removeVotesWhenRevokingDelegatedVotesTest",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "voterAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "proposalIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "weight",
          "type": "uint256"
        }
      ],
      "name": "setDeprecatedWeight",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "metadata": "{\"compiler\":{\"version\":\"0.5.13+commit.5b0b510c\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ApproverSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"concurrentProposals\",\"type\":\"uint256\"}],\"name\":\"ConcurrentProposalsSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes4\",\"name\":\"functionId\",\"type\":\"bytes4\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"threshold\",\"type\":\"uint256\"}],\"name\":\"ConstitutionSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"dequeueFrequency\",\"type\":\"uint256\"}],\"name\":\"DequeueFrequencySet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"executionStageDuration\",\"type\":\"uint256\"}],\"name\":\"ExecutionStageDurationSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"}],\"name\":\"HotfixApproved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"}],\"name\":\"HotfixExecuted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"}],\"name\":\"HotfixPrepared\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"whitelister\",\"type\":\"address\"}],\"name\":\"HotfixWhitelisted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minDeposit\",\"type\":\"uint256\"}],\"name\":\"MinDepositSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"baselineQuorumFactor\",\"type\":\"uint256\"}],\"name\":\"ParticipationBaselineQuorumFactorSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"baselineUpdateFactor\",\"type\":\"uint256\"}],\"name\":\"ParticipationBaselineUpdateFactorSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"participationBaseline\",\"type\":\"uint256\"}],\"name\":\"ParticipationBaselineUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"participationFloor\",\"type\":\"uint256\"}],\"name\":\"ParticipationFloorSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"ProposalApproved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"ProposalDequeued\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"ProposalExecuted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"ProposalExpired\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"proposer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"transactionCount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"deposit\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"ProposalQueued\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"revokedUpvotes\",\"type\":\"uint256\"}],\"name\":\"ProposalUpvoteRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"upvotes\",\"type\":\"uint256\"}],\"name\":\"ProposalUpvoted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"weight\",\"type\":\"uint256\"}],\"name\":\"ProposalVoteRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"yesVotes\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"noVotes\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"abstainVotes\",\"type\":\"uint256\"}],\"name\":\"ProposalVoteRevokedV2\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"weight\",\"type\":\"uint256\"}],\"name\":\"ProposalVoted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"yesVotes\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"noVotes\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"abstainVotes\",\"type\":\"uint256\"}],\"name\":\"ProposalVotedV2\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"queueExpiry\",\"type\":\"uint256\"}],\"name\":\"QueueExpirySet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"referendumStageDuration\",\"type\":\"uint256\"}],\"name\":\"ReferendumStageDurationSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"registryAddress\",\"type\":\"address\"}],\"name\":\"RegistrySet\",\"type\":\"event\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"}],\"name\":\"addValidator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"}],\"name\":\"approveHotfix\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"approver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"blsKey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"blsPop\",\"type\":\"bytes\"}],\"name\":\"checkProofOfPossession\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"concurrentProposals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"dequeueFrequency\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"dequeueProposalsIfReady\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"dequeued\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"emptyIndices\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"execute\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"destinations\",\"type\":\"address[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"uint256[]\",\"name\":\"dataLengths\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"}],\"name\":\"executeHotfix\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"aNumerator\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"aDenominator\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bNumerator\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bDenominator\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"exponent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_decimals\",\"type\":\"uint256\"}],\"name\":\"fractionMulExp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getAmountOfGoldUsedForVoting\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"header\",\"type\":\"bytes\"}],\"name\":\"getBlockNumberFromHeader\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"},{\"internalType\":\"bytes4\",\"name\":\"functionId\",\"type\":\"bytes4\"}],\"name\":\"getConstitution\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getDequeue\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getEpochNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"getEpochNumberOfBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getEpochSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getExecutionStageDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"}],\"name\":\"getHotfixRecord\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getMostRecentReferendumProposal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"getParentSealBitmap\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getParticipationParameters\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"getProposal\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"getProposalStage\",\"outputs\":[{\"internalType\":\"enum Proposals.Stage\",\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getProposalTransaction\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getQueue\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getQueueLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getReferendumStageDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getUpvoteRecord\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"getUpvotes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"header\",\"type\":\"bytes\"}],\"name\":\"getVerifiedSealBitmapFromHeader\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getVersionNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getVoteRecord\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"getVoteTotals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"header\",\"type\":\"bytes\"}],\"name\":\"hashHeader\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"}],\"name\":\"hotfixWhitelistValidatorTally\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"hotfixes\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"executed\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"preparedEpoch\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"registryAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_approver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_concurrentProposals\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minDeposit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_queueExpiry\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_dequeueFrequency\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"referendumStageDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"executionStageDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"participationBaseline\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"participationFloor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"baselineUpdateFactor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"baselineQuorumFactor\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"initialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"isApproved\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"isDequeuedProposal\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"isDequeuedProposalExpired\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"}],\"name\":\"isHotfixPassing\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"whitelister\",\"type\":\"address\"}],\"name\":\"isHotfixWhitelistedBy\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"isProposalPassing\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"isQueued\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"isQueuedProposalExpired\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isVoting\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastDequeue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"minQuorumSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minQuorumSizeInCurrentSet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"numberValidatorsInCurrentSet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"numberValidatorsInSet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"}],\"name\":\"prepareHotfix\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"proposalCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"proposalExists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"destinations\",\"type\":\"address[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"uint256[]\",\"name\":\"dataLengths\",\"type\":\"uint256[]\"},{\"internalType\":\"string\",\"name\":\"descriptionUrl\",\"type\":\"string\"}],\"name\":\"propose\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"queueExpiry\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"refundedDeposits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"registry\",\"outputs\":[{\"internalType\":\"contract IRegistry\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"newVotingPower\",\"type\":\"uint256\"}],\"name\":\"removeVotesWhenRevokingDelegatedVotes\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxAmountAllowed\",\"type\":\"uint256\"}],\"name\":\"removeVotesWhenRevokingDelegatedVotesTest\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lesser\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"greater\",\"type\":\"uint256\"}],\"name\":\"revokeUpvote\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"revokeVotes\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_approver\",\"type\":\"address\"}],\"name\":\"setApprover\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"baselineQuorumFactor\",\"type\":\"uint256\"}],\"name\":\"setBaselineQuorumFactor\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"baselineUpdateFactor\",\"type\":\"uint256\"}],\"name\":\"setBaselineUpdateFactor\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_concurrentProposals\",\"type\":\"uint256\"}],\"name\":\"setConcurrentProposals\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"},{\"internalType\":\"bytes4\",\"name\":\"functionId\",\"type\":\"bytes4\"},{\"internalType\":\"uint256\",\"name\":\"threshold\",\"type\":\"uint256\"}],\"name\":\"setConstitution\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"voterAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"proposalIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"weight\",\"type\":\"uint256\"}],\"name\":\"setDeprecatedWeight\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_dequeueFrequency\",\"type\":\"uint256\"}],\"name\":\"setDequeueFrequency\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"executionStageDuration\",\"type\":\"uint256\"}],\"name\":\"setExecutionStageDuration\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minDeposit\",\"type\":\"uint256\"}],\"name\":\"setMinDeposit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"participationBaseline\",\"type\":\"uint256\"}],\"name\":\"setParticipationBaseline\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"participationFloor\",\"type\":\"uint256\"}],\"name\":\"setParticipationFloor\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_queueExpiry\",\"type\":\"uint256\"}],\"name\":\"setQueueExpiry\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"referendumStageDuration\",\"type\":\"uint256\"}],\"name\":\"setReferendumStageDuration\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"registryAddress\",\"type\":\"address\"}],\"name\":\"setRegistry\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stageDurations\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"approval\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"referendum\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"execution\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lesser\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"greater\",\"type\":\"uint256\"}],\"name\":\"upvote\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"validatorSignerAddressFromCurrentSet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"validatorSignerAddressFromSet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"enum Proposals.VoteValue\",\"name\":\"value\",\"type\":\"uint8\"}],\"name\":\"vote\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"yesVotes\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"noVotes\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"abstainVotes\",\"type\":\"uint256\"}],\"name\":\"votePartially\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"}],\"name\":\"whitelistHotfix\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"methods\":{\"approve(uint256,uint256)\":{\"params\":{\"index\":\"The index of the proposal ID in `dequeued`.\",\"proposalId\":\"The ID of the proposal to approve.\"},\"return\":\"Whether or not the approval was made successfully.\"},\"approveHotfix(bytes32)\":{\"params\":{\"hash\":\"The abi encoded keccak256 hash of the hotfix transaction(s) to be approved.\"}},\"checkProofOfPossession(address,bytes,bytes)\":{\"params\":{\"blsKey\":\"The BLS public key that the validator is using for consensus, should pass proof  of possession. 48 bytes.\",\"blsPop\":\"The BLS public key proof-of-possession, which consists of a signature on the  account address. 96 bytes.\",\"sender\":\"The address signed by the BLS key to generate the proof of possession.\"},\"return\":\"True upon success.\"},\"dequeueProposalsIfReady()\":{\"details\":\"If any of the top proposals have expired, they are deleted.\"},\"execute(uint256,uint256)\":{\"details\":\"Does not remove the proposal if the execution fails.\",\"params\":{\"index\":\"The index of the proposal ID in `dequeued`.\",\"proposalId\":\"The ID of the proposal to vote on.\"},\"return\":\"Whether or not the proposal was executed successfully.\"},\"executeHotfix(uint256[],address[],bytes,uint256[],bytes32)\":{\"details\":\"Reverts if hotfix is already executed, not approved, or not prepared for current epoch.\",\"params\":{\"data\":\"The concatenated data to be included in the proposed transactions.\",\"dataLengths\":\"The lengths of each transaction's data.\",\"destinations\":\"The destination addresses of the proposed transactions.\",\"salt\":\"Arbitrary salt associated with hotfix which guarantees uniqueness of hash.\",\"values\":\"The values of CELO to be sent in the proposed transactions.\"}},\"fractionMulExp(uint256,uint256,uint256,uint256,uint256,uint256)\":{\"params\":{\"_decimals\":\"precision\",\"aDenominator\":\"Denominator of first fraction\",\"aNumerator\":\"Numerator of first fraction\",\"bDenominator\":\"Denominator of exponentiated fraction\",\"bNumerator\":\"Numerator of exponentiated fraction\",\"exponent\":\"exponent to raise b to\"},\"return\":\"Numerator of the computed quantity (not reduced).Denominator of the computed quantity (not reduced).\"},\"getAmountOfGoldUsedForVoting(address)\":{\"params\":{\"account\":\"The address of the account.\"},\"return\":\"The total number of votes cast by an account.\"},\"getBlockNumberFromHeader(bytes)\":{\"params\":{\"header\":\"RLP encoded header\"},\"return\":\"Block number.\"},\"getConstitution(address,bytes4)\":{\"params\":{\"destination\":\"The destination address to get the constitution for.\",\"functionId\":\"The function ID to get the constitution for, zero for the destination  default.\"},\"return\":\"The ratio of yes:no votes needed to exceed in order to pass the proposal.\"},\"getDequeue()\":{\"details\":\"Note that this includes unused indices with proposalId == 0 from deleted proposals.\",\"return\":\"The dequeued proposal IDs.\"},\"getEpochNumber()\":{\"return\":\"Current epoch number.\"},\"getEpochNumberOfBlock(uint256)\":{\"params\":{\"blockNumber\":\"Block number where epoch number is calculated.\"},\"return\":\"Epoch number.\"},\"getEpochSize()\":{\"return\":\"The current epoch size in blocks.\"},\"getExecutionStageDuration()\":{\"return\":\"The number of seconds proposals stay in the execution stage.\"},\"getHotfixRecord(bytes32)\":{\"params\":{\"hash\":\"The abi encoded keccak256 hash of the hotfix transaction.\"},\"return\":\"Hotfix approved.Hotfix executed.Hotfix preparedEpoch.\"},\"getMostRecentReferendumProposal(address)\":{\"params\":{\"account\":\"The address of the account.\"},\"return\":\"The ID of the most recently dequeued proposal voted on by `account`..\"},\"getParentSealBitmap(uint256)\":{\"params\":{\"blockNumber\":\"Block number to retrieve. Must be within 4 epochs of the current number.\"},\"return\":\"Bitmap parent seal with set bits at indices corresponding to signing validators.\"},\"getParticipationParameters()\":{\"return\":\"baseline The participation baseline parameter.baselineFloor The participation baseline floor parameter.baselineUpdateFactor The participation baseline update factor parameter.baselineQuorumFactor The participation baseline quorum factor parameter.\"},\"getProposal(uint256)\":{\"params\":{\"proposalId\":\"The ID of the proposal to unpack.\"},\"return\":\"proposerdeposittimestamptransaction Transaction count.description Description url.\"},\"getProposalStage(uint256)\":{\"params\":{\"proposalId\":\"The ID of the proposal to query.\"},\"return\":\"proposal stage\"},\"getProposalTransaction(uint256,uint256)\":{\"params\":{\"index\":\"The index of the specified transaction in the proposal's transaction list.\",\"proposalId\":\"The ID of the proposal to query.\"},\"return\":\"value Transaction value.destination Transaction destination.data Transaction data.\"},\"getQueue()\":{\"details\":\"Note that this includes expired proposals that have yet to be removed from the queue.\",\"return\":\"proposalID The proposal ID for all queued proposals.total The upvote total for all queued proposals.\"},\"getQueueLength()\":{\"return\":\"The number of proposals in the queue.\"},\"getReferendumStageDuration()\":{\"return\":\"The number of seconds proposals stay in the referendum stage.\"},\"getUpvoteRecord(address)\":{\"params\":{\"account\":\"The address of the account.\"},\"return\":\"The ID of the proposal upvoted by `account`.The weight of that upvote.\"},\"getUpvotes(uint256)\":{\"params\":{\"proposalId\":\"The ID of the proposal.\"},\"return\":\"The number of upvotes a queued proposal has received.\"},\"getVerifiedSealBitmapFromHeader(bytes)\":{\"params\":{\"header\":\"RLP encoded header\"},\"return\":\"Bitmap parent seal with set bits at indices correspoinding to signing validators.\"},\"getVersionNumber()\":{\"return\":\"Storage version of the contract.Major version of the contract.Minor version of the contract.Patch version of the contract.\"},\"getVoteRecord(address,uint256)\":{\"params\":{\"account\":\"The address of the account to get the record for.\",\"index\":\"The index in `dequeued`.\"},\"return\":\"The corresponding proposal ID, vote value, and weight.The depreciated vote value.The deprecieated weight.The yes weight.The no weight.The abstain weight.\"},\"getVoteTotals(uint256)\":{\"params\":{\"proposalId\":\"The ID of the proposal.\"},\"return\":\"yes The yes vote totals.no The no vote totals.abstain The abstain vote totals.\"},\"hashHeader(bytes)\":{\"params\":{\"header\":\"RLP encoded header\"},\"return\":\"Header hash.\"},\"hotfixWhitelistValidatorTally(bytes32)\":{\"params\":{\"hash\":\"The abi encoded keccak256 hash of the hotfix transaction.\"},\"return\":\"Whitelist tally\"},\"initialize(address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256)\":{\"details\":\"Should be called only once.\",\"params\":{\"_approver\":\"The address that needs to approve proposals to move to the referendum stage.\",\"_concurrentProposals\":\"The number of proposals to dequeue at once.\",\"_dequeueFrequency\":\"The number of seconds before the next batch of proposals can be  dequeued.\",\"_minDeposit\":\"The minimum CELO deposit needed to make a proposal.\",\"_queueExpiry\":\"The number of seconds a proposal can stay in the queue before expiring.\",\"baselineQuorumFactor\":\"The proportion of the baseline that constitutes quorum.\",\"baselineUpdateFactor\":\"The weight of the new participation in the baseline update rule.\",\"executionStageDuration\":\"The number of seconds users have to execute a passed proposal  after the referendum stage ends.\",\"participationBaseline\":\"The initial value of the participation baseline.\",\"participationFloor\":\"The participation floor.\",\"referendumStageDuration\":\"The number of seconds users have to vote on a dequeued proposal  after the approval stage ends.\",\"registryAddress\":\"The address of the registry contract.\"}},\"isApproved(uint256)\":{\"params\":{\"proposalId\":\"The ID of the proposal.\"},\"return\":\"Whether or not the proposal has been approved.\"},\"isDequeuedProposal(uint256,uint256)\":{\"params\":{\"index\":\"The index of the proposal ID in `dequeued`.\",\"proposalId\":\"The ID of the proposal.\"},\"return\":\"Whether the proposal is in `dequeued`.\"},\"isDequeuedProposalExpired(uint256)\":{\"params\":{\"proposalId\":\"The ID of the proposal.\"},\"return\":\"Whether or not the dequeued proposal has expired.\"},\"isHotfixPassing(bytes32)\":{\"params\":{\"hash\":\"The abi encoded keccak256 hash of the hotfix transaction.\"},\"return\":\"Whether validator whitelist tally >= validator byzantine quorum\"},\"isHotfixWhitelistedBy(bytes32,address)\":{\"params\":{\"hash\":\"The abi encoded keccak256 hash of the hotfix transaction(s) to be whitelisted.\",\"whitelister\":\"Address to check whitelist status of.\"}},\"isOwner()\":{\"details\":\"Returns true if the caller is the current owner.\"},\"isProposalPassing(uint256)\":{\"params\":{\"proposalId\":\"The ID of the proposal.\"},\"return\":\"Whether or not the proposal is passing.\"},\"isQueued(uint256)\":{\"details\":\"NOTE: proposal may be expired\",\"params\":{\"proposalId\":\"The ID of the proposal.\"},\"return\":\"Whether or not the proposal is in the queue.\"},\"isQueuedProposalExpired(uint256)\":{\"params\":{\"proposalId\":\"The ID of the proposal.\"},\"return\":\"Whether or not the dequeued proposal has expired.\"},\"isVoting(address)\":{\"params\":{\"account\":\"The address of the account.\"},\"return\":\"Whether or not the account is voting on proposals.\"},\"minQuorumSize(uint256)\":{\"details\":\"Computed in celo-blockchain as int(math.Ceil(float64(2*valSet.Size()) / 3))\"},\"minQuorumSizeInCurrentSet()\":{\"return\":\"Byzantine quorum of validators.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"prepareHotfix(bytes32)\":{\"params\":{\"hash\":\"The hash of the hotfix to be prepared.\"}},\"proposalExists(uint256)\":{\"params\":{\"proposalId\":\"The ID of the proposal.\"},\"return\":\"Whether or not the proposal exists.\"},\"propose(uint256[],address[],bytes,uint256[],string)\":{\"details\":\"The minimum deposit must be included with the proposal, returned if/when the proposal is  dequeued.\",\"params\":{\"data\":\"The concatenated data to be included in the proposed transactions.\",\"dataLengths\":\"The lengths of each transaction's data.\",\"destinations\":\"The destination addresses of the proposed transactions.\",\"values\":\"The values of CELO to be sent in the proposed transactions.\"},\"return\":\"The ID of the newly proposed proposal.\"},\"removeVotesWhenRevokingDelegatedVotes(address,uint256)\":{\"params\":{\"account\":\"The address of the account.\",\"newVotingPower\":\"The adjusted voting power of delegatee.\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner.     * NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"revokeUpvote(uint256,uint256)\":{\"details\":\"Provide 0 for `lesser`/`greater` when the proposal will be at the tail/head of the queue.\",\"params\":{\"greater\":\"The ID of the proposal that will be just ahead of the previously upvoted  proposal in the queue.\",\"lesser\":\"The ID of the proposal that will be just behind the previously upvoted proposal  in the queue.\"},\"return\":\"Whether or not the upvote was revoked successfully.\"},\"revokeVotes()\":{\"return\":\"Whether or not all votes of an account were successfully revoked.\"},\"setApprover(address)\":{\"params\":{\"_approver\":\"The address that has permission to approve proposals in the approval stage.\"}},\"setBaselineQuorumFactor(uint256)\":{\"params\":{\"baselineQuorumFactor\":\"The new baseline quorum factor.\"}},\"setBaselineUpdateFactor(uint256)\":{\"params\":{\"baselineUpdateFactor\":\"The new baseline update factor.\"}},\"setConcurrentProposals(uint256)\":{\"params\":{\"_concurrentProposals\":\"The number of proposals to dequeue at at a time.\"}},\"setConstitution(address,bytes4,uint256)\":{\"details\":\"If no constitution is explicitly set the default is a simple majority, i.e. 1:2.\",\"params\":{\"destination\":\"The destination of proposals for which this threshold should apply.\",\"functionId\":\"The function ID of proposals for which this threshold should apply. Zero  will set the default.\",\"threshold\":\"The threshold.\"}},\"setDequeueFrequency(uint256)\":{\"params\":{\"_dequeueFrequency\":\"The number of seconds before the next batch of proposals can be  dequeued.\"}},\"setExecutionStageDuration(uint256)\":{\"params\":{\"executionStageDuration\":\"The number of seconds proposals stay in the execution stage.\"}},\"setMinDeposit(uint256)\":{\"params\":{\"_minDeposit\":\"The minimum CELO deposit needed to make a proposal.\"}},\"setParticipationBaseline(uint256)\":{\"params\":{\"participationBaseline\":\"The value of the baseline.\"}},\"setParticipationFloor(uint256)\":{\"params\":{\"participationFloor\":\"The value at which the baseline is floored.\"}},\"setQueueExpiry(uint256)\":{\"params\":{\"_queueExpiry\":\"The number of seconds a proposal can stay in the queue before expiring.\"}},\"setReferendumStageDuration(uint256)\":{\"params\":{\"referendumStageDuration\":\"The number of seconds proposals stay in the referendum stage.\"}},\"setRegistry(address)\":{\"params\":{\"registryAddress\":\"The address of a registry contract for routing to other contracts.\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"upvote(uint256,uint256,uint256)\":{\"details\":\"Provide 0 for `lesser`/`greater` when the proposal will be at the tail/head of the queue.Reverts if the account has already upvoted a proposal in the queue.\",\"params\":{\"greater\":\"The ID of the proposal that will be just ahead `proposalId` in the queue.\",\"lesser\":\"The ID of the proposal that will be just behind `proposalId` in the queue.\",\"proposalId\":\"The ID of the proposal to upvote.\"},\"return\":\"Whether or not the upvote was made successfully.\"},\"validatorSignerAddressFromSet(uint256,uint256)\":{\"params\":{\"blockNumber\":\"Block number to retrieve the validator set from.\",\"index\":\"Index of requested validator in the validator set.\"},\"return\":\"Address of validator at the requested index.\"},\"vote(uint256,uint256,uint8)\":{\"params\":{\"index\":\"The index of the proposal ID in `dequeued`.\",\"proposalId\":\"The ID of the proposal to vote on.\",\"value\":\"Whether to vote yes, no, or abstain.\"},\"return\":\"Whether or not the vote was cast successfully.\"},\"votePartially(uint256,uint256,uint256,uint256,uint256)\":{\"params\":{\"abstainVotes\":\"The abstain votes weight.\",\"index\":\"The index of the proposal ID in `dequeued`.\",\"noVotes\":\"The no votes weight.\",\"proposalId\":\"The ID of the proposal to vote on.\",\"yesVotes\":\"The yes votes weight.\"},\"return\":\"Whether or not the vote was cast successfully.\"},\"whitelistHotfix(bytes32)\":{\"params\":{\"hash\":\"The abi encoded keccak256 hash of the hotfix transaction(s) to be whitelisted.\"}},\"withdraw()\":{\"return\":\"Whether or not the withdraw was successful.\"}}},\"userdoc\":{\"methods\":{\"approve(uint256,uint256)\":{\"notice\":\"Approves a proposal in the approval stage.\"},\"approveHotfix(bytes32)\":{\"notice\":\"Approves the hash of a hotfix transaction(s).\"},\"checkProofOfPossession(address,bytes,bytes)\":{\"notice\":\"Checks a BLS proof of possession.\"},\"dequeueProposalsIfReady()\":{\"notice\":\"Removes the proposals with the most upvotes from the queue, moving them to the  approval stage.\"},\"execute(uint256,uint256)\":{\"notice\":\"Executes a proposal in the execution stage, removing it from `dequeued`.\"},\"executeHotfix(uint256[],address[],bytes,uint256[],bytes32)\":{\"notice\":\"Executes a whitelisted proposal.\"},\"fractionMulExp(uint256,uint256,uint256,uint256,uint256,uint256)\":{\"notice\":\"calculate a * b^x for fractions a, b to `decimals` precision\"},\"getAmountOfGoldUsedForVoting(address)\":{\"notice\":\"Returns max number of votes cast by an account.\"},\"getBlockNumberFromHeader(bytes)\":{\"notice\":\"Parses block number out of header.\"},\"getConstitution(address,bytes4)\":{\"notice\":\"Returns the constitution for a particular destination and function ID.\"},\"getDequeue()\":{\"notice\":\"Returns the dequeued proposal IDs.\"},\"getEpochNumber()\":{\"notice\":\"Returns the epoch number at a block.\"},\"getEpochNumberOfBlock(uint256)\":{\"notice\":\"Returns the epoch number at a block.\"},\"getEpochSize()\":{\"notice\":\"Returns the current epoch size in blocks.\"},\"getExecutionStageDuration()\":{\"notice\":\"Returns the number of seconds proposals stay in the execution stage.\"},\"getHotfixRecord(bytes32)\":{\"notice\":\"Gets information about a hotfix.\"},\"getMostRecentReferendumProposal(address)\":{\"notice\":\"Returns the ID of the most recently dequeued proposal voted on by `account`.\"},\"getParentSealBitmap(uint256)\":{\"notice\":\"Gets the parent seal bitmap from the header at the given block number.\"},\"getParticipationParameters()\":{\"notice\":\"Returns the participation parameters.\"},\"getProposal(uint256)\":{\"notice\":\"Returns an unpacked proposal struct with its transaction count.\"},\"getProposalStage(uint256)\":{\"notice\":\"Returns stage of governance process given proposal is in\"},\"getProposalTransaction(uint256,uint256)\":{\"notice\":\"Returns a specified transaction in a proposal.\"},\"getQueue()\":{\"notice\":\"Returns the proposal ID and upvote total for all queued proposals.\"},\"getQueueLength()\":{\"notice\":\"Returns the number of proposals in the queue.\"},\"getReferendumStageDuration()\":{\"notice\":\"Returns the number of seconds proposals stay in the referendum stage.\"},\"getUpvoteRecord(address)\":{\"notice\":\"Returns the ID of the proposal upvoted by `account` and the weight of that upvote.\"},\"getUpvotes(uint256)\":{\"notice\":\"Returns the number of upvotes the queued proposal has received.\"},\"getVerifiedSealBitmapFromHeader(bytes)\":{\"notice\":\"Verifies the BLS signature on the header and returns the seal bitmap. The validator set used for verification is retrieved based on the parent hash field of the header.  If the parent hash is not in the blockchain, verification fails.\"},\"getVersionNumber()\":{\"notice\":\"Returns the storage, major, minor, and patch version of the contract.\"},\"getVoteRecord(address,uint256)\":{\"notice\":\"Returns an accounts vote record on a particular index in `dequeued`.\"},\"getVoteTotals(uint256)\":{\"notice\":\"Returns the referendum vote totals for a proposal.\"},\"hashHeader(bytes)\":{\"notice\":\"Computes hash of header.\"},\"hotfixWhitelistValidatorTally(bytes32)\":{\"notice\":\"Returns number of validators from current set which have whitelisted the given hotfix.\"},\"initialize(address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256)\":{\"notice\":\"Used in place of the constructor to allow the contract to be upgradable via proxy.\"},\"isApproved(uint256)\":{\"notice\":\"Returns whether or not a proposal has been approved.\"},\"isDequeuedProposal(uint256,uint256)\":{\"notice\":\"Returns whether a proposal is dequeued at the given index.\"},\"isDequeuedProposalExpired(uint256)\":{\"notice\":\"Returns whether or not a dequeued proposal has expired.\"},\"isHotfixPassing(bytes32)\":{\"notice\":\"Checks if a byzantine quorum of validators has whitelisted the given hotfix.\"},\"isHotfixWhitelistedBy(bytes32,address)\":{\"notice\":\"Returns whether given hotfix hash has been whitelisted by given address.\"},\"isProposalPassing(uint256)\":{\"notice\":\"Returns whether or not a particular proposal is passing according to the constitution  and the participation levels.\"},\"isQueued(uint256)\":{\"notice\":\"Returns whether or not a proposal is in the queue.\"},\"isQueuedProposalExpired(uint256)\":{\"notice\":\"Returns whether or not a queued proposal has expired.\"},\"isVoting(address)\":{\"notice\":\"Returns whether or not a particular account is voting on proposals.\"},\"minQuorumSize(uint256)\":{\"notice\":\"Returns the minimum number of required signers for a given block number.\"},\"minQuorumSizeInCurrentSet()\":{\"notice\":\"Computes byzantine quorum from current validator set size\"},\"prepareHotfix(bytes32)\":{\"notice\":\"Gives hotfix a prepared epoch for execution.\"},\"proposalExists(uint256)\":{\"notice\":\"Returns whether or not a proposal exists.\"},\"propose(uint256[],address[],bytes,uint256[],string)\":{\"notice\":\"Creates a new proposal and adds it to end of the queue with no upvotes.\"},\"removeVotesWhenRevokingDelegatedVotes(address,uint256)\":{\"notice\":\"When delegator removes votes from delegatee during the time when delegator is voting for governance proposal, this method will remove votes from voted proposal proportionally.\"},\"revokeUpvote(uint256,uint256)\":{\"notice\":\"Revokes an upvote on a queued proposal.\"},\"revokeVotes()\":{\"notice\":\"Revoke votes on all proposals of sender in the referendum stage.\"},\"setApprover(address)\":{\"notice\":\"Updates the address that has permission to approve proposals in the approval stage.\"},\"setBaselineQuorumFactor(uint256)\":{\"notice\":\"Updates the proportion of the baseline that constitutes quorum.\"},\"setBaselineUpdateFactor(uint256)\":{\"notice\":\"Updates the weight of the new participation in the baseline update rule.\"},\"setConcurrentProposals(uint256)\":{\"notice\":\"Updates the number of proposals to dequeue at a time.\"},\"setConstitution(address,bytes4,uint256)\":{\"notice\":\"Updates the ratio of yes:yes+no votes needed for a specific class of proposals to pass.\"},\"setDequeueFrequency(uint256)\":{\"notice\":\"Updates the minimum number of seconds before the next batch of proposals can be  dequeued.\"},\"setExecutionStageDuration(uint256)\":{\"notice\":\"Updates the number of seconds proposals stay in the execution stage.\"},\"setMinDeposit(uint256)\":{\"notice\":\"Updates the minimum deposit needed to make a proposal.\"},\"setParticipationBaseline(uint256)\":{\"notice\":\"Updates the participation baseline.\"},\"setParticipationFloor(uint256)\":{\"notice\":\"Updates the floor of the participation baseline.\"},\"setQueueExpiry(uint256)\":{\"notice\":\"Updates the number of seconds before a queued proposal expires.\"},\"setReferendumStageDuration(uint256)\":{\"notice\":\"Updates the number of seconds proposals stay in the referendum stage.\"},\"setRegistry(address)\":{\"notice\":\"Updates the address pointing to a Registry contract.\"},\"upvote(uint256,uint256,uint256)\":{\"notice\":\"Upvotes a queued proposal.\"},\"validatorSignerAddressFromSet(uint256,uint256)\":{\"notice\":\"Gets a validator address from the validator set at the given block number.\"},\"vote(uint256,uint256,uint8)\":{\"notice\":\"Votes on a proposal in the referendum stage.\"},\"votePartially(uint256,uint256,uint256,uint256,uint256)\":{\"notice\":\"Votes partially on a proposal in the referendum stage.\"},\"whitelistHotfix(bytes32)\":{\"notice\":\"Whitelists the hash of a hotfix transaction(s).\"},\"withdraw()\":{\"notice\":\"Withdraws refunded CELO deposits.\"}}}},\"settings\":{\"compilationTarget\":{\"project:/contracts/governance/test/GovernanceTest.sol\":\"GovernanceTest\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"openzeppelin-solidity/contracts/GSN/Context.sol\":{\"content\":\"pragma solidity ^0.5.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\ncontract Context {\\n    // Empty internal constructor, to prevent people from mistakenly deploying\\n    // an instance of this contract, which should be used via inheritance.\\n    constructor () internal { }\\n    // solhint-disable-previous-line no-empty-blocks\\n\\n    function _msgSender() internal view returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x90a3995645af7562d84b9d69363ffa5ae7217714ab61e951bf7bc450f40e4061\"},\"openzeppelin-solidity/contracts/math/Math.sol\":{\"content\":\"pragma solidity ^0.5.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow, so we distribute\\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\\n    }\\n}\\n\",\"keccak256\":\"0x4b5aa451e4e8801478708f94b118a7821c0500d676255eaf89fc78c14856ce4e\"},\"openzeppelin-solidity/contracts/math/SafeMath.sol\":{\"content\":\"pragma solidity ^0.5.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        // Solidity only automatically asserts when dividing by 0\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0x640b6dee7a4b830bdfd52b5031a07fc2b12209f5b2e29e5d364a7d37f69d8076\"},\"openzeppelin-solidity/contracts/ownership/Ownable.sol\":{\"content\":\"pragma solidity ^0.5.0;\\n\\nimport \\\"../GSN/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\ncontract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(isOwner(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the caller is the current owner.\\n     */\\n    function isOwner() public view returns (bool) {\\n        return _msgSender() == _owner;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public onlyOwner {\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     */\\n    function _transferOwnership(address newOwner) internal {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x6fb9d7889769d7cc161225f9ef7a90e468ba9788b253816f8d8b6894d3472c24\"},\"openzeppelin-solidity/contracts/token/ERC20/IERC20.sol\":{\"content\":\"pragma solidity ^0.5.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\\n * the optional functions; to access them see {ERC20Detailed}.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xe5bb0f57cff3e299f360052ba50f1ea0fff046df2be070b6943e0e3c3fdad8a9\"},\"openzeppelin-solidity/contracts/utils/Address.sol\":{\"content\":\"pragma solidity ^0.5.5;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following \\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\\n        // for accounts without code, i.e. `keccak256('')`\\n        bytes32 codehash;\\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { codehash := extcodehash(account) }\\n        return (codehash != accountHash && codehash != 0x0);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` into `address payable`. Note that this is\\n     * simply a type cast: the actual underlying value is not changed.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function toPayable(address account) internal pure returns (address payable) {\\n        return address(uint160(account));\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-call-value\\n        (bool success, ) = recipient.call.value(amount)(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x1a8e5072509c5ea7365eb1d48030b9be865140c8fb779968da0a459a0e174a11\"},\"project:/contracts/common/ExtractFunctionSignature.sol\":{\"content\":\"pragma solidity ^0.5.13;\\n\\nlibrary ExtractFunctionSignature {\\n  /**\\n   * @notice Extracts the first four bytes of a byte array.\\n   * @param input The byte array.\\n   * @return The first four bytes of `input`.\\n   */\\n  function extractFunctionSignature(bytes memory input) internal pure returns (bytes4) {\\n    return (bytes4(input[0]) |\\n      (bytes4(input[1]) >> 8) |\\n      (bytes4(input[2]) >> 16) |\\n      (bytes4(input[3]) >> 24));\\n  }\\n}\\n\",\"keccak256\":\"0x3b56d6895c40c94dac019ad89bb4bd362e9deb0bbb2c46b0b1e23bd23c042e79\"},\"project:/contracts/common/FixidityLib.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.5.13 <0.9.0;\\n\\n/**\\n * @title FixidityLib\\n * @author Gadi Guy, Alberto Cuesta Canada\\n * @notice This library provides fixed point arithmetic with protection against\\n * overflow.\\n * All operations are done with uint256 and the operands must have been created\\n * with any of the newFrom* functions, which shift the comma digits() to the\\n * right and check for limits, or with wrap() which expects a number already\\n * in the internal representation of a fraction.\\n * When using this library be sure to use maxNewFixed() as the upper limit for\\n * creation of fixed point numbers.\\n * @dev All contained functions are pure and thus marked internal to be inlined\\n * on consuming contracts at compile time for gas efficiency.\\n */\\nlibrary FixidityLib {\\n  struct Fraction {\\n    uint256 value;\\n  }\\n\\n  /**\\n   * @notice Number of positions that the comma is shifted to the right.\\n   */\\n  function digits() internal pure returns (uint8) {\\n    return 24;\\n  }\\n\\n  uint256 private constant FIXED1_UINT = 1000000000000000000000000;\\n\\n  /**\\n   * @notice This is 1 in the fixed point units used in this library.\\n   * @dev Test fixed1() equals 10^digits()\\n   * Hardcoded to 24 digits.\\n   */\\n  function fixed1() internal pure returns (Fraction memory) {\\n    return Fraction(FIXED1_UINT);\\n  }\\n\\n  /**\\n   * @notice Wrap a uint256 that represents a 24-decimal fraction in a Fraction\\n   * struct.\\n   * @param x Number that already represents a 24-decimal fraction.\\n   * @return A Fraction struct with contents x.\\n   */\\n  function wrap(uint256 x) internal pure returns (Fraction memory) {\\n    return Fraction(x);\\n  }\\n\\n  /**\\n   * @notice Unwraps the uint256 inside of a Fraction struct.\\n   */\\n  function unwrap(Fraction memory x) internal pure returns (uint256) {\\n    return x.value;\\n  }\\n\\n  /**\\n   * @notice The amount of decimals lost on each multiplication operand.\\n   * @dev Test mulPrecision() equals sqrt(fixed1)\\n   */\\n  function mulPrecision() internal pure returns (uint256) {\\n    return 1000000000000;\\n  }\\n\\n  /**\\n   * @notice Maximum value that can be converted to fixed point. Optimize for deployment.\\n   * @dev\\n   * Test maxNewFixed() equals maxUint256() / fixed1()\\n   */\\n  function maxNewFixed() internal pure returns (uint256) {\\n    return 115792089237316195423570985008687907853269984665640564;\\n  }\\n\\n  /**\\n   * @notice Converts a uint256 to fixed point Fraction\\n   * @dev Test newFixed(0) returns 0\\n   * Test newFixed(1) returns fixed1()\\n   * Test newFixed(maxNewFixed()) returns maxNewFixed() * fixed1()\\n   * Test newFixed(maxNewFixed()+1) fails\\n   */\\n  function newFixed(uint256 x) internal pure returns (Fraction memory) {\\n    require(x <= maxNewFixed(), \\\"can't create fixidity number larger than maxNewFixed()\\\");\\n    return Fraction(x * FIXED1_UINT);\\n  }\\n\\n  /**\\n   * @notice Converts a uint256 in the fixed point representation of this\\n   * library to a non decimal. All decimal digits will be truncated.\\n   */\\n  function fromFixed(Fraction memory x) internal pure returns (uint256) {\\n    return x.value / FIXED1_UINT;\\n  }\\n\\n  /**\\n   * @notice Converts two uint256 representing a fraction to fixed point units,\\n   * equivalent to multiplying dividend and divisor by 10^digits().\\n   * @param numerator numerator must be <= maxNewFixed()\\n   * @param denominator denominator must be <= maxNewFixed() and denominator can't be 0\\n   * @dev\\n   * Test newFixedFraction(1,0) fails\\n   * Test newFixedFraction(0,1) returns 0\\n   * Test newFixedFraction(1,1) returns fixed1()\\n   * Test newFixedFraction(1,fixed1()) returns 1\\n   */\\n  function newFixedFraction(uint256 numerator, uint256 denominator)\\n    internal\\n    pure\\n    returns (Fraction memory)\\n  {\\n    Fraction memory convertedNumerator = newFixed(numerator);\\n    Fraction memory convertedDenominator = newFixed(denominator);\\n    return divide(convertedNumerator, convertedDenominator);\\n  }\\n\\n  /**\\n   * @notice Returns the integer part of a fixed point number.\\n   * @dev\\n   * Test integer(0) returns 0\\n   * Test integer(fixed1()) returns fixed1()\\n   * Test integer(newFixed(maxNewFixed())) returns maxNewFixed()*fixed1()\\n   */\\n  function integer(Fraction memory x) internal pure returns (Fraction memory) {\\n    return Fraction((x.value / FIXED1_UINT) * FIXED1_UINT); // Can't overflow\\n  }\\n\\n  /**\\n   * @notice Returns the fractional part of a fixed point number.\\n   * In the case of a negative number the fractional is also negative.\\n   * @dev\\n   * Test fractional(0) returns 0\\n   * Test fractional(fixed1()) returns 0\\n   * Test fractional(fixed1()-1) returns 10^24-1\\n   */\\n  function fractional(Fraction memory x) internal pure returns (Fraction memory) {\\n    return Fraction(x.value - (x.value / FIXED1_UINT) * FIXED1_UINT); // Can't overflow\\n  }\\n\\n  /**\\n   * @notice x+y.\\n   * @dev The maximum value that can be safely used as an addition operator is defined as\\n   * maxFixedAdd = maxUint256()-1 / 2, or\\n   * 57896044618658097711785492504343953926634992332820282019728792003956564819967.\\n   * Test add(maxFixedAdd,maxFixedAdd) equals maxFixedAdd + maxFixedAdd\\n   * Test add(maxFixedAdd+1,maxFixedAdd+1) throws\\n   */\\n  function add(Fraction memory x, Fraction memory y) internal pure returns (Fraction memory) {\\n    uint256 z = x.value + y.value;\\n    require(z >= x.value, \\\"add overflow detected\\\");\\n    return Fraction(z);\\n  }\\n\\n  /**\\n   * @notice x-y.\\n   * @dev\\n   * Test subtract(6, 10) fails\\n   */\\n  function subtract(Fraction memory x, Fraction memory y) internal pure returns (Fraction memory) {\\n    require(x.value >= y.value, \\\"substraction underflow detected\\\");\\n    return Fraction(x.value - y.value);\\n  }\\n\\n  /**\\n   * @notice x*y. If any of the operators is higher than the max multiplier value it\\n   * might overflow.\\n   * @dev The maximum value that can be safely used as a multiplication operator\\n   * (maxFixedMul) is calculated as sqrt(maxUint256()*fixed1()),\\n   * or 340282366920938463463374607431768211455999999999999\\n   * Test multiply(0,0) returns 0\\n   * Test multiply(maxFixedMul,0) returns 0\\n   * Test multiply(0,maxFixedMul) returns 0\\n   * Test multiply(fixed1()/mulPrecision(),fixed1()*mulPrecision()) returns fixed1()\\n   * Test multiply(maxFixedMul,maxFixedMul) is around maxUint256()\\n   * Test multiply(maxFixedMul+1,maxFixedMul+1) fails\\n   */\\n  function multiply(Fraction memory x, Fraction memory y) internal pure returns (Fraction memory) {\\n    if (x.value == 0 || y.value == 0) return Fraction(0);\\n    if (y.value == FIXED1_UINT) return x;\\n    if (x.value == FIXED1_UINT) return y;\\n\\n    // Separate into integer and fractional parts\\n    // x = x1 + x2, y = y1 + y2\\n    uint256 x1 = integer(x).value / FIXED1_UINT;\\n    uint256 x2 = fractional(x).value;\\n    uint256 y1 = integer(y).value / FIXED1_UINT;\\n    uint256 y2 = fractional(y).value;\\n\\n    // (x1 + x2) * (y1 + y2) = (x1 * y1) + (x1 * y2) + (x2 * y1) + (x2 * y2)\\n    uint256 x1y1 = x1 * y1;\\n    if (x1 != 0) require(x1y1 / x1 == y1, \\\"overflow x1y1 detected\\\");\\n\\n    // x1y1 needs to be multiplied back by fixed1\\n    // solium-disable-next-line mixedcase\\n    uint256 fixed_x1y1 = x1y1 * FIXED1_UINT;\\n    if (x1y1 != 0) require(fixed_x1y1 / x1y1 == FIXED1_UINT, \\\"overflow x1y1 * fixed1 detected\\\");\\n    x1y1 = fixed_x1y1;\\n\\n    uint256 x2y1 = x2 * y1;\\n    if (x2 != 0) require(x2y1 / x2 == y1, \\\"overflow x2y1 detected\\\");\\n\\n    uint256 x1y2 = x1 * y2;\\n    if (x1 != 0) require(x1y2 / x1 == y2, \\\"overflow x1y2 detected\\\");\\n\\n    x2 = x2 / mulPrecision();\\n    y2 = y2 / mulPrecision();\\n    uint256 x2y2 = x2 * y2;\\n    if (x2 != 0) require(x2y2 / x2 == y2, \\\"overflow x2y2 detected\\\");\\n\\n    // result = fixed1() * x1 * y1 + x1 * y2 + x2 * y1 + x2 * y2 / fixed1();\\n    Fraction memory result = Fraction(x1y1);\\n    result = add(result, Fraction(x2y1)); // Add checks for overflow\\n    result = add(result, Fraction(x1y2)); // Add checks for overflow\\n    result = add(result, Fraction(x2y2)); // Add checks for overflow\\n    return result;\\n  }\\n\\n  /**\\n   * @notice 1/x\\n   * @dev\\n   * Test reciprocal(0) fails\\n   * Test reciprocal(fixed1()) returns fixed1()\\n   * Test reciprocal(fixed1()*fixed1()) returns 1 // Testing how the fractional is truncated\\n   * Test reciprocal(1+fixed1()*fixed1()) returns 0 // Testing how the fractional is truncated\\n   * Test reciprocal(newFixedFraction(1, 1e24)) returns newFixed(1e24)\\n   */\\n  function reciprocal(Fraction memory x) internal pure returns (Fraction memory) {\\n    require(x.value != 0, \\\"can't call reciprocal(0)\\\");\\n    return Fraction((FIXED1_UINT * FIXED1_UINT) / x.value); // Can't overflow\\n  }\\n\\n  /**\\n   * @notice x/y. If the dividend is higher than the max dividend value, it\\n   * might overflow. You can use multiply(x,reciprocal(y)) instead.\\n   * @dev The maximum value that can be safely used as a dividend (maxNewFixed) is defined as\\n   * divide(maxNewFixed,newFixedFraction(1,fixed1())) is around maxUint256().\\n   * This yields the value 115792089237316195423570985008687907853269984665640564.\\n   * Test maxNewFixed equals maxUint256()/fixed1()\\n   * Test divide(maxNewFixed,1) equals maxNewFixed*(fixed1)\\n   * Test divide(maxNewFixed+1,multiply(mulPrecision(),mulPrecision())) throws\\n   * Test divide(fixed1(),0) fails\\n   * Test divide(maxNewFixed,1) = maxNewFixed*(10^digits())\\n   * Test divide(maxNewFixed+1,1) throws\\n   */\\n  function divide(Fraction memory x, Fraction memory y) internal pure returns (Fraction memory) {\\n    require(y.value != 0, \\\"can't divide by 0\\\");\\n    uint256 X = x.value * FIXED1_UINT;\\n    require(X / FIXED1_UINT == x.value, \\\"overflow at divide\\\");\\n    return Fraction(X / y.value);\\n  }\\n\\n  /**\\n   * @notice x > y\\n   */\\n  function gt(Fraction memory x, Fraction memory y) internal pure returns (bool) {\\n    return x.value > y.value;\\n  }\\n\\n  /**\\n   * @notice x >= y\\n   */\\n  function gte(Fraction memory x, Fraction memory y) internal pure returns (bool) {\\n    return x.value >= y.value;\\n  }\\n\\n  /**\\n   * @notice x < y\\n   */\\n  function lt(Fraction memory x, Fraction memory y) internal pure returns (bool) {\\n    return x.value < y.value;\\n  }\\n\\n  /**\\n   * @notice x <= y\\n   */\\n  function lte(Fraction memory x, Fraction memory y) internal pure returns (bool) {\\n    return x.value <= y.value;\\n  }\\n\\n  /**\\n   * @notice x == y\\n   */\\n  function equals(Fraction memory x, Fraction memory y) internal pure returns (bool) {\\n    return x.value == y.value;\\n  }\\n\\n  /**\\n   * @notice x <= 1\\n   */\\n  function isProperFraction(Fraction memory x) internal pure returns (bool) {\\n    return lte(x, fixed1());\\n  }\\n}\\n\",\"keccak256\":\"0xf1cebbfcf298ef05f24e940ab4351049e2da6e5ee77b272257d2c86b4cd1cc1c\"},\"project:/contracts/common/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.5.13 <0.9.0;\\n\\ncontract Initializable {\\n  bool public initialized;\\n\\n  constructor(bool testingDeployment) public {\\n    if (!testingDeployment) {\\n      initialized = true;\\n    }\\n  }\\n\\n  modifier initializer() {\\n    require(!initialized, \\\"contract already initialized\\\");\\n    initialized = true;\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0x27277d9f2c894659833be45eeca368a6d5ff060d944f0ad335e31003bf6477ed\"},\"project:/contracts/common/UsingPrecompiles.sol\":{\"content\":\"pragma solidity ^0.5.13;\\n\\nimport \\\"openzeppelin-solidity/contracts/math/SafeMath.sol\\\";\\nimport \\\"../common/interfaces/ICeloVersionedContract.sol\\\";\\n\\ncontract UsingPrecompiles {\\n  using SafeMath for uint256;\\n\\n  address constant TRANSFER = address(0xff - 2);\\n  address constant FRACTION_MUL = address(0xff - 3);\\n  address constant PROOF_OF_POSSESSION = address(0xff - 4);\\n  address constant GET_VALIDATOR = address(0xff - 5);\\n  address constant NUMBER_VALIDATORS = address(0xff - 6);\\n  address constant EPOCH_SIZE = address(0xff - 7);\\n  address constant BLOCK_NUMBER_FROM_HEADER = address(0xff - 8);\\n  address constant HASH_HEADER = address(0xff - 9);\\n  address constant GET_PARENT_SEAL_BITMAP = address(0xff - 10);\\n  address constant GET_VERIFIED_SEAL_BITMAP = address(0xff - 11);\\n\\n  /**\\n   * @notice calculate a * b^x for fractions a, b to `decimals` precision\\n   * @param aNumerator Numerator of first fraction\\n   * @param aDenominator Denominator of first fraction\\n   * @param bNumerator Numerator of exponentiated fraction\\n   * @param bDenominator Denominator of exponentiated fraction\\n   * @param exponent exponent to raise b to\\n   * @param _decimals precision\\n   * @return Numerator of the computed quantity (not reduced).\\n   * @return Denominator of the computed quantity (not reduced).\\n   */\\n  function fractionMulExp(\\n    uint256 aNumerator,\\n    uint256 aDenominator,\\n    uint256 bNumerator,\\n    uint256 bDenominator,\\n    uint256 exponent,\\n    uint256 _decimals\\n  ) public view returns (uint256, uint256) {\\n    require(aDenominator != 0 && bDenominator != 0, \\\"a denominator is zero\\\");\\n    uint256 returnNumerator;\\n    uint256 returnDenominator;\\n    bool success;\\n    bytes memory out;\\n    (success, out) = FRACTION_MUL.staticcall(\\n      abi.encodePacked(aNumerator, aDenominator, bNumerator, bDenominator, exponent, _decimals)\\n    );\\n    require(success, \\\"error calling fractionMulExp precompile\\\");\\n    returnNumerator = getUint256FromBytes(out, 0);\\n    returnDenominator = getUint256FromBytes(out, 32);\\n    return (returnNumerator, returnDenominator);\\n  }\\n\\n  /**\\n   * @notice Returns the current epoch size in blocks.\\n   * @return The current epoch size in blocks.\\n   */\\n  function getEpochSize() public view returns (uint256) {\\n    bytes memory out;\\n    bool success;\\n    (success, out) = EPOCH_SIZE.staticcall(abi.encodePacked());\\n    require(success, \\\"error calling getEpochSize precompile\\\");\\n    return getUint256FromBytes(out, 0);\\n  }\\n\\n  /**\\n   * @notice Returns the epoch number at a block.\\n   * @param blockNumber Block number where epoch number is calculated.\\n   * @return Epoch number.\\n   */\\n  function getEpochNumberOfBlock(uint256 blockNumber) public view returns (uint256) {\\n    return epochNumberOfBlock(blockNumber, getEpochSize());\\n  }\\n\\n  /**\\n   * @notice Returns the epoch number at a block.\\n   * @return Current epoch number.\\n   */\\n  function getEpochNumber() public view returns (uint256) {\\n    return getEpochNumberOfBlock(block.number);\\n  }\\n\\n  /**\\n   * @notice Returns the epoch number at a block.\\n   * @param blockNumber Block number where epoch number is calculated.\\n   * @param epochSize The epoch size in blocks.\\n   * @return Epoch number.\\n   */\\n  function epochNumberOfBlock(uint256 blockNumber, uint256 epochSize)\\n    internal\\n    pure\\n    returns (uint256)\\n  {\\n    // Follows GetEpochNumber from celo-blockchain/blob/master/consensus/istanbul/utils.go\\n    uint256 epochNumber = blockNumber / epochSize;\\n    if (blockNumber % epochSize == 0) {\\n      return epochNumber;\\n    } else {\\n      return epochNumber.add(1);\\n    }\\n  }\\n\\n  /**\\n   * @notice Gets a validator address from the current validator set.\\n   * @param index Index of requested validator in the validator set.\\n   * @return Address of validator at the requested index.\\n   */\\n  // TODO: (soloseng) add to precompiles\\n  function validatorSignerAddressFromCurrentSet(uint256 index) public view returns (address) {\\n    bytes memory out;\\n    bool success;\\n    (success, out) = GET_VALIDATOR.staticcall(abi.encodePacked(index, uint256(block.number)));\\n    require(success, \\\"error calling validatorSignerAddressFromCurrentSet precompile\\\");\\n    return address(getUint256FromBytes(out, 0));\\n  }\\n\\n  /**\\n   * @notice Gets a validator address from the validator set at the given block number.\\n   * @param index Index of requested validator in the validator set.\\n   * @param blockNumber Block number to retrieve the validator set from.\\n   * @return Address of validator at the requested index.\\n   */\\n  function validatorSignerAddressFromSet(uint256 index, uint256 blockNumber)\\n    public\\n    view\\n    returns (address)\\n  {\\n    bytes memory out;\\n    bool success;\\n    (success, out) = GET_VALIDATOR.staticcall(abi.encodePacked(index, blockNumber));\\n    require(success, \\\"error calling validatorSignerAddressFromSet precompile\\\");\\n    return address(getUint256FromBytes(out, 0));\\n  }\\n\\n  /**\\n   * @notice Gets the size of the current elected validator set.\\n   * @return Size of the current elected validator set.\\n   */\\n  // TODO:(soloseng) add to precompiles.\\n  function numberValidatorsInCurrentSet() public view returns (uint256) {\\n    bytes memory out;\\n    bool success;\\n    (success, out) = NUMBER_VALIDATORS.staticcall(abi.encodePacked(uint256(block.number)));\\n    require(success, \\\"error calling numberValidatorsInCurrentSet precompile\\\");\\n    return getUint256FromBytes(out, 0);\\n  }\\n\\n  /**\\n   * @notice Gets the size of the validator set that must sign the given block number.\\n   * @param blockNumber Block number to retrieve the validator set from.\\n   * @return Size of the validator set.\\n   */\\n  function numberValidatorsInSet(uint256 blockNumber) public view returns (uint256) {\\n    bytes memory out;\\n    bool success;\\n    (success, out) = NUMBER_VALIDATORS.staticcall(abi.encodePacked(blockNumber));\\n    require(success, \\\"error calling numberValidatorsInSet precompile\\\");\\n    return getUint256FromBytes(out, 0);\\n  }\\n\\n  /**\\n   * @notice Checks a BLS proof of possession.\\n   * @param sender The address signed by the BLS key to generate the proof of possession.\\n   * @param blsKey The BLS public key that the validator is using for consensus, should pass proof\\n   *   of possession. 48 bytes.\\n   * @param blsPop The BLS public key proof-of-possession, which consists of a signature on the\\n   *   account address. 96 bytes.\\n   * @return True upon success.\\n   */\\n  function checkProofOfPossession(address sender, bytes memory blsKey, bytes memory blsPop)\\n    public\\n    view\\n    returns (bool)\\n  {\\n    bool success;\\n    (success, ) = PROOF_OF_POSSESSION.staticcall(abi.encodePacked(sender, blsKey, blsPop));\\n    return success;\\n  }\\n\\n  /**\\n   * @notice Parses block number out of header.\\n   * @param header RLP encoded header\\n   * @return Block number.\\n   */\\n  function getBlockNumberFromHeader(bytes memory header) public view returns (uint256) {\\n    bytes memory out;\\n    bool success;\\n    (success, out) = BLOCK_NUMBER_FROM_HEADER.staticcall(abi.encodePacked(header));\\n    require(success, \\\"error calling getBlockNumberFromHeader precompile\\\");\\n    return getUint256FromBytes(out, 0);\\n  }\\n\\n  /**\\n   * @notice Computes hash of header.\\n   * @param header RLP encoded header\\n   * @return Header hash.\\n   */\\n  function hashHeader(bytes memory header) public view returns (bytes32) {\\n    bytes memory out;\\n    bool success;\\n    (success, out) = HASH_HEADER.staticcall(abi.encodePacked(header));\\n    require(success, \\\"error calling hashHeader precompile\\\");\\n    return getBytes32FromBytes(out, 0);\\n  }\\n\\n  /**\\n   * @notice Gets the parent seal bitmap from the header at the given block number.\\n   * @param blockNumber Block number to retrieve. Must be within 4 epochs of the current number.\\n   * @return Bitmap parent seal with set bits at indices corresponding to signing validators.\\n   */\\n  function getParentSealBitmap(uint256 blockNumber) public view returns (bytes32) {\\n    bytes memory out;\\n    bool success;\\n    (success, out) = GET_PARENT_SEAL_BITMAP.staticcall(abi.encodePacked(blockNumber));\\n    require(success, \\\"error calling getParentSealBitmap precompile\\\");\\n    return getBytes32FromBytes(out, 0);\\n  }\\n\\n  /**\\n   * @notice Verifies the BLS signature on the header and returns the seal bitmap.\\n   * The validator set used for verification is retrieved based on the parent hash field of the\\n   * header.  If the parent hash is not in the blockchain, verification fails.\\n   * @param header RLP encoded header\\n   * @return Bitmap parent seal with set bits at indices correspoinding to signing validators.\\n   */\\n  function getVerifiedSealBitmapFromHeader(bytes memory header) public view returns (bytes32) {\\n    bytes memory out;\\n    bool success;\\n    (success, out) = GET_VERIFIED_SEAL_BITMAP.staticcall(abi.encodePacked(header));\\n    require(success, \\\"error calling getVerifiedSealBitmapFromHeader precompile\\\");\\n    return getBytes32FromBytes(out, 0);\\n  }\\n\\n  /**\\n   * @notice Converts bytes to uint256.\\n   * @param bs byte[] data\\n   * @param start offset into byte data to convert\\n   * @return uint256 data\\n   */\\n  function getUint256FromBytes(bytes memory bs, uint256 start) internal pure returns (uint256) {\\n    return uint256(getBytes32FromBytes(bs, start));\\n  }\\n\\n  /**\\n   * @notice Converts bytes to bytes32.\\n   * @param bs byte[] data\\n   * @param start offset into byte data to convert\\n   * @return bytes32 data\\n   */\\n  function getBytes32FromBytes(bytes memory bs, uint256 start) internal pure returns (bytes32) {\\n    require(bs.length >= start.add(32), \\\"slicing out of range\\\");\\n    bytes32 x;\\n    assembly {\\n      x := mload(add(bs, add(start, 32)))\\n    }\\n    return x;\\n  }\\n\\n  /**\\n   * @notice Returns the minimum number of required signers for a given block number.\\n   * @dev Computed in celo-blockchain as int(math.Ceil(float64(2*valSet.Size()) / 3))\\n   */\\n  function minQuorumSize(uint256 blockNumber) public view returns (uint256) {\\n    return numberValidatorsInSet(blockNumber).mul(2).add(2).div(3);\\n  }\\n\\n  /**\\n   * @notice Computes byzantine quorum from current validator set size\\n   * @return Byzantine quorum of validators.\\n   */\\n  function minQuorumSizeInCurrentSet() public view returns (uint256) {\\n    return minQuorumSize(block.number);\\n  }\\n}\\n\",\"keccak256\":\"0xd46e05170295a0aed352f8fab6798fb37c72e487734b2c0762c8212ed88aa4c2\"},\"project:/contracts/common/UsingRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity ^0.5.13;\\n\\nimport \\\"openzeppelin-solidity/contracts/ownership/Ownable.sol\\\";\\nimport \\\"openzeppelin-solidity/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport \\\"./interfaces/IAccounts.sol\\\";\\nimport \\\"./interfaces/IFeeCurrencyWhitelist.sol\\\";\\nimport \\\"./interfaces/IFreezer.sol\\\";\\nimport \\\"./interfaces/IRegistry.sol\\\";\\n\\nimport \\\"../governance/interfaces/IElection.sol\\\";\\nimport \\\"../governance/interfaces/IGovernance.sol\\\";\\nimport \\\"../governance/interfaces/ILockedGold.sol\\\";\\nimport \\\"../governance/interfaces/IValidators.sol\\\";\\n\\nimport \\\"../identity/interfaces/IRandom.sol\\\";\\nimport \\\"../identity/interfaces/IAttestations.sol\\\";\\n\\nimport \\\"../../lib/mento-core/contracts/interfaces/IExchange.sol\\\";\\nimport \\\"../../lib/mento-core/contracts/interfaces/IReserve.sol\\\";\\nimport \\\"../../lib/mento-core/contracts/interfaces/IStableToken.sol\\\";\\nimport \\\"../stability/interfaces/ISortedOracles.sol\\\";\\n\\ncontract UsingRegistry is Ownable {\\n  event RegistrySet(address indexed registryAddress);\\n\\n  // solhint-disable state-visibility\\n  bytes32 constant ACCOUNTS_REGISTRY_ID = keccak256(abi.encodePacked(\\\"Accounts\\\"));\\n  bytes32 constant ATTESTATIONS_REGISTRY_ID = keccak256(abi.encodePacked(\\\"Attestations\\\"));\\n  bytes32 constant DOWNTIME_SLASHER_REGISTRY_ID = keccak256(abi.encodePacked(\\\"DowntimeSlasher\\\"));\\n  bytes32 constant DOUBLE_SIGNING_SLASHER_REGISTRY_ID = keccak256(\\n    abi.encodePacked(\\\"DoubleSigningSlasher\\\")\\n  );\\n  bytes32 constant ELECTION_REGISTRY_ID = keccak256(abi.encodePacked(\\\"Election\\\"));\\n  bytes32 constant EXCHANGE_REGISTRY_ID = keccak256(abi.encodePacked(\\\"Exchange\\\"));\\n  bytes32 constant FEE_CURRENCY_WHITELIST_REGISTRY_ID = keccak256(\\n    abi.encodePacked(\\\"FeeCurrencyWhitelist\\\")\\n  );\\n  bytes32 constant FREEZER_REGISTRY_ID = keccak256(abi.encodePacked(\\\"Freezer\\\"));\\n  bytes32 constant GOLD_TOKEN_REGISTRY_ID = keccak256(abi.encodePacked(\\\"GoldToken\\\"));\\n  bytes32 constant GOVERNANCE_REGISTRY_ID = keccak256(abi.encodePacked(\\\"Governance\\\"));\\n  bytes32 constant GOVERNANCE_SLASHER_REGISTRY_ID = keccak256(\\n    abi.encodePacked(\\\"GovernanceSlasher\\\")\\n  );\\n  bytes32 constant LOCKED_GOLD_REGISTRY_ID = keccak256(abi.encodePacked(\\\"LockedGold\\\"));\\n  bytes32 constant RESERVE_REGISTRY_ID = keccak256(abi.encodePacked(\\\"Reserve\\\"));\\n  bytes32 constant RANDOM_REGISTRY_ID = keccak256(abi.encodePacked(\\\"Random\\\"));\\n  bytes32 constant SORTED_ORACLES_REGISTRY_ID = keccak256(abi.encodePacked(\\\"SortedOracles\\\"));\\n  bytes32 constant STABLE_TOKEN_REGISTRY_ID = keccak256(abi.encodePacked(\\\"StableToken\\\"));\\n  bytes32 constant VALIDATORS_REGISTRY_ID = keccak256(abi.encodePacked(\\\"Validators\\\"));\\n  // solhint-enable state-visibility\\n\\n  IRegistry public registry;\\n\\n  modifier onlyRegisteredContract(bytes32 identifierHash) {\\n    require(registry.getAddressForOrDie(identifierHash) == msg.sender, \\\"only registered contract\\\");\\n    _;\\n  }\\n\\n  modifier onlyRegisteredContracts(bytes32[] memory identifierHashes) {\\n    require(registry.isOneOf(identifierHashes, msg.sender), \\\"only registered contracts\\\");\\n    _;\\n  }\\n\\n  /**\\n   * @notice Updates the address pointing to a Registry contract.\\n   * @param registryAddress The address of a registry contract for routing to other contracts.\\n   */\\n  function setRegistry(address registryAddress) public onlyOwner {\\n    require(registryAddress != address(0), \\\"Cannot register the null address\\\");\\n    registry = IRegistry(registryAddress);\\n    emit RegistrySet(registryAddress);\\n  }\\n\\n  function getAccounts() internal view returns (IAccounts) {\\n    return IAccounts(registry.getAddressForOrDie(ACCOUNTS_REGISTRY_ID));\\n  }\\n\\n  function getAttestations() internal view returns (IAttestations) {\\n    return IAttestations(registry.getAddressForOrDie(ATTESTATIONS_REGISTRY_ID));\\n  }\\n\\n  function getElection() internal view returns (IElection) {\\n    return IElection(registry.getAddressForOrDie(ELECTION_REGISTRY_ID));\\n  }\\n\\n  function getExchange() internal view returns (IExchange) {\\n    return IExchange(registry.getAddressForOrDie(EXCHANGE_REGISTRY_ID));\\n  }\\n\\n  function getFeeCurrencyWhitelistRegistry() internal view returns (IFeeCurrencyWhitelist) {\\n    return IFeeCurrencyWhitelist(registry.getAddressForOrDie(FEE_CURRENCY_WHITELIST_REGISTRY_ID));\\n  }\\n\\n  function getFreezer() internal view returns (IFreezer) {\\n    return IFreezer(registry.getAddressForOrDie(FREEZER_REGISTRY_ID));\\n  }\\n\\n  function getGoldToken() internal view returns (IERC20) {\\n    return IERC20(registry.getAddressForOrDie(GOLD_TOKEN_REGISTRY_ID));\\n  }\\n\\n  function getGovernance() internal view returns (IGovernance) {\\n    return IGovernance(registry.getAddressForOrDie(GOVERNANCE_REGISTRY_ID));\\n  }\\n\\n  function getLockedGold() internal view returns (ILockedGold) {\\n    return ILockedGold(registry.getAddressForOrDie(LOCKED_GOLD_REGISTRY_ID));\\n  }\\n\\n  function getRandom() internal view returns (IRandom) {\\n    return IRandom(registry.getAddressForOrDie(RANDOM_REGISTRY_ID));\\n  }\\n\\n  function getReserve() internal view returns (IReserve) {\\n    return IReserve(registry.getAddressForOrDie(RESERVE_REGISTRY_ID));\\n  }\\n\\n  function getSortedOracles() internal view returns (ISortedOracles) {\\n    return ISortedOracles(registry.getAddressForOrDie(SORTED_ORACLES_REGISTRY_ID));\\n  }\\n\\n  function getStableToken() internal view returns (IStableToken) {\\n    return IStableToken(registry.getAddressForOrDie(STABLE_TOKEN_REGISTRY_ID));\\n  }\\n\\n  function getValidators() internal view returns (IValidators) {\\n    return IValidators(registry.getAddressForOrDie(VALIDATORS_REGISTRY_ID));\\n  }\\n}\\n\",\"keccak256\":\"0x31ec0f16867a35046f9e1211ac3457198e39abc2362d2d559f4ccc4a3985a9ac\"},\"project:/contracts/common/interfaces/IAccounts.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.5.13 <0.9.0;\\n\\ninterface IAccounts {\\n  function isAccount(address) external view returns (bool);\\n  function voteSignerToAccount(address) external view returns (address);\\n  function validatorSignerToAccount(address) external view returns (address);\\n  function attestationSignerToAccount(address) external view returns (address);\\n  function signerToAccount(address) external view returns (address);\\n  function getAttestationSigner(address) external view returns (address);\\n  function getValidatorSigner(address) external view returns (address);\\n  function getVoteSigner(address) external view returns (address);\\n  function hasAuthorizedVoteSigner(address) external view returns (bool);\\n  function hasAuthorizedValidatorSigner(address) external view returns (bool);\\n  function hasAuthorizedAttestationSigner(address) external view returns (bool);\\n\\n  function setAccountDataEncryptionKey(bytes calldata) external;\\n  function setMetadataURL(string calldata) external;\\n  function setName(string calldata) external;\\n  function setWalletAddress(address, uint8, bytes32, bytes32) external;\\n  function setAccount(string calldata, bytes calldata, address, uint8, bytes32, bytes32) external;\\n\\n  function getDataEncryptionKey(address) external view returns (bytes memory);\\n  function getWalletAddress(address) external view returns (address);\\n  function getMetadataURL(address) external view returns (string memory);\\n  function batchGetMetadataURL(address[] calldata)\\n    external\\n    view\\n    returns (uint256[] memory, bytes memory);\\n  function getName(address) external view returns (string memory);\\n\\n  function authorizeVoteSigner(address, uint8, bytes32, bytes32) external;\\n  function authorizeValidatorSigner(address, uint8, bytes32, bytes32) external;\\n  function authorizeValidatorSignerWithPublicKey(address, uint8, bytes32, bytes32, bytes calldata)\\n    external;\\n  function authorizeValidatorSignerWithKeys(\\n    address,\\n    uint8,\\n    bytes32,\\n    bytes32,\\n    bytes calldata,\\n    bytes calldata,\\n    bytes calldata\\n  ) external;\\n  function authorizeAttestationSigner(address, uint8, bytes32, bytes32) external;\\n  function createAccount() external returns (bool);\\n\\n  function setPaymentDelegation(address, uint256) external;\\n  function getPaymentDelegation(address) external view returns (address, uint256);\\n  function isSigner(address, address, bytes32) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x17a0ff4b1c2da32f5de9c0fe230fcb325b2bbabcf51980cfb425cec75f678f5e\"},\"project:/contracts/common/interfaces/ICeloVersionedContract.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.5.13 <0.9.0;\\n\\ninterface ICeloVersionedContract {\\n  /**\\n   * @notice Returns the storage, major, minor, and patch version of the contract.\\n    * @return Storage version of the contract.\\n    * @return Major version of the contract.\\n    * @return Minor version of the contract.\\n    * @return Patch version of the contract.\\n   */\\n  function getVersionNumber() external pure returns (uint256, uint256, uint256, uint256);\\n}\\n\",\"keccak256\":\"0x27f0b14472db998eb8e4b529bbfd6a5879cbd842f8db8aa6c06ed7d2e0b17ac1\"},\"project:/contracts/common/interfaces/IFeeCurrencyWhitelist.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.5.13 <0.9.0;\\n\\ninterface IFeeCurrencyWhitelist {\\n  function addToken(address) external;\\n  function getWhitelist() external view returns (address[] memory);\\n}\\n\",\"keccak256\":\"0x4a91e634d22e8b8c36ef16113d7403029f334affb38f2453f0453f4ba06a925e\"},\"project:/contracts/common/interfaces/IFreezer.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.5.13 <0.9.0;\\n\\ninterface IFreezer {\\n  function isFrozen(address) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x6c34df21ba7ae83d9b47153bec2ffdb74128c11c0a9f20edaca927967fda4786\"},\"project:/contracts/common/interfaces/IRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.5.13 <0.9.0;\\n\\ninterface IRegistry {\\n  function setAddressFor(string calldata, address) external;\\n  function getAddressForOrDie(bytes32) external view returns (address);\\n  function getAddressFor(bytes32) external view returns (address);\\n  function getAddressForStringOrDie(string calldata identifier) external view returns (address);\\n  function getAddressForString(string calldata identifier) external view returns (address);\\n  function isOneOf(bytes32[] calldata, address) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x7737cbda6f3519bf6a4108e07b2c991a655e8731a4c040a3681e9629cfc4b52d\"},\"project:/contracts/common/libraries/ReentrancyGuard.sol\":{\"content\":\"pragma solidity ^0.5.13;\\n\\n/**\\n * @title Helps contracts guard against reentrancy attacks.\\n * @author Remco Bloemen <remco@2\\u03c0.com>, Eenae <alexey@mixbytes.io>\\n * @dev If you mark a function `nonReentrant`, you should also\\n * mark it `external`.\\n */\\ncontract ReentrancyGuard {\\n  /// @dev counter to allow mutex lock with only one SSTORE operation\\n  uint256 private _guardCounter;\\n\\n  constructor() internal {\\n    // The counter starts at one to prevent changing it from zero to a non-zero\\n    // value, which is a more expensive operation.\\n    _guardCounter = 1;\\n  }\\n\\n  /**\\n   * @dev Prevents a contract from calling itself, directly or indirectly.\\n   * Calling a `nonReentrant` function from another `nonReentrant`\\n   * function is not supported. It is possible to prevent this from happening\\n   * by making the `nonReentrant` function external, and make it call a\\n   * `private` function that does the actual work.\\n   */\\n  modifier nonReentrant() {\\n    _guardCounter += 1;\\n    uint256 localCounter = _guardCounter;\\n    _;\\n    require(localCounter == _guardCounter, \\\"reentrant call\\\");\\n  }\\n}\\n\",\"keccak256\":\"0xa2584554532d7004ca3d2d168cd9dfb7694605f1a32431af4d1b7d834fa6b08d\"},\"project:/contracts/common/linkedlists/IntegerSortedLinkedList.sol\":{\"content\":\"pragma solidity ^0.5.13;\\n\\nimport \\\"openzeppelin-solidity/contracts/math/SafeMath.sol\\\";\\n\\nimport \\\"./SortedLinkedList.sol\\\";\\n\\n/**\\n * @title Maintains a sorted list of unsigned ints keyed by uint256.\\n */\\nlibrary IntegerSortedLinkedList {\\n  using SafeMath for uint256;\\n  using SortedLinkedList for SortedLinkedList.List;\\n\\n  /**\\n   * @notice Inserts an element into a doubly linked list.\\n   * @param list A storage pointer to the underlying list.\\n   * @param key The key of the element to insert.\\n   * @param value The element value.\\n   * @param lesserKey The key of the element less than the element to insert.\\n   * @param greaterKey The key of the element greater than the element to insert.\\n   */\\n  function insert(\\n    SortedLinkedList.List storage list,\\n    uint256 key,\\n    uint256 value,\\n    uint256 lesserKey,\\n    uint256 greaterKey\\n  ) public {\\n    list.insert(bytes32(key), value, bytes32(lesserKey), bytes32(greaterKey));\\n  }\\n\\n  /**\\n   * @notice Removes an element from the doubly linked list.\\n   * @param list A storage pointer to the underlying list.\\n   * @param key The key of the element to remove.\\n   */\\n  function remove(SortedLinkedList.List storage list, uint256 key) public {\\n    list.remove(bytes32(key));\\n  }\\n\\n  /**\\n   * @notice Updates an element in the list.\\n   * @param list A storage pointer to the underlying list.\\n   * @param key The element key.\\n   * @param value The element value.\\n   * @param lesserKey The key of the element will be just left of `key` after the update.\\n   * @param greaterKey The key of the element will be just right of `key` after the update.\\n   * @dev Note that only one of \\\"lesserKey\\\" or \\\"greaterKey\\\" needs to be correct to reduce friction.\\n   */\\n  function update(\\n    SortedLinkedList.List storage list,\\n    uint256 key,\\n    uint256 value,\\n    uint256 lesserKey,\\n    uint256 greaterKey\\n  ) public {\\n    list.update(bytes32(key), value, bytes32(lesserKey), bytes32(greaterKey));\\n  }\\n\\n  /**\\n   * @notice Inserts an element at the end of the doubly linked list.\\n   * @param list A storage pointer to the underlying list.\\n   * @param key The key of the element to insert.\\n   */\\n  function push(SortedLinkedList.List storage list, uint256 key) public {\\n    list.push(bytes32(key));\\n  }\\n\\n  /**\\n   * @notice Removes N elements from the head of the list and returns their keys.\\n   * @param list A storage pointer to the underlying list.\\n   * @param n The number of elements to pop.\\n   * @return The keys of the popped elements.\\n   */\\n  function popN(SortedLinkedList.List storage list, uint256 n) public returns (uint256[] memory) {\\n    bytes32[] memory byteKeys = list.popN(n);\\n    uint256[] memory keys = new uint256[](byteKeys.length);\\n    for (uint256 i = 0; i < byteKeys.length; i = i.add(1)) {\\n      keys[i] = uint256(byteKeys[i]);\\n    }\\n    return keys;\\n  }\\n\\n  /**\\n   * @notice Returns whether or not a particular key is present in the sorted list.\\n   * @param list A storage pointer to the underlying list.\\n   * @param key The element key.\\n   * @return Whether or not the key is in the sorted list.\\n   */\\n  function contains(SortedLinkedList.List storage list, uint256 key) public view returns (bool) {\\n    return list.contains(bytes32(key));\\n  }\\n\\n  /**\\n   * @notice Returns the value for a particular key in the sorted list.\\n   * @param list A storage pointer to the underlying list.\\n   * @param key The element key.\\n   * @return The element value.\\n   */\\n  function getValue(SortedLinkedList.List storage list, uint256 key) public view returns (uint256) {\\n    return list.getValue(bytes32(key));\\n  }\\n\\n  /**\\n   * @notice Gets all elements from the doubly linked list.\\n   * @param list A storage pointer to the underlying list.\\n   * @return Array of all keys in the list.\\n   * @return Values corresponding to keys, which will be ordered largest to smallest.\\n   */\\n  function getElements(SortedLinkedList.List storage list)\\n    public\\n    view\\n    returns (uint256[] memory, uint256[] memory)\\n  {\\n    bytes32[] memory byteKeys = list.getKeys();\\n    uint256[] memory keys = new uint256[](byteKeys.length);\\n    uint256[] memory values = new uint256[](byteKeys.length);\\n    for (uint256 i = 0; i < byteKeys.length; i = i.add(1)) {\\n      keys[i] = uint256(byteKeys[i]);\\n      values[i] = list.values[byteKeys[i]];\\n    }\\n    return (keys, values);\\n  }\\n}\\n\",\"keccak256\":\"0x64a283101fdf1c57f8ad5ba3e6de0d6edd57b13a5ec033c42351199d7c52ec96\"},\"project:/contracts/common/linkedlists/LinkedList.sol\":{\"content\":\"pragma solidity ^0.5.13;\\n\\nimport \\\"openzeppelin-solidity/contracts/math/SafeMath.sol\\\";\\n\\n/**\\n * @title Maintains a doubly linked list keyed by bytes32.\\n * @dev Following the `next` pointers will lead you to the head, rather than the tail.\\n */\\nlibrary LinkedList {\\n  using SafeMath for uint256;\\n\\n  struct Element {\\n    bytes32 previousKey;\\n    bytes32 nextKey;\\n    bool exists;\\n  }\\n\\n  struct List {\\n    bytes32 head;\\n    bytes32 tail;\\n    uint256 numElements;\\n    mapping(bytes32 => Element) elements;\\n  }\\n\\n  /**\\n   * @notice Inserts an element into a doubly linked list.\\n   * @param list A storage pointer to the underlying list.\\n   * @param key The key of the element to insert.\\n   * @param previousKey The key of the element that comes before the element to insert.\\n   * @param nextKey The key of the element that comes after the element to insert.\\n   */\\n  function insert(List storage list, bytes32 key, bytes32 previousKey, bytes32 nextKey) internal {\\n    require(key != bytes32(0), \\\"Key must be defined\\\");\\n    require(!contains(list, key), \\\"Can't insert an existing element\\\");\\n    require(\\n      previousKey != key && nextKey != key,\\n      \\\"Key cannot be the same as previousKey or nextKey\\\"\\n    );\\n\\n    Element storage element = list.elements[key];\\n    element.exists = true;\\n\\n    if (list.numElements == 0) {\\n      list.tail = key;\\n      list.head = key;\\n    } else {\\n      require(\\n        previousKey != bytes32(0) || nextKey != bytes32(0),\\n        \\\"Either previousKey or nextKey must be defined\\\"\\n      );\\n\\n      element.previousKey = previousKey;\\n      element.nextKey = nextKey;\\n\\n      if (previousKey != bytes32(0)) {\\n        require(\\n          contains(list, previousKey),\\n          \\\"If previousKey is defined, it must exist in the list\\\"\\n        );\\n        Element storage previousElement = list.elements[previousKey];\\n        require(previousElement.nextKey == nextKey, \\\"previousKey must be adjacent to nextKey\\\");\\n        previousElement.nextKey = key;\\n      } else {\\n        list.tail = key;\\n      }\\n\\n      if (nextKey != bytes32(0)) {\\n        require(contains(list, nextKey), \\\"If nextKey is defined, it must exist in the list\\\");\\n        Element storage nextElement = list.elements[nextKey];\\n        require(nextElement.previousKey == previousKey, \\\"previousKey must be adjacent to nextKey\\\");\\n        nextElement.previousKey = key;\\n      } else {\\n        list.head = key;\\n      }\\n    }\\n\\n    list.numElements = list.numElements.add(1);\\n  }\\n\\n  /**\\n   * @notice Inserts an element at the tail of the doubly linked list.\\n   * @param list A storage pointer to the underlying list.\\n   * @param key The key of the element to insert.\\n   */\\n  function push(List storage list, bytes32 key) internal {\\n    insert(list, key, bytes32(0), list.tail);\\n  }\\n\\n  /**\\n   * @notice Removes an element from the doubly linked list.\\n   * @param list A storage pointer to the underlying list.\\n   * @param key The key of the element to remove.\\n   */\\n  function remove(List storage list, bytes32 key) internal {\\n    Element storage element = list.elements[key];\\n    require(key != bytes32(0) && contains(list, key), \\\"key not in list\\\");\\n    if (element.previousKey != bytes32(0)) {\\n      Element storage previousElement = list.elements[element.previousKey];\\n      previousElement.nextKey = element.nextKey;\\n    } else {\\n      list.tail = element.nextKey;\\n    }\\n\\n    if (element.nextKey != bytes32(0)) {\\n      Element storage nextElement = list.elements[element.nextKey];\\n      nextElement.previousKey = element.previousKey;\\n    } else {\\n      list.head = element.previousKey;\\n    }\\n\\n    delete list.elements[key];\\n    list.numElements = list.numElements.sub(1);\\n  }\\n\\n  /**\\n   * @notice Updates an element in the list.\\n   * @param list A storage pointer to the underlying list.\\n   * @param key The element key.\\n   * @param previousKey The key of the element that comes before the updated element.\\n   * @param nextKey The key of the element that comes after the updated element.\\n   */\\n  function update(List storage list, bytes32 key, bytes32 previousKey, bytes32 nextKey) internal {\\n    require(\\n      key != bytes32(0) && key != previousKey && key != nextKey && contains(list, key),\\n      \\\"key on in list\\\"\\n    );\\n    remove(list, key);\\n    insert(list, key, previousKey, nextKey);\\n  }\\n\\n  /**\\n   * @notice Returns whether or not a particular key is present in the sorted list.\\n   * @param list A storage pointer to the underlying list.\\n   * @param key The element key.\\n   * @return Whether or not the key is in the sorted list.\\n   */\\n  function contains(List storage list, bytes32 key) internal view returns (bool) {\\n    return list.elements[key].exists;\\n  }\\n\\n  /**\\n   * @notice Returns the keys of the N elements at the head of the list.\\n   * @param list A storage pointer to the underlying list.\\n   * @param n The number of elements to return.\\n   * @return The keys of the N elements at the head of the list.\\n   * @dev Reverts if n is greater than the number of elements in the list.\\n   */\\n  function headN(List storage list, uint256 n) internal view returns (bytes32[] memory) {\\n    require(n <= list.numElements, \\\"not enough elements\\\");\\n    bytes32[] memory keys = new bytes32[](n);\\n    bytes32 key = list.head;\\n    for (uint256 i = 0; i < n; i = i.add(1)) {\\n      keys[i] = key;\\n      key = list.elements[key].previousKey;\\n    }\\n    return keys;\\n  }\\n\\n  /**\\n   * @notice Gets all element keys from the doubly linked list.\\n   * @param list A storage pointer to the underlying list.\\n   * @return All element keys from head to tail.\\n   */\\n  function getKeys(List storage list) internal view returns (bytes32[] memory) {\\n    return headN(list, list.numElements);\\n  }\\n}\\n\",\"keccak256\":\"0x9104cbf273bd44a5845784a7540066ce80d543912b8b84742094e80adac3f1a3\"},\"project:/contracts/common/linkedlists/SortedLinkedList.sol\":{\"content\":\"pragma solidity ^0.5.13;\\n\\nimport \\\"openzeppelin-solidity/contracts/math/SafeMath.sol\\\";\\nimport \\\"./LinkedList.sol\\\";\\n\\n/**\\n * @title Maintains a sorted list of unsigned ints keyed by bytes32.\\n */\\nlibrary SortedLinkedList {\\n  using SafeMath for uint256;\\n  using LinkedList for LinkedList.List;\\n\\n  struct List {\\n    LinkedList.List list;\\n    mapping(bytes32 => uint256) values;\\n  }\\n\\n  /**\\n   * @notice Inserts an element into a doubly linked list.\\n   * @param list A storage pointer to the underlying list.\\n   * @param key The key of the element to insert.\\n   * @param value The element value.\\n   * @param lesserKey The key of the element less than the element to insert.\\n   * @param greaterKey The key of the element greater than the element to insert.\\n   */\\n  function insert(\\n    List storage list,\\n    bytes32 key,\\n    uint256 value,\\n    bytes32 lesserKey,\\n    bytes32 greaterKey\\n  ) internal {\\n    require(\\n      key != bytes32(0) && key != lesserKey && key != greaterKey && !contains(list, key),\\n      \\\"invalid key\\\"\\n    );\\n    require(\\n      (lesserKey != bytes32(0) || greaterKey != bytes32(0)) || list.list.numElements == 0,\\n      \\\"greater and lesser key zero\\\"\\n    );\\n    require(contains(list, lesserKey) || lesserKey == bytes32(0), \\\"invalid lesser key\\\");\\n    require(contains(list, greaterKey) || greaterKey == bytes32(0), \\\"invalid greater key\\\");\\n    (lesserKey, greaterKey) = getLesserAndGreater(list, value, lesserKey, greaterKey);\\n    list.list.insert(key, lesserKey, greaterKey);\\n    list.values[key] = value;\\n  }\\n\\n  /**\\n   * @notice Removes an element from the doubly linked list.\\n   * @param list A storage pointer to the underlying list.\\n   * @param key The key of the element to remove.\\n   */\\n  function remove(List storage list, bytes32 key) internal {\\n    list.list.remove(key);\\n    list.values[key] = 0;\\n  }\\n\\n  /**\\n   * @notice Updates an element in the list.\\n   * @param list A storage pointer to the underlying list.\\n   * @param key The element key.\\n   * @param value The element value.\\n   * @param lesserKey The key of the element will be just left of `key` after the update.\\n   * @param greaterKey The key of the element will be just right of `key` after the update.\\n   * @dev Note that only one of \\\"lesserKey\\\" or \\\"greaterKey\\\" needs to be correct to reduce friction.\\n   */\\n  function update(\\n    List storage list,\\n    bytes32 key,\\n    uint256 value,\\n    bytes32 lesserKey,\\n    bytes32 greaterKey\\n  ) internal {\\n    remove(list, key);\\n    insert(list, key, value, lesserKey, greaterKey);\\n  }\\n\\n  /**\\n   * @notice Inserts an element at the tail of the doubly linked list.\\n   * @param list A storage pointer to the underlying list.\\n   * @param key The key of the element to insert.\\n   */\\n  function push(List storage list, bytes32 key) internal {\\n    insert(list, key, 0, bytes32(0), list.list.tail);\\n  }\\n\\n  /**\\n   * @notice Removes N elements from the head of the list and returns their keys.\\n   * @param list A storage pointer to the underlying list.\\n   * @param n The number of elements to pop.\\n   * @return The keys of the popped elements.\\n   */\\n  function popN(List storage list, uint256 n) internal returns (bytes32[] memory) {\\n    require(n <= list.list.numElements, \\\"not enough elements\\\");\\n    bytes32[] memory keys = new bytes32[](n);\\n    for (uint256 i = 0; i < n; i = i.add(1)) {\\n      bytes32 key = list.list.head;\\n      keys[i] = key;\\n      remove(list, key);\\n    }\\n    return keys;\\n  }\\n\\n  /**\\n   * @notice Returns whether or not a particular key is present in the sorted list.\\n   * @param list A storage pointer to the underlying list.\\n   * @param key The element key.\\n   * @return Whether or not the key is in the sorted list.\\n   */\\n  function contains(List storage list, bytes32 key) internal view returns (bool) {\\n    return list.list.contains(key);\\n  }\\n\\n  /**\\n   * @notice Returns the value for a particular key in the sorted list.\\n   * @param list A storage pointer to the underlying list.\\n   * @param key The element key.\\n   * @return The element value.\\n   */\\n  function getValue(List storage list, bytes32 key) internal view returns (uint256) {\\n    return list.values[key];\\n  }\\n\\n  /**\\n   * @notice Gets all elements from the doubly linked list.\\n   * @param list A storage pointer to the underlying list.\\n   * @return Array of all keys in the list.\\n   * @return Values corresponding to keys, which will be ordered largest to smallest.\\n   */\\n  function getElements(List storage list)\\n    internal\\n    view\\n    returns (bytes32[] memory, uint256[] memory)\\n  {\\n    bytes32[] memory keys = getKeys(list);\\n    uint256[] memory values = new uint256[](keys.length);\\n    for (uint256 i = 0; i < keys.length; i = i.add(1)) {\\n      values[i] = list.values[keys[i]];\\n    }\\n    return (keys, values);\\n  }\\n\\n  /**\\n   * @notice Gets all element keys from the doubly linked list.\\n   * @param list A storage pointer to the underlying list.\\n   * @return All element keys from head to tail.\\n   */\\n  function getKeys(List storage list) internal view returns (bytes32[] memory) {\\n    return list.list.getKeys();\\n  }\\n\\n  /**\\n   * @notice Returns first N greatest elements of the list.\\n   * @param list A storage pointer to the underlying list.\\n   * @param n The number of elements to return.\\n   * @return The keys of the first n elements.\\n   * @dev Reverts if n is greater than the number of elements in the list.\\n   */\\n  function headN(List storage list, uint256 n) internal view returns (bytes32[] memory) {\\n    return list.list.headN(n);\\n  }\\n\\n  /**\\n   * @notice Returns the keys of the elements greaterKey than and less than the provided value.\\n   * @param list A storage pointer to the underlying list.\\n   * @param value The element value.\\n   * @param lesserKey The key of the element which could be just left of the new value.\\n   * @param greaterKey The key of the element which could be just right of the new value.\\n   * @return The correct lesserKey keys.\\n   * @return The correct greaterKey keys.\\n   */\\n  function getLesserAndGreater(\\n    List storage list,\\n    uint256 value,\\n    bytes32 lesserKey,\\n    bytes32 greaterKey\\n  ) private view returns (bytes32, bytes32) {\\n    // Check for one of the following conditions and fail if none are met:\\n    //   1. The value is less than the current lowest value\\n    //   2. The value is greater than the current greatest value\\n    //   3. The value is just greater than the value for `lesserKey`\\n    //   4. The value is just less than the value for `greaterKey`\\n    if (lesserKey == bytes32(0) && isValueBetween(list, value, lesserKey, list.list.tail)) {\\n      return (lesserKey, list.list.tail);\\n    } else if (\\n      greaterKey == bytes32(0) && isValueBetween(list, value, list.list.head, greaterKey)\\n    ) {\\n      return (list.list.head, greaterKey);\\n    } else if (\\n      lesserKey != bytes32(0) &&\\n      isValueBetween(list, value, lesserKey, list.list.elements[lesserKey].nextKey)\\n    ) {\\n      return (lesserKey, list.list.elements[lesserKey].nextKey);\\n    } else if (\\n      greaterKey != bytes32(0) &&\\n      isValueBetween(list, value, list.list.elements[greaterKey].previousKey, greaterKey)\\n    ) {\\n      return (list.list.elements[greaterKey].previousKey, greaterKey);\\n    } else {\\n      require(false, \\\"get lesser and greater failure\\\");\\n    }\\n  }\\n\\n  /**\\n   * @notice Returns whether or not a given element is between two other elements.\\n   * @param list A storage pointer to the underlying list.\\n   * @param value The element value.\\n   * @param lesserKey The key of the element whose value should be lesserKey.\\n   * @param greaterKey The key of the element whose value should be greaterKey.\\n   * @return True if the given element is between the two other elements.\\n   */\\n  function isValueBetween(List storage list, uint256 value, bytes32 lesserKey, bytes32 greaterKey)\\n    private\\n    view\\n    returns (bool)\\n  {\\n    bool isLesser = lesserKey == bytes32(0) || list.values[lesserKey] <= value;\\n    bool isGreater = greaterKey == bytes32(0) || list.values[greaterKey] >= value;\\n    return isLesser && isGreater;\\n  }\\n}\\n\",\"keccak256\":\"0x26ef33655ed20a0595dfa7783dc0f46444242e1846501353c276368e4250e73c\"},\"project:/contracts/governance/Governance.sol\":{\"content\":\"pragma solidity ^0.5.13;\\n\\nimport \\\"openzeppelin-solidity/contracts/ownership/Ownable.sol\\\";\\nimport \\\"openzeppelin-solidity/contracts/math/Math.sol\\\";\\nimport \\\"openzeppelin-solidity/contracts/math/SafeMath.sol\\\";\\nimport \\\"openzeppelin-solidity/contracts/utils/Address.sol\\\";\\n\\nimport \\\"./interfaces/IGovernance.sol\\\";\\nimport \\\"./Proposals.sol\\\";\\nimport \\\"../common/interfaces/IAccounts.sol\\\";\\nimport \\\"../common/ExtractFunctionSignature.sol\\\";\\nimport \\\"../common/Initializable.sol\\\";\\nimport \\\"../common/FixidityLib.sol\\\";\\nimport \\\"../common/linkedlists/IntegerSortedLinkedList.sol\\\";\\nimport \\\"../common/UsingRegistry.sol\\\";\\nimport \\\"../common/UsingPrecompiles.sol\\\";\\nimport \\\"../common/interfaces/ICeloVersionedContract.sol\\\";\\nimport \\\"../common/libraries/ReentrancyGuard.sol\\\";\\n\\n/**\\n * @title A contract for making, passing, and executing on-chain governance proposals.\\n */\\ncontract Governance is\\n  IGovernance,\\n  ICeloVersionedContract,\\n  Ownable,\\n  Initializable,\\n  ReentrancyGuard,\\n  UsingRegistry,\\n  UsingPrecompiles\\n{\\n  using Proposals for Proposals.Proposal;\\n  using FixidityLib for FixidityLib.Fraction;\\n  using SafeMath for uint256;\\n  using IntegerSortedLinkedList for SortedLinkedList.List;\\n  using BytesLib for bytes;\\n  using Address for address payable; // prettier-ignore\\n\\n  uint256 private constant FIXED_HALF = 500000000000000000000000;\\n\\n  enum VoteValue { None, Abstain, No, Yes }\\n\\n  struct UpvoteRecord {\\n    uint256 proposalId;\\n    uint256 weight;\\n  }\\n\\n  struct VoteRecord {\\n    Proposals.VoteValue deprecated_value; // obsolete\\n    uint256 proposalId;\\n    uint256 deprecated_weight; // obsolete\\n    uint256 yesVotes;\\n    uint256 noVotes;\\n    uint256 abstainVotes;\\n  }\\n\\n  struct Voter {\\n    // Key of the proposal voted for in the proposal queue\\n    UpvoteRecord upvote;\\n    uint256 mostRecentReferendumProposal;\\n    // Maps a `dequeued` index to a voter's vote record.\\n    mapping(uint256 => VoteRecord) referendumVotes;\\n  }\\n\\n  struct ContractConstitution {\\n    FixidityLib.Fraction defaultThreshold;\\n    // Maps a function ID to a corresponding threshold, overriding the default.\\n    mapping(bytes4 => FixidityLib.Fraction) functionThresholds;\\n  }\\n\\n  struct HotfixRecord {\\n    bool executed;\\n    bool approved;\\n    uint256 preparedEpoch;\\n    mapping(address => bool) whitelisted;\\n  }\\n\\n  // The baseline is updated as\\n  // max{floor, (1 - baselineUpdateFactor) * baseline + baselineUpdateFactor * participation}\\n  struct ParticipationParameters {\\n    // The average network participation in governance, weighted toward recent proposals.\\n    FixidityLib.Fraction baseline;\\n    // The lower bound on the participation baseline.\\n    FixidityLib.Fraction baselineFloor;\\n    // The weight of the most recent proposal's participation on the baseline.\\n    FixidityLib.Fraction baselineUpdateFactor;\\n    // The proportion of the baseline that constitutes quorum.\\n    FixidityLib.Fraction baselineQuorumFactor;\\n  }\\n\\n  Proposals.StageDurations public stageDurations;\\n  uint256 public queueExpiry;\\n  uint256 public dequeueFrequency;\\n  address public approver;\\n  uint256 public lastDequeue;\\n  uint256 public concurrentProposals;\\n  uint256 public proposalCount;\\n  uint256 public minDeposit;\\n  mapping(address => uint256) public refundedDeposits;\\n  mapping(address => ContractConstitution) private constitution;\\n  mapping(uint256 => Proposals.Proposal) private proposals;\\n  mapping(address => Voter) internal voters;\\n  mapping(bytes32 => HotfixRecord) public hotfixes;\\n  SortedLinkedList.List private queue;\\n  uint256[] public dequeued;\\n  uint256[] public emptyIndices;\\n  ParticipationParameters private participationParameters;\\n\\n  event ApproverSet(address indexed approver);\\n\\n  event ConcurrentProposalsSet(uint256 concurrentProposals);\\n\\n  event MinDepositSet(uint256 minDeposit);\\n\\n  event QueueExpirySet(uint256 queueExpiry);\\n\\n  event DequeueFrequencySet(uint256 dequeueFrequency);\\n\\n  event ReferendumStageDurationSet(uint256 referendumStageDuration);\\n\\n  event ExecutionStageDurationSet(uint256 executionStageDuration);\\n\\n  event ConstitutionSet(address indexed destination, bytes4 indexed functionId, uint256 threshold);\\n\\n  event ProposalQueued(\\n    uint256 indexed proposalId,\\n    address indexed proposer,\\n    uint256 transactionCount,\\n    uint256 deposit,\\n    uint256 timestamp\\n  );\\n\\n  event ProposalUpvoted(uint256 indexed proposalId, address indexed account, uint256 upvotes);\\n\\n  event ProposalUpvoteRevoked(\\n    uint256 indexed proposalId,\\n    address indexed account,\\n    uint256 revokedUpvotes\\n  );\\n\\n  event ProposalDequeued(uint256 indexed proposalId, uint256 timestamp);\\n\\n  event ProposalApproved(uint256 indexed proposalId);\\n\\n  event ProposalVoted(\\n    uint256 indexed proposalId,\\n    address indexed account,\\n    uint256 value,\\n    uint256 weight\\n  );\\n\\n  event ProposalVotedV2(\\n    uint256 indexed proposalId,\\n    address indexed account,\\n    uint256 yesVotes,\\n    uint256 noVotes,\\n    uint256 abstainVotes\\n  );\\n\\n  event ProposalVoteRevoked(\\n    uint256 indexed proposalId,\\n    address indexed account,\\n    uint256 value,\\n    uint256 weight\\n  );\\n\\n  event ProposalVoteRevokedV2(\\n    uint256 indexed proposalId,\\n    address indexed account,\\n    uint256 yesVotes,\\n    uint256 noVotes,\\n    uint256 abstainVotes\\n  );\\n\\n  event ProposalExecuted(uint256 indexed proposalId);\\n\\n  event ProposalExpired(uint256 indexed proposalId);\\n\\n  event ParticipationBaselineUpdated(uint256 participationBaseline);\\n\\n  event ParticipationFloorSet(uint256 participationFloor);\\n\\n  event ParticipationBaselineUpdateFactorSet(uint256 baselineUpdateFactor);\\n\\n  event ParticipationBaselineQuorumFactorSet(uint256 baselineQuorumFactor);\\n\\n  event HotfixWhitelisted(bytes32 indexed hash, address whitelister);\\n\\n  event HotfixApproved(bytes32 indexed hash);\\n\\n  event HotfixPrepared(bytes32 indexed hash, uint256 indexed epoch);\\n\\n  event HotfixExecuted(bytes32 indexed hash);\\n\\n  modifier hotfixNotExecuted(bytes32 hash) {\\n    require(!hotfixes[hash].executed, \\\"hotfix already executed\\\");\\n    _;\\n  }\\n\\n  modifier onlyApprover() {\\n    require(msg.sender == approver, \\\"msg.sender not approver\\\");\\n    _;\\n  }\\n\\n  modifier onlyLockedGold() {\\n    require(msg.sender == address(getLockedGold()), \\\"msg.sender not lockedGold\\\");\\n    _;\\n  }\\n\\n  /**\\n   * @notice Sets initialized == true on implementation contracts\\n   * @param test Set to true to skip implementation initialization\\n   */\\n  constructor(bool test) public Initializable(test) {}\\n\\n  function() external payable {\\n    require(msg.data.length == 0, \\\"unknown method\\\");\\n  }\\n\\n  /**\\n   * @notice Returns the storage, major, minor, and patch version of the contract.\\n   * @return Storage version of the contract.\\n   * @return Major version of the contract.\\n   * @return Minor version of the contract.\\n   * @return Patch version of the contract.\\n   */\\n  function getVersionNumber() external pure returns (uint256, uint256, uint256, uint256) {\\n    return (1, 4, 0, 0);\\n  }\\n\\n  /**\\n   * @notice Used in place of the constructor to allow the contract to be upgradable via proxy.\\n   * @param registryAddress The address of the registry contract.\\n   * @param _approver The address that needs to approve proposals to move to the referendum stage.\\n   * @param _concurrentProposals The number of proposals to dequeue at once.\\n   * @param _minDeposit The minimum CELO deposit needed to make a proposal.\\n   * @param _queueExpiry The number of seconds a proposal can stay in the queue before expiring.\\n   * @param _dequeueFrequency The number of seconds before the next batch of proposals can be\\n   *   dequeued.\\n   * @param referendumStageDuration The number of seconds users have to vote on a dequeued proposal\\n   *   after the approval stage ends.\\n   * @param executionStageDuration The number of seconds users have to execute a passed proposal\\n   *   after the referendum stage ends.\\n   * @param participationBaseline The initial value of the participation baseline.\\n   * @param participationFloor The participation floor.\\n   * @param baselineUpdateFactor The weight of the new participation in the baseline update rule.\\n   * @param baselineQuorumFactor The proportion of the baseline that constitutes quorum.\\n   * @dev Should be called only once.\\n   */\\n  function initialize(\\n    address registryAddress,\\n    address _approver,\\n    uint256 _concurrentProposals,\\n    uint256 _minDeposit,\\n    uint256 _queueExpiry,\\n    uint256 _dequeueFrequency,\\n    uint256 referendumStageDuration,\\n    uint256 executionStageDuration,\\n    uint256 participationBaseline,\\n    uint256 participationFloor,\\n    uint256 baselineUpdateFactor,\\n    uint256 baselineQuorumFactor\\n  ) external initializer {\\n    _transferOwnership(msg.sender);\\n    setRegistry(registryAddress);\\n    setApprover(_approver);\\n    setConcurrentProposals(_concurrentProposals);\\n    setMinDeposit(_minDeposit);\\n    setQueueExpiry(_queueExpiry);\\n    setDequeueFrequency(_dequeueFrequency);\\n    setReferendumStageDuration(referendumStageDuration);\\n    setExecutionStageDuration(executionStageDuration);\\n    setParticipationBaseline(participationBaseline);\\n    setParticipationFloor(participationFloor);\\n    setBaselineUpdateFactor(baselineUpdateFactor);\\n    setBaselineQuorumFactor(baselineQuorumFactor);\\n    // solhint-disable-next-line not-rely-on-time\\n    lastDequeue = now;\\n  }\\n\\n  /**\\n   * @notice Updates the address that has permission to approve proposals in the approval stage.\\n   * @param _approver The address that has permission to approve proposals in the approval stage.\\n   */\\n  function setApprover(address _approver) public onlyOwner {\\n    require(_approver != address(0), \\\"Approver cannot be 0\\\");\\n    require(_approver != approver, \\\"Approver unchanged\\\");\\n    approver = _approver;\\n    emit ApproverSet(_approver);\\n  }\\n\\n  /**\\n   * @notice Updates the number of proposals to dequeue at a time.\\n   * @param _concurrentProposals The number of proposals to dequeue at at a time.\\n   */\\n  function setConcurrentProposals(uint256 _concurrentProposals) public onlyOwner {\\n    require(_concurrentProposals != 0, \\\"Number of proposals must be larger than zero\\\");\\n    require(_concurrentProposals != concurrentProposals, \\\"Number of proposals unchanged\\\");\\n    concurrentProposals = _concurrentProposals;\\n    emit ConcurrentProposalsSet(_concurrentProposals);\\n  }\\n\\n  /**\\n   * @notice Updates the minimum deposit needed to make a proposal.\\n   * @param _minDeposit The minimum CELO deposit needed to make a proposal.\\n   */\\n  function setMinDeposit(uint256 _minDeposit) public onlyOwner {\\n    require(_minDeposit != 0, \\\"minDeposit must be larger than 0\\\");\\n    require(_minDeposit != minDeposit, \\\"Minimum deposit unchanged\\\");\\n    minDeposit = _minDeposit;\\n    emit MinDepositSet(_minDeposit);\\n  }\\n\\n  /**\\n   * @notice Updates the number of seconds before a queued proposal expires.\\n   * @param _queueExpiry The number of seconds a proposal can stay in the queue before expiring.\\n   */\\n  function setQueueExpiry(uint256 _queueExpiry) public onlyOwner {\\n    require(_queueExpiry != 0, \\\"QueueExpiry must be larger than 0\\\");\\n    require(_queueExpiry != queueExpiry, \\\"QueueExpiry unchanged\\\");\\n    queueExpiry = _queueExpiry;\\n    emit QueueExpirySet(_queueExpiry);\\n  }\\n\\n  /**\\n   * @notice Updates the minimum number of seconds before the next batch of proposals can be\\n   *   dequeued.\\n   * @param _dequeueFrequency The number of seconds before the next batch of proposals can be\\n   *   dequeued.\\n   */\\n  function setDequeueFrequency(uint256 _dequeueFrequency) public onlyOwner {\\n    require(_dequeueFrequency != 0, \\\"dequeueFrequency must be larger than 0\\\");\\n    require(_dequeueFrequency != dequeueFrequency, \\\"dequeueFrequency unchanged\\\");\\n    dequeueFrequency = _dequeueFrequency;\\n    emit DequeueFrequencySet(_dequeueFrequency);\\n  }\\n\\n  /**\\n   * @notice Updates the number of seconds proposals stay in the referendum stage.\\n   * @param referendumStageDuration The number of seconds proposals stay in the referendum stage.\\n   */\\n  function setReferendumStageDuration(uint256 referendumStageDuration) public onlyOwner {\\n    require(referendumStageDuration != 0, \\\"Duration must be larger than 0\\\");\\n    require(referendumStageDuration != stageDurations.referendum, \\\"Duration unchanged\\\");\\n    stageDurations.referendum = referendumStageDuration;\\n    emit ReferendumStageDurationSet(referendumStageDuration);\\n  }\\n\\n  /**\\n   * @notice Updates the number of seconds proposals stay in the execution stage.\\n   * @param executionStageDuration The number of seconds proposals stay in the execution stage.\\n   */\\n  function setExecutionStageDuration(uint256 executionStageDuration) public onlyOwner {\\n    require(executionStageDuration != 0, \\\"Duration must be larger than 0\\\");\\n    require(executionStageDuration != stageDurations.execution, \\\"Duration unchanged\\\");\\n    stageDurations.execution = executionStageDuration;\\n    emit ExecutionStageDurationSet(executionStageDuration);\\n  }\\n\\n  /**\\n   * @notice Updates the participation baseline.\\n   * @param participationBaseline The value of the baseline.\\n   */\\n  function setParticipationBaseline(uint256 participationBaseline) public onlyOwner {\\n    FixidityLib.Fraction memory participationBaselineFrac = FixidityLib.wrap(participationBaseline);\\n    require(\\n      FixidityLib.isProperFraction(participationBaselineFrac),\\n      \\\"Participation baseline greater than one\\\"\\n    );\\n    require(\\n      !participationBaselineFrac.equals(participationParameters.baseline),\\n      \\\"Participation baseline unchanged\\\"\\n    );\\n    participationParameters.baseline = participationBaselineFrac;\\n    emit ParticipationBaselineUpdated(participationBaseline);\\n  }\\n\\n  /**\\n   * @notice Updates the floor of the participation baseline.\\n   * @param participationFloor The value at which the baseline is floored.\\n   */\\n  function setParticipationFloor(uint256 participationFloor) public onlyOwner {\\n    FixidityLib.Fraction memory participationFloorFrac = FixidityLib.wrap(participationFloor);\\n    require(\\n      FixidityLib.isProperFraction(participationFloorFrac),\\n      \\\"Participation floor greater than one\\\"\\n    );\\n    require(\\n      !participationFloorFrac.equals(participationParameters.baselineFloor),\\n      \\\"Participation baseline floor unchanged\\\"\\n    );\\n    participationParameters.baselineFloor = participationFloorFrac;\\n    emit ParticipationFloorSet(participationFloor);\\n  }\\n\\n  /**\\n   * @notice Updates the weight of the new participation in the baseline update rule.\\n   * @param baselineUpdateFactor The new baseline update factor.\\n   */\\n  function setBaselineUpdateFactor(uint256 baselineUpdateFactor) public onlyOwner {\\n    FixidityLib.Fraction memory baselineUpdateFactorFrac = FixidityLib.wrap(baselineUpdateFactor);\\n    require(\\n      FixidityLib.isProperFraction(baselineUpdateFactorFrac),\\n      \\\"Baseline update factor greater than one\\\"\\n    );\\n    require(\\n      !baselineUpdateFactorFrac.equals(participationParameters.baselineUpdateFactor),\\n      \\\"Baseline update factor unchanged\\\"\\n    );\\n    participationParameters.baselineUpdateFactor = baselineUpdateFactorFrac;\\n    emit ParticipationBaselineUpdateFactorSet(baselineUpdateFactor);\\n  }\\n\\n  /**\\n   * @notice Updates the proportion of the baseline that constitutes quorum.\\n   * @param baselineQuorumFactor The new baseline quorum factor.\\n   */\\n  function setBaselineQuorumFactor(uint256 baselineQuorumFactor) public onlyOwner {\\n    FixidityLib.Fraction memory baselineQuorumFactorFrac = FixidityLib.wrap(baselineQuorumFactor);\\n    require(\\n      FixidityLib.isProperFraction(baselineQuorumFactorFrac),\\n      \\\"Baseline quorum factor greater than one\\\"\\n    );\\n    require(\\n      !baselineQuorumFactorFrac.equals(participationParameters.baselineQuorumFactor),\\n      \\\"Baseline quorum factor unchanged\\\"\\n    );\\n    participationParameters.baselineQuorumFactor = baselineQuorumFactorFrac;\\n    emit ParticipationBaselineQuorumFactorSet(baselineQuorumFactor);\\n  }\\n\\n  /**\\n   * @notice Updates the ratio of yes:yes+no votes needed for a specific class of proposals to pass.\\n   * @param destination The destination of proposals for which this threshold should apply.\\n   * @param functionId The function ID of proposals for which this threshold should apply. Zero\\n   *   will set the default.\\n   * @param threshold The threshold.\\n   * @dev If no constitution is explicitly set the default is a simple majority, i.e. 1:2.\\n   */\\n  function setConstitution(address destination, bytes4 functionId, uint256 threshold)\\n    external\\n    onlyOwner\\n  {\\n    require(destination != address(0), \\\"Destination cannot be zero\\\");\\n    require(\\n      threshold > FIXED_HALF && threshold <= FixidityLib.fixed1().unwrap(),\\n      \\\"Threshold has to be greater than majority and not greater than unanimity\\\"\\n    );\\n    if (functionId == 0) {\\n      constitution[destination].defaultThreshold = FixidityLib.wrap(threshold);\\n    } else {\\n      constitution[destination].functionThresholds[functionId] = FixidityLib.wrap(threshold);\\n    }\\n    emit ConstitutionSet(destination, functionId, threshold);\\n  }\\n\\n  /**\\n   * @notice Creates a new proposal and adds it to end of the queue with no upvotes.\\n   * @param values The values of CELO to be sent in the proposed transactions.\\n   * @param destinations The destination addresses of the proposed transactions.\\n   * @param data The concatenated data to be included in the proposed transactions.\\n   * @param dataLengths The lengths of each transaction's data.\\n   * @return The ID of the newly proposed proposal.\\n   * @dev The minimum deposit must be included with the proposal, returned if/when the proposal is\\n   *   dequeued.\\n   */\\n  function propose(\\n    uint256[] calldata values,\\n    address[] calldata destinations,\\n    bytes calldata data,\\n    uint256[] calldata dataLengths,\\n    string calldata descriptionUrl\\n  ) external payable returns (uint256) {\\n    dequeueProposalsIfReady();\\n    require(msg.value >= minDeposit, \\\"Too small deposit\\\");\\n\\n    proposalCount = proposalCount.add(1);\\n    Proposals.Proposal storage proposal = proposals[proposalCount];\\n    proposal.make(values, destinations, data, dataLengths, msg.sender, msg.value);\\n    proposal.setDescriptionUrl(descriptionUrl);\\n    queue.push(proposalCount);\\n    // solhint-disable-next-line not-rely-on-time\\n    emit ProposalQueued(proposalCount, msg.sender, proposal.transactions.length, msg.value, now);\\n    return proposalCount;\\n  }\\n\\n  /**\\n   * @notice Removes a proposal if it is queued and expired.\\n   * @param proposalId The ID of the proposal to remove.\\n   * @return Whether the proposal was removed.\\n   */\\n  function removeIfQueuedAndExpired(uint256 proposalId) private returns (bool) {\\n    if (isQueued(proposalId) && isQueuedProposalExpired(proposalId)) {\\n      queue.remove(proposalId);\\n      emit ProposalExpired(proposalId);\\n      return true;\\n    }\\n    return false;\\n  }\\n\\n  /**\\n   * @notice Requires a proposal is dequeued and removes it if expired.\\n   * @param proposalId The ID of the proposal.\\n   * @return The proposal storage struct corresponding to `proposalId`.\\n   * @return The proposal stage corresponding to `proposalId`.\\n   */\\n  function requireDequeuedAndDeleteExpired(uint256 proposalId, uint256 index)\\n    private\\n    returns (Proposals.Proposal storage, Proposals.Stage)\\n  {\\n    Proposals.Proposal storage proposal = proposals[proposalId];\\n    require(_isDequeuedProposal(proposal, proposalId, index), \\\"Proposal not dequeued\\\");\\n    Proposals.Stage stage = getProposalDequeuedStage(proposal);\\n    if (_isDequeuedProposalExpired(proposal, stage)) {\\n      deleteDequeuedProposal(proposal, proposalId, index);\\n      return (proposal, Proposals.Stage.Expiration);\\n    }\\n    return (proposal, stage);\\n  }\\n\\n  /**\\n   * @notice Upvotes a queued proposal.\\n   * @param proposalId The ID of the proposal to upvote.\\n   * @param lesser The ID of the proposal that will be just behind `proposalId` in the queue.\\n   * @param greater The ID of the proposal that will be just ahead `proposalId` in the queue.\\n   * @return Whether or not the upvote was made successfully.\\n   * @dev Provide 0 for `lesser`/`greater` when the proposal will be at the tail/head of the queue.\\n   * @dev Reverts if the account has already upvoted a proposal in the queue.\\n   */\\n  function upvote(uint256 proposalId, uint256 lesser, uint256 greater)\\n    external\\n    nonReentrant\\n    returns (bool)\\n  {\\n    dequeueProposalsIfReady();\\n    // If acting on an expired proposal, expire the proposal and take no action.\\n    if (removeIfQueuedAndExpired(proposalId)) {\\n      return false;\\n    }\\n\\n    address account = getAccounts().voteSignerToAccount(msg.sender);\\n    Voter storage voter = voters[account];\\n    removeIfQueuedAndExpired(voter.upvote.proposalId);\\n\\n    // We can upvote a proposal in the queue if we're not already upvoting a proposal in the queue.\\n    uint256 weight = getLockedGold().getAccountTotalLockedGold(account);\\n    require(weight > 0, \\\"cannot upvote without locking gold\\\");\\n    require(queue.contains(proposalId), \\\"cannot upvote a proposal not in the queue\\\");\\n    require(\\n      voter.upvote.proposalId == 0 || !queue.contains(voter.upvote.proposalId),\\n      \\\"cannot upvote more than one queued proposal\\\"\\n    );\\n    uint256 upvotes = queue.getValue(proposalId).add(weight);\\n    queue.update(proposalId, upvotes, lesser, greater);\\n    voter.upvote = UpvoteRecord(proposalId, weight);\\n    emit ProposalUpvoted(proposalId, account, weight);\\n    return true;\\n  }\\n\\n  /**\\n   * @notice Returns stage of governance process given proposal is in\\n   * @param proposalId The ID of the proposal to query.\\n   * @return proposal stage\\n   */\\n  function getProposalStage(uint256 proposalId) external view returns (Proposals.Stage) {\\n    if (proposalId == 0 || proposalId > proposalCount) {\\n      return Proposals.Stage.None;\\n    }\\n    Proposals.Proposal storage proposal = proposals[proposalId];\\n    if (isQueued(proposalId)) {\\n      return\\n        _isQueuedProposalExpired(proposal) ? Proposals.Stage.Expiration : Proposals.Stage.Queued;\\n    } else {\\n      Proposals.Stage stage = getProposalDequeuedStage(proposal);\\n      return _isDequeuedProposalExpired(proposal, stage) ? Proposals.Stage.Expiration : stage;\\n    }\\n  }\\n\\n  /**\\n   * @notice Revokes an upvote on a queued proposal.\\n   * @param lesser The ID of the proposal that will be just behind the previously upvoted proposal\\n   *   in the queue.\\n   * @param greater The ID of the proposal that will be just ahead of the previously upvoted\\n   *   proposal in the queue.\\n   * @return Whether or not the upvote was revoked successfully.\\n   * @dev Provide 0 for `lesser`/`greater` when the proposal will be at the tail/head of the queue.\\n   */\\n  function revokeUpvote(uint256 lesser, uint256 greater) external nonReentrant returns (bool) {\\n    dequeueProposalsIfReady();\\n    address account = getAccounts().voteSignerToAccount(msg.sender);\\n    Voter storage voter = voters[account];\\n    uint256 proposalId = voter.upvote.proposalId;\\n    require(proposalId != 0, \\\"Account has no historical upvote\\\");\\n    removeIfQueuedAndExpired(proposalId);\\n    if (queue.contains(proposalId)) {\\n      queue.update(\\n        proposalId,\\n        queue.getValue(proposalId).sub(voter.upvote.weight),\\n        lesser,\\n        greater\\n      );\\n      emit ProposalUpvoteRevoked(proposalId, account, voter.upvote.weight);\\n    }\\n    voter.upvote = UpvoteRecord(0, 0);\\n    return true;\\n  }\\n\\n  /**\\n   * @notice Approves a proposal in the approval stage.\\n   * @param proposalId The ID of the proposal to approve.\\n   * @param index The index of the proposal ID in `dequeued`.\\n   * @return Whether or not the approval was made successfully.\\n   */\\n  function approve(uint256 proposalId, uint256 index) external onlyApprover returns (bool) {\\n    dequeueProposalsIfReady();\\n    (Proposals.Proposal storage proposal, Proposals.Stage stage) = requireDequeuedAndDeleteExpired(\\n      proposalId,\\n      index\\n    );\\n    if (!proposal.exists()) {\\n      return false;\\n    }\\n\\n    require(!proposal.isApproved(), \\\"Proposal already approved\\\");\\n    require(\\n      stage == Proposals.Stage.Referendum || stage == Proposals.Stage.Execution,\\n      \\\"Proposal not in correct stage\\\"\\n    );\\n    proposal.approved = true;\\n    // Ensures networkWeight is set by the end of the Referendum stage, even if 0 votes are cast.\\n    proposal.networkWeight = getLockedGold().getTotalLockedGold();\\n    emit ProposalApproved(proposalId);\\n    return true;\\n  }\\n\\n  /**\\n   * @notice Votes on a proposal in the referendum stage.\\n   * @param proposalId The ID of the proposal to vote on.\\n   * @param index The index of the proposal ID in `dequeued`.\\n   * @param value Whether to vote yes, no, or abstain.\\n   * @return Whether or not the vote was cast successfully.\\n   */\\n  /* solhint-disable code-complexity */\\n  function vote(uint256 proposalId, uint256 index, Proposals.VoteValue value)\\n    external\\n    nonReentrant\\n    returns (bool)\\n  {\\n    dequeueProposalsIfReady();\\n    (Proposals.Proposal storage proposal, Proposals.Stage stage) = requireDequeuedAndDeleteExpired(\\n      proposalId,\\n      index\\n    );\\n    if (!proposal.exists()) {\\n      return false;\\n    }\\n\\n    require(stage == Proposals.Stage.Referendum, \\\"Incorrect proposal state\\\");\\n    require(value != Proposals.VoteValue.None, \\\"Vote value unset\\\");\\n\\n    address account = getAccounts().voteSignerToAccount(msg.sender);\\n    uint256 weight = getLockedGold().getAccountTotalGovernanceVotingPower(account);\\n    require(weight != 0, \\\"Voter weight zero\\\");\\n\\n    _vote(\\n      proposal,\\n      proposalId,\\n      index,\\n      account,\\n      value == Proposals.VoteValue.Yes ? weight : 0,\\n      value == Proposals.VoteValue.No ? weight : 0,\\n      value == Proposals.VoteValue.Abstain ? weight : 0\\n    );\\n    return true;\\n  }\\n\\n  /**\\n   * @notice Votes partially on a proposal in the referendum stage.\\n   * @param proposalId The ID of the proposal to vote on.\\n   * @param index The index of the proposal ID in `dequeued`.\\n   * @param yesVotes The yes votes weight.\\n   * @param noVotes The no votes weight.\\n   * @param abstainVotes The abstain votes weight.\\n   * @return Whether or not the vote was cast successfully.\\n   */\\n  /* solhint-disable code-complexity */\\n  function votePartially(\\n    uint256 proposalId,\\n    uint256 index,\\n    uint256 yesVotes,\\n    uint256 noVotes,\\n    uint256 abstainVotes\\n  ) external nonReentrant returns (bool) {\\n    dequeueProposalsIfReady();\\n    (Proposals.Proposal storage proposal, Proposals.Stage stage) = requireDequeuedAndDeleteExpired(\\n      proposalId,\\n      index\\n    );\\n    if (!proposal.exists()) {\\n      return false;\\n    }\\n\\n    require(stage == Proposals.Stage.Referendum, \\\"Incorrect proposal state\\\");\\n\\n    address account = getAccounts().voteSignerToAccount(msg.sender);\\n    uint256 totalVotingPower = getLockedGold().getAccountTotalGovernanceVotingPower(account);\\n\\n    require(\\n      totalVotingPower >= yesVotes.add(noVotes).add(abstainVotes),\\n      \\\"Voter doesn't have enough locked Celo (formerly known as Celo Gold)\\\"\\n    );\\n    _vote(proposal, proposalId, index, account, yesVotes, noVotes, abstainVotes);\\n\\n    return true;\\n  }\\n\\n  /**\\n   * @notice Votes on a proposal in the referendum stage.\\n   * @param proposal The proposal struct.\\n   * @param proposalId The ID of the proposal to vote on.\\n   * @param index The index of the proposal ID in `dequeued`.\\n   * @param account Account based on signer.\\n   * @param yesVotes The yes votes weight.\\n   * @param noVotes The no votes weight.\\n   * @param abstainVotes The abstain votes weight.\\n   * @return Whether or not the proposal is passing.\\n   */\\n  function _vote(\\n    Proposals.Proposal storage proposal,\\n    uint256 proposalId,\\n    uint256 index,\\n    address account,\\n    uint256 yesVotes,\\n    uint256 noVotes,\\n    uint256 abstainVotes\\n  ) private {\\n    Voter storage voter = voters[account];\\n\\n    VoteRecord storage previousVoteRecord = voter.referendumVotes[index];\\n\\n    if (previousVoteRecord.proposalId != proposalId) {\\n      // VoteRecord is being stored based on index (in `dequeued`) rather than proposalId.\\n      // It can happen that user voted on proposal that later gets deleted.\\n      // VoteRecord will still stay in `referendumVotes` mapping.\\n      // Once new proposal is created it might get same index as previous proposal.\\n      // In such case we need to check whether existing VoteRecord is relevant to new\\n      // proposal of whether it is just left over data.\\n      proposal.updateVote(0, 0, 0, yesVotes, noVotes, abstainVotes);\\n    } else if (previousVoteRecord.deprecated_weight != 0) {\\n      // backward compatibility for transition period - this should be deleted later on\\n      proposal.updateVote(\\n        previousVoteRecord.deprecated_value == Proposals.VoteValue.Yes\\n          ? previousVoteRecord.deprecated_weight\\n          : 0,\\n        previousVoteRecord.deprecated_value == Proposals.VoteValue.No\\n          ? previousVoteRecord.deprecated_weight\\n          : 0,\\n        previousVoteRecord.deprecated_value == Proposals.VoteValue.Abstain\\n          ? previousVoteRecord.deprecated_weight\\n          : 0,\\n        yesVotes,\\n        noVotes,\\n        abstainVotes\\n      );\\n\\n    } else {\\n      proposal.updateVote(\\n        previousVoteRecord.yesVotes,\\n        previousVoteRecord.noVotes,\\n        previousVoteRecord.abstainVotes,\\n        yesVotes,\\n        noVotes,\\n        abstainVotes\\n      );\\n    }\\n\\n    proposal.networkWeight = getLockedGold().getTotalLockedGold();\\n    voter.referendumVotes[index] = VoteRecord(\\n      Proposals.VoteValue.None,\\n      proposalId,\\n      0,\\n      yesVotes,\\n      noVotes,\\n      abstainVotes\\n    );\\n    if (proposal.timestamp > proposals[voter.mostRecentReferendumProposal].timestamp) {\\n      voter.mostRecentReferendumProposal = proposalId;\\n    }\\n\\n    emit ProposalVotedV2(proposalId, account, yesVotes, noVotes, abstainVotes);\\n  }\\n\\n  /* solhint-enable code-complexity */\\n\\n  /**\\n   * @notice Revoke votes on all proposals of sender in the referendum stage.\\n   * @return Whether or not all votes of an account were successfully revoked.\\n   */\\n  function revokeVotes() external nonReentrant returns (bool) {\\n    address account = getAccounts().voteSignerToAccount(msg.sender);\\n    Voter storage voter = voters[account];\\n    for (\\n      uint256 dequeueIndex = 0;\\n      dequeueIndex < dequeued.length;\\n      dequeueIndex = dequeueIndex.add(1)\\n    ) {\\n      VoteRecord storage voteRecord = voter.referendumVotes[dequeueIndex];\\n\\n      // Skip proposals where there was no vote cast by the user AND\\n      // ensure vote record proposal matches identifier of dequeued index proposal.\\n      if (\\n        voteRecord.proposalId == dequeued[dequeueIndex] &&\\n        (voteRecord.yesVotes != 0 ||\\n          voteRecord.noVotes != 0 ||\\n          voteRecord.abstainVotes != 0 ||\\n          voteRecord.deprecated_weight != 0)\\n      ) {\\n        (Proposals.Proposal storage proposal, Proposals.Stage stage) =\\n          requireDequeuedAndDeleteExpired(voteRecord.proposalId, dequeueIndex); // prettier-ignore\\n\\n        // only revoke from proposals which are still in referendum\\n        if (stage == Proposals.Stage.Referendum) {\\n          if (voteRecord.deprecated_weight != 0) {\\n            // backward compatibility for transition period - this should be deleted later on\\n            uint256 previousYes = voteRecord.deprecated_value == Proposals.VoteValue.Yes\\n              ? voteRecord.deprecated_weight\\n              : 0;\\n            uint256 previousNo = voteRecord.deprecated_value == Proposals.VoteValue.No\\n              ? voteRecord.deprecated_weight\\n              : 0;\\n            uint256 previousAbstain = voteRecord.deprecated_value == Proposals.VoteValue.Abstain\\n              ? voteRecord.deprecated_weight\\n              : 0;\\n            proposal.updateVote(previousYes, previousNo, previousAbstain, 0, 0, 0);\\n\\n            proposal.networkWeight = getLockedGold().getTotalLockedGold();\\n            emit ProposalVoteRevokedV2(\\n              voteRecord.proposalId,\\n              account,\\n              previousYes,\\n              previousNo,\\n              previousAbstain\\n            );\\n          } else {\\n            proposal.updateVote(\\n              voteRecord.yesVotes,\\n              voteRecord.noVotes,\\n              voteRecord.abstainVotes,\\n              0,\\n              0,\\n              0\\n            );\\n            proposal.networkWeight = getLockedGold().getTotalLockedGold();\\n            emit ProposalVoteRevokedV2(\\n              voteRecord.proposalId,\\n              account,\\n              voteRecord.yesVotes,\\n              voteRecord.noVotes,\\n              voteRecord.abstainVotes\\n            );\\n          }\\n        }\\n\\n        // always delete dequeue vote records for gas refund as they must be expired or revoked\\n        delete voter.referendumVotes[dequeueIndex];\\n      }\\n    }\\n\\n    // reset most recent referendum proposal ID to guarantee isVotingReferendum == false\\n    voter.mostRecentReferendumProposal = 0;\\n    return true;\\n  }\\n\\n  /**\\n   * @notice Executes a proposal in the execution stage, removing it from `dequeued`.\\n   * @param proposalId The ID of the proposal to vote on.\\n   * @param index The index of the proposal ID in `dequeued`.\\n   * @return Whether or not the proposal was executed successfully.\\n   * @dev Does not remove the proposal if the execution fails.\\n   */\\n  function execute(uint256 proposalId, uint256 index) external nonReentrant returns (bool) {\\n    dequeueProposalsIfReady();\\n    (Proposals.Proposal storage proposal, Proposals.Stage stage) = requireDequeuedAndDeleteExpired(\\n      proposalId,\\n      index\\n    );\\n    bool notExpired = proposal.exists();\\n    if (notExpired) {\\n      require(proposal.isApproved(), \\\"Proposal not approved\\\");\\n      require(\\n        stage == Proposals.Stage.Execution && _isProposalPassing(proposal),\\n        \\\"Proposal not in execution stage or not passing\\\"\\n      );\\n      proposal.execute();\\n      emit ProposalExecuted(proposalId);\\n      deleteDequeuedProposal(proposal, proposalId, index);\\n    }\\n    return notExpired;\\n  }\\n\\n  /**\\n   * @notice Approves the hash of a hotfix transaction(s).\\n   * @param hash The abi encoded keccak256 hash of the hotfix transaction(s) to be approved.\\n   */\\n  function approveHotfix(bytes32 hash) external hotfixNotExecuted(hash) onlyApprover {\\n    hotfixes[hash].approved = true;\\n    emit HotfixApproved(hash);\\n  }\\n\\n  /**\\n   * @notice Returns whether given hotfix hash has been whitelisted by given address.\\n   * @param hash The abi encoded keccak256 hash of the hotfix transaction(s) to be whitelisted.\\n   * @param whitelister Address to check whitelist status of.\\n   */\\n  function isHotfixWhitelistedBy(bytes32 hash, address whitelister) public view returns (bool) {\\n    return hotfixes[hash].whitelisted[whitelister];\\n  }\\n\\n  /**\\n   * @notice Whitelists the hash of a hotfix transaction(s).\\n   * @param hash The abi encoded keccak256 hash of the hotfix transaction(s) to be whitelisted.\\n   */\\n  function whitelistHotfix(bytes32 hash) external hotfixNotExecuted(hash) {\\n    hotfixes[hash].whitelisted[msg.sender] = true;\\n    emit HotfixWhitelisted(hash, msg.sender);\\n  }\\n\\n  /**\\n   * @notice Gives hotfix a prepared epoch for execution.\\n   * @param hash The hash of the hotfix to be prepared.\\n   */\\n  function prepareHotfix(bytes32 hash) external hotfixNotExecuted(hash) {\\n    require(isHotfixPassing(hash), \\\"hotfix not whitelisted by 2f+1 validators\\\");\\n    uint256 epoch = getEpochNumber();\\n    require(hotfixes[hash].preparedEpoch < epoch, \\\"hotfix already prepared for this epoch\\\");\\n    hotfixes[hash].preparedEpoch = epoch;\\n    emit HotfixPrepared(hash, epoch);\\n  }\\n\\n  /**\\n   * @notice Executes a whitelisted proposal.\\n   * @param values The values of CELO to be sent in the proposed transactions.\\n   * @param destinations The destination addresses of the proposed transactions.\\n   * @param data The concatenated data to be included in the proposed transactions.\\n   * @param dataLengths The lengths of each transaction's data.\\n   * @param salt Arbitrary salt associated with hotfix which guarantees uniqueness of hash.\\n   * @dev Reverts if hotfix is already executed, not approved, or not prepared for current epoch.\\n   */\\n  function executeHotfix(\\n    uint256[] calldata values,\\n    address[] calldata destinations,\\n    bytes calldata data,\\n    uint256[] calldata dataLengths,\\n    bytes32 salt\\n  ) external {\\n    bytes32 hash = keccak256(abi.encode(values, destinations, data, dataLengths, salt));\\n\\n    (bool approved, bool executed, uint256 preparedEpoch) = getHotfixRecord(hash);\\n    require(!executed, \\\"hotfix already executed\\\");\\n    require(approved, \\\"hotfix not approved\\\");\\n    require(preparedEpoch == getEpochNumber(), \\\"hotfix must be prepared for this epoch\\\");\\n\\n    Proposals.makeMem(values, destinations, data, dataLengths, msg.sender, 0).executeMem();\\n\\n    hotfixes[hash].executed = true;\\n    emit HotfixExecuted(hash);\\n  }\\n\\n  /**\\n   * @notice Withdraws refunded CELO deposits.\\n   * @return Whether or not the withdraw was successful.\\n   */\\n  function withdraw() external nonReentrant returns (bool) {\\n    uint256 value = refundedDeposits[msg.sender];\\n    require(value != 0, \\\"Nothing to withdraw\\\");\\n    require(value <= address(this).balance, \\\"Inconsistent balance\\\");\\n    refundedDeposits[msg.sender] = 0;\\n    msg.sender.sendValue(value);\\n    return true;\\n  }\\n\\n  /**\\n   * @notice Returns whether or not a particular account is voting on proposals.\\n   * @param account The address of the account.\\n   * @return Whether or not the account is voting on proposals.\\n   */\\n  function isVoting(address account) external view returns (bool) {\\n    Voter storage voter = voters[account];\\n    uint256 upvotedProposal = voter.upvote.proposalId;\\n    bool isVotingQueue = upvotedProposal != 0 &&\\n      isQueued(upvotedProposal) &&\\n      !isQueuedProposalExpired(upvotedProposal);\\n    Proposals.Proposal storage proposal = proposals[voter.mostRecentReferendumProposal];\\n    bool isVotingReferendum = (getProposalDequeuedStage(proposal) == Proposals.Stage.Referendum);\\n    return isVotingQueue || isVotingReferendum;\\n  }\\n\\n  /**\\n   * @notice Returns the number of seconds proposals stay in the referendum stage.\\n   * @return The number of seconds proposals stay in the referendum stage.\\n   */\\n  function getReferendumStageDuration() external view returns (uint256) {\\n    return stageDurations.referendum;\\n  }\\n\\n  /**\\n   * @notice Returns the number of seconds proposals stay in the execution stage.\\n   * @return The number of seconds proposals stay in the execution stage.\\n   */\\n  function getExecutionStageDuration() external view returns (uint256) {\\n    return stageDurations.execution;\\n  }\\n\\n  /**\\n   * @notice Returns the participation parameters.\\n   * @return baseline The participation baseline parameter.\\n   * @return baselineFloor The participation baseline floor parameter.\\n   * @return baselineUpdateFactor The participation baseline update factor parameter.\\n   * @return baselineQuorumFactor The participation baseline quorum factor parameter.\\n   */\\n  function getParticipationParameters() external view returns (uint256, uint256, uint256, uint256) {\\n    return (\\n      participationParameters.baseline.unwrap(),\\n      participationParameters.baselineFloor.unwrap(),\\n      participationParameters.baselineUpdateFactor.unwrap(),\\n      participationParameters.baselineQuorumFactor.unwrap()\\n    );\\n  }\\n\\n  /**\\n   * @notice Returns whether or not a proposal exists.\\n   * @param proposalId The ID of the proposal.\\n   * @return Whether or not the proposal exists.\\n   */\\n  function proposalExists(uint256 proposalId) external view returns (bool) {\\n    return proposals[proposalId].exists();\\n  }\\n\\n  /**\\n   * @notice Returns an unpacked proposal struct with its transaction count.\\n   * @param proposalId The ID of the proposal to unpack.\\n   * @return proposer\\n   * @return deposit\\n   * @return timestamp\\n   * @return transaction Transaction count.\\n   * @return description Description url.\\n   */\\n  function getProposal(uint256 proposalId)\\n    external\\n    view\\n    returns (address, uint256, uint256, uint256, string memory, uint256, bool)\\n  {\\n    return proposals[proposalId].unpack();\\n  }\\n\\n  /**\\n   * @notice Returns a specified transaction in a proposal.\\n   * @param proposalId The ID of the proposal to query.\\n   * @param index The index of the specified transaction in the proposal's transaction list.\\n   * @return value Transaction value.\\n   * @return destination Transaction destination.\\n   * @return data Transaction data.\\n   */\\n  function getProposalTransaction(uint256 proposalId, uint256 index)\\n    external\\n    view\\n    returns (uint256, address, bytes memory)\\n  {\\n    return proposals[proposalId].getTransaction(index);\\n  }\\n\\n  /**\\n   * @notice Returns whether or not a proposal has been approved.\\n   * @param proposalId The ID of the proposal.\\n   * @return Whether or not the proposal has been approved.\\n   */\\n  function isApproved(uint256 proposalId) external view returns (bool) {\\n    return proposals[proposalId].isApproved();\\n  }\\n\\n  /**\\n   * @notice Returns the referendum vote totals for a proposal.\\n   * @param proposalId The ID of the proposal.\\n   * @return yes The yes vote totals.\\n   * @return no The no vote totals.\\n   * @return abstain The abstain vote totals.\\n   */\\n  function getVoteTotals(uint256 proposalId) external view returns (uint256, uint256, uint256) {\\n    return proposals[proposalId].getVoteTotals();\\n  }\\n\\n  /**\\n   * @notice Returns an accounts vote record on a particular index in `dequeued`.\\n   * @param account The address of the account to get the record for.\\n   * @param index The index in `dequeued`.\\n   * @return The corresponding proposal ID, vote value, and weight.\\n   * @return The depreciated vote value.\\n   * @return The deprecieated weight.\\n   * @return The yes weight.\\n   * @return The no weight.\\n   * @return The abstain weight.\\n   */\\n  function getVoteRecord(address account, uint256 index)\\n    external\\n    view\\n    returns (uint256, uint256, uint256, uint256, uint256, uint256)\\n  {\\n    VoteRecord storage record = voters[account].referendumVotes[index];\\n    return (\\n      record.proposalId,\\n      uint256(record.deprecated_value),\\n      record.deprecated_weight,\\n      record.yesVotes,\\n      record.noVotes,\\n      record.abstainVotes\\n    );\\n  }\\n\\n  /**\\n   * @notice Returns the number of proposals in the queue.\\n   * @return The number of proposals in the queue.\\n   */\\n  function getQueueLength() external view returns (uint256) {\\n    return queue.list.numElements;\\n  }\\n\\n  /**\\n   * @notice Returns the number of upvotes the queued proposal has received.\\n   * @param proposalId The ID of the proposal.\\n   * @return The number of upvotes a queued proposal has received.\\n   */\\n  function getUpvotes(uint256 proposalId) external view returns (uint256) {\\n    require(isQueued(proposalId), \\\"Proposal not queued\\\");\\n    return queue.getValue(proposalId);\\n  }\\n\\n  /**\\n   * @notice Returns the proposal ID and upvote total for all queued proposals.\\n   * @return proposalID The proposal ID for all queued proposals.\\n   * @return total The upvote total for all queued proposals.\\n   * @dev Note that this includes expired proposals that have yet to be removed from the queue.\\n   */\\n  function getQueue() external view returns (uint256[] memory, uint256[] memory) {\\n    return queue.getElements();\\n  }\\n\\n  /**\\n   * @notice Returns the dequeued proposal IDs.\\n   * @return The dequeued proposal IDs.\\n   * @dev Note that this includes unused indices with proposalId == 0 from deleted proposals.\\n   */\\n  function getDequeue() external view returns (uint256[] memory) {\\n    return dequeued;\\n  }\\n\\n  /**\\n   * @notice Returns the ID of the proposal upvoted by `account` and the weight of that upvote.\\n   * @param account The address of the account.\\n   * @return The ID of the proposal upvoted by `account`.\\n   * @return The weight of that upvote.\\n   */\\n  function getUpvoteRecord(address account) external view returns (uint256, uint256) {\\n    UpvoteRecord memory upvoteRecord = voters[account].upvote;\\n    return (upvoteRecord.proposalId, upvoteRecord.weight);\\n  }\\n\\n  /**\\n   * @notice Returns the ID of the most recently dequeued proposal voted on by `account`.\\n   * @param account The address of the account.\\n   * @return The ID of the most recently dequeued proposal voted on by `account`..\\n   */\\n  function getMostRecentReferendumProposal(address account) external view returns (uint256) {\\n    return voters[account].mostRecentReferendumProposal;\\n  }\\n\\n  /**\\n   * @notice Returns number of validators from current set which have whitelisted the given hotfix.\\n   * @param hash The abi encoded keccak256 hash of the hotfix transaction.\\n   * @return Whitelist tally\\n   */\\n  function hotfixWhitelistValidatorTally(bytes32 hash) public view returns (uint256) {\\n    uint256 tally = 0;\\n    uint256 n = numberValidatorsInCurrentSet();\\n    IAccounts accounts = getAccounts();\\n    for (uint256 i = 0; i < n; i = i.add(1)) {\\n      address validatorSigner = validatorSignerAddressFromCurrentSet(i);\\n      address validatorAccount = accounts.signerToAccount(validatorSigner);\\n      if (\\n        isHotfixWhitelistedBy(hash, validatorSigner) ||\\n        isHotfixWhitelistedBy(hash, validatorAccount)\\n      ) {\\n        tally = tally.add(1);\\n      }\\n    }\\n    return tally;\\n  }\\n\\n  /**\\n   * @notice Checks if a byzantine quorum of validators has whitelisted the given hotfix.\\n   * @param hash The abi encoded keccak256 hash of the hotfix transaction.\\n   * @return Whether validator whitelist tally >= validator byzantine quorum\\n   */\\n  function isHotfixPassing(bytes32 hash) public view returns (bool) {\\n    return hotfixWhitelistValidatorTally(hash) >= minQuorumSizeInCurrentSet();\\n  }\\n\\n  /**\\n   * @notice Gets information about a hotfix.\\n   * @param hash The abi encoded keccak256 hash of the hotfix transaction.\\n   * @return Hotfix approved.\\n   * @return Hotfix executed.\\n   * @return Hotfix preparedEpoch.\\n   */\\n  function getHotfixRecord(bytes32 hash) public view returns (bool, bool, uint256) {\\n    return (hotfixes[hash].approved, hotfixes[hash].executed, hotfixes[hash].preparedEpoch);\\n  }\\n\\n  /**\\n   * @notice Removes the proposals with the most upvotes from the queue, moving them to the\\n   *   approval stage.\\n   * @dev If any of the top proposals have expired, they are deleted.\\n   */\\n  function dequeueProposalsIfReady() public {\\n    // solhint-disable-next-line not-rely-on-time\\n    if (now >= lastDequeue.add(dequeueFrequency)) {\\n      uint256 numProposalsToDequeue = Math.min(concurrentProposals, queue.list.numElements);\\n      uint256[] memory dequeuedIds = queue.popN(numProposalsToDequeue);\\n\\n      bool wasAnyProposalDequeued = false;\\n      for (uint256 i = 0; i < numProposalsToDequeue; i = i.add(1)) {\\n        uint256 proposalId = dequeuedIds[i];\\n        Proposals.Proposal storage proposal = proposals[proposalId];\\n        if (_isQueuedProposalExpired(proposal)) {\\n          emit ProposalExpired(proposalId);\\n          continue;\\n        }\\n        refundedDeposits[proposal.proposer] = refundedDeposits[proposal.proposer].add(\\n          proposal.deposit\\n        );\\n        // solhint-disable-next-line not-rely-on-time\\n        proposal.timestamp = now;\\n        if (emptyIndices.length != 0) {\\n          uint256 indexOfLastEmptyIndex = emptyIndices.length.sub(1);\\n          dequeued[emptyIndices[indexOfLastEmptyIndex]] = proposalId;\\n          delete emptyIndices[indexOfLastEmptyIndex];\\n          emptyIndices.length = indexOfLastEmptyIndex;\\n        } else {\\n          dequeued.push(proposalId);\\n        }\\n        // solhint-disable-next-line not-rely-on-time\\n        emit ProposalDequeued(proposalId, now);\\n        wasAnyProposalDequeued = true;\\n      }\\n      if (wasAnyProposalDequeued) {\\n        // solhint-disable-next-line not-rely-on-time\\n        lastDequeue = now;\\n      }\\n    }\\n  }\\n\\n  /**\\n   * @notice Returns whether or not a proposal is in the queue.\\n   * @dev NOTE: proposal may be expired\\n   * @param proposalId The ID of the proposal.\\n   * @return Whether or not the proposal is in the queue.\\n   */\\n  function isQueued(uint256 proposalId) public view returns (bool) {\\n    return queue.contains(proposalId);\\n  }\\n\\n  /**\\n   * @notice Returns whether or not a particular proposal is passing according to the constitution\\n   *   and the participation levels.\\n   * @param proposalId The ID of the proposal.\\n   * @return Whether or not the proposal is passing.\\n   */\\n  function isProposalPassing(uint256 proposalId) external view returns (bool) {\\n    return _isProposalPassing(proposals[proposalId]);\\n  }\\n\\n  /**\\n   * @notice Returns whether or not a particular proposal is passing according to the constitution\\n   *   and the participation levels.\\n   * @param proposal The proposal struct.\\n   * @return Whether or not the proposal is passing.\\n   */\\n  function _isProposalPassing(Proposals.Proposal storage proposal) private view returns (bool) {\\n    FixidityLib.Fraction memory support = proposal.getSupportWithQuorumPadding(\\n      participationParameters.baseline.multiply(participationParameters.baselineQuorumFactor)\\n    );\\n\\n    if (proposal.transactions.length == 0) {\\n      // default treshold\\n      FixidityLib.Fraction memory threshold = _getConstitution(address(0), \\\"\\\");\\n      return support.gt(threshold);\\n    }\\n\\n    for (uint256 i = 0; i < proposal.transactions.length; i = i.add(1)) {\\n      bytes4 functionId = ExtractFunctionSignature.extractFunctionSignature(\\n        proposal.transactions[i].data\\n      );\\n      FixidityLib.Fraction memory threshold = _getConstitution(\\n        proposal.transactions[i].destination,\\n        functionId\\n      );\\n      if (support.lte(threshold)) {\\n        return false;\\n      }\\n    }\\n    return true;\\n  }\\n\\n  /**\\n   * @notice Returns whether a proposal is dequeued at the given index.\\n   * @param proposalId The ID of the proposal.\\n   * @param index The index of the proposal ID in `dequeued`.\\n   * @return Whether the proposal is in `dequeued`.\\n   */\\n  function isDequeuedProposal(uint256 proposalId, uint256 index) external view returns (bool) {\\n    return _isDequeuedProposal(proposals[proposalId], proposalId, index);\\n  }\\n\\n  /**\\n   * @notice Returns whether a proposal is dequeued at the given index.\\n   * @param proposal The proposal struct.\\n   * @param proposalId The ID of the proposal.\\n   * @param index The index of the proposal ID in `dequeued`.\\n   * @return Whether the proposal is in `dequeued` at index.\\n   */\\n  function _isDequeuedProposal(\\n    Proposals.Proposal storage proposal,\\n    uint256 proposalId,\\n    uint256 index\\n  ) private view returns (bool) {\\n    require(index < dequeued.length, \\\"Provided index greater than dequeue length.\\\");\\n    return proposal.exists() && dequeued[index] == proposalId;\\n  }\\n\\n  /**\\n   * @notice Returns whether or not a dequeued proposal has expired.\\n   * @param proposalId The ID of the proposal.\\n   * @return Whether or not the dequeued proposal has expired.\\n   */\\n  function isDequeuedProposalExpired(uint256 proposalId) external view returns (bool) {\\n    Proposals.Proposal storage proposal = proposals[proposalId];\\n    return _isDequeuedProposalExpired(proposal, getProposalDequeuedStage(proposal));\\n  }\\n\\n  /**\\n   * @notice Returns whether or not a dequeued proposal has expired.\\n   * @param proposal The proposal struct.\\n   * @return Whether or not the dequeued proposal has expired.\\n   */\\n  function _isDequeuedProposalExpired(Proposals.Proposal storage proposal, Proposals.Stage stage)\\n    private\\n    view\\n    returns (bool)\\n  {\\n    // The proposal is considered expired under the following conditions:\\n    //   1. Past the referendum stage and not passing.\\n    //   2. Past the execution stage.\\n    return ((stage > Proposals.Stage.Execution) ||\\n      (stage > Proposals.Stage.Referendum && !_isProposalPassing(proposal)));\\n  }\\n\\n  /**\\n   * @notice Returns whether or not a queued proposal has expired.\\n   * @param proposalId The ID of the proposal.\\n   * @return Whether or not the dequeued proposal has expired.\\n   */\\n  function isQueuedProposalExpired(uint256 proposalId) public view returns (bool) {\\n    return _isQueuedProposalExpired(proposals[proposalId]);\\n  }\\n\\n  /**\\n   * @notice Returns whether or not a queued proposal has expired.\\n   * @param proposal The proposal struct.\\n   * @return Whether or not the dequeued proposal has expired.\\n   */\\n  function _isQueuedProposalExpired(Proposals.Proposal storage proposal)\\n    private\\n    view\\n    returns (bool)\\n  {\\n    // solhint-disable-next-line not-rely-on-time\\n    return now >= proposal.timestamp.add(queueExpiry);\\n  }\\n\\n  /**\\n   * @notice Deletes a dequeued proposal.\\n   * @param proposal The proposal struct.\\n   * @param proposalId The ID of the proposal to delete.\\n   * @param index The index of the proposal ID in `dequeued`.\\n   * @dev Must always be preceded by `isDequeuedProposal`, which checks `index`.\\n   */\\n  function deleteDequeuedProposal(\\n    Proposals.Proposal storage proposal,\\n    uint256 proposalId,\\n    uint256 index\\n  ) private {\\n    if (proposal.isApproved() && proposal.networkWeight != 0) {\\n      updateParticipationBaseline(proposal);\\n    }\\n    dequeued[index] = 0;\\n    emptyIndices.push(index);\\n    delete proposals[proposalId];\\n  }\\n\\n  /**\\n   * @notice Updates the participation baseline based on the proportion of BondedDeposit weight\\n   *   that participated in the proposal's Referendum stage.\\n   * @param proposal The proposal struct.\\n   */\\n  function updateParticipationBaseline(Proposals.Proposal storage proposal) private {\\n    FixidityLib.Fraction memory participation = proposal.getParticipation();\\n    FixidityLib.Fraction memory participationComponent = participation.multiply(\\n      participationParameters.baselineUpdateFactor\\n    );\\n    FixidityLib.Fraction memory baselineComponent = participationParameters.baseline.multiply(\\n      FixidityLib.fixed1().subtract(participationParameters.baselineUpdateFactor)\\n    );\\n    participationParameters.baseline = participationComponent.add(baselineComponent);\\n    if (participationParameters.baseline.lt(participationParameters.baselineFloor)) {\\n      participationParameters.baseline = participationParameters.baselineFloor;\\n    }\\n    emit ParticipationBaselineUpdated(participationParameters.baseline.unwrap());\\n  }\\n\\n  /**\\n   * @notice Returns the constitution for a particular destination and function ID.\\n   * @param destination The destination address to get the constitution for.\\n   * @param functionId The function ID to get the constitution for, zero for the destination\\n   *   default.\\n   * @return The ratio of yes:no votes needed to exceed in order to pass the proposal.\\n   */\\n  function getConstitution(address destination, bytes4 functionId) external view returns (uint256) {\\n    return _getConstitution(destination, functionId).unwrap();\\n  }\\n\\n  function _getConstitution(address destination, bytes4 functionId)\\n    internal\\n    view\\n    returns (FixidityLib.Fraction memory)\\n  {\\n    // Default to a simple majority.\\n    FixidityLib.Fraction memory threshold = FixidityLib.wrap(FIXED_HALF);\\n    if (constitution[destination].functionThresholds[functionId].unwrap() != 0) {\\n      threshold = constitution[destination].functionThresholds[functionId];\\n    } else if (constitution[destination].defaultThreshold.unwrap() != 0) {\\n      threshold = constitution[destination].defaultThreshold;\\n    }\\n    return threshold;\\n  }\\n\\n  /**\\n   * @notice Returns max number of votes cast by an account.\\n   * @param account The address of the account.\\n   * @return The total number of votes cast by an account.\\n   */\\n  function getAmountOfGoldUsedForVoting(address account) public view returns (uint256) {\\n    Voter storage voter = voters[account];\\n\\n    uint256 upvotedProposalId = voter.upvote.proposalId;\\n    bool isVotingQueue = upvotedProposalId != 0 &&\\n      isQueued(upvotedProposalId) &&\\n      !isQueuedProposalExpired(upvotedProposalId);\\n\\n    if (isVotingQueue) {\\n      uint256 weight = getLockedGold().getAccountTotalLockedGold(account);\\n      return weight;\\n    }\\n\\n    uint256 maxUsed = 0;\\n    for (uint256 index = 0; index < dequeued.length; index = index.add(1)) {\\n      Proposals.Proposal storage proposal = proposals[dequeued[index]];\\n      bool isVotingReferendum = (getProposalDequeuedStage(proposal) == Proposals.Stage.Referendum);\\n\\n      if (!isVotingReferendum) {\\n        continue;\\n      }\\n\\n      VoteRecord storage voteRecord = voter.referendumVotes[index];\\n      uint256 votesCast = voteRecord.yesVotes.add(voteRecord.noVotes).add(voteRecord.abstainVotes);\\n      maxUsed = Math.max(\\n        maxUsed,\\n        // backward compatibility for transition period - this should be updated later on\\n        votesCast == 0 ? voteRecord.deprecated_weight : votesCast\\n      );\\n    }\\n    return maxUsed;\\n  }\\n\\n  /**\\n   * @notice When delegator removes votes from delegatee during the time when delegator is voting\\n   * for governance proposal, this method will remove votes from voted proposal proportionally.\\n   * @param account The address of the account.\\n   * @param newVotingPower The adjusted voting power of delegatee.\\n   */\\n  function removeVotesWhenRevokingDelegatedVotes(address account, uint256 newVotingPower)\\n    public\\n    onlyLockedGold\\n  {\\n    _removeVotesWhenRevokingDelegatedVotes(account, newVotingPower);\\n  }\\n\\n  /**\\n   * @notice When delegator removes votes from delegatee during the time when delegator is voting\\n   * for governance proposal, this method will remove votes from voted proposal proportionally.\\n   * @param account The address of the account.\\n   * @param newVotingPower The adjusted voting power of delegatee.\\n   */\\n  function _removeVotesWhenRevokingDelegatedVotes(address account, uint256 newVotingPower)\\n    internal\\n  {\\n    Voter storage voter = voters[account];\\n\\n    for (uint256 index = 0; index < dequeued.length; index = index.add(1)) {\\n      Proposals.Proposal storage proposal = proposals[dequeued[index]];\\n      bool isVotingReferendum = (getProposalDequeuedStage(proposal) == Proposals.Stage.Referendum);\\n\\n      if (!isVotingReferendum) {\\n        continue;\\n      }\\n\\n      VoteRecord storage voteRecord = voter.referendumVotes[index];\\n      uint256 sumOfVotes = voteRecord.yesVotes.add(voteRecord.noVotes).add(voteRecord.abstainVotes);\\n\\n      if (sumOfVotes > newVotingPower) {\\n        uint256 toRemove = sumOfVotes.sub(newVotingPower);\\n\\n        uint256 abstainToRemove = getVotesPortion(toRemove, voteRecord.abstainVotes, sumOfVotes);\\n        uint256 yesToRemove = getVotesPortion(toRemove, voteRecord.yesVotes, sumOfVotes);\\n        uint256 noToRemove = getVotesPortion(toRemove, voteRecord.noVotes, sumOfVotes);\\n\\n        uint256 totalRemoved = abstainToRemove.add(yesToRemove).add(noToRemove);\\n\\n        uint256 yesVotes = voteRecord.yesVotes.sub(yesToRemove);\\n        uint256 noVotes = voteRecord.noVotes.sub(noToRemove);\\n        uint256 abstainVotes = voteRecord.abstainVotes.sub(abstainToRemove);\\n\\n        if (totalRemoved < toRemove) {\\n          // in case of rounding error\\n          uint256 roundingToRemove = toRemove.sub(totalRemoved);\\n\\n          uint256 toRemoveRounding = Math.min(roundingToRemove, yesVotes);\\n          yesVotes = yesVotes.sub(toRemoveRounding);\\n          roundingToRemove = roundingToRemove.sub(toRemoveRounding);\\n\\n          if (roundingToRemove != 0) {\\n            toRemoveRounding = Math.min(roundingToRemove, noVotes);\\n            noVotes = noVotes.sub(toRemoveRounding);\\n            roundingToRemove = roundingToRemove.sub(toRemoveRounding);\\n          }\\n\\n          if (roundingToRemove != 0) {\\n            toRemoveRounding = Math.min(roundingToRemove, abstainVotes);\\n            abstainVotes = abstainVotes.sub(toRemoveRounding);\\n          }\\n        }\\n\\n        proposal.updateVote(\\n          voteRecord.yesVotes,\\n          voteRecord.noVotes,\\n          voteRecord.abstainVotes,\\n          yesVotes,\\n          noVotes,\\n          abstainVotes\\n        );\\n\\n        voteRecord.abstainVotes = abstainVotes;\\n        voteRecord.yesVotes = yesVotes;\\n        voteRecord.noVotes = noVotes;\\n      }\\n    }\\n  }\\n\\n  /**\\n   * Returns amount of votes that should be removed from delegatee's proposal voting.\\n   * @param totalToRemove Total votes to be removed.\\n   * @param votes Yes/no/abstrain votes\\n   * @param sumOfAllVotes Sum of yes, no, and abstain votes.\\n   */\\n  function getVotesPortion(uint256 totalToRemove, uint256 votes, uint256 sumOfAllVotes)\\n    private\\n    pure\\n    returns (uint256)\\n  {\\n    return\\n      FixidityLib\\n        .newFixed(totalToRemove)\\n        .multiply(FixidityLib.newFixedFraction(votes, sumOfAllVotes))\\n        .fromFixed();\\n  }\\n\\n  /**\\n   * @notice Returns the stage of a dequeued proposal.\\n   * @param proposal The proposal struct.\\n   * @return The stage of the dequeued proposal.\\n   * @dev Must be called on a dequeued proposal.\\n   */\\n  function getProposalDequeuedStage(Proposals.Proposal storage proposal)\\n    internal\\n    view\\n    returns (Proposals.Stage)\\n  {\\n    uint256 stageStartTime = proposal.timestamp.add(stageDurations.referendum).add(\\n      stageDurations.execution\\n    );\\n    // solhint-disable-next-line not-rely-on-time\\n    if (\\n      now >= stageStartTime &&\\n      (proposal.transactions.length != 0 ||\\n        // proposals with 0 transactions can expire only when not approved or not passing\\n        !proposal.isApproved() ||\\n        !_isProposalPassing(proposal))\\n    ) {\\n      return Proposals.Stage.Expiration;\\n    }\\n    stageStartTime = stageStartTime.sub(stageDurations.execution);\\n    // solhint-disable-next-line not-rely-on-time\\n    if (now >= stageStartTime) {\\n      return Proposals.Stage.Execution;\\n    }\\n    return Proposals.Stage.Referendum;\\n  }\\n}\\n\",\"keccak256\":\"0x33c32e69876054ab22751ec9281b5dab41ae0f964b49d1f507c71d622b9ea04e\"},\"project:/contracts/governance/Proposals.sol\":{\"content\":\"pragma solidity ^0.5.13;\\n\\nimport \\\"openzeppelin-solidity/contracts/math/SafeMath.sol\\\";\\nimport \\\"openzeppelin-solidity/contracts/utils/Address.sol\\\";\\nimport \\\"solidity-bytes-utils/contracts/BytesLib.sol\\\";\\n\\nimport \\\"../common/FixidityLib.sol\\\";\\n\\n/**\\n * @title A library operating on Celo Governance proposals.\\n */\\nlibrary Proposals {\\n  using FixidityLib for FixidityLib.Fraction;\\n  using SafeMath for uint256;\\n  using BytesLib for bytes;\\n\\n  enum Stage { None, Queued, Approval, Referendum, Execution, Expiration }\\n\\n  enum VoteValue { None, Abstain, No, Yes }\\n\\n  struct StageDurations {\\n    uint256 approval;\\n    uint256 referendum;\\n    uint256 execution;\\n  }\\n\\n  struct VoteTotals {\\n    uint256 yes;\\n    uint256 no;\\n    uint256 abstain;\\n  }\\n\\n  struct Transaction {\\n    uint256 value;\\n    address destination;\\n    bytes data;\\n  }\\n\\n  struct Proposal {\\n    address proposer;\\n    uint256 deposit;\\n    uint256 timestamp;\\n    VoteTotals votes;\\n    Transaction[] transactions;\\n    bool approved;\\n    uint256 networkWeight;\\n    string descriptionUrl;\\n  }\\n\\n  /**\\n   * @notice Constructs a proposal.\\n   * @param proposal The proposal struct to be constructed.\\n   * @param values The values of CELO to be sent in the proposed transactions.\\n   * @param destinations The destination addresses of the proposed transactions.\\n   * @param data The concatenated data to be included in the proposed transactions.\\n   * @param dataLengths The lengths of each transaction's data.\\n   * @param proposer The proposer.\\n   * @param deposit The proposal deposit.\\n   */\\n  function make(\\n    Proposal storage proposal,\\n    uint256[] memory values,\\n    address[] memory destinations,\\n    bytes memory data,\\n    uint256[] memory dataLengths,\\n    address proposer,\\n    uint256 deposit\\n  ) public {\\n    require(\\n      values.length == destinations.length && destinations.length == dataLengths.length,\\n      \\\"Array length mismatch\\\"\\n    );\\n    uint256 transactionCount = values.length;\\n\\n    proposal.proposer = proposer;\\n    proposal.deposit = deposit;\\n    // solhint-disable-next-line not-rely-on-time\\n    proposal.timestamp = now;\\n\\n    uint256 dataPosition = 0;\\n    delete proposal.transactions;\\n    for (uint256 i = 0; i < transactionCount; i = i.add(1)) {\\n      proposal.transactions.push(\\n        Transaction(values[i], destinations[i], data.slice(dataPosition, dataLengths[i]))\\n      );\\n      dataPosition = dataPosition.add(dataLengths[i]);\\n    }\\n  }\\n\\n  function setDescriptionUrl(Proposal storage proposal, string memory descriptionUrl) internal {\\n    require(bytes(descriptionUrl).length != 0, \\\"Description url must have non-zero length\\\");\\n    proposal.descriptionUrl = descriptionUrl;\\n  }\\n\\n  /**\\n   * @notice Constructs a proposal for use in memory.\\n   * @param values The values of CELO to be sent in the proposed transactions.\\n   * @param destinations The destination addresses of the proposed transactions.\\n   * @param data The concatenated data to be included in the proposed transactions.\\n   * @param dataLengths The lengths of each transaction's data.\\n   * @param proposer The proposer.\\n   * @param deposit The proposal deposit.\\n   */\\n  function makeMem(\\n    uint256[] memory values,\\n    address[] memory destinations,\\n    bytes memory data,\\n    uint256[] memory dataLengths,\\n    address proposer,\\n    uint256 deposit\\n  ) internal view returns (Proposal memory) {\\n    require(\\n      values.length == destinations.length && destinations.length == dataLengths.length,\\n      \\\"Array length mismatch\\\"\\n    );\\n    uint256 transactionCount = values.length;\\n\\n    Proposal memory proposal;\\n    proposal.proposer = proposer;\\n    proposal.deposit = deposit;\\n    // solhint-disable-next-line not-rely-on-time\\n    proposal.timestamp = now;\\n\\n    uint256 dataPosition = 0;\\n    proposal.transactions = new Transaction[](transactionCount);\\n    for (uint256 i = 0; i < transactionCount; i = i.add(1)) {\\n      proposal.transactions[i] = Transaction(\\n        values[i],\\n        destinations[i],\\n        data.slice(dataPosition, dataLengths[i])\\n      );\\n      dataPosition = dataPosition.add(dataLengths[i]);\\n    }\\n    return proposal;\\n  }\\n\\n  /**\\n   * @notice Adds or changes a vote on a proposal.\\n   * @param proposal The proposal struct.\\n   * @param previousYesVotes The previous yes votes weight.\\n   * @param previousNoVotes The previous no votes weight.\\n   * @param previousAbstainVotes The previous abstain votes weight.\\n   * @param yesVotes The current yes votes weight.\\n   * @param noVotes The current no votes weight.\\n   * @param abstainVotes The current abstain votes weight.\\n   */\\n  function updateVote(\\n    Proposal storage proposal,\\n    uint256 previousYesVotes,\\n    uint256 previousNoVotes,\\n    uint256 previousAbstainVotes,\\n    uint256 yesVotes,\\n    uint256 noVotes,\\n    uint256 abstainVotes\\n  ) public {\\n    // Subtract previous vote.\\n    proposal.votes.yes = proposal.votes.yes.sub(previousYesVotes);\\n    proposal.votes.no = proposal.votes.no.sub(previousNoVotes);\\n    proposal.votes.abstain = proposal.votes.abstain.sub(previousAbstainVotes);\\n\\n    // Add new vote.\\n    proposal.votes.yes = proposal.votes.yes.add(yesVotes);\\n    proposal.votes.no = proposal.votes.no.add(noVotes);\\n    proposal.votes.abstain = proposal.votes.abstain.add(abstainVotes);\\n  }\\n\\n  /**\\n   * @notice Executes the proposal.\\n   * @param proposal The proposal struct.\\n   * @dev Reverts if any transaction fails.\\n   */\\n  function execute(Proposal storage proposal) public {\\n    executeTransactions(proposal.transactions);\\n  }\\n\\n  /**\\n   * @notice Executes the proposal.\\n   * @param proposal The proposal struct.\\n   * @dev Reverts if any transaction fails.\\n   */\\n  function executeMem(Proposal memory proposal) internal {\\n    executeTransactions(proposal.transactions);\\n  }\\n\\n  function executeTransactions(Transaction[] memory transactions) internal {\\n    for (uint256 i = 0; i < transactions.length; i = i.add(1)) {\\n      require(\\n        externalCall(\\n          transactions[i].destination,\\n          transactions[i].value,\\n          transactions[i].data.length,\\n          transactions[i].data\\n        ),\\n        \\\"Proposal execution failed\\\"\\n      );\\n    }\\n  }\\n\\n  /**\\n   * @notice Computes the support ratio for a proposal with the quorum condition:\\n   *   If the total number of votes (yes + no + abstain) is less than the required number of votes,\\n   *   \\\"no\\\" votes are added to increase particiption to this level. The ratio of yes / (yes + no)\\n   *   votes is returned.\\n   * @param proposal The proposal struct.\\n   * @param quorum The minimum participation at which \\\"no\\\" votes are not added.\\n   * @return The support ratio with the quorum condition.\\n   */\\n  function getSupportWithQuorumPadding(\\n    Proposal storage proposal,\\n    FixidityLib.Fraction memory quorum\\n  ) internal view returns (FixidityLib.Fraction memory) {\\n    uint256 yesVotes = proposal.votes.yes;\\n    if (yesVotes == 0) {\\n      return FixidityLib.newFixed(0);\\n    }\\n    uint256 noVotes = proposal.votes.no;\\n    uint256 totalVotes = yesVotes.add(noVotes).add(proposal.votes.abstain);\\n    uint256 requiredVotes = quorum\\n      .multiply(FixidityLib.newFixed(proposal.networkWeight))\\n      .fromFixed();\\n    if (requiredVotes > totalVotes) {\\n      noVotes = noVotes.add(requiredVotes.sub(totalVotes));\\n    }\\n    return FixidityLib.newFixedFraction(yesVotes, yesVotes.add(noVotes));\\n  }\\n\\n  /**\\n   * @notice Returns the number of votes cast on the proposal over the total number\\n   *   of votes in the network as a fraction.\\n   * @param proposal The proposal struct.\\n   * @return The participation of the proposal.\\n   */\\n  function getParticipation(Proposal storage proposal)\\n    internal\\n    view\\n    returns (FixidityLib.Fraction memory)\\n  {\\n    uint256 totalVotes = proposal.votes.yes.add(proposal.votes.no).add(proposal.votes.abstain);\\n    return FixidityLib.newFixedFraction(totalVotes, proposal.networkWeight);\\n  }\\n\\n  /**\\n   * @notice Returns a specified transaction in a proposal.\\n   * @param proposal The proposal struct.\\n   * @param index The index of the specified transaction in the proposal's transaction list.\\n   * @return Transaction value.\\n   * @return Transaction destination.\\n   * @return Transaction data.\\n   */\\n  function getTransaction(Proposal storage proposal, uint256 index)\\n    public\\n    view\\n    returns (uint256, address, bytes memory)\\n  {\\n    require(index < proposal.transactions.length, \\\"getTransaction: bad index\\\");\\n    Transaction storage transaction = proposal.transactions[index];\\n    return (transaction.value, transaction.destination, transaction.data);\\n  }\\n\\n  /**\\n   * @notice Returns an unpacked proposal struct with its transaction count.\\n   * @param proposal The proposal struct.\\n   * @return proposer\\n   * @return deposit\\n   * @return timestamp\\n   * @return transaction Transaction count.\\n   * @return description Description url.\\n   * @return networkWeight Network weight.\\n   */\\n  function unpack(Proposal storage proposal)\\n    internal\\n    view\\n    returns (address, uint256, uint256, uint256, string storage, uint256, bool)\\n  {\\n    return (\\n      proposal.proposer,\\n      proposal.deposit,\\n      proposal.timestamp,\\n      proposal.transactions.length,\\n      proposal.descriptionUrl,\\n      proposal.networkWeight,\\n      proposal.approved\\n    );\\n  }\\n\\n  /**\\n   * @notice Returns the referendum vote totals for a proposal.\\n   * @param proposal The proposal struct.\\n   * @return The yes vote totals.\\n   * @return The no vote totals.\\n   * @return The abstain vote totals.\\n   */\\n  function getVoteTotals(Proposal storage proposal)\\n    internal\\n    view\\n    returns (uint256, uint256, uint256)\\n  {\\n    return (proposal.votes.yes, proposal.votes.no, proposal.votes.abstain);\\n  }\\n\\n  /**\\n   * @notice Returns whether or not a proposal has been approved.\\n   * @param proposal The proposal struct.\\n   * @return Whether or not the proposal has been approved.\\n   */\\n  function isApproved(Proposal storage proposal) internal view returns (bool) {\\n    return proposal.approved;\\n  }\\n\\n  /**\\n   * @notice Returns whether or not a proposal exists.\\n   * @param proposal The proposal struct.\\n   * @return Whether or not the proposal exists.\\n   */\\n  function exists(Proposal storage proposal) internal view returns (bool) {\\n    return proposal.timestamp > 0;\\n  }\\n\\n  // call has been separated into its own function in order to take advantage\\n  // of the Solidity's code generator to produce a loop that copies tx.data into memory.\\n  /**\\n   * @notice Executes a function call.\\n   * @param value The value of CELO to be sent with the function call.\\n   * @param destination The destination address of the function call.\\n   * @param dataLength The length of the data to be included in the function call.\\n   * @param data The data to be included in the function call.\\n   */\\n  function externalCall(address destination, uint256 value, uint256 dataLength, bytes memory data)\\n    private\\n    returns (bool)\\n  {\\n    bool result;\\n\\n    if (dataLength > 0) require(Address.isContract(destination), \\\"Invalid contract address\\\");\\n\\n    /* solhint-disable no-inline-assembly */\\n    assembly {\\n      /* solhint-disable max-line-length */\\n      let x := mload(0x40) // \\\"Allocate\\\" memory for output (0x40 is where \\\"free memory\\\" pointer is stored by convention)\\n      let d := add(data, 32) // First 32 bytes are the padded length of data, so exclude that\\n      result := call(\\n        sub(gas, 34710), // 34710 is the value that solidity is currently emitting\\n        // It includes callGas (700) + callVeryLow (3, to pay for SUB) + callValueTransferGas (9000) +\\n        // callNewAccountGas (25000, in case the destination address does not exist and needs creating)\\n        destination,\\n        value,\\n        d,\\n        dataLength, // Size of the input (in bytes) - this is what fixes the padding problem\\n        x,\\n        0 // Output is ignored, therefore the output size is zero\\n      )\\n      /* solhint-enable max-line-length */\\n    }\\n    /* solhint-enable no-inline-assembly */\\n    return result;\\n  }\\n}\\n\",\"keccak256\":\"0xbc9263b988df8f41317a7d8dfdfc2f1ceb777aed2c615dcf903d94b92e1b7b3c\"},\"project:/contracts/governance/interfaces/IElection.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.5.13 <0.9.0;\\n\\ninterface IElection {\\n  function electValidatorSigners() external view returns (address[] memory);\\n  function electNValidatorSigners(uint256, uint256) external view returns (address[] memory);\\n  function vote(address, uint256, address, address) external returns (bool);\\n  function activate(address) external returns (bool);\\n  function revokeActive(address, uint256, address, address, uint256) external returns (bool);\\n  function revokeAllActive(address, address, address, uint256) external returns (bool);\\n  function revokePending(address, uint256, address, address, uint256) external returns (bool);\\n  function markGroupIneligible(address) external;\\n  function markGroupEligible(address, address, address) external;\\n  function allowedToVoteOverMaxNumberOfGroups(address) external returns (bool);\\n  function forceDecrementVotes(\\n    address,\\n    uint256,\\n    address[] calldata,\\n    address[] calldata,\\n    uint256[] calldata\\n  ) external returns (uint256);\\n  function setAllowedToVoteOverMaxNumberOfGroups(bool flag) external;\\n\\n  // view functions\\n  function getElectableValidators() external view returns (uint256, uint256);\\n  function getElectabilityThreshold() external view returns (uint256);\\n  function getNumVotesReceivable(address) external view returns (uint256);\\n  function getTotalVotes() external view returns (uint256);\\n  function getActiveVotes() external view returns (uint256);\\n  function getTotalVotesByAccount(address) external view returns (uint256);\\n  function getPendingVotesForGroupByAccount(address, address) external view returns (uint256);\\n  function getActiveVotesForGroupByAccount(address, address) external view returns (uint256);\\n  function getTotalVotesForGroupByAccount(address, address) external view returns (uint256);\\n  function getActiveVoteUnitsForGroupByAccount(address, address) external view returns (uint256);\\n  function getTotalVotesForGroup(address) external view returns (uint256);\\n  function getActiveVotesForGroup(address) external view returns (uint256);\\n  function getPendingVotesForGroup(address) external view returns (uint256);\\n  function getGroupEligibility(address) external view returns (bool);\\n  function getGroupEpochRewards(address, uint256, uint256[] calldata)\\n    external\\n    view\\n    returns (uint256);\\n  function getGroupsVotedForByAccount(address) external view returns (address[] memory);\\n  function getEligibleValidatorGroups() external view returns (address[] memory);\\n  function getTotalVotesForEligibleValidatorGroups()\\n    external\\n    view\\n    returns (address[] memory, uint256[] memory);\\n  function getCurrentValidatorSigners() external view returns (address[] memory);\\n  function canReceiveVotes(address, uint256) external view returns (bool);\\n  function hasActivatablePendingVotes(address, address) external view returns (bool);\\n  function validatorSignerAddressFromCurrentSet(uint256 index) external view returns (address);\\n  function numberValidatorsInCurrentSet() external view returns (uint256);\\n\\n  // only owner\\n  function setElectableValidators(uint256, uint256) external returns (bool);\\n  function setMaxNumGroupsVotedFor(uint256) external returns (bool);\\n  function setElectabilityThreshold(uint256) external returns (bool);\\n\\n  // only VM\\n  function distributeEpochRewards(address, uint256, address, address) external;\\n}\\n\",\"keccak256\":\"0x2b7195aaef2f49cfd9a5b1106fd6841701e0dc92752b97d4909947b3127460c7\"},\"project:/contracts/governance/interfaces/IGovernance.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.5.13 <0.9.0;\\n\\ninterface IGovernance {\\n  function removeVotesWhenRevokingDelegatedVotes(address account, uint256 maxAmountAllowed)\\n    external;\\n  function votePartially(\\n    uint256 proposalId,\\n    uint256 index,\\n    uint256 yesVotes,\\n    uint256 noVotes,\\n    uint256 abstainVotes\\n  ) external returns (bool);\\n\\n  function isVoting(address) external view returns (bool);\\n  function getAmountOfGoldUsedForVoting(address account) external view returns (uint256);\\n\\n  function getProposal(uint256 proposalId)\\n    external\\n    view\\n    returns (address, uint256, uint256, uint256, string memory, uint256, bool);\\n\\n  function getReferendumStageDuration() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x19499ae304c70805e523ebf674c2983e8dc428f49a9da5b89e8450c2cd12997b\"},\"project:/contracts/governance/interfaces/ILockedGold.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.5.13 <0.9.0;\\n\\ninterface ILockedGold {\\n  function lock() external payable;\\n  function incrementNonvotingAccountBalance(address, uint256) external;\\n  function decrementNonvotingAccountBalance(address, uint256) external;\\n  function getAccountTotalLockedGold(address) external view returns (uint256);\\n  function getTotalLockedGold() external view returns (uint256);\\n  function getPendingWithdrawals(address)\\n    external\\n    view\\n    returns (uint256[] memory, uint256[] memory);\\n  function getPendingWithdrawal(address account, uint256 index)\\n    external\\n    view\\n    returns (uint256, uint256);\\n  function getTotalPendingWithdrawals(address) external view returns (uint256);\\n  function unlock(uint256) external;\\n  function relock(uint256, uint256) external;\\n  function withdraw(uint256) external;\\n  function slash(\\n    address account,\\n    uint256 penalty,\\n    address reporter,\\n    uint256 reward,\\n    address[] calldata lessers,\\n    address[] calldata greaters,\\n    uint256[] calldata indices\\n  ) external;\\n  function isSlasher(address) external view returns (bool);\\n\\n  function getAccountTotalDelegatedFraction(address account) external view returns (uint256);\\n\\n  function getAccountTotalGovernanceVotingPower(address account) external view returns (uint256);\\n  function unlockingPeriod() external view returns (uint256);\\n  function getAccountNonvotingLockedGold(address account) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xcb6530457f85fc492a9714baca95f52a915dc91472cbd1f987ab4347d2e2d1bc\"},\"project:/contracts/governance/interfaces/IValidators.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.5.13 <0.9.0;\\n\\ninterface IValidators {\\n  function registerValidator(bytes calldata, bytes calldata, bytes calldata)\\n    external\\n    returns (bool);\\n  function deregisterValidator(uint256) external returns (bool);\\n  function affiliate(address) external returns (bool);\\n  function deaffiliate() external returns (bool);\\n  function updateBlsPublicKey(bytes calldata, bytes calldata) external returns (bool);\\n  function registerValidatorGroup(uint256) external returns (bool);\\n  function deregisterValidatorGroup(uint256) external returns (bool);\\n  function addMember(address) external returns (bool);\\n  function addFirstMember(address, address, address) external returns (bool);\\n  function removeMember(address) external returns (bool);\\n  function reorderMember(address, address, address) external returns (bool);\\n  function updateCommission() external;\\n  function setNextCommissionUpdate(uint256) external;\\n  function resetSlashingMultiplier() external;\\n\\n  // only owner\\n  function setCommissionUpdateDelay(uint256) external;\\n  function setMaxGroupSize(uint256) external returns (bool);\\n  function setMembershipHistoryLength(uint256) external returns (bool);\\n  function setValidatorScoreParameters(uint256, uint256) external returns (bool);\\n  function setGroupLockedGoldRequirements(uint256, uint256) external returns (bool);\\n  function setValidatorLockedGoldRequirements(uint256, uint256) external returns (bool);\\n  function setSlashingMultiplierResetPeriod(uint256) external;\\n\\n  // view functions\\n  function getMaxGroupSize() external view returns (uint256);\\n  function getCommissionUpdateDelay() external view returns (uint256);\\n  function getValidatorScoreParameters() external view returns (uint256, uint256);\\n  function getMembershipHistory(address)\\n    external\\n    view\\n    returns (uint256[] memory, address[] memory, uint256, uint256);\\n  function calculateEpochScore(uint256) external view returns (uint256);\\n  function calculateGroupEpochScore(uint256[] calldata) external view returns (uint256);\\n  function getAccountLockedGoldRequirement(address) external view returns (uint256);\\n  function meetsAccountLockedGoldRequirements(address) external view returns (bool);\\n  function getValidatorBlsPublicKeyFromSigner(address) external view returns (bytes memory);\\n  function getValidator(address account)\\n    external\\n    view\\n    returns (bytes memory, bytes memory, address, uint256, address);\\n  function getValidatorGroup(address)\\n    external\\n    view\\n    returns (address[] memory, uint256, uint256, uint256, uint256[] memory, uint256, uint256);\\n  function getGroupNumMembers(address) external view returns (uint256);\\n  function getTopGroupValidators(address, uint256) external view returns (address[] memory);\\n  function getGroupsNumMembers(address[] calldata accounts)\\n    external\\n    view\\n    returns (uint256[] memory);\\n  function getNumRegisteredValidators() external view returns (uint256);\\n  function groupMembershipInEpoch(address, uint256, uint256) external view returns (address);\\n\\n  // only registered contract\\n  function updateEcdsaPublicKey(address, address, bytes calldata) external returns (bool);\\n  function updatePublicKeys(address, address, bytes calldata, bytes calldata, bytes calldata)\\n    external\\n    returns (bool);\\n  function getValidatorLockedGoldRequirements() external view returns (uint256, uint256);\\n  function getGroupLockedGoldRequirements() external view returns (uint256, uint256);\\n  function getRegisteredValidators() external view returns (address[] memory);\\n  function getRegisteredValidatorSigners() external view returns (address[] memory);\\n  function getRegisteredValidatorGroups() external view returns (address[] memory);\\n  function isValidatorGroup(address) external view returns (bool);\\n  function isValidator(address) external view returns (bool);\\n  function getValidatorGroupSlashingMultiplier(address) external view returns (uint256);\\n  function getMembershipInLastEpoch(address) external view returns (address);\\n  function getMembershipInLastEpochFromSigner(address) external view returns (address);\\n\\n  // only VM\\n  function updateValidatorScoreFromSigner(address, uint256) external;\\n  function distributeEpochPaymentsFromSigner(address, uint256) external returns (uint256);\\n\\n  // only slasher\\n  function forceDeaffiliateIfValidator(address) external;\\n  function halveSlashingMultiplier(address) external;\\n\\n}\\n\",\"keccak256\":\"0xedb1f9717f0ea77f30cb7fa40bfd3704dcfdc17252082c4bf5caaea205c83d9a\"},\"project:/contracts/governance/test/GovernanceTest.sol\":{\"content\":\"pragma solidity ^0.5.13;\\n\\nimport \\\"../Governance.sol\\\";\\n\\ncontract GovernanceTest is Governance(true) {\\n  address[] validatorSet;\\n\\n  // Minimally override core functions from UsingPrecompiles\\n  function numberValidatorsInCurrentSet() public view returns (uint256) {\\n    return validatorSet.length;\\n  }\\n\\n  function numberValidatorsInSet(uint256) public view returns (uint256) {\\n    return validatorSet.length;\\n  }\\n\\n  function validatorSignerAddressFromCurrentSet(uint256 index) public view returns (address) {\\n    return validatorSet[index];\\n  }\\n\\n  // Expose test utilities\\n  function addValidator(address validator) external {\\n    validatorSet.push(validator);\\n  }\\n\\n  // exposes removeVotesWhenRevokingDelegatedVotes for tests\\n  function removeVotesWhenRevokingDelegatedVotesTest(address account, uint256 maxAmountAllowed)\\n    public\\n  {\\n    _removeVotesWhenRevokingDelegatedVotes(account, maxAmountAllowed);\\n  }\\n\\n  function setDeprecatedWeight(address voterAddress, uint256 proposalIndex, uint256 weight)\\n    external\\n  {\\n    Voter storage voter = voters[voterAddress];\\n    VoteRecord storage voteRecord = voter.referendumVotes[proposalIndex];\\n    voteRecord.deprecated_weight = weight;\\n  }\\n}\\n\",\"keccak256\":\"0x43c60bd1f35cddb341516a5bfce39324acd63445eb6ba602ae138f69bfc526bc\"},\"project:/contracts/identity/interfaces/IAttestations.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.5.13 <0.9.0;\\n\\ninterface IAttestations {\\n  function revoke(bytes32, uint256) external;\\n  function withdraw(address) external;\\n\\n  // view functions\\n  function getUnselectedRequest(bytes32, address) external view returns (uint32, uint32, address);\\n  function getAttestationIssuers(bytes32, address) external view returns (address[] memory);\\n  function getAttestationStats(bytes32, address) external view returns (uint32, uint32);\\n  function batchGetAttestationStats(bytes32[] calldata)\\n    external\\n    view\\n    returns (uint256[] memory, address[] memory, uint64[] memory, uint64[] memory);\\n  function getAttestationState(bytes32, address, address)\\n    external\\n    view\\n    returns (uint8, uint32, address);\\n  function getCompletableAttestations(bytes32, address)\\n    external\\n    view\\n    returns (uint32[] memory, address[] memory, uint256[] memory, bytes memory);\\n  function getAttestationRequestFee(address) external view returns (uint256);\\n  function getMaxAttestations() external view returns (uint256);\\n  function validateAttestationCode(bytes32, address, uint8, bytes32, bytes32)\\n    external\\n    view\\n    returns (address);\\n  function lookupAccountsForIdentifier(bytes32) external view returns (address[] memory);\\n  function requireNAttestationsRequested(bytes32, address, uint32) external view;\\n\\n  // only owner\\n  function setAttestationRequestFee(address, uint256) external;\\n  function setAttestationExpiryBlocks(uint256) external;\\n  function setSelectIssuersWaitBlocks(uint256) external;\\n  function setMaxAttestations(uint256) external;\\n}\\n\",\"keccak256\":\"0x18698a475dc0c9ea8a4c53ab5e42407f34a7c676d7b713c1507b43669f860e74\"},\"project:/contracts/identity/interfaces/IRandom.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.5.13 <0.9.0;\\n\\ninterface IRandom {\\n  function revealAndCommit(bytes32, bytes32, address) external;\\n  function randomnessBlockRetentionWindow() external view returns (uint256);\\n  function random() external view returns (bytes32);\\n  function getBlockRandomness(uint256) external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xdb545530be6397d23692e4465f4514cf3c87c1d4f553323964694818c375c08d\"},\"project:/contracts/stability/interfaces/ISortedOracles.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.5.13 <0.9.0;\\n\\ninterface ISortedOracles {\\n  function addOracle(address, address) external;\\n  function removeOracle(address, address, uint256) external;\\n  function report(address, uint256, address, address) external;\\n  function removeExpiredReports(address, uint256) external;\\n  function isOldestReportExpired(address token) external view returns (bool, address);\\n  function numRates(address) external view returns (uint256);\\n  function medianRate(address) external view returns (uint256, uint256);\\n  function numTimestamps(address) external view returns (uint256);\\n  function medianTimestamp(address) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xc9d69b608b060effe4a0b246e7fad096b524b848aa51d8f4eccad36c1aa0479d\"},\"project:/lib/mento-core/contracts/interfaces/IExchange.sol\":{\"content\":\"pragma solidity ^0.5.13;\\n\\ninterface IExchange {\\n    function buy(\\n        uint256,\\n        uint256,\\n        bool\\n    ) external returns (uint256);\\n\\n    function sell(\\n        uint256,\\n        uint256,\\n        bool\\n    ) external returns (uint256);\\n\\n    function exchange(\\n        uint256,\\n        uint256,\\n        bool\\n    ) external returns (uint256);\\n\\n    function setUpdateFrequency(uint256) external;\\n\\n    function getBuyTokenAmount(uint256, bool) external view returns (uint256);\\n\\n    function getSellTokenAmount(uint256, bool) external view returns (uint256);\\n\\n    function getBuyAndSellBuckets(bool) external view returns (uint256, uint256);\\n}\\n\",\"keccak256\":\"0x320488022d1066ac81797b9e7a3dc303d1c8e9a48597972d4686e00f9554ade9\"},\"project:/lib/mento-core/contracts/interfaces/IReserve.sol\":{\"content\":\"pragma solidity ^0.5.13;\\n\\ninterface IReserve {\\n    function setTobinTaxStalenessThreshold(uint256) external;\\n\\n    function addToken(address) external returns (bool);\\n\\n    function removeToken(address, uint256) external returns (bool);\\n\\n    function transferGold(address payable, uint256) external returns (bool);\\n\\n    function transferExchangeGold(address payable, uint256) external returns (bool);\\n\\n    function getReserveGoldBalance() external view returns (uint256);\\n\\n    function getUnfrozenReserveGoldBalance() external view returns (uint256);\\n\\n    function getOrComputeTobinTax() external returns (uint256, uint256);\\n\\n    function getTokens() external view returns (address[] memory);\\n\\n    function getReserveRatio() external view returns (uint256);\\n\\n    function addExchangeSpender(address) external;\\n\\n    function removeExchangeSpender(address, uint256) external;\\n\\n    function addSpender(address) external;\\n\\n    function removeSpender(address) external;\\n}\\n\",\"keccak256\":\"0x9162b458dc21fe7e6cfc5d4722b3db3001b1c54ecdcefa703ff9d902084150b7\"},\"project:/lib/mento-core/contracts/interfaces/IStableToken.sol\":{\"content\":\"pragma solidity ^0.5.13;\\n\\n/**\\n * @title This interface describes the functions specific to Celo Stable Tokens, and in the\\n * absence of interface inheritance is intended as a companion to IERC20.sol and ICeloToken.sol.\\n */\\ninterface IStableToken {\\n    function mint(address, uint256) external returns (bool);\\n\\n    function burn(uint256) external returns (bool);\\n\\n    function setInflationParameters(uint256, uint256) external;\\n\\n    function valueToUnits(uint256) external view returns (uint256);\\n\\n    function unitsToValue(uint256) external view returns (uint256);\\n\\n    function getInflationParameters()\\n        external\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256\\n        );\\n\\n    // NOTE: duplicated with IERC20.sol, remove once interface inheritance is supported.\\n    function balanceOf(address) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xcb6440c9b161b26a5b062e6c74d6fd1ed9736f292161c757406a9c39e942d20a\"},\"solidity-bytes-utils/contracts/BytesLib.sol\":{\"content\":\"/*\\n * @title Solidity Bytes Arrays Utils\\n * @author Gon\\u00e7alo S\\u00e1 <goncalo.sa@consensys.net>\\n *\\n * @dev Bytes tightly packed arrays utility library for ethereum contracts written in Solidity.\\n *      The library lets you concatenate, slice and type cast bytes arrays both in memory and storage.\\n */\\n\\npragma solidity ^0.5.0;\\n\\n\\nlibrary BytesLib {\\n    function concat(\\n        bytes memory _preBytes,\\n        bytes memory _postBytes\\n    )\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        bytes memory tempBytes;\\n\\n        assembly {\\n            // Get a location of some free memory and store it in tempBytes as\\n            // Solidity does for memory variables.\\n            tempBytes := mload(0x40)\\n\\n            // Store the length of the first bytes array at the beginning of\\n            // the memory for tempBytes.\\n            let length := mload(_preBytes)\\n            mstore(tempBytes, length)\\n\\n            // Maintain a memory counter for the current write location in the\\n            // temp bytes array by adding the 32 bytes for the array length to\\n            // the starting location.\\n            let mc := add(tempBytes, 0x20)\\n            // Stop copying when the memory counter reaches the length of the\\n            // first bytes array.\\n            let end := add(mc, length)\\n\\n            for {\\n                // Initialize a copy counter to the start of the _preBytes data,\\n                // 32 bytes into its memory.\\n                let cc := add(_preBytes, 0x20)\\n            } lt(mc, end) {\\n                // Increase both counters by 32 bytes each iteration.\\n                mc := add(mc, 0x20)\\n                cc := add(cc, 0x20)\\n            } {\\n                // Write the _preBytes data into the tempBytes memory 32 bytes\\n                // at a time.\\n                mstore(mc, mload(cc))\\n            }\\n\\n            // Add the length of _postBytes to the current length of tempBytes\\n            // and store it as the new length in the first 32 bytes of the\\n            // tempBytes memory.\\n            length := mload(_postBytes)\\n            mstore(tempBytes, add(length, mload(tempBytes)))\\n\\n            // Move the memory counter back from a multiple of 0x20 to the\\n            // actual end of the _preBytes data.\\n            mc := end\\n            // Stop copying when the memory counter reaches the new combined\\n            // length of the arrays.\\n            end := add(mc, length)\\n\\n            for {\\n                let cc := add(_postBytes, 0x20)\\n            } lt(mc, end) {\\n                mc := add(mc, 0x20)\\n                cc := add(cc, 0x20)\\n            } {\\n                mstore(mc, mload(cc))\\n            }\\n\\n            // Update the free-memory pointer by padding our last write location\\n            // to 32 bytes: add 31 bytes to the end of tempBytes to move to the\\n            // next 32 byte block, then round down to the nearest multiple of\\n            // 32. If the sum of the length of the two arrays is zero then add \\n            // one before rounding down to leave a blank 32 bytes (the length block with 0).\\n            mstore(0x40, and(\\n              add(add(end, iszero(add(length, mload(_preBytes)))), 31),\\n              not(31) // Round down to the nearest 32 bytes.\\n            ))\\n        }\\n\\n        return tempBytes;\\n    }\\n\\n    function concatStorage(bytes storage _preBytes, bytes memory _postBytes) internal {\\n        assembly {\\n            // Read the first 32 bytes of _preBytes storage, which is the length\\n            // of the array. (We don't need to use the offset into the slot\\n            // because arrays use the entire slot.)\\n            let fslot := sload(_preBytes_slot)\\n            // Arrays of 31 bytes or less have an even value in their slot,\\n            // while longer arrays have an odd value. The actual length is\\n            // the slot divided by two for odd values, and the lowest order\\n            // byte divided by two for even values.\\n            // If the slot is even, bitwise and the slot with 255 and divide by\\n            // two to get the length. If the slot is odd, bitwise and the slot\\n            // with -1 and divide by two.\\n            let slength := div(and(fslot, sub(mul(0x100, iszero(and(fslot, 1))), 1)), 2)\\n            let mlength := mload(_postBytes)\\n            let newlength := add(slength, mlength)\\n            // slength can contain both the length and contents of the array\\n            // if length < 32 bytes so let's prepare for that\\n            // v. http://solidity.readthedocs.io/en/latest/miscellaneous.html#layout-of-state-variables-in-storage\\n            switch add(lt(slength, 32), lt(newlength, 32))\\n            case 2 {\\n                // Since the new array still fits in the slot, we just need to\\n                // update the contents of the slot.\\n                // uint256(bytes_storage) = uint256(bytes_storage) + uint256(bytes_memory) + new_length\\n                sstore(\\n                    _preBytes_slot,\\n                    // all the modifications to the slot are inside this\\n                    // next block\\n                    add(\\n                        // we can just add to the slot contents because the\\n                        // bytes we want to change are the LSBs\\n                        fslot,\\n                        add(\\n                            mul(\\n                                div(\\n                                    // load the bytes from memory\\n                                    mload(add(_postBytes, 0x20)),\\n                                    // zero all bytes to the right\\n                                    exp(0x100, sub(32, mlength))\\n                                ),\\n                                // and now shift left the number of bytes to\\n                                // leave space for the length in the slot\\n                                exp(0x100, sub(32, newlength))\\n                            ),\\n                            // increase length by the double of the memory\\n                            // bytes length\\n                            mul(mlength, 2)\\n                        )\\n                    )\\n                )\\n            }\\n            case 1 {\\n                // The stored value fits in the slot, but the combined value\\n                // will exceed it.\\n                // get the keccak hash to get the contents of the array\\n                mstore(0x0, _preBytes_slot)\\n                let sc := add(keccak256(0x0, 0x20), div(slength, 32))\\n\\n                // save new length\\n                sstore(_preBytes_slot, add(mul(newlength, 2), 1))\\n\\n                // The contents of the _postBytes array start 32 bytes into\\n                // the structure. Our first read should obtain the `submod`\\n                // bytes that can fit into the unused space in the last word\\n                // of the stored array. To get this, we read 32 bytes starting\\n                // from `submod`, so the data we read overlaps with the array\\n                // contents by `submod` bytes. Masking the lowest-order\\n                // `submod` bytes allows us to add that value directly to the\\n                // stored value.\\n\\n                let submod := sub(32, slength)\\n                let mc := add(_postBytes, submod)\\n                let end := add(_postBytes, mlength)\\n                let mask := sub(exp(0x100, submod), 1)\\n\\n                sstore(\\n                    sc,\\n                    add(\\n                        and(\\n                            fslot,\\n                            0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00\\n                        ),\\n                        and(mload(mc), mask)\\n                    )\\n                )\\n\\n                for {\\n                    mc := add(mc, 0x20)\\n                    sc := add(sc, 1)\\n                } lt(mc, end) {\\n                    sc := add(sc, 1)\\n                    mc := add(mc, 0x20)\\n                } {\\n                    sstore(sc, mload(mc))\\n                }\\n\\n                mask := exp(0x100, sub(mc, end))\\n\\n                sstore(sc, mul(div(mload(mc), mask), mask))\\n            }\\n            default {\\n                // get the keccak hash to get the contents of the array\\n                mstore(0x0, _preBytes_slot)\\n                // Start copying to the last used word of the stored array.\\n                let sc := add(keccak256(0x0, 0x20), div(slength, 32))\\n\\n                // save new length\\n                sstore(_preBytes_slot, add(mul(newlength, 2), 1))\\n\\n                // Copy over the first `submod` bytes of the new data as in\\n                // case 1 above.\\n                let slengthmod := mod(slength, 32)\\n                let mlengthmod := mod(mlength, 32)\\n                let submod := sub(32, slengthmod)\\n                let mc := add(_postBytes, submod)\\n                let end := add(_postBytes, mlength)\\n                let mask := sub(exp(0x100, submod), 1)\\n\\n                sstore(sc, add(sload(sc), and(mload(mc), mask)))\\n                \\n                for { \\n                    sc := add(sc, 1)\\n                    mc := add(mc, 0x20)\\n                } lt(mc, end) {\\n                    sc := add(sc, 1)\\n                    mc := add(mc, 0x20)\\n                } {\\n                    sstore(sc, mload(mc))\\n                }\\n\\n                mask := exp(0x100, sub(mc, end))\\n\\n                sstore(sc, mul(div(mload(mc), mask), mask))\\n            }\\n        }\\n    }\\n\\n    function slice(\\n        bytes memory _bytes,\\n        uint _start,\\n        uint _length\\n    )\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        require(_bytes.length >= (_start + _length));\\n\\n        bytes memory tempBytes;\\n\\n        assembly {\\n            switch iszero(_length)\\n            case 0 {\\n                // Get a location of some free memory and store it in tempBytes as\\n                // Solidity does for memory variables.\\n                tempBytes := mload(0x40)\\n\\n                // The first word of the slice result is potentially a partial\\n                // word read from the original array. To read it, we calculate\\n                // the length of that partial word and start copying that many\\n                // bytes into the array. The first word we copy will start with\\n                // data we don't care about, but the last `lengthmod` bytes will\\n                // land at the beginning of the contents of the new array. When\\n                // we're done copying, we overwrite the full first word with\\n                // the actual length of the slice.\\n                let lengthmod := and(_length, 31)\\n\\n                // The multiplication in the next line is necessary\\n                // because when slicing multiples of 32 bytes (lengthmod == 0)\\n                // the following copy loop was copying the origin's length\\n                // and then ending prematurely not copying everything it should.\\n                let mc := add(add(tempBytes, lengthmod), mul(0x20, iszero(lengthmod)))\\n                let end := add(mc, _length)\\n\\n                for {\\n                    // The multiplication in the next line has the same exact purpose\\n                    // as the one above.\\n                    let cc := add(add(add(_bytes, lengthmod), mul(0x20, iszero(lengthmod))), _start)\\n                } lt(mc, end) {\\n                    mc := add(mc, 0x20)\\n                    cc := add(cc, 0x20)\\n                } {\\n                    mstore(mc, mload(cc))\\n                }\\n\\n                mstore(tempBytes, _length)\\n\\n                //update free-memory pointer\\n                //allocating the array padded to 32 bytes like the compiler does now\\n                mstore(0x40, and(add(mc, 31), not(31)))\\n            }\\n            //if we want a zero-length slice let's just return a zero-length array\\n            default {\\n                tempBytes := mload(0x40)\\n\\n                mstore(0x40, add(tempBytes, 0x20))\\n            }\\n        }\\n\\n        return tempBytes;\\n    }\\n\\n    function toAddress(bytes memory _bytes, uint _start) internal  pure returns (address) {\\n        require(_bytes.length >= (_start + 20));\\n        address tempAddress;\\n\\n        assembly {\\n            tempAddress := div(mload(add(add(_bytes, 0x20), _start)), 0x1000000000000000000000000)\\n        }\\n\\n        return tempAddress;\\n    }\\n\\n    function toUint8(bytes memory _bytes, uint _start) internal  pure returns (uint8) {\\n        require(_bytes.length >= (_start + 1));\\n        uint8 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x1), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint16(bytes memory _bytes, uint _start) internal  pure returns (uint16) {\\n        require(_bytes.length >= (_start + 2));\\n        uint16 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x2), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint32(bytes memory _bytes, uint _start) internal  pure returns (uint32) {\\n        require(_bytes.length >= (_start + 4));\\n        uint32 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x4), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint(bytes memory _bytes, uint _start) internal  pure returns (uint256) {\\n        require(_bytes.length >= (_start + 32));\\n        uint256 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x20), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toBytes32(bytes memory _bytes, uint _start) internal  pure returns (bytes32) {\\n        require(_bytes.length >= (_start + 32));\\n        bytes32 tempBytes32;\\n\\n        assembly {\\n            tempBytes32 := mload(add(add(_bytes, 0x20), _start))\\n        }\\n\\n        return tempBytes32;\\n    }\\n\\n    function equal(bytes memory _preBytes, bytes memory _postBytes) internal pure returns (bool) {\\n        bool success = true;\\n\\n        assembly {\\n            let length := mload(_preBytes)\\n\\n            // if lengths don't match the arrays are not equal\\n            switch eq(length, mload(_postBytes))\\n            case 1 {\\n                // cb is a circuit breaker in the for loop since there's\\n                //  no said feature for inline assembly loops\\n                // cb = 1 - don't breaker\\n                // cb = 0 - break\\n                let cb := 1\\n\\n                let mc := add(_preBytes, 0x20)\\n                let end := add(mc, length)\\n\\n                for {\\n                    let cc := add(_postBytes, 0x20)\\n                // the next line is the loop condition:\\n                // while(uint(mc < end) + cb == 2)\\n                } eq(add(lt(mc, end), cb), 2) {\\n                    mc := add(mc, 0x20)\\n                    cc := add(cc, 0x20)\\n                } {\\n                    // if any of these checks fails then arrays are not equal\\n                    if iszero(eq(mload(mc), mload(cc))) {\\n                        // unsuccess:\\n                        success := 0\\n                        cb := 0\\n                    }\\n                }\\n            }\\n            default {\\n                // unsuccess:\\n                success := 0\\n            }\\n        }\\n\\n        return success;\\n    }\\n\\n    function equalStorage(\\n        bytes storage _preBytes,\\n        bytes memory _postBytes\\n    )\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        bool success = true;\\n\\n        assembly {\\n            // we know _preBytes_offset is 0\\n            let fslot := sload(_preBytes_slot)\\n            // Decode the length of the stored array like in concatStorage().\\n            let slength := div(and(fslot, sub(mul(0x100, iszero(and(fslot, 1))), 1)), 2)\\n            let mlength := mload(_postBytes)\\n\\n            // if lengths don't match the arrays are not equal\\n            switch eq(slength, mlength)\\n            case 1 {\\n                // slength can contain both the length and contents of the array\\n                // if length < 32 bytes so let's prepare for that\\n                // v. http://solidity.readthedocs.io/en/latest/miscellaneous.html#layout-of-state-variables-in-storage\\n                if iszero(iszero(slength)) {\\n                    switch lt(slength, 32)\\n                    case 1 {\\n                        // blank the last byte which is the length\\n                        fslot := mul(div(fslot, 0x100), 0x100)\\n\\n                        if iszero(eq(fslot, mload(add(_postBytes, 0x20)))) {\\n                            // unsuccess:\\n                            success := 0\\n                        }\\n                    }\\n                    default {\\n                        // cb is a circuit breaker in the for loop since there's\\n                        //  no said feature for inline assembly loops\\n                        // cb = 1 - don't breaker\\n                        // cb = 0 - break\\n                        let cb := 1\\n\\n                        // get the keccak hash to get the contents of the array\\n                        mstore(0x0, _preBytes_slot)\\n                        let sc := keccak256(0x0, 0x20)\\n\\n                        let mc := add(_postBytes, 0x20)\\n                        let end := add(mc, mlength)\\n\\n                        // the next line is the loop condition:\\n                        // while(uint(mc < end) + cb == 2)\\n                        for {} eq(add(lt(mc, end), cb), 2) {\\n                            sc := add(sc, 1)\\n                            mc := add(mc, 0x20)\\n                        } {\\n                            if iszero(eq(sload(sc), mload(mc))) {\\n                                // unsuccess:\\n                                success := 0\\n                                cb := 0\\n                            }\\n                        }\\n                    }\\n                }\\n            }\\n            default {\\n                // unsuccess:\\n                success := 0\\n            }\\n        }\\n\\n        return success;\\n    }\\n}\\n\",\"keccak256\":\"0xdd38cd94f336b6f3a7ab680b0c1c1b8b61af23a0197d80ee9c15ea883dab486a\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "",
  "sourceMap": "55:1135:123:-;;;93:4;6371::92;698:17:4;718:12;:10;;;:12;;:::i;:::-;698:32;;749:9;740:6;;:18;;;;;;;;;;;;;;;;;;806:9;773:43;;802:1;773:43;;;;;;;;;;;;664:159;185:17:24;180:57;;226:4;212:11;;:18;;;;;;;;;;;;;;;;;;180:57;131:110;558:1:53;542:13;:17;;;;6327:52:92;55:1135:123;;788:96:0;833:15;867:10;860:17;;788:96;:::o;55:1135:123:-;;;;;;;",
  "deployedSourceMap": "55:1135:123:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6444:1:92;6425:8;;:15;;:20;6417:47;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;55:1135:123;42868:116:92;;8:9:-1;5:2;;;30:1;27;20:12;5:2;42868:116:92;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;80:1;75:3;71:11;64:39;52:2;49:1;45:10;40:15;;8:100;;;12:14;42868:116:92;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;80:1;75:3;71:11;64:39;52:2;49:1;45:10;40:15;;8:100;;;12:14;42868:116:92;;;;;;;;;;;;;;;;;;;15148:607;;8:9:-1;5:2;;;30:1;27;20:12;5:2;15148:607:92;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;15148:607:92;;;;;;;;;;;;;;;;;:::i;:::-;;45576:179;;8:9:-1;5:2;;;30:1;27;20:12;5:2;45576:179:92;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;45576:179:92;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2896:46;;8:9:-1;5:2;;;30:1;27;20:12;5:2;2896:46:92;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3068:34;;8:9:-1;5:2;;;30:1;27;20:12;5:2;3068:34:92;;;:::i;:::-;;;;;;;;;;;;;;;;;;;413:128:123;;8:9:-1;5:2;;;30:1;27;20:12;5:2;413:128:123;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;413:128:123;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;39218:121:92;;8:9:-1;5:2;;;30:1;27;20:12;5:2;39218:121:92;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;39218:121:92;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;3011:23;;8:9:-1;5:2;;;30:1;27;20:12;5:2;3011:23:92;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;49583:171;;8:9:-1;5:2;;;30:1;27;20:12;5:2;49583:171:92;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;49583:171:92;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;103:23:24;;8:9:-1;5:2;;;30:1;27;20:12;5:2;103:23:24;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;13651:565:92;;8:9:-1;5:2;;;30:1;27;20:12;5:2;13651:565:92;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;13651:565:92;;;;;;;;;;;;;;;;;:::i;:::-;;6346:266:35;;8:9:-1;5:2;;;30:1;27;20:12;5:2;6346:266:35;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;6346:266:35;;;;;;;;;;;;;;;;;;;;;21:11:-1;8;5:28;2:2;;;46:1;43;36:12;2:2;6346:266:35;;35:9:-1;28:4;12:14;8:25;5:40;2:2;;;58:1;55;48:12;2:2;6346:266:35;;;;;;100:9:-1;95:1;81:12;77:20;67:8;63:35;60:50;39:11;25:12;22:29;11:107;8:2;;;131:1;128;121:12;8:2;6346:266:35;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;30:3:-1;22:6;14;1:33;99:1;93:3;85:6;81:16;74:27;137:4;133:9;126:4;121:3;117:14;113:30;106:37;;169:3;161:6;157:16;147:26;;6346:266:35;;;;;;;;;;;;;;;;;21:11:-1;8;5:28;2:2;;;46:1;43;36:12;2:2;6346:266:35;;35:9:-1;28:4;12:14;8:25;5:40;2:2;;;58:1;55;48:12;2:2;6346:266:35;;;;;;100:9:-1;95:1;81:12;77:20;67:8;63:35;60:50;39:11;25:12;22:29;11:107;8:2;;;131:1;128;121:12;8:2;6346:266:35;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;30:3:-1;22:6;14;1:33;99:1;93:3;85:6;81:16;74:27;137:4;133:9;126:4;121:3;117:14;113:30;106:37;;169:3;161:6;157:16;147:26;;6346:266:35;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;48053:135:92;;8:9:-1;5:2;;;30:1;27;20:12;5:2;48053:135:92;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;48053:135:92;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;43976:152;;8:9:-1;5:2;;;30:1;27;20:12;5:2;43976:152:92;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;43976:152:92;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;10813:275;;8:9:-1;5:2;;;30:1;27;20:12;5:2;10813:275:92;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;10813:275:92;;;;;;;;;;;;;;;;;:::i;:::-;;25956:912;;8:9:-1;5:2;;;30:1;27;20:12;5:2;25956:912:92;;;;;;13:3:-1;8;5:12;2:2;;;30:1;27;20:12;2:2;25956:912:92;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;726:183:123;;8:9:-1;5:2;;;30:1;27;20:12;5:2;726:183:123;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;726:183:123;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;38224:111:92;;8:9:-1;5:2;;;30:1;27;20:12;5:2;38224:111:92;;;:::i;:::-;;;;;;;;;;;;;;;;;;;9422:241;;8:9:-1;5:2;;;30:1;27;20:12;5:2;9422:241:92;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;9422:241:92;;;;;;;;;;;;;;;;;;;:::i;:::-;;45194:150;;8:9:-1;5:2;;;30:1;27;20:12;5:2;45194:150:92;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;45194:150:92;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;2608:147:35;;8:9:-1;5:2;;;30:1;27;20:12;5:2;2608:147:35;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;2608:147:35;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;45956:1511:92;;8:9:-1;5:2;;;30:1;27;20:12;5:2;45956:1511:92;;;:::i;:::-;;36704:317;;8:9:-1;5:2;;;30:1;27;20:12;5:2;36704:317:92;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;12915:583;;8:9:-1;5:2;;;30:1;27;20:12;5:2;12915:583:92;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;12915:583:92;;;;;;;;;;;;;;;;;:::i;:::-;;34321:150;;8:9:-1;5:2;;;30:1;27;20:12;5:2;34321:150:92;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;34321:150:92;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;3138:25;;8:9:-1;5:2;;;30:1;27;20:12;5:2;3138:25:92;;;:::i;:::-;;;;;;;;;;;;;;;;;;;3392:48;;8:9:-1;5:2;;;30:1;27;20:12;5:2;3392:48:92;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;3392:48:92;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8496:343:35;;8:9:-1;5:2;;;30:1;27;20:12;5:2;8496:343:35;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;8496:343:35;;;;;;;;;;21:11:-1;8;5:28;2:2;;;46:1;43;36:12;2:2;8496:343:35;;35:9:-1;28:4;12:14;8:25;5:40;2:2;;;58:1;55;48:12;2:2;8496:343:35;;;;;;100:9:-1;95:1;81:12;77:20;67:8;63:35;60:50;39:11;25:12;22:29;11:107;8:2;;;131:1;128;121:12;8:2;8496:343:35;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;30:3:-1;22:6;14;1:33;99:1;93:3;85:6;81:16;74:27;137:4;133:9;126:4;121:3;117:14;113:30;106:37;;169:3;161:6;157:16;147:26;;8496:343:35;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;572:89:123;;8:9:-1;5:2;;;30:1;27;20:12;5:2;572:89:123;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;572:89:123;;;;;;;;;;;;;;;;;;;:::i;:::-;;6746:117:92;;8:9:-1;5:2;;;30:1;27;20:12;5:2;6746:117:92;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;33038:700;;8:9:-1;5:2;;;30:1;27;20:12;5:2;33038:700:92;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;33038:700:92;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;20037:1197;;8:9:-1;5:2;;;30:1;27;20:12;5:2;20037:1197:92;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;20037:1197:92;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;21404:577;;8:9:-1;5:2;;;30:1;27;20:12;5:2;21404:577:92;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;21404:577:92;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;14383:607;;8:9:-1;5:2;;;30:1;27;20:12;5:2;14383:607:92;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;14383:607:92;;;;;;;;;;;;;;;;;:::i;:::-;;4481:378:35;;8:9:-1;5:2;;;30:1;27;20:12;5:2;4481:378:35;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;4481:378:35;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;23430:775:92;;8:9:-1;5:2;;;30:1;27;20:12;5:2;23430:775:92;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;23430:775:92;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;41532:411;;8:9:-1;5:2;;;30:1;27;20:12;5:2;41532:411:92;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;41532:411:92;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;37230:535;;8:9:-1;5:2;;;30:1;27;20:12;5:2;37230:535:92;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;37230:535:92;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;3167:51;;8:9:-1;5:2;;;30:1;27;20:12;5:2;3167:51:92;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;3167:51:92;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;17441:763;;;;;;13:3:-1;8;5:12;2:2;;;30:1;27;20:12;2:2;17441:763:92;;;;;;;;;;21:11:-1;8;5:28;2:2;;;46:1;43;36:12;2:2;17441:763:92;;35:9:-1;28:4;12:14;8:25;5:40;2:2;;;58:1;55;48:12;2:2;17441:763:92;;;;;;101:9:-1;95:2;81:12;77:21;67:8;63:36;60:51;39:11;25:12;22:29;11:108;8:2;;;132:1;129;122:12;8:2;17441:763:92;;;;;;;;;;;;;;21:11:-1;8;5:28;2:2;;;46:1;43;36:12;2:2;17441:763:92;;35:9:-1;28:4;12:14;8:25;5:40;2:2;;;58:1;55;48:12;2:2;17441:763:92;;;;;;101:9:-1;95:2;81:12;77:21;67:8;63:36;60:51;39:11;25:12;22:29;11:108;8:2;;;132:1;129;122:12;8:2;17441:763:92;;;;;;;;;;;;;;21:11:-1;8;5:28;2:2;;;46:1;43;36:12;2:2;17441:763:92;;35:9:-1;28:4;12:14;8:25;5:40;2:2;;;58:1;55;48:12;2:2;17441:763:92;;;;;;100:9:-1;95:1;81:12;77:20;67:8;63:35;60:50;39:11;25:12;22:29;11:107;8:2;;;131:1;128;121:12;8:2;17441:763:92;;;;;;;;;;;;;;21:11:-1;8;5:28;2:2;;;46:1;43;36:12;2:2;17441:763:92;;35:9:-1;28:4;12:14;8:25;5:40;2:2;;;58:1;55;48:12;2:2;17441:763:92;;;;;;101:9:-1;95:2;81:12;77:21;67:8;63:36;60:51;39:11;25:12;22:29;11:108;8:2;;;132:1;129;122:12;8:2;17441:763:92;;;;;;;;;;;;;;21:11:-1;8;5:28;2:2;;;46:1;43;36:12;2:2;17441:763:92;;35:9:-1;28:4;12:14;8:25;5:40;2:2;;;58:1;55;48:12;2:2;17441:763:92;;;;;;100:9:-1;95:1;81:12;77:20;67:8;63:35;60:50;39:11;25:12;22:29;11:107;8:2;;;131:1;128;121:12;8:2;17441:763:92;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;12422:367;;8:9:-1;5:2;;;30:1;27;20:12;5:2;12422:367:92;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;12422:367:92;;;;;;;;;;;;;;;;;:::i;:::-;;55140:1196;;8:9:-1;5:2;;;30:1;27;20:12;5:2;55140:1196:92;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;55140:1196:92;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;7188:288:35;;8:9:-1;5:2;;;30:1;27;20:12;5:2;7188:288:35;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;7188:288:35;;;;;;;;;;21:11:-1;8;5:28;2:2;;;46:1;43;36:12;2:2;7188:288:35;;35:9:-1;28:4;12:14;8:25;5:40;2:2;;;58:1;55;48:12;2:2;7188:288:35;;;;;;100:9:-1;95:1;81:12;77:20;67:8;63:35;60:50;39:11;25:12;22:29;11:107;8:2;;;131:1;128;121:12;8:2;7188:288:35;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;30:3:-1;22:6;14;1:33;99:1;93:3;85:6;81:16;74:27;137:4;133:9;126:4;121:3;117:14;113:30;106:37;;169:3;161:6;157:16;147:26;;7188:288:35;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;43182:89:92;;8:9:-1;5:2;;;30:1;27;20:12;5:2;43182:89:92;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;80:1;75:3;71:11;64:39;52:2;49:1;45:10;40:15;;8:100;;;12:14;43182:89:92;;;;;;;;;;;;;;;;;50547:239;;8:9:-1;5:2;;;30:1;27;20:12;5:2;50547:239:92;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;50547:239:92;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;1684:137:4;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1684:137:4;;;:::i;:::-;;913:275:123;;8:9:-1;5:2;;;30:1;27;20:12;5:2;913:275:123;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;913:275:123;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;10031:112:35;;8:9:-1;5:2;;;30:1;27;20:12;5:2;10031:112:35;;;:::i;:::-;;;;;;;;;;;;;;;;;;;2976:31:92;;8:9:-1;5:2;;;30:1;27;20:12;5:2;2976:31:92;;;:::i;:::-;;;;;;;;;;;;;;;;;;;40568:121;;8:9:-1;5:2;;;30:1;27;20:12;5:2;40568:121:92;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;40568:121:92;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;2636:25:36;;8:9:-1;5:2;;;30:1;27;20:12;5:2;2636:25:36;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;11325:330:92;;8:9:-1;5:2;;;30:1;27;20:12;5:2;11325:330:92;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;11325:330:92;;;;;;;;;;;;;;;;;:::i;:::-;;44348:588;;8:9:-1;5:2;;;30:1;27;20:12;5:2;44348:588:92;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;44348:588:92;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;191:107:123;;8:9:-1;5:2;;;30:1;27;20:12;5:2;191:107:123;;;:::i;:::-;;;;;;;;;;;;;;;;;;;6741:329:35;;8:9:-1;5:2;;;30:1;27;20:12;5:2;6741:329:35;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;6741:329:35;;;;;;;;;;21:11:-1;8;5:28;2:2;;;46:1;43;36:12;2:2;6741:329:35;;35:9:-1;28:4;12:14;8:25;5:40;2:2;;;58:1;55;48:12;2:2;6741:329:35;;;;;;100:9:-1;95:1;81:12;77:20;67:8;63:35;60:50;39:11;25:12;22:29;11:107;8:2;;;131:1;128;121:12;8:2;6741:329:35;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;30:3:-1;22:6;14;1:33;99:1;93:3;85:6;81:16;74:27;137:4;133:9;126:4;121:3;117:14;113:30;106:37;;169:3;161:6;157:16;147:26;;6741:329:35;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;899:77:4;;8:9:-1;5:2;;;30:1;27;20:12;5:2;899:77:4;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;2946:26:92;;8:9:-1;5:2;;;30:1;27;20:12;5:2;2946:26:92;;;:::i;:::-;;;;;;;;;;;;;;;;;;;1250:92:4;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1250:92:4;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;10354:269:92;;8:9:-1;5:2;;;30:1;27;20:12;5:2;10354:269:92;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;10354:269:92;;;;;;;;;;;;;;;;;:::i;:::-;;29793:2892;;8:9:-1;5:2;;;30:1;27;20:12;5:2;29793:2892:92;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;54216:165;;8:9:-1;5:2;;;30:1;27;20:12;5:2;54216:165:92;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;54216:165:92;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;42374:174;;8:9:-1;5:2;;;30:1;27;20:12;5:2;42374:174:92;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;42374:174:92;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;2856:109:35;;8:9:-1;5:2;;;30:1;27;20:12;5:2;2856:109:35;;;:::i;:::-;;;;;;;;;;;;;;;;;;;302:107:123;;8:9:-1;5:2;;;30:1;27;20:12;5:2;302:107:123;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;302:107:123;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;34948:367:92;;8:9:-1;5:2;;;30:1;27;20:12;5:2;34948:367:92;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;34948:367:92;;;;;;;;;;;;;;;;;:::i;:::-;;3185:230:36;;8:9:-1;5:2;;;30:1;27;20:12;5:2;3185:230:36;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;3185:230:36;;;;;;;;;;;;;;;;;;;:::i;:::-;;3512:29:92;;8:9:-1;5:2;;;30:1;27;20:12;5:2;3512:29:92;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;3512:29:92;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;37939:113;;8:9:-1;5:2;;;30:1;27;20:12;5:2;37939:113:92;;;:::i;:::-;;;;;;;;;;;;;;;;;;;3483:25;;8:9:-1;5:2;;;30:1;27;20:12;5:2;3483:25:92;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;3483:25:92;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;22458:716;;8:9:-1;5:2;;;30:1;27;20:12;5:2;22458:716:92;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;22458:716:92;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;8140:1071;;8:9:-1;5:2;;;30:1;27;20:12;5:2;8140:1071:92;;;;;;13:3:-1;8;5:12;2:2;;;30:1;27;20:12;2:2;8140:1071:92;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;33906:155;;8:9:-1;5:2;;;30:1;27;20:12;5:2;33906:155:92;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;33906:155:92;;;;;;;;;;;;;;;;;:::i;:::-;;34644:174;;8:9:-1;5:2;;;30:1;27;20:12;5:2;34644:174:92;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;34644:174:92;;;;;;;;;;;;;;;;;:::i;:::-;;42069:98;;8:9:-1;5:2;;;30:1;27;20:12;5:2;42069:98:92;;;:::i;:::-;;;;;;;;;;;;;;;;;;;24554:963;;8:9:-1;5:2;;;30:1;27;20:12;5:2;24554:963:92;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;24554:963:92;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;3038:26;;8:9:-1;5:2;;;30:1;27;20:12;5:2;3038:26:92;;;:::i;:::-;;;;;;;;;;;;;;;;;;;51608:145;;8:9:-1;5:2;;;30:1;27;20:12;5:2;51608:145:92;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;51608:145:92;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;47692:109;;8:9:-1;5:2;;;30:1;27;20:12;5:2;47692:109:92;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;47692:109:92;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;39641:192;;8:9:-1;5:2;;;30:1;27;20:12;5:2;39641:192:92;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;39641:192:92;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;80:1;75:3;71:11;64:39;52:2;49:1;45:10;40:15;;8:100;;;12:14;39641:192:92;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;38705:346;;8:9:-1;5:2;;;30:1;27;20:12;5:2;38705:346:92;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;9828:366;;8:9:-1;5:2;;;30:1;27;20:12;5:2;9828:366:92;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;9828:366:92;;;;;;;;;;;;;;;;;:::i;:::-;;43529:210;;8:9:-1;5:2;;;30:1;27;20:12;5:2;43529:210:92;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;43529:210:92;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;11852:376;;8:9:-1;5:2;;;30:1;27;20:12;5:2;11852:376:92;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;11852:376:92;;;;;;;;;;;;;;;;;:::i;:::-;;35875:709;;8:9:-1;5:2;;;30:1;27;20:12;5:2;35875:709:92;;;;;;13:3:-1;8;5:12;2:2;;;30:1;27;20:12;2:2;35875:709:92;;;;;;;;;;21:11:-1;8;5:28;2:2;;;46:1;43;36:12;2:2;35875:709:92;;35:9:-1;28:4;12:14;8:25;5:40;2:2;;;58:1;55;48:12;2:2;35875:709:92;;;;;;101:9:-1;95:2;81:12;77:21;67:8;63:36;60:51;39:11;25:12;22:29;11:108;8:2;;;132:1;129;122:12;8:2;35875:709:92;;;;;;;;;;;;;;21:11:-1;8;5:28;2:2;;;46:1;43;36:12;2:2;35875:709:92;;35:9:-1;28:4;12:14;8:25;5:40;2:2;;;58:1;55;48:12;2:2;35875:709:92;;;;;;101:9:-1;95:2;81:12;77:21;67:8;63:36;60:51;39:11;25:12;22:29;11:108;8:2;;;132:1;129;122:12;8:2;35875:709:92;;;;;;;;;;;;;;21:11:-1;8;5:28;2:2;;;46:1;43;36:12;2:2;35875:709:92;;35:9:-1;28:4;12:14;8:25;5:40;2:2;;;58:1;55;48:12;2:2;35875:709:92;;;;;;100:9:-1;95:1;81:12;77:20;67:8;63:35;60:50;39:11;25:12;22:29;11:107;8:2;;;131:1;128;121:12;8:2;35875:709:92;;;;;;;;;;;;;;21:11:-1;8;5:28;2:2;;;46:1;43;36:12;2:2;35875:709:92;;35:9:-1;28:4;12:14;8:25;5:40;2:2;;;58:1;55;48:12;2:2;35875:709:92;;;;;;101:9:-1;95:2;81:12;77:21;67:8;63:36;60:51;39:11;25:12;22:29;11:108;8:2;;;132:1;129;122:12;8:2;35875:709:92;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;40182:197;;8:9:-1;5:2;;;30:1;27;20:12;5:2;40182:197:92;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;40182:197:92;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;80:1;75:3;71:11;64:39;52:2;49:1;45:10;40:15;;8:100;;;12:14;40182:197:92;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3106:28;;8:9:-1;5:2;;;30:1;27;20:12;5:2;3106:28:92;;;:::i;:::-;;;;;;;;;;;;;;;;;;;2178:266:35;;8:9:-1;5:2;;;30:1;27;20:12;5:2;2178:266:35;;;:::i;:::-;;;;;;;;;;;;;;;;;;;40936:148:92;;8:9:-1;5:2;;;30:1;27;20:12;5:2;40936:148:92;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;40936:148:92;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;9752:147:35;;8:9:-1;5:2;;;30:1;27;20:12;5:2;9752:147:35;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;9752:147:35;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;1297:763;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1297:763:35;;;;;;13:3:-1;8;5:12;2:2;;;30:1;27;20:12;2:2;1297:763:35;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;16217:647:92;;8:9:-1;5:2;;;30:1;27;20:12;5:2;16217:647:92;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;16217:647:92;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;1970:107:4;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1970:107:4;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;1970:107:4;;;;;;;;;;;;;;;;;;;:::i;:::-;;56661:194:92;;8:9:-1;5:2;;;30:1;27;20:12;5:2;56661:194:92;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;56661:194:92;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;7767:322:35;;8:9:-1;5:2;;;30:1;27;20:12;5:2;7767:322:35;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;7767:322:35;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;42868:116:92;42911:16;42929;42960:5;:17;;;;:19;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;42960:19:92;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;42960:19:92;;;;;;39:16:-1;36:1;17:17;2:54;42960:19:92;101:4:-1;97:9;90:4;84;80:15;76:31;69:5;65:43;126:6;120:4;113:20;0:138;13:2;8:3;5:11;2:2;;;29:1;26;19:12;2:2;42960:19:92;;;;;;;;;;;;;19:11:-1;14:3;11:20;8:2;;;44:1;41;34:12;8:2;71:11;66:3;62:21;55:28;;123:4;118:3;114:14;159:9;141:16;138:31;135:2;;;182:1;179;172:12;135:2;219:3;213:10;331:9;325:2;311:12;307:21;289:16;285:44;282:59;261:11;247:12;244:29;233:116;230:2;;;362:1;359;352:12;230:2;385:12;380:3;373:25;421:4;416:3;412:14;405:21;;0:433;;42960:19:92;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;80:1;75:3;71:11;64:39;52:2;49:1;45:10;40:15;;8:100;;;12:14;42960:19:92;;;;;;;;;;;;;;;;;;;19:11:-1;14:3;11:20;8:2;;;44:1;41;34:12;8:2;71:11;66:3;62:21;55:28;;123:4;118:3;114:14;159:9;141:16;138:31;135:2;;;182:1;179;172:12;135:2;219:3;213:10;331:9;325:2;311:12;307:21;289:16;285:44;282:59;261:11;247:12;244:29;233:116;230:2;;;362:1;359;352:12;230:2;385:12;380:3;373:25;421:4;416:3;412:14;405:21;;0:433;;42960:19:92;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;80:1;75:3;71:11;64:39;52:2;49:1;45:10;40:15;;8:100;;;12:14;42960:19:92;;;;;;;;;;;42953:26;;;;42868:116;;:::o;15148:607::-;1103:9:4;:7;:9::i;:::-;1095:54;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;15234:52:92;;:::i;:::-;15289:38;15306:20;15289:16;:38::i;:::-;15234:93;;15348:54;15377:24;15348:28;:54::i;:::-;15333:124;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;15479:77;15511:23;:44;;15479:77;;;;;;;;;;;;;;;;;:24;:31;;:77;;;;:::i;:::-;15478:78;15463:141;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;15657:24;15610:23;:44;;:71;;;;;;;;;;;15692:58;15729:20;15692:58;;;;;;;;;;;;;;;;;;1159:1:4;15148:607:92;:::o;45576:179::-;45636:4;45642;45648:7;45671:8;:14;45680:4;45671:14;;;;;;;;;;;:23;;;;;;;;;;;;45696:8;:14;45705:4;45696:14;;;;;;;;;;;:23;;;;;;;;;;;;45721:8;:14;45730:4;45721:14;;;;;;;;;;;:28;;;45663:87;;;;;;45576:179;;;;;:::o;2896:46::-;;;;;;;;;;;;;;;;;;;:::o;3068:34::-;;;;:::o;413:128:123:-;495:7;517:12;530:5;517:19;;;;;;;;;;;;;;;;;;;;;;;;;510:26;;413:128;;;:::o;39218:121:92:-;39285:4;39304:30;:9;:21;39314:10;39304:21;;;;;;;;;;;:28;:30::i;:::-;39297:37;;39218:121;;;:::o;3011:23::-;;;;;;;;;;;;;:::o;49583:171::-;49669:4;49688:61;49708:9;:21;49718:10;49708:21;;;;;;;;;;;49731:10;49743:5;49688:19;:61::i;:::-;49681:68;;49583:171;;;;:::o;103:23:24:-;;;;;;;;;;;;;:::o;13651:565:92:-;1103:9:4;:7;:9::i;:::-;1095:54;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;13733:50:92;;:::i;:::-;13786:36;13803:18;13786:16;:36::i;:::-;13733:89;;13843:52;13872:22;13843:28;:52::i;:::-;13828:119;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;13969:68;13999:23;:37;;13969:68;;;;;;;;;;;;;;;;;:22;:29;;:68;;;;:::i;:::-;13968:69;13953:138;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;14137:22;14097:23;:37;;:62;;;;;;;;;;;14170:41;14192:18;14170:41;;;;;;;;;;;;;;;;;;1159:1:4;13651:565:92;:::o;6346:266:35:-;6469:4;6483:12;355:8;6515:30;;6563:6;6571;6579;6546:40;;;;;;;;;;;;;;;;;;;;;;;;;;36:153:-1;66:2;61:3;58:11;36:153;;182:3;176:10;171:3;164:23;98:2;93:3;89:12;82:19;;123:2;118:3;114:12;107:19;;148:2;143:3;139:12;132:19;;36:153;;;274:1;267:3;263:2;259:12;254:3;250:22;246:30;315:4;311:9;305:3;299:10;295:26;356:4;350:3;344:10;340:21;389:7;380;377:20;372:3;365:33;3:399;;;6546:40:35;;;;;;;;;;;;;;;;36:153:-1;66:2;61:3;58:11;36:153;;182:3;176:10;171:3;164:23;98:2;93:3;89:12;82:19;;123:2;118:3;114:12;107:19;;148:2;143:3;139:12;132:19;;36:153;;;274:1;267:3;263:2;259:12;254:3;250:22;246:30;315:4;311:9;305:3;299:10;295:26;356:4;350:3;344:10;340:21;389:7;380;377:20;372:3;365:33;3:399;;;6546:40:35;;;;;;;;;;;;;49:4:-1;39:7;30;26:21;22:32;13:7;6:49;6546:40:35;;;6515:72;;;;;;;;;;;;;36:153:-1;66:2;61:3;58:11;36:153;;182:3;176:10;171:3;164:23;98:2;93:3;89:12;82:19;;123:2;118:3;114:12;107:19;;148:2;143:3;139:12;132:19;;36:153;;;274:1;267:3;263:2;259:12;254:3;250:22;246:30;315:4;311:9;305:3;299:10;295:26;356:4;350:3;344:10;340:21;389:7;380;377:20;372:3;365:33;3:399;;;6515:72:35;;;;;;;;;;;;;;;;;;;;;;;14:1:-1;21;16:31;;;;75:4;69:11;64:16;;144:4;140:9;133:4;115:16;111:27;107:43;104:1;100:51;94:4;87:65;169:16;166:1;159:27;225:16;222:1;215:4;212:1;208:12;193:49;7:242;;16:31;36:4;31:9;;7:242;;6501:86:35;;;;;6600:7;6593:14;;;6346:266;;;;;:::o;48053:135:92:-;48123:4;48142:41;48161:9;:21;48171:10;48161:21;;;;;;;;;;;48142:18;:41::i;:::-;48135:48;;48053:135;;;:::o;43976:152::-;44057:7;44079:6;:15;44086:7;44079:15;;;;;;;;;;;;;;;:44;;;44072:51;;43976:152;;;:::o;10813:275::-;1103:9:4;:7;:9::i;:::-;1095:54;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;10906:1:92;10890:12;:17;;10882:63;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;10975:11;;10959:12;:27;;10951:61;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;11032:12;11018:11;:26;;;;11055:28;11070:12;11055:28;;;;;;;;;;;;;;;;;;10813:275;:::o;25956:912::-;26126:4;970:1:53;953:13;;:18;;;;;;;;;;;977:20;1000:13;;977:36;;26138:25:92;:23;:25::i;:::-;26170:35;26207:21;26232:68;26271:10;26289:5;26232:31;:68::i;:::-;26169:131;;;;26311:17;:8;:15;:17::i;:::-;26306:51;;26345:5;26338:12;;;;;;26306:51;26380:26;26371:35;;;;;;;;:5;:35;;;;;;;;;26363:72;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;26442:15;26460:13;:11;:13::i;:::-;:33;;;26494:10;26460:45;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;26460:45:92;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;26460:45:92;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;26460:45:92;;;;;;;;;;;;;;;;26442:63;;26511:24;26538:15;:13;:15::i;:::-;:52;;;26591:7;26538:61;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;26538:61:92;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;26538:61:92;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;26538:61:92;;;;;;;;;;;;;;;;26511:88;;26641:39;26667:12;26641:21;26654:7;26641:8;:12;;:21;;;;:::i;:::-;:25;;:39;;;;:::i;:::-;26621:16;:59;;26606:157;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;26769:76;26775:8;26785:10;26797:5;26804:7;26813:8;26823:7;26832:12;26769:5;:76::i;:::-;26859:4;26852:11;;;;;;1019:1:53;1050:13;;1034:12;:29;1026:56;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;25956:912:92;;;;;;;;:::o;726:183:123:-;839:65;878:7;887:16;839:38;:65::i;:::-;726:183;;:::o;38224:111:92:-;38284:7;38306:14;:24;;;38299:31;;38224:111;:::o;9422:241::-;1103:9:4;:7;:9::i;:::-;1095:54;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;9514:1:92;9493:23;;:9;:23;;;;9485:56;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;9568:8;;;;;;;;;;;9555:21;;:9;:21;;;;9547:52;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;9616:9;9605:8;;:20;;;;;;;;;;;;;;;;;;9648:9;9636:22;;;;;;;;;;;;9422:241;:::o;45194:150::-;45254:4;45312:27;:25;:27::i;:::-;45273:35;45303:4;45273:29;:35::i;:::-;:66;;45266:73;;45194:150;;;:::o;2608:147:35:-;2681:7;2703:47;2722:11;2735:14;:12;:14::i;:::-;2703:18;:47::i;:::-;2696:54;;2608:147;;;:::o;45956:1511:92:-;46065:33;46081:16;;46065:11;;:15;;:33;;;;:::i;:::-;46058:3;:40;46054:1409;;46108:29;46140:53;46149:19;;46170:5;:10;;:22;;;46140:8;:53::i;:::-;46108:85;;46201:28;46232:5;:10;;;;46243:21;46232:33;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;46232:33:92;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;46232:33:92;;;;;;39:16:-1;36:1;17:17;2:54;46232:33:92;101:4:-1;97:9;90:4;84;80:15;76:31;69:5;65:43;126:6;120:4;113:20;0:138;13:2;8:3;5:11;2:2;;;29:1;26;19:12;2:2;46232:33:92;;;;;;;;;;;;;19:11:-1;14:3;11:20;8:2;;;44:1;41;34:12;8:2;71:11;66:3;62:21;55:28;;123:4;118:3;114:14;159:9;141:16;138:31;135:2;;;182:1;179;172:12;135:2;219:3;213:10;331:9;325:2;311:12;307:21;289:16;285:44;282:59;261:11;247:12;244:29;233:116;230:2;;;362:1;359;352:12;230:2;385:12;380:3;373:25;421:4;416:3;412:14;405:21;;0:433;;46232:33:92;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;80:1;75:3;71:11;64:39;52:2;49:1;45:10;40:15;;8:100;;;12:14;46232:33:92;;;;;;;;;;;46201:64;;46274:27;46304:5;46274:35;;46322:9;46334:1;46322:13;;46317:1015;46341:21;46337:1;:25;46317:1015;;;46388:18;46409:11;46421:1;46409:14;;;;;;;;;;;;;;46388:35;;46433;46471:9;:21;46481:10;46471:21;;;;;;;;;;;46433:59;;46506:34;46531:8;46506:24;:34::i;:::-;46502:115;;;46575:10;46559:27;;;;;;;;;;46598:8;;;;46502:115;46664:77;46715:8;:16;;;46664;:35;46681:8;:17;;;;;;;;;;;;46664:35;;;;;;;;;;;;;;;;:39;;:77;;;;:::i;:::-;46626:16;:35;46643:8;:17;;;;;;;;;;;;46626:35;;;;;;;;;;;;;;;:115;;;;46826:3;46805:8;:18;;:24;;;;46866:1;46843:12;:19;;;;:24;46839:344;;46881:29;46913:26;46937:1;46913:12;:19;;;;:23;;:26;;;;:::i;:::-;46881:58;;46999:10;46951:8;46960:12;46973:21;46960:35;;;;;;;;;;;;;;;;46951:45;;;;;;;;;;;;;;;:58;;;;47028:12;47041:21;47028:35;;;;;;;;;;;;;;;47021:42;;;47097:21;47075:12;:43;;;;;:::i;:::-;;46839:344;;;;47147:8;47161:10;47147:25;;39:1:-1;33:3;27:10;23:18;57:10;52:3;45:23;79:10;72:17;;0:93;47147:25:92;;;;;;;;;;;;;;;;;;;;;;46839:344;47268:10;47251:33;47280:3;47251:33;;;;;;;;;;;;;;;;;;47319:4;47294:29;;46317:1015;;;46368:8;46374:1;46368;:5;;:8;;;;:::i;:::-;46364:12;;46317:1015;;;;47343:22;47339:118;;;47445:3;47431:11;:17;;;;47339:118;46054:1409;;;;45956:1511::o;36704:317::-;36755:4;970:1:53;953:13;;:18;;;;;;;;;;;977:20;1000:13;;977:36;;36767:13:92;36783:16;:28;36800:10;36783:28;;;;;;;;;;;;;;;;36767:44;;36834:1;36825:5;:10;;36817:42;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;36882:21;36873:5;:30;;36865:63;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;36965:1;36934:16;:28;36951:10;36934:28;;;;;;;;;;;;;;;:32;;;;36972:27;36993:5;36972:10;:20;;;;:27;;;;:::i;:::-;37012:4;37005:11;;;1050:13:53;;1034:12;:29;1026:56;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;36704:317:92;;:::o;12915:583::-;1103:9:4;:7;:9::i;:::-;1095:54;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;13003:53:92;;:::i;:::-;13059:39;13076:21;13059:16;:39::i;:::-;13003:95;;13119:55;13148:25;13119:28;:55::i;:::-;13104:125;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;13251:66;13284:23;:32;;13251:66;;;;;;;;;;;;;;;;;:25;:32;;:66;;;;:::i;:::-;13250:67;13235:130;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;13406:25;13371:23;:32;;:60;;;;;;;;;;;13442:51;13471:21;13442:51;;;;;;;;;;;;;;;;;;1159:1:4;12915:583:92;:::o;34321:150::-;34408:4;34427:8;:14;34436:4;34427:14;;;;;;;;;;;:26;;:39;34454:11;34427:39;;;;;;;;;;;;;;;;;;;;;;;;;34420:46;;34321:150;;;;:::o;3138:25::-;;;;:::o;3392:48::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;8496:343:35:-;8579:7;8594:16;8616:12;764:9;8651:35;;8704:6;8687:24;;;;;;;;;;;;;;;36:153:-1;66:2;61:3;58:11;36:153;;182:3;176:10;171:3;164:23;98:2;93:3;89:12;82:19;;123:2;118:3;114:12;107:19;;148:2;143:3;139:12;132:19;;36:153;;;274:1;267:3;263:2;259:12;254:3;250:22;246:30;315:4;311:9;305:3;299:10;295:26;356:4;350:3;344:10;340:21;389:7;380;377:20;372:3;365:33;3:399;;;8687:24:35;;;;;;;;;;;49:4:-1;39:7;30;26:21;22:32;13:7;6:49;8687:24:35;;;8651:61;;;;;;;;;;;;;36:153:-1;66:2;61:3;58:11;36:153;;182:3;176:10;171:3;164:23;98:2;93:3;89:12;82:19;;123:2;118:3;114:12;107:19;;148:2;143:3;139:12;132:19;;36:153;;;274:1;267:3;263:2;259:12;254:3;250:22;246:30;315:4;311:9;305:3;299:10;295:26;356:4;350:3;344:10;340:21;389:7;380;377:20;372:3;365:33;3:399;;;8651:61:35;;;;;;;;;;;;;;;;;;;;;;;14:1:-1;21;16:31;;;;75:4;69:11;64:16;;144:4;140:9;133:4;115:16;111:27;107:43;104:1;100:51;94:4;87:65;169:16;166:1;159:27;225:16;222:1;215:4;212:1;208:12;193:49;7:242;;16:31;36:4;31:9;;7:242;;8634:78:35;;;;;;;;8726:7;8718:76;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8807:27;8827:3;8832:1;8807:19;:27::i;:::-;8800:34;;;;8496:343;;;:::o;572:89:123:-;628:12;646:9;628:28;;39:1:-1;33:3;27:10;23:18;57:10;52:3;45:23;79:10;72:17;;0:93;628:28:123;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;572:89;:::o;6746:117:92:-;6797:7;6806;6815;6824;6847:1;6850;6853;6856;6839:19;;;;;;;;;;;;;;;;;;;;6746:117;;;;:::o;33038:700::-;33121:4;970:1:53;953:13;;:18;;;;;;;;;;;977:20;1000:13;;977:36;;33133:25:92;:23;:25::i;:::-;33165:35;33202:21;33227:68;33266:10;33284:5;33227:31;:68::i;:::-;33164:131;;;;33301:15;33319:17;:8;:15;:17::i;:::-;33301:35;;33346:10;33342:369;;;33374:21;:8;:19;:21::i;:::-;33366:55;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;33455:25;33446:34;;;;;;;;:5;:34;;;;;;;;;:66;;;;;33484:28;33503:8;33484:18;:28::i;:::-;33446:66;33429:149;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;33586:8;:16;;;;:18;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;33586:18:92;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;33586:18:92;;;;33634:10;33617:28;;;;;;;;;;33653:51;33676:8;33686:10;33698:5;33653:22;:51::i;:::-;33342:369;33723:10;33716:17;;;;;1050:13:53;;1034:12;:29;1026:56;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;33038:700:92;;;;;:::o;20037:1197::-;20149:4;970:1:53;953:13;;:18;;;;;;;;;;;977:20;1000:13;;977:36;;20163:25:92;:23;:25::i;:::-;20279:36;20304:10;20279:24;:36::i;:::-;20275:69;;;20332:5;20325:12;;;;20275:69;20350:15;20368:13;:11;:13::i;:::-;:33;;;20402:10;20368:45;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;20368:45:92;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;20368:45:92;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;20368:45:92;;;;;;;;;;;;;;;;20350:63;;20419:19;20441:6;:15;20448:7;20441:15;;;;;;;;;;;;;;;20419:37;;20462:49;20487:5;:12;;:23;;;20462:24;:49::i;:::-;;20618:14;20635:15;:13;:15::i;:::-;:41;;;20677:7;20635:50;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;20635:50:92;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;20635:50:92;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;20635:50:92;;;;;;;;;;;;;;;;20618:67;;20708:1;20699:6;:10;20691:57;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;20762:5;:14;;;;20777:10;20762:26;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;20762:26:92;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;20762:26:92;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;20762:26:92;;;;;;;;;;;;;;;;20754:80;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;20882:1;20855:5;:12;;:23;;;:28;:72;;;;20888:5;:14;;;;20903:5;:12;;:23;;;20888:39;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;20888:39:92;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;20888:39:92;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;20888:39:92;;;;;;;;;;;;;;;;20887:40;20855:72;20840:146;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;20992:15;21010:38;21041:6;21010:5;:14;;;;21025:10;21010:26;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;21010:26:92;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;21010:26:92;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;21010:26:92;;;;;;;;;;;;;;;;:30;;:38;;;;:::i;:::-;20992:56;;21054:5;:12;;;;21067:10;21079:7;21088:6;21096:7;21054:50;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;21054:50:92;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;21054:50:92;;;;21125:32;;;;;;;;21138:10;21125:32;;;;21150:6;21125:32;;;21110:5;:12;;:47;;;;;;;;;;;;;;;;;;;21196:7;21168:44;;21184:10;21168:44;21205:6;21168:44;;;;;;;;;;;;;;;;;;21225:4;21218:11;;;;;;1019:1:53;1050:13;;1034:12;:29;1026:56;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;20037:1197:92;;;;;;:::o;21404:577::-;21473:15;21514:1;21500:10;:15;:45;;;;21532:13;;21519:10;:26;21500:45;21496:93;;;21562:20;21555:27;;;;21496:93;21594:35;21632:9;:21;21642:10;21632:21;;;;;;;;;;;21594:59;;21663:20;21672:10;21663:8;:20::i;:::-;21659:318;;;21708:34;21733:8;21708:24;:34::i;:::-;:88;;21774:22;21708:88;;;21745:26;21708:88;21693:103;;;;;21659:318;21817:21;21841:34;21866:8;21841:24;:34::i;:::-;21817:58;;21890:43;21917:8;21927:5;21890:26;:43::i;:::-;:80;;21965:5;21890:80;;;21936:26;21890:80;21883:87;;;;21404:577;;;;:::o;14383:607::-;1103:9:4;:7;:9::i;:::-;1095:54;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;14469:52:92;;:::i;:::-;14524:38;14541:20;14524:16;:38::i;:::-;14469:93;;14583:54;14612:24;14583:28;:54::i;:::-;14568:124;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;14714:77;14746:23;:44;;14714:77;;;;;;;;;;;;;;;;;:24;:31;;:77;;;;:::i;:::-;14713:78;14698:141;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;14892:24;14845:23;:44;;:71;;;;;;;;;;;14927:58;14964:20;14927:58;;;;;;;;;;;;;;;;;;1159:1:4;14383:607:92;:::o;4481:378:35:-;4589:7;4606:16;4628:12;409:8;4663:24;;4705:5;4712:11;4688:36;;;;;;;;;;;;;;;;;;;;;49:4:-1;39:7;30;26:21;22:32;13:7;6:49;4688:36:35;;;4663:62;;;;;;;;;;;;;36:153:-1;66:2;61:3;58:11;36:153;;182:3;176:10;171:3;164:23;98:2;93:3;89:12;82:19;;123:2;118:3;114:12;107:19;;148:2;143:3;139:12;132:19;;36:153;;;274:1;267:3;263:2;259:12;254:3;250:22;246:30;315:4;311:9;305:3;299:10;295:26;356:4;350:3;344:10;340:21;389:7;380;377:20;372:3;365:33;3:399;;;4663:62:35;;;;;;;;;;;;;;;;;;;;;;;14:1:-1;21;16:31;;;;75:4;69:11;64:16;;144:4;140:9;133:4;115:16;111:27;107:43;104:1;100:51;94:4;87:65;169:16;166:1;159:27;225:16;222:1;215:4;212:1;208:12;193:49;7:242;;16:31;36:4;31:9;;7:242;;4646:79:35;;;;;;;;4739:7;4731:74;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4826:27;4846:3;4851:1;4826:19;:27::i;:::-;4811:43;;;;4481:378;;;;:::o;23430:775:92:-;23513:4;6006:8;;;;;;;;;;;5992:22;;:10;:22;;;5984:58;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23525:25;:23;:25::i;:::-;23557:35;23594:21;23619:68;23658:10;23676:5;23619:31;:68::i;:::-;23556:131;;;;23698:17;:8;:15;:17::i;:::-;23693:51;;23732:5;23725:12;;;;;;23693:51;23759:21;:8;:19;:21::i;:::-;23758:22;23750:60;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23840:26;23831:35;;;;;;;;:5;:35;;;;;;;;;:73;;;;23879:25;23870:34;;;;;;;;:5;:34;;;;;;;;;23831:73;23816:133;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23975:4;23955:8;:17;;;:24;;;;;;;;;;;;;;;;;;24108:15;:13;:15::i;:::-;:34;;;:36;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;24108:36:92;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;24108:36:92;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;24108:36:92;;;;;;;;;;;;;;;;24083:8;:22;;:61;;;;24172:10;24155:28;;;;;;;;;;24196:4;24189:11;;;;6048:1;23430:775;;;;:::o;41532:411::-;41622:7;41631;41640;41649;41658;41667;41684:25;41712:6;:15;41719:7;41712:15;;;;;;;;;;;;;;;:31;;:38;41744:5;41712:38;;;;;;;;;;;41684:66;;41771:6;:17;;;41804:6;:23;;;;;;;;;;;;41796:32;;;;;;;;41836:6;:24;;;41868:6;:15;;;41891:6;:14;;;41913:6;:19;;;41756:182;;;;;;;;;;;;;41532:411;;;;;;;;:::o;37230:535::-;37288:4;37300:19;37322:6;:15;37329:7;37322:15;;;;;;;;;;;;;;;37300:37;;37343:23;37369:5;:12;;:23;;;37343:49;;37398:18;37438:1;37419:15;:20;;:55;;;;;37449:25;37458:15;37449:8;:25::i;:::-;37419:55;:106;;;;;37485:40;37509:15;37485:23;:40::i;:::-;37484:41;37419:106;37398:127;;37531:35;37569:9;:45;37579:5;:34;;;37569:45;;;;;;;;;;;37531:83;;37620:23;37685:26;37647:64;;;;;;;;:34;37672:8;37647:24;:34::i;:::-;:64;;;;;;;;;37620:92;;37725:13;:35;;;;37742:18;37725:35;37718:42;;;;;;;37230:535;;;:::o;3167:51::-;;;;;;;;;;;;;;;;;:::o;17441:763::-;17653:7;17668:25;:23;:25::i;:::-;17720:10;;17707:9;:23;;17699:53;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;17775:20;17793:1;17775:13;;:17;;:20;;;;:::i;:::-;17759:13;:36;;;;17801:35;17839:9;:24;17849:13;;17839:24;;;;;;;;;;;17801:62;;17869:8;:13;;;;17883:6;;17891:12;;17905:4;;17911:11;;17924:10;17936:9;17869:77;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;30:3:-1;22:6;14;1:33;99:1;93:3;85:6;81:16;74:27;137:4;133:9;126:4;121:3;117:14;113:30;106:37;;169:3;161:6;157:16;147:26;;17869:77:92;;;;;;;;;;;;;;;;;;;30:3:-1;22:6;14;1:33;99:1;93:3;85:6;81:16;74:27;137:4;133:9;126:4;121:3;117:14;113:30;106:37;;169:3;161:6;157:16;147:26;;17869:77:92;;;;;;;;;;;;;;;;;30:3:-1;22:6;14;1:33;99:1;93:3;85:6;81:16;74:27;137:4;133:9;126:4;121:3;117:14;113:30;106:37;;169:3;161:6;157:16;147:26;;17869:77:92;;;;;;;;;;;;;;;;;;;30:3:-1;22:6;14;1:33;99:1;93:3;85:6;81:16;74:27;137:4;133:9;126:4;121:3;117:14;113:30;106:37;;169:3;161:6;157:16;147:26;;17869:77:92;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;17869:77:92;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;17869:77:92;;;;17952:42;17979:14;;17952:42;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;30:3:-1;22:6;14;1:33;99:1;93:3;85:6;81:16;74:27;137:4;133:9;126:4;121:3;117:14;113:30;106:37;;169:3;161:6;157:16;147:26;;17952:42:92;;;;;;:8;:26;;:42;;;;:::i;:::-;18000:5;:10;;;;18011:13;;18000:25;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;18000:25:92;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;18000:25:92;;;;18116:10;18086:87;;18101:13;;18086:87;18128:8;:21;;:28;;;;18158:9;18169:3;18086:87;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;18186:13;;18179:20;;;17441:763;;;;;;;;;;;;:::o;12422:367::-;1103:9:4;:7;:9::i;:::-;1095:54;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;12546:1:92;12520:22;:27;;12512:70;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;12622:14;:24;;;12596:22;:50;;12588:81;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;12702:22;12675:14;:24;;:49;;;;12735;12761:22;12735:49;;;;;;;;;;;;;;;;;;12422:367;:::o;55140:1196::-;55216:7;55231:19;55253:6;:15;55260:7;55253:15;;;;;;;;;;;;;;;55231:37;;55275:25;55303:5;:12;;:23;;;55275:51;;55332:18;55374:1;55353:17;:22;;:59;;;;;55385:27;55394:17;55385:8;:27::i;:::-;55353:59;:112;;;;;55423:42;55447:17;55423:23;:42::i;:::-;55422:43;55353:112;55332:133;;55476:13;55472:122;;;55499:14;55516:15;:13;:15::i;:::-;:41;;;55558:7;55516:50;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;55516:50:92;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;55516:50:92;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;55516:50:92;;;;;;;;;;;;;;;;55499:67;;55581:6;55574:13;;;;;;;;55472:122;55600:15;55618:1;55600:19;;55630:13;55646:1;55630:17;;55625:687;55657:8;:15;;;;55649:5;:23;55625:687;;;55704:35;55742:9;:26;55752:8;55761:5;55752:15;;;;;;;;;;;;;;;;55742:26;;;;;;;;;;;55704:64;;55776:23;55841:26;55803:64;;;;;;;;:34;55828:8;55803:24;:34::i;:::-;:64;;;;;;;;;55776:92;;55882:18;55877:52;;55912:8;;;;55877:52;55937:29;55969:5;:21;;:28;55991:5;55969:28;;;;;;;;;;;55937:60;;56005:17;56025:72;56073:10;:23;;;56025:43;56049:10;:18;;;56025:10;:19;;;:23;;:43;;;;:::i;:::-;:47;;:72;;;;:::i;:::-;56005:92;;56115:190;56133:7;56253:1;56240:9;:14;:57;;56288:9;56240:57;;;56257:10;:28;;;56240:57;56115:8;:190::i;:::-;56105:200;;55625:687;;;;;55682:12;55692:1;55682:5;:9;;:12;;;;:::i;:::-;55674:20;;55625:687;;;;56324:7;56317:14;;;;;;55140:1196;;;;:::o;7188:288:35:-;7250:7;7265:16;7287:12;635:8;7322:22;;7362:6;7345:24;;;;;;;;;;;;;;;36:153:-1;66:2;61:3;58:11;36:153;;182:3;176:10;171:3;164:23;98:2;93:3;89:12;82:19;;123:2;118:3;114:12;107:19;;148:2;143:3;139:12;132:19;;36:153;;;274:1;267:3;263:2;259:12;254:3;250:22;246:30;315:4;311:9;305:3;299:10;295:26;356:4;350:3;344:10;340:21;389:7;380;377:20;372:3;365:33;3:399;;;7345:24:35;;;;;;;;;;;49:4:-1;39:7;30;26:21;22:32;13:7;6:49;7345:24:35;;;7322:48;;;;;;;;;;;;;36:153:-1;66:2;61:3;58:11;36:153;;182:3;176:10;171:3;164:23;98:2;93:3;89:12;82:19;;123:2;118:3;114:12;107:19;;148:2;143:3;139:12;132:19;;36:153;;;274:1;267:3;263:2;259:12;254:3;250:22;246:30;315:4;311:9;305:3;299:10;295:26;356:4;350:3;344:10;340:21;389:7;380;377:20;372:3;365:33;3:399;;;7322:48:35;;;;;;;;;;;;;;;;;;;;;;;14:1:-1;21;16:31;;;;75:4;69:11;64:16;;144:4;140:9;133:4;115:16;111:27;107:43;104:1;100:51;94:4;87:65;169:16;166:1;159:27;225:16;222:1;215:4;212:1;208:12;193:49;7:242;;16:31;36:4;31:9;;7:242;;7305:65:35;;;;;;;;7384:7;7376:55;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;7444:27;7464:3;7469:1;7444:19;:27::i;:::-;7437:34;;;;7188:288;;;:::o;43182:89:92:-;43227:16;43258:8;43251:15;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;43182:89;:::o;50547:239::-;50625:4;50637:35;50675:9;:21;50685:10;50675:21;;;;;;;;;;;50637:59;;50709:72;50736:8;50746:34;50771:8;50746:24;:34::i;:::-;50709:26;:72::i;:::-;50702:79;;;50547:239;;;:::o;1684:137:4:-;1103:9;:7;:9::i;:::-;1095:54;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1782:1;1745:40;;1766:6;;;;;;;;;;;1745:40;;;;;;;;;;;;1812:1;1795:6;;:19;;;;;;;;;;;;;;;;;;1684:137::o;913:275:123:-;1024:19;1046:6;:20;1053:12;1046:20;;;;;;;;;;;;;;;1024:42;;1072:29;1104:5;:21;;:36;1126:13;1104:36;;;;;;;;;;;1072:68;;1177:6;1146:10;:28;;:37;;;;913:275;;;;;:::o;10031:112:35:-;10089:7;10111:27;10125:12;10111:13;:27::i;:::-;10104:34;;10031:112;:::o;2976:31:92:-;;;;:::o;40568:121::-;40631:4;40650:34;:9;:21;40660:10;40650:21;;;;;;;;;;;:32;:34::i;:::-;40643:41;;40568:121;;;:::o;2636:25:36:-;;;;;;;;;;;;;:::o;11325:330:92:-;1103:9:4;:7;:9::i;:::-;1095:54;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;11433:1:92;11412:17;:22;;11404:73;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;11512:16;;11491:17;:37;;11483:76;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;11584:17;11565:16;:36;;;;11612:38;11632:17;11612:38;;;;;;;;;;;;;;;;;;11325:330;:::o;44348:588::-;44422:7;44437:13;44453:1;44437:17;;44460:9;44472:30;:28;:30::i;:::-;44460:42;;44508:18;44529:13;:11;:13::i;:::-;44508:34;;44553:9;44565:1;44553:13;;44548:366;44572:1;44568;:5;44548:366;;;44597:23;44623:39;44660:1;44623:36;:39::i;:::-;44597:65;;44670:24;44697:8;:24;;;44722:15;44697:41;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;44697:41:92;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;44697:41:92;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;44697:41:92;;;;;;;;;;;;;;;;44670:68;;44759:44;44781:4;44787:15;44759:21;:44::i;:::-;:101;;;;44815:45;44837:4;44843:16;44815:21;:45::i;:::-;44759:101;44746:162;;;44887:12;44897:1;44887:5;:9;;:12;;;;:::i;:::-;44879:20;;44746:162;44548:366;;44579:8;44585:1;44579;:5;;:8;;;;:::i;:::-;44575:12;;44548:366;;;;44926:5;44919:12;;;;;44348:588;;;:::o;191:107:123:-;252:7;274:12;:19;;;;267:26;;191:107;:::o;6741:329:35:-;6817:7;6832:16;6854:12;583:8;6889:35;;6942:6;6925:24;;;;;;;;;;;;;;;36:153:-1;66:2;61:3;58:11;36:153;;182:3;176:10;171:3;164:23;98:2;93:3;89:12;82:19;;123:2;118:3;114:12;107:19;;148:2;143:3;139:12;132:19;;36:153;;;274:1;267:3;263:2;259:12;254:3;250:22;246:30;315:4;311:9;305:3;299:10;295:26;356:4;350:3;344:10;340:21;389:7;380;377:20;372:3;365:33;3:399;;;6925:24:35;;;;;;;;;;;49:4:-1;39:7;30;26:21;22:32;13:7;6:49;6925:24:35;;;6889:61;;;;;;;;;;;;;36:153:-1;66:2;61:3;58:11;36:153;;182:3;176:10;171:3;164:23;98:2;93:3;89:12;82:19;;123:2;118:3;114:12;107:19;;148:2;143:3;139:12;132:19;;36:153;;;274:1;267:3;263:2;259:12;254:3;250:22;246:30;315:4;311:9;305:3;299:10;295:26;356:4;350:3;344:10;340:21;389:7;380;377:20;372:3;365:33;3:399;;;6889:61:35;;;;;;;;;;;;;;;;;;;;;;;14:1:-1;21;16:31;;;;75:4;69:11;64:16;;144:4;140:9;133:4;115:16;111:27;107:43;104:1;100:51;94:4;87:65;169:16;166:1;159:27;225:16;222:1;215:4;212:1;208:12;193:49;7:242;;16:31;36:4;31:9;;7:242;;6872:78:35;;;;;;;;6964:7;6956:69;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;7038:27;7058:3;7063:1;7038:19;:27::i;:::-;7031:34;;;;6741:329;;;:::o;899:77:4:-;937:7;963:6;;;;;;;;;;;956:13;;899:77;:::o;2946:26:92:-;;;;:::o;1250:92:4:-;1290:4;1329:6;;;;;;;;;;;1313:22;;:12;:10;:12::i;:::-;:22;;;1306:29;;1250:92;:::o;10354:269:92:-;1103:9:4;:7;:9::i;:::-;1095:54;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;10444:1:92;10429:11;:16;;10421:61;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;10511:10;;10496:11;:25;;10488:63;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;10570:11;10557:10;:24;;;;10592:26;10606:11;10592:26;;;;;;;;;;;;;;;;;;10354:269;:::o;29793:2892::-;29847:4;970:1:53;953:13;;:18;;;;;;;;;;;977:20;1000:13;;977:36;;29859:15:92;29877:13;:11;:13::i;:::-;:33;;;29911:10;29877:45;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;29877:45:92;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;29877:45:92;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;29877:45:92;;;;;;;;;;;;;;;;29859:63;;29928:19;29950:6;:15;29957:7;29950:15;;;;;;;;;;;;;;;29928:37;;29983:20;30006:1;29983:24;;29971:2559;30030:8;:15;;;;30015:12;:30;29971:2559;;;30102:29;30134:5;:21;;:35;30156:12;30134:35;;;;;;;;;;;30102:67;;30369:8;30378:12;30369:22;;;;;;;;;;;;;;;;30344:10;:21;;;:47;:211;;;;;30427:1;30404:10;:19;;;:24;;:61;;;;30464:1;30442:10;:18;;;:23;;30404:61;:103;;;;30506:1;30479:10;:23;;;:28;;30404:103;:150;;;;30553:1;30521:10;:28;;;:33;;30404:150;30344:211;30331:2193;;;30575:35;30612:21;30647:68;30679:10;:21;;;30702:12;30647:31;:68::i;:::-;30574:141;;;;30826:26;30817:35;;;;;;;;:5;:35;;;;;;;;;30813:1554;;;30902:1;30870:10;:28;;;:33;30866:1491;;31013:19;31066:23;31035:54;;;;;;;;:10;:27;;;;;;;;;;;;:54;;;;;;;;;:117;;31151:1;31035:117;;;31106:10;:28;;;31035:117;31013:139;;31166:18;31218:22;31187:53;;;;;;;;:10;:27;;;;;;;;;;;;:53;;;;;;;;;:116;;31302:1;31187:116;;;31257:10;:28;;;31187:116;31166:137;;31317:23;31374:27;31343:58;;;;;;;;:10;:27;;;;;;;;;;;;:58;;;;;;;;;:121;;31463:1;31343:121;;;31418:10;:28;;;31343:121;31317:147;;31478:8;:19;;;;31498:11;31511:10;31523:15;31540:1;31543;31546;31478:70;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;31478:70:92;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;31478:70:92;;;;31588:15;:13;:15::i;:::-;:34;;;:36;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;31588:36:92;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;31588:36:92;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;31588:36:92;;;;;;;;;;;;;;;;31563:8;:22;;:61;;;;31717:7;31643:179;;31680:10;:21;;;31643:179;31740:11;31767:10;31793:15;31643:179;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;30866:1491;;;;;;31855:8;:19;;;;31890:10;:19;;;31925:10;:18;;;31959:10;:23;;;31998:1;32015;32032;31855:192;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;31855:192:92;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;31855:192:92;;;;32086:15;:13;:15::i;:::-;:34;;;:36;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;32086:36:92;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;32086:36:92;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;32086:36:92;;;;;;;;;;;;;;;;32061:8;:22;;:61;;;;32215:7;32141:203;;32178:10;:21;;;32141:203;32238:10;:19;;;32273:10;:18;;;32307:10;:23;;;32141:203;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;30866:1491;30813:1554;32480:5;:21;;:35;32502:12;32480:35;;;;;;;;;;;;32473:42;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;30331:2193;;;29971:2559;30068:19;30085:1;30068:12;:16;;:19;;;;:::i;:::-;30053:34;;29971:2559;;;;32662:1;32625:5;:34;;:38;;;;32676:4;32669:11;;;;1050:13:53;;1034:12;:29;1026:56;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;29793:2892:92;;:::o;54216:165::-;54304:7;54326:50;:41;54343:11;54356:10;54326:16;:41::i;:::-;:48;:50::i;:::-;54319:57;;54216:165;;;;:::o;42374:174::-;42437:7;42460:20;42469:10;42460:8;:20::i;:::-;42452:52;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;42517:5;:14;;;;42532:10;42517:26;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;42517:26:92;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;42517:26:92;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;42517:26:92;;;;;;;;;;;;;;;;42510:33;;42374:174;;;:::o;2856:109:35:-;2903:7;2925:35;2947:12;2925:21;:35::i;:::-;2918:42;;2856:109;:::o;302:107:123:-;363:7;385:12;:19;;;;378:26;;302:107;;;:::o;34948:367:92:-;35012:4;5887:8;:14;5896:4;5887:14;;;;;;;;;;;:23;;;;;;;;;;;;5886:24;5878:60;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;35032:21;35048:4;35032:15;:21::i;:::-;35024:75;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;35105:13;35121:16;:14;:16::i;:::-;35105:32;;35182:5;35151:8;:14;35160:4;35151:14;;;;;;;;;;;:28;;;:36;35143:87;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;35267:5;35236:8;:14;35245:4;35236:14;;;;;;;;;;;:28;;:36;;;;35304:5;35298:4;35283:27;;;;;;;;;;5944:1;34948:367;;:::o;3185:230:36:-;1103:9:4;:7;:9::i;:::-;1095:54;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3289:1:36;3262:29;;:15;:29;;;;3254:74;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3355:15;3334:8;;:37;;;;;;;;;;;;;;;;;;3394:15;3382:28;;;;;;;;;;;;3185:230;:::o;3512:29:92:-;;;;;;;;;;;;;;;;;;;;;;;;;:::o;37939:113::-;38000:7;38022:14;:25;;;38015:32;;37939:113;:::o;3483:25::-;;;;;;;;;;;;;;;;;;;;;;;;;:::o;22458:716::-;22544:4;970:1:53;953:13;;:18;;;;;;;;;;;977:20;1000:13;;977:36;;22556:25:92;:23;:25::i;:::-;22587:15;22605:13;:11;:13::i;:::-;:33;;;22639:10;22605:45;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;22605:45:92;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;22605:45:92;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;22605:45:92;;;;;;;;;;;;;;;;22587:63;;22656:19;22678:6;:15;22685:7;22678:15;;;;;;;;;;;;;;;22656:37;;22699:18;22720:5;:12;;:23;;;22699:44;;22771:1;22757:10;:15;;22749:60;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;22815:36;22840:10;22815:24;:36::i;:::-;;22861:5;:14;;;;22876:10;22861:26;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;22861:26:92;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;22861:26:92;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;22861:26:92;;;;;;;;;;;;;;;;22857:257;;;22897:5;:12;;;;22919:10;22939:51;22970:5;:12;;:19;;;22939:5;:14;;;;22954:10;22939:26;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;22939:26:92;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;22939:26:92;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;22939:26:92;;;;;;;;;;;;;;;;:30;;:51;;;;:::i;:::-;23000:6;23016:7;22897:134;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;22897:134:92;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;22897:134:92;;;;23078:7;23044:63;;23066:10;23044:63;23087:5;:12;;:19;;;23044:63;;;;;;;;;;;;;;;;;;22857:257;23134:18;;;;;;;;23147:1;23134:18;;;;23150:1;23134:18;;;23119:5;:12;;:33;;;;;;;;;;;;;;;;;;;23165:4;23158:11;;;;;1050:13:53;;1034:12;:29;1026:56;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;22458:716:92;;;;;:::o;8140:1071::-;283:11:24;;;;;;;;;;;282:12;274:53;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;347:4;333:11;;:18;;;;;;;;;;;;;;;;;;8567:30:92;8586:10;8567:18;:30::i;:::-;8603:28;8615:15;8603:11;:28::i;:::-;8637:22;8649:9;8637:11;:22::i;:::-;8665:44;8688:20;8665:22;:44::i;:::-;8715:26;8729:11;8715:13;:26::i;:::-;8747:28;8762:12;8747:14;:28::i;:::-;8781:38;8801:17;8781:19;:38::i;:::-;8825:51;8852:23;8825:26;:51::i;:::-;8882:49;8908:22;8882:25;:49::i;:::-;8937:47;8962:21;8937:24;:47::i;:::-;8990:41;9012:18;8990:21;:41::i;:::-;9037:45;9061:20;9037:23;:45::i;:::-;9088;9112:20;9088:23;:45::i;:::-;9203:3;9189:11;:17;;;;8140:1071;;;;;;;;;;;;:::o;33906:155::-;33970:4;5887:8;:14;5896:4;5887:14;;;;;;;;;;;:23;;;;;;;;;;;;5886:24;5878:60;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6006:8;;;;;;;;;;;5992:22;;:10;:22;;;5984:58;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;34021:4;33995:8;:14;34004:4;33995:14;;;;;;;;;;;:23;;;:30;;;;;;;;;;;;;;;;;;34051:4;34036:20;;;;;;;;;;33906:155;;:::o;34644:174::-;34710:4;5887:8;:14;5896:4;5887:14;;;;;;;;;;;:23;;;;;;;;;;;;5886:24;5878:60;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;34763:4;34722:8;:14;34731:4;34722:14;;;;;;;;;;;:26;;:38;34749:10;34722:38;;;;;;;;;;;;;;;;:45;;;;;;;;;;;;;;;;;;34796:4;34778:35;34802:10;34778:35;;;;;;;;;;;;;;;;;;;;;;34644:174;;:::o;42069:98::-;42118:7;42140:5;:10;;:22;;;42133:29;;42069:98;:::o;24554:963::-;24673:4;970:1:53;953:13;;:18;;;;;;;;;;;977:20;1000:13;;977:36;;24687:25:92;:23;:25::i;:::-;24719:35;24756:21;24781:68;24820:10;24838:5;24781:31;:68::i;:::-;24718:131;;;;24860:17;:8;:15;:17::i;:::-;24855:51;;24894:5;24887:12;;;;;;24855:51;24929:26;24920:35;;;;;;;;:5;:35;;;;;;;;;24912:72;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;25007:24;24998:33;;;;;;;;:5;:33;;;;;;;;;;24990:62;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;25059:15;25077:13;:11;:13::i;:::-;:33;;;25111:10;25077:45;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;25077:45:92;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;25077:45:92;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;25077:45:92;;;;;;;;;;;;;;;;25059:63;;25128:14;25145:15;:13;:15::i;:::-;:52;;;25198:7;25145:61;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;25145:61:92;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;25145:61:92;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;25145:61:92;;;;;;;;;;;;;;;;25128:78;;25230:1;25220:6;:11;;25212:41;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;25260:235;25273:8;25289:10;25307:5;25320:7;25344:23;25335:32;;;;;;;;:5;:32;;;;;;;;;:45;;25379:1;25335:45;;;25370:6;25335:45;25397:22;25388:31;;;;;;;;:5;:31;;;;;;;;;:44;;25431:1;25388:44;;;25422:6;25388:44;25449:27;25440:36;;;;;;;;:5;:36;;;;;;;;;:49;;25488:1;25440:49;;;25479:6;25440:49;25260:5;:235::i;:::-;25508:4;25501:11;;;;;;1019:1:53;1050:13;;1034:12;:29;1026:56;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;24554:963:92;;;;;;:::o;3038:26::-;;;;:::o;51608:145::-;51682:4;51701:47;51726:9;:21;51736:10;51726:21;;;;;;;;;;;51701:24;:47::i;:::-;51694:54;;51608:145;;;:::o;47692:109::-;47751:4;47770:5;:14;;;;47785:10;47770:26;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;47770:26:92;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;47770:26:92;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;47770:26:92;;;;;;;;;;;;;;;;47763:33;;47692:109;;;:::o;39641:192::-;39717:7;39726;39735;39744;39753:13;39768:7;39777:4;39798:30;:9;:21;39808:10;39798:21;;;;;;;;;;;:28;:30::i;:::-;39791:37;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;39641:192;;;;;;;;;:::o;38705:346::-;38766:7;38775;38784;38793;38823:41;:23;:32;;:39;;;;;;;;;;;;;;;;;;:41::i;:::-;38872:46;:23;:37;;:44;;;;;;;;;;;;;;;;;;:46::i;:::-;38926:53;:23;:44;;:51;;;;;;;;;;;;;;;;;;:53::i;:::-;38987;:23;:44;;:51;;;;;;;;;;;;;;;;;;:53::i;:::-;38808:238;;;;;;;;38705:346;;;;:::o;9828:366::-;1103:9:4;:7;:9::i;:::-;1095:54;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;9945:1:92;9921:20;:25;;9913:82;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;10033:19;;10009:20;:43;;10001:85;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;10114:20;10092:19;:42;;;;10145:44;10168:20;10145:44;;;;;;;;;;;;;;;;;;9828:366;:::o;43529:210::-;43594:7;43603;43618:32;;:::i;:::-;43653:6;:15;43660:7;43653:15;;;;;;;;;;;;;;;:22;;43618:57;;;;;;;;;;;;;;;;;;;;;;;;;;;43689:12;:23;;;43714:12;:19;;;43681:53;;;;;43529:210;;;:::o;11852:376::-;1103:9:4;:7;:9::i;:::-;1095:54;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;11979:1:92;11952:23;:28;;11944:71;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;12056:14;:25;;;12029:23;:52;;12021:83;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;12138:23;12110:14;:25;;:51;;;;12172;12199:23;12172:51;;;;;;;;;;;;;;;;;;11852:376;:::o;35875:709::-;36064:12;36100:6;;36108:12;;36122:4;;36128:11;;36141:4;36089:57;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;30:3:-1;22:6;14;1:33;99:1;93:3;85:6;81:16;74:27;137:4;133:9;126:4;121:3;117:14;113:30;106:37;;169:3;161:6;157:16;147:26;;36089:57:92;;;;;;;;;;;;;;;;;;;30:3:-1;22:6;14;1:33;99:1;93:3;85:6;81:16;74:27;137:4;133:9;126:4;121:3;117:14;113:30;106:37;;169:3;161:6;157:16;147:26;;36089:57:92;;;;;;;;;;;;;;;;;30:3:-1;22:6;14;1:33;99:1;93:3;85:6;81:16;74:27;137:4;133:9;126:4;121:3;117:14;113:30;106:37;;169:3;161:6;157:16;147:26;;36089:57:92;;;;;;;;;;;;;;;;;;;30:3:-1;22:6;14;1:33;99:1;93:3;85:6;81:16;74:27;137:4;133:9;126:4;121:3;117:14;113:30;106:37;;169:3;161:6;157:16;147:26;;36089:57:92;;;;;;;;;;;;;;;;;;;49:4:-1;39:7;30;26:21;22:32;13:7;6:49;36089:57:92;;;36079:68;;;;;;36064:83;;36155:13;36170;36185:21;36210;36226:4;36210:15;:21::i;:::-;36154:77;;;;;;36246:8;36245:9;36237:45;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;36296:8;36288:40;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;36359:16;:14;:16::i;:::-;36342:13;:33;36334:84;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;36425:86;:73;36443:6;;36425:73;;;;;;;;;;;;;;;;;;;;;;;;;;;30:3:-1;22:6;14;1:33;99:1;93:3;85:6;81:16;74:27;137:4;133:9;126:4;121:3;117:14;113:30;106:37;;169:3;161:6;157:16;147:26;;36425:73:92;;;;;;36451:12;;36425:73;;;;;;;;;;;;;;;;;;;;;;;;;;;30:3:-1;22:6;14;1:33;99:1;93:3;85:6;81:16;74:27;137:4;133:9;126:4;121:3;117:14;113:30;106:37;;169:3;161:6;157:16;147:26;;36425:73:92;;;;;;36465:4;;36425:73;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;30:3:-1;22:6;14;1:33;99:1;93:3;85:6;81:16;74:27;137:4;133:9;126:4;121:3;117:14;113:30;106:37;;169:3;161:6;157:16;147:26;;36425:73:92;;;;;;36471:11;;36425:73;;;;;;;;;;;;;;;;;;;;;;;;;;;30:3:-1;22:6;14;1:33;99:1;93:3;85:6;81:16;74:27;137:4;133:9;126:4;121:3;117:14;113:30;106:37;;169:3;161:6;157:16;147:26;;36425:73:92;;;;;;36484:10;36496:1;36425:17;:73::i;:::-;:84;:86::i;:::-;36544:4;36518:8;:14;36527:4;36518:14;;;;;;;;;;;:23;;;:30;;;;;;;;;;;;;;;;;;36574:4;36559:20;;;;;;;;;;35875:709;;;;;;;;;;;;;:::o;40182:197::-;40284:7;40293;40302:12;40331:9;:21;40341:10;40331:21;;;;;;;;;;;:36;;;;40368:5;40331:43;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;40331:43:92;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;40331:43:92;;;;;;39:16:-1;36:1;17:17;2:54;40331:43:92;101:4:-1;97:9;90:4;84;80:15;76:31;69:5;65:43;126:6;120:4;113:20;0:138;13:2;8:3;5:11;2:2;;;29:1;26;19:12;2:2;40331:43:92;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;19:11:-1;14:3;11:20;8:2;;;44:1;41;34:12;8:2;71:11;66:3;62:21;55:28;;123:4;118:3;114:14;159:9;141:16;138:31;135:2;;;182:1;179;172:12;135:2;219:3;213:10;330:9;325:1;311:12;307:20;289:16;285:43;282:58;261:11;247:12;244:29;233:115;230:2;;;361:1;358;351:12;230:2;384:12;379:3;372:25;420:4;415:3;411:14;404:21;;0:432;;40331:43:92;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;80:1;75:3;71:11;64:39;52:2;49:1;45:10;40:15;;8:100;;;12:14;40331:43:92;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;40324:50;;;;;;40182:197;;;;;:::o;3106:28::-;;;;:::o;2178:266:35:-;2223:7;2238:16;2260:12;518:8;2295:21;;2317:18;;;;;;49:4:-1;39:7;30;26:21;22:32;13:7;6:49;2317:18:35;;;2295:41;;;;;;;;;;;;;36:153:-1;66:2;61:3;58:11;36:153;;182:3;176:10;171:3;164:23;98:2;93:3;89:12;82:19;;123:2;118:3;114:12;107:19;;148:2;143:3;139:12;132:19;;36:153;;;274:1;267:3;263:2;259:12;254:3;250:22;246:30;315:4;311:9;305:3;299:10;295:26;356:4;350:3;344:10;340:21;389:7;380;377:20;372:3;365:33;3:399;;;2295:41:35;;;;;;;;;;;;;;;;;;;;;;;14:1:-1;21;16:31;;;;75:4;69:11;64:16;;144:4;140:9;133:4;115:16;111:27;107:43;104:1;100:51;94:4;87:65;169:16;166:1;159:27;225:16;222:1;215:4;212:1;208:12;193:49;7:242;;16:31;36:4;31:9;;7:242;;2278:58:35;;;;;;;;2350:7;2342:57;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2412:27;2432:3;2437:1;2412:19;:27::i;:::-;2405:34;;;;2178:266;:::o;40936:148:92:-;41002:7;41011;41020;41042:37;:9;:21;41052:10;41042:21;;;;;;;;;;;:35;:37::i;:::-;41035:44;;;;;;40936:148;;;;;:::o;9752:147:35:-;9817:7;9839:55;9892:1;9839:48;9885:1;9839:41;9878:1;9839:34;9861:11;9839:21;:34::i;:::-;:38;;:41;;;;:::i;:::-;:45;;:48;;;;:::i;:::-;:52;;:55;;;;:::i;:::-;9832:62;;9752:147;;;:::o;1297:763::-;1491:7;1500;1539:1;1523:12;:17;;:38;;;;;1560:1;1544:12;:17;;1523:38;1515:72;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1593:23;1622:25;1653:12;1671:16;295:8;1710:23;;1758:10;1770:12;1784:10;1796:12;1810:8;1820:9;1741:89;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;49:4:-1;39:7;30;26:21;22:32;13:7;6:49;1741:89:35;;;1710:126;;;;;;;;;;;;;36:153:-1;66:2;61:3;58:11;36:153;;182:3;176:10;171:3;164:23;98:2;93:3;89:12;82:19;;123:2;118:3;114:12;107:19;;148:2;143:3;139:12;132:19;;36:153;;;274:1;267:3;263:2;259:12;254:3;250:22;246:30;315:4;311:9;305:3;299:10;295:26;356:4;350:3;344:10;340:21;389:7;380;377:20;372:3;365:33;3:399;;;1710:126:35;;;;;;;;;;;;;;;;;;;;;;;14:1:-1;21;16:31;;;;75:4;69:11;64:16;;144:4;140:9;133:4;115:16;111:27;107:43;104:1;100:51;94:4;87:65;169:16;166:1;159:27;225:16;222:1;215:4;212:1;208:12;193:49;7:242;;16:31;36:4;31:9;;7:242;;1693:143:35;;;;;;;;1850:7;1842:59;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1925:27;1945:3;1950:1;1925:19;:27::i;:::-;1907:45;;1978:28;1998:3;2003:2;1978:19;:28::i;:::-;1958:48;;2020:15;2037:17;2012:43;;;;;;;;1297:763;;;;;;;;;:::o;16217:647:92:-;1103:9:4;:7;:9::i;:::-;1095:54;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;16367:1:92;16344:25;;:11;:25;;;;16336:64;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1294:24;16421:9;:22;:68;;;;;16460:29;:20;:18;:20::i;:::-;:27;:29::i;:::-;16447:9;:42;;16421:68;16406:171;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;16601:1;16587:15;;:10;:15;;;;16583:215;;;16657:27;16674:9;16657:16;:27::i;:::-;16612:12;:25;16625:11;16612:25;;;;;;;;;;;;;;;:42;;:72;;;;;;;;;;;16583:215;;;16764:27;16781:9;16764:16;:27::i;:::-;16705:12;:25;16718:11;16705:25;;;;;;;;;;;;;;;:44;;:56;16750:10;16705:56;;;;;;;;;;;;;;;;;:86;;;;;;;;;;;16583:215;16837:10;16808:51;;;16824:11;16808:51;;;16849:9;16808:51;;;;;;;;;;;;;;;;;;16217:647;;;:::o;1970:107:4:-;1103:9;:7;:9::i;:::-;1095:54;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2042:28;2061:8;2042:18;:28::i;:::-;1970:107;:::o;56661:194:92:-;6120:15;:13;:15::i;:::-;6098:38;;:10;:38;;;6090:76;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;56787:63;56826:7;56835:14;56787:38;:63::i;:::-;56661:194;;:::o;7767:322:35:-;7838:7;7853:16;7875:12;698:9;7910:33;;7961:11;7944:29;;;;;;;;;;;;;;;49:4:-1;39:7;30;26:21;22:32;13:7;6:49;7944:29:35;;;7910:64;;;;;;;;;;;;;36:153:-1;66:2;61:3;58:11;36:153;;182:3;176:10;171:3;164:23;98:2;93:3;89:12;82:19;;123:2;118:3;114:12;107:19;;148:2;143:3;139:12;132:19;;36:153;;;274:1;267:3;263:2;259:12;254:3;250:22;246:30;315:4;311:9;305:3;299:10;295:26;356:4;350:3;344:10;340:21;389:7;380;377:20;372:3;365:33;3:399;;;7910:64:35;;;;;;;;;;;;;;;;;;;;;;;14:1:-1;21;16:31;;;;75:4;69:11;64:16;;144:4;140:9;133:4;115:16;111:27;107:43;104:1;100:51;94:4;87:65;169:16;166:1;159:27;225:16;222:1;215:4;212:1;208:12;193:49;7:242;;16:31;36:4;31:9;;7:242;;7893:81:35;;;;;;;;7988:7;7980:64;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8057:27;8077:3;8082:1;8057:19;:27::i;:::-;8050:34;;;;7767:322;;;:::o;1552:94:20:-;1600:15;;:::i;:::-;1630:11;;;;;;;;1639:1;1630:11;;;1623:18;;1552:94;;;:::o;10306:108::-;10374:4;10393:16;10397:1;10400:8;:6;:8::i;:::-;10393:3;:16::i;:::-;10386:23;;10306:108;;;:::o;10151:119::-;10228:4;10258:1;:7;;;10247:1;:7;;;:18;10240:25;;10151:119;;;;:::o;10074:112:96:-;10140:4;10180:1;10159:8;:18;;;:22;10152:29;;10074:112;;;:::o;50054:298:92:-;50193:4;50221:8;:15;;;;50213:5;:23;50205:79;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;50297:17;:8;:15;:17::i;:::-;:50;;;;;50337:10;50318:8;50327:5;50318:15;;;;;;;;;;;;;;;;:29;50297:50;50290:57;;50054:298;;;;;:::o;48435:899::-;48522:4;48534:35;;:::i;:::-;48572:137;48616:87;48658:23;:44;;48616:87;;;;;;;;;;;;;;;;;:23;:32;;:41;;;;;;;;;;;;;;;;;;;:87;;;;:::i;:::-;48572:8;:36;;:137;;;;:::i;:::-;48534:175;;48752:1;48720:8;:21;;:28;;;;:33;48716:188;;;48789:37;;:::i;:::-;48829:32;48854:1;48829:32;:16;:32::i;:::-;48789:72;;48876:21;48887:9;48876:7;:10;;:21;;;;:::i;:::-;48869:28;;;;;;48716:188;48915:9;48927:1;48915:13;;48910:403;48934:8;:21;;:28;;;;48930:1;:32;48910:403;;;48986:17;49006:96;49065:8;:21;;49087:1;49065:24;;;;;;;;;;;;;;;;;;:29;;49006:96;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:49;:96::i;:::-;48986:116;;49110:37;;:::i;:::-;49150:90;49176:8;:21;;49198:1;49176:24;;;;;;;;;;;;;;;;;;:36;;;;;;;;;;;;49222:10;49150:16;:90::i;:::-;49110:130;;49252:22;49264:9;49252:7;:11;;:22;;;;:::i;:::-;49248:59;;;49293:5;49286:12;;;;;;;;49248:59;48910:403;;48968:8;48974:1;48968;:5;;:8;;;;:::i;:::-;48964:12;;48910:403;;;;49325:4;49318:11;;;48435:899;;;;:::o;18923:573::-;19024:26;19052:15;19077:35;19115:9;:21;19125:10;19115:21;;;;;;;;;;;19077:59;;19150:48;19170:8;19180:10;19192:5;19150:19;:48::i;:::-;19142:82;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;19230:21;19254:34;19279:8;19254:24;:34::i;:::-;19230:58;;19298:43;19325:8;19335:5;19298:26;:43::i;:::-;19294:168;;;19351:51;19374:8;19384:10;19396:5;19351:22;:51::i;:::-;19418:8;19428:26;19410:45;;;;;;;;19294:168;19475:8;19485:5;19467:24;;;;;;18923:573;;;;;;:::o;3419:135:36:-;3465:9;3499:8;;;;;;;;;;;:27;;;1093:28;;;;;;;;;;;;;;;;49:4:-1;39:7;30;26:21;22:32;13:7;6:49;1093:28:36;;;1083:39;;;;;;3499:49;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;3499:49:36;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;3499:49:36;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;3499:49:36;;;;;;;;;;;;;;;;3482:67;;3419:135;:::o;4606:144::-;4654:11;4692:8;;;;;;;;;;;:27;;;2132:30;;;;;;;;;;;;;;;;49:4:-1;39:7;30;26:21;22:32;13:7;6:49;2132:30:36;;;2122:41;;;;;;4692:52;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;4692:52:36;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;4692:52:36;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;4692:52:36;;;;;;;;;;;;;;;;4673:72;;4606:144;:::o;834:176:3:-;892:7;911:9;927:1;923;:5;911:17;;951:1;946;:6;;938:46;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1002:1;995:8;;;834:176;;;;:::o;27337:2243:92:-;27544:19;27566:6;:15;27573:7;27566:15;;;;;;;;;;;;;;;27544:37;;27588;27628:5;:21;;:28;27650:5;27628:28;;;;;;;;;;;27588:68;;27700:10;27667:18;:29;;;:43;27663:1452;;28179:8;:19;;;;28199:1;28202;28205;28208:8;28218:7;28227:12;28179:61;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;28179:61:92;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;28179:61:92;;;;27663:1452;;;28297:1;28257:18;:36;;;:41;28253:862;;28396:8;:19;;;;28464:23;28425:62;;;;;;;;:18;:35;;;;;;;;;;;;:62;;;;;;;;;:125;;28549:1;28425:125;;;28500:18;:36;;;28425:125;28599:22;28560:61;;;;;;;;:18;:35;;;;;;;;;;;;:61;;;;;;;;;:124;;28683:1;28560:124;;;28634:18;:36;;;28560:124;28733:27;28694:66;;;;;;;;:18;:35;;;;;;;;;;;;:66;;;;;;;;;:129;;28822:1;28694:129;;;28773:18;:36;;;28694:129;28833:8;28851:7;28868:12;28396:492;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;28396:492:92;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;28396:492:92;;;;28253:862;;;28910:8;:19;;;;28939:18;:27;;;28976:18;:26;;;29012:18;:31;;;29053:8;29071:7;29088:12;28910:198;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;28910:198:92;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;28910:198:92;;;;28253:862;27663:1452;29146:15;:13;:15::i;:::-;:34;;;:36;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;29146:36:92;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;29146:36:92;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;29146:36:92;;;;;;;;;;;;;;;;29121:8;:22;;:61;;;;29219:126;;;;;;;;29237:24;29219:126;;;;;;;;;;;;29269:10;29219:126;;;;29287:1;29219:126;;;;29296:8;29219:126;;;;29312:7;29219:126;;;;29327:12;29219:126;;;29188:5;:21;;:28;29210:5;29188:28;;;;;;;;;;;:157;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;29376:9;:45;29386:5;:34;;;29376:45;;;;;;;;;;;:55;;;29355:8;:18;;;:76;29351:144;;;29478:10;29441:5;:34;;:47;;;;29351:144;29534:7;29506:69;;29522:10;29506:69;29543:8;29553:7;29562:12;29506:69;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;27337:2243;;;;;;;;;:::o;57180:2421::-;57290:19;57312:6;:15;57319:7;57312:15;;;;;;;;;;;;;;;57290:37;;57339:13;57355:1;57339:17;;57334:2263;57366:8;:15;;;;57358:5;:23;57334:2263;;;57413:35;57451:9;:26;57461:8;57470:5;57461:15;;;;;;;;;;;;;;;;57451:26;;;;;;;;;;;57413:64;;57485:23;57550:26;57512:64;;;;;;;;:34;57537:8;57512:24;:34::i;:::-;:64;;;;;;;;;57485:92;;57591:18;57586:52;;57621:8;;;;57586:52;57646:29;57678:5;:21;;:28;57700:5;57678:28;;;;;;;;;;;57646:60;;57714:18;57735:72;57783:10;:23;;;57735:43;57759:10;:18;;;57735:10;:19;;;:23;;:43;;;;:::i;:::-;:47;;:72;;;;:::i;:::-;57714:93;;57833:14;57820:10;:27;57816:1775;;;57859:16;57878:30;57893:14;57878:10;:14;;:30;;;;:::i;:::-;57859:49;;57919:23;57945:62;57961:8;57971:10;:23;;;57996:10;57945:15;:62::i;:::-;57919:88;;58017:19;58039:58;58055:8;58065:10;:19;;;58086:10;58039:15;:58::i;:::-;58017:80;;58107:18;58128:57;58144:8;58154:10;:18;;;58174:10;58128:15;:57::i;:::-;58107:78;;58196:20;58219:48;58256:10;58219:32;58239:11;58219:15;:19;;:32;;;;:::i;:::-;:36;;:48;;;;:::i;:::-;58196:71;;58278:16;58297:36;58321:11;58297:10;:19;;;:23;;:36;;;;:::i;:::-;58278:55;;58343:15;58361:34;58384:10;58361;:18;;;:22;;:34;;;;:::i;:::-;58343:52;;58405:20;58428:44;58456:15;58428:10;:23;;;:27;;:44;;;;:::i;:::-;58405:67;;58502:8;58487:12;:23;58483:774;;;58563:24;58590:26;58603:12;58590:8;:12;;:26;;;;:::i;:::-;58563:53;;58629:24;58656:36;58665:16;58683:8;58656;:36::i;:::-;58629:63;;58715:30;58728:16;58715:8;:12;;:30;;;;:::i;:::-;58704:41;;58776:38;58797:16;58776;:20;;:38;;;;:::i;:::-;58757:57;;58851:1;58831:16;:21;58827:232;;58887:35;58896:16;58914:7;58887:8;:35::i;:::-;58868:54;;58946:29;58958:16;58946:7;:11;;:29;;;;:::i;:::-;58936:39;;59008:38;59029:16;59008;:20;;:38;;;;:::i;:::-;58989:57;;58827:232;59095:1;59075:16;:21;59071:176;;59131:40;59140:16;59158:12;59131:8;:40::i;:::-;59112:59;;59200:34;59217:16;59200:12;:16;;:34;;;;:::i;:::-;59185:49;;59071:176;58483:774;;;59267:8;:19;;;;59298:10;:19;;;59329:10;:18;;;59359:10;:23;;;59394:8;59414:7;59433:12;59267:188;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;59267:188:92;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;59267:188:92;;;;59492:12;59466:10;:23;;:38;;;;59536:8;59514:10;:19;;:30;;;;59575:7;59554:10;:18;;:28;;;;57816:1775;;;;;;;;;57334:2263;;;;;57391:12;57401:1;57391:5;:9;;:12;;;;:::i;:::-;57383:20;;57334:2263;;;;57180:2421;;;:::o;3177:379:35:-;3280:7;3388:19;3424:9;3410:11;:23;;;;;;3388:45;;3470:1;3457:9;3443:11;:23;;;;;;:28;3439:113;;;3488:11;3481:18;;;;;3439:113;3527:18;3543:1;3527:11;:15;;:18;;;;:::i;:::-;3520:25;;;3177:379;;;;;:::o;358:104:2:-;416:7;446:1;442;:5;:13;;454:1;442:13;;;450:1;442:13;435:20;;358:104;;;;:::o;51941:223:92:-;52046:4;52124:35;52147:11;;52124:8;:18;;;:22;;:35;;;;:::i;:::-;52117:3;:42;;52110:49;;51941:223;;;:::o;1274:134:3:-;1332:7;1358:43;1362:1;1365;1358:43;;;;;;;;;;;;;;;;;:3;:43::i;:::-;1351:50;;1274:134;;;;:::o;2587:365:8:-;2701:6;2676:21;:31;;2668:73;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2807:12;2825:9;:14;;2846:6;2825:32;;;;;;;;;;;;;;;;;;;;;;;14:1:-1;21;16:31;;;;75:4;69:11;64:16;;144:4;140:9;133:4;115:16;111:27;107:43;104:1;100:51;94:4;87:65;169:16;166:1;159:27;225:16;222:1;215:4;212:1;208:12;193:49;7:242;;16:31;36:4;31:9;;7:242;;2806:51:8;;;2875:7;2867:78;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2587:365;;;:::o;9309:255:35:-;9393:7;9429:13;9439:2;9429:5;:9;;:13;;;;:::i;:::-;9416:2;:9;:26;;9408:59;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;9473:9;9535:2;9528:5;9524:14;9520:2;9516:23;9510:30;9505:35;;9558:1;9551:8;;;9309:255;;;;:::o;9801:111:96:-;9871:4;9890:8;:17;;;;;;;;;;;;9883:24;;9801:111;;;:::o;52464:337:92:-;52602:21;:8;:19;:21::i;:::-;:52;;;;;52653:1;52627:8;:22;;;:27;;52602:52;52598:110;;;52664:37;52692:8;52664:27;:37::i;:::-;52598:110;52731:1;52713:8;52722:5;52713:15;;;;;;;;;;;;;;;:19;;;;52738:12;52756:5;52738:24;;39:1:-1;33:3;27:10;23:18;57:10;52:3;45:23;79:10;72:17;;0:93;52738:24:92;;;;;;;;;;;;;;;;;;;;;;52775:9;:21;52785:10;52775:21;;;;;;;;;;;;52768:28;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;52464:337;;;:::o;18385:268::-;18456:4;18472:20;18481:10;18472:8;:20::i;:::-;:59;;;;;18496:35;18520:10;18496:23;:35::i;:::-;18472:59;18468:163;;;18541:5;:12;;;;18554:10;18541:24;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;18541:24:92;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;18541:24:92;;;;18594:10;18578:27;;;;;;;;;;18620:4;18613:11;;;;18468:163;18643:5;18636:12;;18385:268;;;;:::o;60358:839::-;60464:15;60489:22;60514:91;60575:14;:24;;;60514:49;60537:14;:25;;;60514:8;:18;;;:22;;:49;;;;:::i;:::-;:53;;:91;;;;:::i;:::-;60489:116;;60679:14;60672:3;:21;;:231;;;;;60736:1;60704:8;:21;;:28;;;;:33;;:157;;;;60840:21;:8;:19;:21::i;:::-;60839:22;60704:157;:198;;;;60874:28;60893:8;60874:18;:28::i;:::-;60873:29;60704:198;60672:231;60661:297;;;60925:26;60918:33;;;;;60661:297;60980:44;60999:14;:24;;;60980:14;:18;;:44;;;;:::i;:::-;60963:61;;61091:14;61084:3;:21;61080:74;;61122:25;61115:32;;;;;61080:74;61166:26;61159:33;;;60358:839;;;;:::o;50976:439::-;51106:4;51304:25;51296:33;;;;;;;;:5;:33;;;;;;;;;51295:114;;;;51349:26;51341:34;;;;;;;;:5;:34;;;;;;;;;:67;;;;;51380:28;51399:8;51380:18;:28::i;:::-;51379:29;51341:67;51295:114;51287:123;;50976:439;;;;:::o;8999:150:35:-;9083:7;9113:30;9133:2;9137:5;9113:19;:30::i;:::-;9105:39;;9098:46;;8999:150;;;;:::o;2416:237:96:-;2555:1;2529:14;2523:28;:33;;2515:87;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2634:14;2608:8;:23;;:40;;;;;;;;;;;;:::i;:::-;;2416:237;;:::o;182:105:2:-;240:7;271:1;266;:6;;:14;;279:1;266:14;;;275:1;266:14;259:21;;182:105;;;;:::o;788:96:0:-;833:15;867:10;860:17;;788:96;:::o;54385:571:92:-;54486:27;;:::i;:::-;54560:37;;:::i;:::-;54600:28;1294:24;54600:16;:28::i;:::-;54560:68;;54707:1;54638:65;:12;:25;54651:11;54638:25;;;;;;;;;;;;;;;:44;;:56;54683:10;54638:56;;;;;;;;;;;;;;;;;:63;;;;;;;;;;;;;;;;;;:65::i;:::-;:70;54634:296;;54730:12;:25;54743:11;54730:25;;;;;;;;;;;;;;;:44;;:56;54775:10;54730:56;;;;;;;;;;;;;;;;;54718:68;;;;;;;;;;;;;;;;;;;54634:296;;;54858:1;54803:51;:12;:25;54816:11;54803:25;;;;;;;;;;;;;;;:42;;:49;;;;;;;;;;;;;;;;;;:51::i;:::-;:56;54799:131;;54881:12;:25;54894:11;54881:25;;;;;;;;;;;;;;;:42;;54869:54;;;;;;;;;;;;;;;;;;;54799:131;54634:296;54942:9;54935:16;;;54385:571;;;;:::o;1724:92:20:-;1782:7;1804:1;:7;;;1797:14;;1724:92;;;:::o;2178:225:4:-;2271:1;2251:22;;:8;:22;;;;2243:73;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2360:8;2331:38;;2352:6;;;;;;;;;;;2331:38;;;;;;;;;;;;2388:8;2379:6;;:17;;;;;;;;;;;;;;;;;;2178:225;:::o;8827:368:96:-;8905:7;8914;8923;8932;8941:14;8957:7;8966:4;8995:8;:17;;;;;;;;;;;;9020:8;:16;;;9044:8;:18;;;9070:8;:21;;:28;;;;9106:8;:23;;9137:8;:22;;;9167:8;:17;;;;;;;;;;;;8980:210;;;;;;;;;;;;;;;;;8827:368;;;;;;;;;:::o;3108:980::-;3316:15;;:::i;:::-;3371:12;:19;3354:6;:13;:36;:81;;;;;3417:11;:18;3394:12;:19;:41;3354:81;3339:133;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3478:24;3505:6;:13;3478:40;;3525:24;;:::i;:::-;3575:8;3555;:17;;:28;;;;;;;;;;;3608:7;3589:8;:16;;:26;;;;;3692:3;3671:8;:18;;:24;;;;;3702:20;3725:1;3702:24;;3774:16;3756:35;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;3732:8;:21;;:59;;;;3802:9;3814:1;3802:13;;3797:266;3821:16;3817:1;:20;3797:266;;;3888:113;;;;;;;;3909:6;3916:1;3909:9;;;;;;;;;;;;;;3888:113;;;;3928:12;3941:1;3928:15;;;;;;;;;;;;;;3888:113;;;;;;3953:40;3964:12;3978:11;3990:1;3978:14;;;;;;;;;;;;;;3953:4;:10;;:40;;;;;:::i;:::-;3888:113;;;3861:8;:21;;;3883:1;3861:24;;;;;;;;;;;;;:140;;;;4024:32;4041:11;4053:1;4041:14;;;;;;;;;;;;;;4024:12;:16;;:32;;;;:::i;:::-;4009:47;;3843:8;3849:1;3843;:5;;:8;;;;:::i;:::-;3839:12;;3797:266;;;;4075:8;4068:15;;;;;3108:980;;;;;;;;:::o;5600:108::-;5661:42;5681:8;:21;;;5661:19;:42::i;:::-;5600:108;:::o;9422:195::-;9507:7;9516;9525;9550:8;:14;;:18;;;9570:8;:14;;:17;;;9589:8;:14;;:22;;;9542:70;;;;;;9422:195;;;;;:::o;2159:459:3:-;2217:7;2463:1;2458;:6;2454:45;;;2487:1;2480:8;;;;2454:45;2509:9;2525:1;2521;:5;2509:17;;2553:1;2548;2544;:5;;;;;;:10;2536:56;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2610:1;2603:8;;;2159:459;;;;;:::o;3073:130::-;3131:7;3157:39;3161:1;3164;3157:39;;;;;;;;;;;;;;;;;:3;:39::i;:::-;3150:46;;3073:130;;;;:::o;1230:97:20:-;1271:15;;:::i;:::-;1301:21;;;;;;;;1046:25;1301:21;;;1294:28;;1230:97;:::o;9999:116::-;10073:4;10103:1;:7;;;10092:1;:7;;;:18;;10085:25;;9999:116;;;;:::o;6256:1636::-;6335:15;;:::i;:::-;6373:1;6362;:7;;;:12;:28;;;;6389:1;6378;:7;;;:12;6362:28;6358:52;;;6399:11;;;;;;;;6408:1;6399:11;;;6392:18;;;;6358:52;1046:25;6420:1;:7;;;:22;6416:36;;;6451:1;6444:8;;;;6416:36;1046:25;6462:1;:7;;;:22;6458:36;;;6493:1;6486:8;;;;6458:36;6583:10;1046:25;6596:10;6604:1;6596:7;:10::i;:::-;:16;;;:30;;;;;;6583:43;;6632:10;6645:13;6656:1;6645:10;:13::i;:::-;:19;;;6632:32;;6670:10;1046:25;6683:10;6691:1;6683:7;:10::i;:::-;:16;;;:30;;;;;;6670:43;;6719:10;6732:13;6743:1;6732:10;:13::i;:::-;:19;;;6719:32;;6835:12;6855:2;6850;:7;6835:22;;6873:1;6867:2;:7;6863:63;;6897:2;6891;6884:4;:9;;;;;;:15;6876:50;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6863:63;7025:18;1046:25;7046:4;:18;7025:39;;7082:1;7074:4;:9;7070:91;;1046:25;7106:4;7093:10;:17;;;;;;:32;7085:76;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;7070:91;7174:10;7167:17;;7191:12;7211:2;7206;:7;7191:22;;7229:1;7223:2;:7;7219:63;;7253:2;7247;7240:4;:9;;;;;;:15;7232:50;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;7219:63;7289:12;7309:2;7304;:7;7289:22;;7327:1;7321:2;:7;7317:63;;7351:2;7345;7338:4;:9;;;;;;:15;7330:50;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;7317:63;7397:14;:12;:14::i;:::-;7392:2;:19;;;;;;7387:24;;7427:14;:12;:14::i;:::-;7422:2;:19;;;;;;7417:24;;7447:12;7467:2;7462;:7;7447:22;;7485:1;7479:2;:7;7475:63;;7509:2;7503;7496:4;:9;;;;;;:15;7488:50;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;7475:63;7622:22;;:::i;:::-;7647:14;;;;;;;;7656:4;7647:14;;;7622:39;;7676:27;7680:6;7688:14;;;;;;;;7697:4;7688:14;;;7676:3;:27::i;:::-;7667:36;;7745:27;7749:6;7757:14;;;;;;;;7766:4;7757:14;;;7745:3;:27::i;:::-;7736:36;;7814:27;7818:6;7826:14;;;;;;;;7835:4;7826:14;;;7814:3;:27::i;:::-;7805:36;;7881:6;7874:13;;;;;;;;;;;;6256:1636;;;;;:::o;6598:693:96:-;6733:27;;:::i;:::-;6768:16;6787:8;:14;;:18;;;6768:37;;6827:1;6815:8;:13;6811:64;;;6845:23;6866:1;6845:20;:23::i;:::-;6838:30;;;;;6811:64;6880:15;6898:8;:14;;:17;;;6880:35;;6921:18;6942:49;6968:8;:14;;:22;;;6942:21;6955:7;6942:8;:12;;:21;;;;:::i;:::-;:25;;:49;;;;:::i;:::-;6921:70;;6997:21;7021:87;:68;7044:44;7065:8;:22;;;7044:20;:44::i;:::-;7021:6;:22;;:68;;;;:::i;:::-;:85;:87::i;:::-;6997:111;;7134:10;7118:13;:26;7114:99;;;7164:42;7176:29;7194:10;7176:13;:17;;:29;;;;:::i;:::-;7164:7;:11;;:42;;;;:::i;:::-;7154:52;;7114:99;7225:61;7254:8;7264:21;7277:7;7264:8;:12;;:21;;;;:::i;:::-;7225:28;:61::i;:::-;7218:68;;;;;;6598:693;;;;;:::o;9548:114:20:-;9621:4;9650:1;:7;;;9640:1;:7;;;:17;9633:24;;9548:114;;;;:::o;215:219:16:-;292:6;425:2;412:5;418:1;412:8;;;;;;;;;;;;;;;;405:16;;;:22;;;;;392:2;379:5;385:1;379:8;;;;;;;;;;;;;;;;372:16;;;:22;;;;;360:1;347:5;353:1;347:8;;;;;;;;;;;;;;;;340:16;;;:21;;;;;321:5;327:1;321:8;;;;;;;;;;;;;;;;314:16;;;:48;:81;:114;306:123;;215:219;;;:::o;59857:290:92:-;59977:7;60007:135;:114;60070:50;60099:5;60106:13;60070:28;:50::i;:::-;60007:44;60037:13;60007:29;:44::i;:::-;:62;;:114;;;;:::i;:::-;:133;:135::i;:::-;59994:148;;59857:290;;;;;:::o;1732:187:3:-;1818:7;1850:1;1845;:6;;1853:12;1837:29;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;80:1;75:3;71:11;64:39;52:2;49:1;45:10;40:15;;8:100;;;12:14;1837:29:3;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1876:9;1892:1;1888;:5;1876:17;;1911:1;1904:8;;;1732:187;;;;;:::o;53016:827:92:-;53104:41;;:::i;:::-;53148:27;:8;:25;:27::i;:::-;53104:71;;53181:50;;:::i;:::-;53234:80;53264:23;:44;;53234:80;;;;;;;;;;;;;;;;;:13;:22;;:80;;;;:::i;:::-;53181:133;;53320:45;;:::i;:::-;53368:130;53417:75;53447:23;:44;;53417:75;;;;;;;;;;;;;;;;;:20;:18;:20::i;:::-;:29;;:75;;;;:::i;:::-;53368:23;:32;;:41;;;;;;;;;;;;;;;;;;;:130;;;;:::i;:::-;53320:178;;53539:45;53566:17;53539:22;:26;;:45;;;;:::i;:::-;53504:23;:32;;:80;;;;;;;;;;;53594:74;53630:23;:37;;53594:74;;;;;;;;;;;;;;;;;:23;:32;;:35;;;;;;;;;;;;;;;;;;;:74;;;;:::i;:::-;53590:167;;;53713:23;:37;;53678:23;:32;;:72;;;;;;;;;;;53590:167;53767:71;53796:41;:23;:32;;:39;;;;;;;;;;;;;;;;;;:41::i;:::-;53767:71;;;;;;;;;;;;;;;;;;53016:827;;;;:::o;9430:2536:182:-;9570:12;9633:7;9624:6;:16;9606:6;:13;:35;;9598:44;;;;;;9653:22;9723:7;9716:15;9749:1;9744:1967;;;;11852:4;11846:11;11833:24;;11903:4;11892:9;11888:20;11882:4;11875:34;9709:2214;;9744:1967;9926:4;9920:11;9907:24;;10585:2;10576:7;10572:16;10967:9;10960:17;10954:4;10950:28;10938:9;10927;10923:25;10919:60;11015:7;11011:2;11007:16;11267:6;11253:9;11246:17;11240:4;11236:28;11224:9;11216:6;11212:22;11208:57;11204:70;11041:425;11300:3;11296:2;11293:11;11041:425;;;11444:2;11438:9;11434:2;11427:21;11341:4;11337:2;11333:13;11327:19;;11381:4;11377:2;11373:13;11367:19;;11041:425;;;11045:247;11502:7;11491:9;11484:26;11692:2;11688:7;11683:2;11679;11675:11;11671:25;11665:4;11658:39;9751:1960;;;9709:2214;;11950:9;11943:16;;;9430:2536;;;;;:::o;5712:384:96:-;5796:9;5808:1;5796:13;;5791:301;5815:12;:19;5811:1;:23;5791:301;;;5875:165;5899:12;5912:1;5899:15;;;;;;;;;;;;;;:27;;;5938:12;5951:1;5938:15;;;;;;;;;;;;;;:21;;;5971:12;5984:1;5971:15;;;;;;;;;;;;;;:20;;;:27;6010:12;6023:1;6010:15;;;;;;;;;;;;;;:20;;;5875:12;:165::i;:::-;5858:227;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5840:8;5846:1;5840;:5;;:8;;;;:::i;:::-;5836:12;;5791:301;;;;5712:384;:::o;3718:338:3:-;3804:7;3901:1;3897;:5;3904:12;3889:28;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;80:1;75:3;71:11;64:39;52:2;49:1;45:10;40:15;;8:100;;;12:14;3889:28:3;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3927:9;3943:1;3939;:5;;;;;;3927:17;;4048:1;4041:8;;;3718:338;;;;;:::o;4118:159:20:-;4177:15;;:::i;:::-;4207:47;;;;;;;;1046:25;;4217:1;:7;;;:21;;;;;;4216:37;4207:47;;;4200:54;;4118:159;;;:::o;4564:172::-;4626:15;;:::i;:::-;4656:57;;;;;;;;1046:25;;4676:1;:7;;;:21;;;;;;4675:37;4665:1;:7;;;:47;4656:57;;;4649:64;;4564:172;;;:::o;1955:87::-;2002:7;2024:13;2017:20;;1955:87;:::o;5108:207::-;5182:15;;:::i;:::-;5205:9;5227:1;:7;;;5217:1;:7;;;:17;5205:29;;5253:1;:7;;;5248:1;:12;;5240:46;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5299:11;;;;;;;;5308:1;5299:11;;;5292:18;;;5108:207;;;;:::o;2597:203::-;2649:15;;:::i;:::-;2685:13;:11;:13::i;:::-;2680:1;:18;;2672:85;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2770:25;;;;;;;;1046;2779:1;:15;2770:25;;;2763:32;;2597:203;;;:::o;2959:109::-;3020:7;1046:25;3042:1;:7;;;:21;;;;;;3035:28;;2959:109;;;:::o;3565:314::-;3666:15;;:::i;:::-;3691:34;;:::i;:::-;3728:19;3737:9;3728:8;:19::i;:::-;3691:56;;3753:36;;:::i;:::-;3792:21;3801:11;3792:8;:21::i;:::-;3753:60;;3826:48;3833:18;3853:20;3826:6;:48::i;:::-;3819:55;;;;3565:314;;;;:::o;7527:297:96:-;7615:27;;:::i;:::-;7652:18;7673:69;7719:8;:14;;:22;;;7673:41;7696:8;:14;;:17;;;7673:8;:14;;:18;;;:22;;:41;;;;:::i;:::-;:45;;:69;;;;:::i;:::-;7652:90;;7755:64;7784:10;7796:8;:22;;;7755:28;:64::i;:::-;7748:71;;;7527:297;;;:::o;5391:209:20:-;5470:15;;:::i;:::-;5512:1;:7;;;5501:1;:7;;;:18;;5493:62;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5568:27;;;;;;;;5587:1;:7;;;5577:1;:7;;;:17;5568:27;;;5561:34;;5391:209;;;;:::o;9849:114::-;9922:4;9951:1;:7;;;9941:1;:7;;;:17;9934:24;;9849:114;;;;:::o;10695:1216:96:-;10817:4;10831:11;10866:1;10853:10;:14;10849:88;;;10877:31;10896:11;10877:18;:31::i;:::-;10869:68;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;10849:88;11065:4;11059:11;11190:2;11184:4;11180:13;11730:1;11719;11626:10;11615:1;11600:5;11579:11;11298:5;11293:3;11289:15;11275:520;11265:530;;10998:846;;11900:6;11893:13;;;10695:1216;;;;;;:::o;2213:127:20:-;2259:7;2281:54;2274:61;;2213:127;:::o;9230:283::-;9307:15;;:::i;:::-;9349:1;9338;:7;;;:12;;9330:42;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;9378:9;1046:25;9390:1;:7;;;:21;9378:33;;9444:1;:7;;;1046:25;9425:1;:15;;;;;;:26;9417:57;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;9487:21;;;;;;;;9500:1;:7;;;9496:1;:11;;;;;;9487:21;;;9480:28;;;9230:283;;;;:::o;686:610:8:-;746:4;1004:16;1030:19;1052:66;1030:88;;;;1219:7;1207:20;1195:32;;1258:11;1246:8;:23;;:42;;;;;1285:3;1273:15;;:8;:15;;1246:42;1238:51;;;;686:610;;;:::o;55:1135:123:-;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;:::o",
  "source": "pragma solidity ^0.5.13;\n\nimport \"../Governance.sol\";\n\ncontract GovernanceTest is Governance(true) {\n  address[] validatorSet;\n\n  // Minimally override core functions from UsingPrecompiles\n  function numberValidatorsInCurrentSet() public view returns (uint256) {\n    return validatorSet.length;\n  }\n\n  function numberValidatorsInSet(uint256) public view returns (uint256) {\n    return validatorSet.length;\n  }\n\n  function validatorSignerAddressFromCurrentSet(uint256 index) public view returns (address) {\n    return validatorSet[index];\n  }\n\n  // Expose test utilities\n  function addValidator(address validator) external {\n    validatorSet.push(validator);\n  }\n\n  // exposes removeVotesWhenRevokingDelegatedVotes for tests\n  function removeVotesWhenRevokingDelegatedVotesTest(address account, uint256 maxAmountAllowed)\n    public\n  {\n    _removeVotesWhenRevokingDelegatedVotes(account, maxAmountAllowed);\n  }\n\n  function setDeprecatedWeight(address voterAddress, uint256 proposalIndex, uint256 weight)\n    external\n  {\n    Voter storage voter = voters[voterAddress];\n    VoteRecord storage voteRecord = voter.referendumVotes[proposalIndex];\n    voteRecord.deprecated_weight = weight;\n  }\n}\n",
  "ast": {
    "absolutePath": "project:/contracts/governance/test/GovernanceTest.sol",
    "exportedSymbols": {
      "GovernanceTest": [
        44577
      ]
    },
    "id": 44578,
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 44483,
        "literals": [
          "solidity",
          "^",
          "0.5",
          ".13"
        ],
        "nodeType": "PragmaDirective",
        "src": "0:24:123"
      },
      {
        "absolutePath": "project:/contracts/governance/Governance.sol",
        "file": "../Governance.sol",
        "id": 44484,
        "nodeType": "ImportDirective",
        "scope": 44578,
        "sourceUnit": 34298,
        "src": "26:27:123",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "baseContracts": [
          {
            "arguments": [
              {
                "argumentTypes": null,
                "hexValue": "74727565",
                "id": 44486,
                "isConstant": false,
                "isLValue": false,
                "isPure": true,
                "kind": "bool",
                "lValueRequested": false,
                "nodeType": "Literal",
                "src": "93:4:123",
                "subdenomination": null,
                "typeDescriptions": {
                  "typeIdentifier": "t_bool",
                  "typeString": "bool"
                },
                "value": "true"
              }
            ],
            "baseName": {
              "contractScope": null,
              "id": 44485,
              "name": "Governance",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 34297,
              "src": "82:10:123",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_Governance_$34297",
                "typeString": "contract Governance"
              }
            },
            "id": 44487,
            "nodeType": "InheritanceSpecifier",
            "src": "82:16:123"
          }
        ],
        "contractDependencies": [
          26,
          481,
          7598,
          11461,
          11867,
          12683,
          17579,
          34297,
          43527
        ],
        "contractKind": "contract",
        "documentation": null,
        "fullyImplemented": true,
        "id": 44577,
        "linearizedBaseContracts": [
          44577,
          34297,
          11461,
          11867,
          17579,
          7598,
          481,
          26,
          12683,
          43527
        ],
        "name": "GovernanceTest",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "constant": false,
            "id": 44490,
            "name": "validatorSet",
            "nodeType": "VariableDeclaration",
            "scope": 44577,
            "src": "103:22:123",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_array$_t_address_$dyn_storage",
              "typeString": "address[]"
            },
            "typeName": {
              "baseType": {
                "id": 44488,
                "name": "address",
                "nodeType": "ElementaryTypeName",
                "src": "103:7:123",
                "stateMutability": "nonpayable",
                "typeDescriptions": {
                  "typeIdentifier": "t_address",
                  "typeString": "address"
                }
              },
              "id": 44489,
              "length": null,
              "nodeType": "ArrayTypeName",
              "src": "103:9:123",
              "typeDescriptions": {
                "typeIdentifier": "t_array$_t_address_$dyn_storage_ptr",
                "typeString": "address[]"
              }
            },
            "value": null,
            "visibility": "internal"
          },
          {
            "body": {
              "id": 44498,
              "nodeType": "Block",
              "src": "261:37:123",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "expression": {
                      "argumentTypes": null,
                      "id": 44495,
                      "name": "validatorSet",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 44490,
                      "src": "274:12:123",
                      "typeDescriptions": {
                        "typeIdentifier": "t_array$_t_address_$dyn_storage",
                        "typeString": "address[] storage ref"
                      }
                    },
                    "id": 44496,
                    "isConstant": false,
                    "isLValue": true,
                    "isPure": false,
                    "lValueRequested": false,
                    "memberName": "length",
                    "nodeType": "MemberAccess",
                    "referencedDeclaration": null,
                    "src": "274:19:123",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "functionReturnParameters": 44494,
                  "id": 44497,
                  "nodeType": "Return",
                  "src": "267:26:123"
                }
              ]
            },
            "documentation": null,
            "id": 44499,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "numberValidatorsInCurrentSet",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 44491,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "228:2:123"
            },
            "returnParameters": {
              "id": 44494,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 44493,
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 44499,
                  "src": "252:7:123",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 44492,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "252:7:123",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "251:9:123"
            },
            "scope": 44577,
            "src": "191:107:123",
            "stateMutability": "view",
            "superFunction": 11174,
            "visibility": "public"
          },
          {
            "body": {
              "id": 44509,
              "nodeType": "Block",
              "src": "372:37:123",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "expression": {
                      "argumentTypes": null,
                      "id": 44506,
                      "name": "validatorSet",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 44490,
                      "src": "385:12:123",
                      "typeDescriptions": {
                        "typeIdentifier": "t_array$_t_address_$dyn_storage",
                        "typeString": "address[] storage ref"
                      }
                    },
                    "id": 44507,
                    "isConstant": false,
                    "isLValue": true,
                    "isPure": false,
                    "lValueRequested": false,
                    "memberName": "length",
                    "nodeType": "MemberAccess",
                    "referencedDeclaration": null,
                    "src": "385:19:123",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "functionReturnParameters": 44505,
                  "id": 44508,
                  "nodeType": "Return",
                  "src": "378:26:123"
                }
              ]
            },
            "documentation": null,
            "id": 44510,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "numberValidatorsInSet",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 44502,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 44501,
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 44510,
                  "src": "333:7:123",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 44500,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "333:7:123",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "332:9:123"
            },
            "returnParameters": {
              "id": 44505,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 44504,
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 44510,
                  "src": "363:7:123",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 44503,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "363:7:123",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "362:9:123"
            },
            "scope": 44577,
            "src": "302:107:123",
            "stateMutability": "view",
            "superFunction": 11210,
            "visibility": "public"
          },
          {
            "body": {
              "id": 44521,
              "nodeType": "Block",
              "src": "504:37:123",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "baseExpression": {
                      "argumentTypes": null,
                      "id": 44517,
                      "name": "validatorSet",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 44490,
                      "src": "517:12:123",
                      "typeDescriptions": {
                        "typeIdentifier": "t_array$_t_address_$dyn_storage",
                        "typeString": "address[] storage ref"
                      }
                    },
                    "id": 44519,
                    "indexExpression": {
                      "argumentTypes": null,
                      "id": 44518,
                      "name": "index",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 44512,
                      "src": "530:5:123",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "isConstant": false,
                    "isLValue": true,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "IndexAccess",
                    "src": "517:19:123",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "functionReturnParameters": 44516,
                  "id": 44520,
                  "nodeType": "Return",
                  "src": "510:26:123"
                }
              ]
            },
            "documentation": null,
            "id": 44522,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "validatorSignerAddressFromCurrentSet",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 44513,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 44512,
                  "name": "index",
                  "nodeType": "VariableDeclaration",
                  "scope": 44522,
                  "src": "459:13:123",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 44511,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "459:7:123",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "458:15:123"
            },
            "returnParameters": {
              "id": 44516,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 44515,
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 44522,
                  "src": "495:7:123",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 44514,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "495:7:123",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "494:9:123"
            },
            "scope": 44577,
            "src": "413:128:123",
            "stateMutability": "view",
            "superFunction": 11096,
            "visibility": "public"
          },
          {
            "body": {
              "id": 44533,
              "nodeType": "Block",
              "src": "622:39:123",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "id": 44530,
                        "name": "validator",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 44524,
                        "src": "646:9:123",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "expression": {
                        "argumentTypes": null,
                        "id": 44527,
                        "name": "validatorSet",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 44490,
                        "src": "628:12:123",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_address_$dyn_storage",
                          "typeString": "address[] storage ref"
                        }
                      },
                      "id": 44529,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "push",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": null,
                      "src": "628:17:123",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_arraypush_nonpayable$_t_address_$returns$_t_uint256_$",
                        "typeString": "function (address) returns (uint256)"
                      }
                    },
                    "id": 44531,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "628:28:123",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 44532,
                  "nodeType": "ExpressionStatement",
                  "src": "628:28:123"
                }
              ]
            },
            "documentation": null,
            "id": 44534,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "addValidator",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 44525,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 44524,
                  "name": "validator",
                  "nodeType": "VariableDeclaration",
                  "scope": 44534,
                  "src": "594:17:123",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 44523,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "594:7:123",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "593:19:123"
            },
            "returnParameters": {
              "id": 44526,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "622:0:123"
            },
            "scope": 44577,
            "src": "572:89:123",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "external"
          },
          {
            "body": {
              "id": 44546,
              "nodeType": "Block",
              "src": "833:76:123",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "id": 44542,
                        "name": "account",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 44536,
                        "src": "878:7:123",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "id": 44543,
                        "name": "maxAmountAllowed",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 44538,
                        "src": "887:16:123",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 44541,
                      "name": "_removeVotesWhenRevokingDelegatedVotes",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 34202,
                      "src": "839:38:123",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$",
                        "typeString": "function (address,uint256)"
                      }
                    },
                    "id": 44544,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "839:65:123",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 44545,
                  "nodeType": "ExpressionStatement",
                  "src": "839:65:123"
                }
              ]
            },
            "documentation": null,
            "id": 44547,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "removeVotesWhenRevokingDelegatedVotesTest",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 44539,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 44536,
                  "name": "account",
                  "nodeType": "VariableDeclaration",
                  "scope": 44547,
                  "src": "777:15:123",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 44535,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "777:7:123",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 44538,
                  "name": "maxAmountAllowed",
                  "nodeType": "VariableDeclaration",
                  "scope": 44547,
                  "src": "794:24:123",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 44537,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "794:7:123",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "776:43:123"
            },
            "returnParameters": {
              "id": 44540,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "833:0:123"
            },
            "scope": 44577,
            "src": "726:183:123",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": {
              "id": 44575,
              "nodeType": "Block",
              "src": "1018:170:123",
              "statements": [
                {
                  "assignments": [
                    44557
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 44557,
                      "name": "voter",
                      "nodeType": "VariableDeclaration",
                      "scope": 44575,
                      "src": "1024:19:123",
                      "stateVariable": false,
                      "storageLocation": "storage",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_Voter_$30465_storage_ptr",
                        "typeString": "struct Governance.Voter"
                      },
                      "typeName": {
                        "contractScope": null,
                        "id": 44556,
                        "name": "Voter",
                        "nodeType": "UserDefinedTypeName",
                        "referencedDeclaration": 30465,
                        "src": "1024:5:123",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_Voter_$30465_storage_ptr",
                          "typeString": "struct Governance.Voter"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "id": 44561,
                  "initialValue": {
                    "argumentTypes": null,
                    "baseExpression": {
                      "argumentTypes": null,
                      "id": 44558,
                      "name": "voters",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 30524,
                      "src": "1046:6:123",
                      "typeDescriptions": {
                        "typeIdentifier": "t_mapping$_t_address_$_t_struct$_Voter_$30465_storage_$",
                        "typeString": "mapping(address => struct Governance.Voter storage ref)"
                      }
                    },
                    "id": 44560,
                    "indexExpression": {
                      "argumentTypes": null,
                      "id": 44559,
                      "name": "voterAddress",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 44549,
                      "src": "1053:12:123",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "isConstant": false,
                    "isLValue": true,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "IndexAccess",
                    "src": "1046:20:123",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_Voter_$30465_storage",
                      "typeString": "struct Governance.Voter storage ref"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "1024:42:123"
                },
                {
                  "assignments": [
                    44563
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 44563,
                      "name": "voteRecord",
                      "nodeType": "VariableDeclaration",
                      "scope": 44575,
                      "src": "1072:29:123",
                      "stateVariable": false,
                      "storageLocation": "storage",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_VoteRecord_$30456_storage_ptr",
                        "typeString": "struct Governance.VoteRecord"
                      },
                      "typeName": {
                        "contractScope": null,
                        "id": 44562,
                        "name": "VoteRecord",
                        "nodeType": "UserDefinedTypeName",
                        "referencedDeclaration": 30456,
                        "src": "1072:10:123",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_VoteRecord_$30456_storage_ptr",
                          "typeString": "struct Governance.VoteRecord"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "id": 44568,
                  "initialValue": {
                    "argumentTypes": null,
                    "baseExpression": {
                      "argumentTypes": null,
                      "expression": {
                        "argumentTypes": null,
                        "id": 44564,
                        "name": "voter",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 44557,
                        "src": "1104:5:123",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_Voter_$30465_storage_ptr",
                          "typeString": "struct Governance.Voter storage pointer"
                        }
                      },
                      "id": 44565,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "referendumVotes",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 30464,
                      "src": "1104:21:123",
                      "typeDescriptions": {
                        "typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_VoteRecord_$30456_storage_$",
                        "typeString": "mapping(uint256 => struct Governance.VoteRecord storage ref)"
                      }
                    },
                    "id": 44567,
                    "indexExpression": {
                      "argumentTypes": null,
                      "id": 44566,
                      "name": "proposalIndex",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 44551,
                      "src": "1126:13:123",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "isConstant": false,
                    "isLValue": true,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "IndexAccess",
                    "src": "1104:36:123",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_VoteRecord_$30456_storage",
                      "typeString": "struct Governance.VoteRecord storage ref"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "1072:68:123"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 44573,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "argumentTypes": null,
                      "expression": {
                        "argumentTypes": null,
                        "id": 44569,
                        "name": "voteRecord",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 44563,
                        "src": "1146:10:123",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_VoteRecord_$30456_storage_ptr",
                          "typeString": "struct Governance.VoteRecord storage pointer"
                        }
                      },
                      "id": 44571,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "memberName": "deprecated_weight",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 30449,
                      "src": "1146:28:123",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "argumentTypes": null,
                      "id": 44572,
                      "name": "weight",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 44553,
                      "src": "1177:6:123",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "1146:37:123",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 44574,
                  "nodeType": "ExpressionStatement",
                  "src": "1146:37:123"
                }
              ]
            },
            "documentation": null,
            "id": 44576,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "setDeprecatedWeight",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 44554,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 44549,
                  "name": "voterAddress",
                  "nodeType": "VariableDeclaration",
                  "scope": 44576,
                  "src": "942:20:123",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 44548,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "942:7:123",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 44551,
                  "name": "proposalIndex",
                  "nodeType": "VariableDeclaration",
                  "scope": 44576,
                  "src": "964:21:123",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 44550,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "964:7:123",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 44553,
                  "name": "weight",
                  "nodeType": "VariableDeclaration",
                  "scope": 44576,
                  "src": "987:14:123",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 44552,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "987:7:123",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "941:61:123"
            },
            "returnParameters": {
              "id": 44555,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1018:0:123"
            },
            "scope": 44577,
            "src": "913:275:123",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "external"
          }
        ],
        "scope": 44578,
        "src": "55:1135:123"
      }
    ],
    "src": "0:1191:123"
  },
  "legacyAST": {
    "attributes": {
      "absolutePath": "project:/contracts/governance/test/GovernanceTest.sol",
      "exportedSymbols": {
        "GovernanceTest": [
          44577
        ]
      }
    },
    "children": [
      {
        "attributes": {
          "literals": [
            "solidity",
            "^",
            "0.5",
            ".13"
          ]
        },
        "id": 44483,
        "name": "PragmaDirective",
        "src": "0:24:123"
      },
      {
        "attributes": {
          "SourceUnit": 34298,
          "absolutePath": "project:/contracts/governance/Governance.sol",
          "file": "../Governance.sol",
          "scope": 44578,
          "symbolAliases": [
            null
          ],
          "unitAlias": ""
        },
        "id": 44484,
        "name": "ImportDirective",
        "src": "26:27:123"
      },
      {
        "attributes": {
          "contractDependencies": [
            26,
            481,
            7598,
            11461,
            11867,
            12683,
            17579,
            34297,
            43527
          ],
          "contractKind": "contract",
          "documentation": null,
          "fullyImplemented": true,
          "linearizedBaseContracts": [
            44577,
            34297,
            11461,
            11867,
            17579,
            7598,
            481,
            26,
            12683,
            43527
          ],
          "name": "GovernanceTest",
          "scope": 44578
        },
        "children": [
          {
            "children": [
              {
                "attributes": {
                  "contractScope": null,
                  "name": "Governance",
                  "referencedDeclaration": 34297,
                  "type": "contract Governance"
                },
                "id": 44485,
                "name": "UserDefinedTypeName",
                "src": "82:10:123"
              },
              {
                "attributes": {
                  "argumentTypes": null,
                  "hexvalue": "74727565",
                  "isConstant": false,
                  "isLValue": false,
                  "isPure": true,
                  "lValueRequested": false,
                  "subdenomination": null,
                  "token": "bool",
                  "type": "bool",
                  "value": "true"
                },
                "id": 44486,
                "name": "Literal",
                "src": "93:4:123"
              }
            ],
            "id": 44487,
            "name": "InheritanceSpecifier",
            "src": "82:16:123"
          },
          {
            "attributes": {
              "constant": false,
              "name": "validatorSet",
              "scope": 44577,
              "stateVariable": true,
              "storageLocation": "default",
              "type": "address[]",
              "value": null,
              "visibility": "internal"
            },
            "children": [
              {
                "attributes": {
                  "length": null,
                  "type": "address[]"
                },
                "children": [
                  {
                    "attributes": {
                      "name": "address",
                      "stateMutability": "nonpayable",
                      "type": "address"
                    },
                    "id": 44488,
                    "name": "ElementaryTypeName",
                    "src": "103:7:123"
                  }
                ],
                "id": 44489,
                "name": "ArrayTypeName",
                "src": "103:9:123"
              }
            ],
            "id": 44490,
            "name": "VariableDeclaration",
            "src": "103:22:123"
          },
          {
            "attributes": {
              "documentation": null,
              "implemented": true,
              "isConstructor": false,
              "kind": "function",
              "modifiers": [
                null
              ],
              "name": "numberValidatorsInCurrentSet",
              "scope": 44577,
              "stateMutability": "view",
              "superFunction": 11174,
              "visibility": "public"
            },
            "children": [
              {
                "attributes": {
                  "parameters": [
                    null
                  ]
                },
                "children": [],
                "id": 44491,
                "name": "ParameterList",
                "src": "228:2:123"
              },
              {
                "children": [
                  {
                    "attributes": {
                      "constant": false,
                      "name": "",
                      "scope": 44499,
                      "stateVariable": false,
                      "storageLocation": "default",
                      "type": "uint256",
                      "value": null,
                      "visibility": "internal"
                    },
                    "children": [
                      {
                        "attributes": {
                          "name": "uint256",
                          "type": "uint256"
                        },
                        "id": 44492,
                        "name": "ElementaryTypeName",
                        "src": "252:7:123"
                      }
                    ],
                    "id": 44493,
                    "name": "VariableDeclaration",
                    "src": "252:7:123"
                  }
                ],
                "id": 44494,
                "name": "ParameterList",
                "src": "251:9:123"
              },
              {
                "children": [
                  {
                    "attributes": {
                      "functionReturnParameters": 44494
                    },
                    "children": [
                      {
                        "attributes": {
                          "argumentTypes": null,
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "member_name": "length",
                          "referencedDeclaration": null,
                          "type": "uint256"
                        },
                        "children": [
                          {
                            "attributes": {
                              "argumentTypes": null,
                              "overloadedDeclarations": [
                                null
                              ],
                              "referencedDeclaration": 44490,
                              "type": "address[] storage ref",
                              "value": "validatorSet"
                            },
                            "id": 44495,
                            "name": "Identifier",
                            "src": "274:12:123"
                          }
                        ],
                        "id": 44496,
                        "name": "MemberAccess",
                        "src": "274:19:123"
                      }
                    ],
                    "id": 44497,
                    "name": "Return",
                    "src": "267:26:123"
                  }
                ],
                "id": 44498,
                "name": "Block",
                "src": "261:37:123"
              }
            ],
            "id": 44499,
            "name": "FunctionDefinition",
            "src": "191:107:123"
          },
          {
            "attributes": {
              "documentation": null,
              "implemented": true,
              "isConstructor": false,
              "kind": "function",
              "modifiers": [
                null
              ],
              "name": "numberValidatorsInSet",
              "scope": 44577,
              "stateMutability": "view",
              "superFunction": 11210,
              "visibility": "public"
            },
            "children": [
              {
                "children": [
                  {
                    "attributes": {
                      "constant": false,
                      "name": "",
                      "scope": 44510,
                      "stateVariable": false,
                      "storageLocation": "default",
                      "type": "uint256",
                      "value": null,
                      "visibility": "internal"
                    },
                    "children": [
                      {
                        "attributes": {
                          "name": "uint256",
                          "type": "uint256"
                        },
                        "id": 44500,
                        "name": "ElementaryTypeName",
                        "src": "333:7:123"
                      }
                    ],
                    "id": 44501,
                    "name": "VariableDeclaration",
                    "src": "333:7:123"
                  }
                ],
                "id": 44502,
                "name": "ParameterList",
                "src": "332:9:123"
              },
              {
                "children": [
                  {
                    "attributes": {
                      "constant": false,
                      "name": "",
                      "scope": 44510,
                      "stateVariable": false,
                      "storageLocation": "default",
                      "type": "uint256",
                      "value": null,
                      "visibility": "internal"
                    },
                    "children": [
                      {
                        "attributes": {
                          "name": "uint256",
                          "type": "uint256"
                        },
                        "id": 44503,
                        "name": "ElementaryTypeName",
                        "src": "363:7:123"
                      }
                    ],
                    "id": 44504,
                    "name": "VariableDeclaration",
                    "src": "363:7:123"
                  }
                ],
                "id": 44505,
                "name": "ParameterList",
                "src": "362:9:123"
              },
              {
                "children": [
                  {
                    "attributes": {
                      "functionReturnParameters": 44505
                    },
                    "children": [
                      {
                        "attributes": {
                          "argumentTypes": null,
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "member_name": "length",
                          "referencedDeclaration": null,
                          "type": "uint256"
                        },
                        "children": [
                          {
                            "attributes": {
                              "argumentTypes": null,
                              "overloadedDeclarations": [
                                null
                              ],
                              "referencedDeclaration": 44490,
                              "type": "address[] storage ref",
                              "value": "validatorSet"
                            },
                            "id": 44506,
                            "name": "Identifier",
                            "src": "385:12:123"
                          }
                        ],
                        "id": 44507,
                        "name": "MemberAccess",
                        "src": "385:19:123"
                      }
                    ],
                    "id": 44508,
                    "name": "Return",
                    "src": "378:26:123"
                  }
                ],
                "id": 44509,
                "name": "Block",
                "src": "372:37:123"
              }
            ],
            "id": 44510,
            "name": "FunctionDefinition",
            "src": "302:107:123"
          },
          {
            "attributes": {
              "documentation": null,
              "implemented": true,
              "isConstructor": false,
              "kind": "function",
              "modifiers": [
                null
              ],
              "name": "validatorSignerAddressFromCurrentSet",
              "scope": 44577,
              "stateMutability": "view",
              "superFunction": 11096,
              "visibility": "public"
            },
            "children": [
              {
                "children": [
                  {
                    "attributes": {
                      "constant": false,
                      "name": "index",
                      "scope": 44522,
                      "stateVariable": false,
                      "storageLocation": "default",
                      "type": "uint256",
                      "value": null,
                      "visibility": "internal"
                    },
                    "children": [
                      {
                        "attributes": {
                          "name": "uint256",
                          "type": "uint256"
                        },
                        "id": 44511,
                        "name": "ElementaryTypeName",
                        "src": "459:7:123"
                      }
                    ],
                    "id": 44512,
                    "name": "VariableDeclaration",
                    "src": "459:13:123"
                  }
                ],
                "id": 44513,
                "name": "ParameterList",
                "src": "458:15:123"
              },
              {
                "children": [
                  {
                    "attributes": {
                      "constant": false,
                      "name": "",
                      "scope": 44522,
                      "stateVariable": false,
                      "storageLocation": "default",
                      "type": "address",
                      "value": null,
                      "visibility": "internal"
                    },
                    "children": [
                      {
                        "attributes": {
                          "name": "address",
                          "stateMutability": "nonpayable",
                          "type": "address"
                        },
                        "id": 44514,
                        "name": "ElementaryTypeName",
                        "src": "495:7:123"
                      }
                    ],
                    "id": 44515,
                    "name": "VariableDeclaration",
                    "src": "495:7:123"
                  }
                ],
                "id": 44516,
                "name": "ParameterList",
                "src": "494:9:123"
              },
              {
                "children": [
                  {
                    "attributes": {
                      "functionReturnParameters": 44516
                    },
                    "children": [
                      {
                        "attributes": {
                          "argumentTypes": null,
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "type": "address"
                        },
                        "children": [
                          {
                            "attributes": {
                              "argumentTypes": null,
                              "overloadedDeclarations": [
                                null
                              ],
                              "referencedDeclaration": 44490,
                              "type": "address[] storage ref",
                              "value": "validatorSet"
                            },
                            "id": 44517,
                            "name": "Identifier",
                            "src": "517:12:123"
                          },
                          {
                            "attributes": {
                              "argumentTypes": null,
                              "overloadedDeclarations": [
                                null
                              ],
                              "referencedDeclaration": 44512,
                              "type": "uint256",
                              "value": "index"
                            },
                            "id": 44518,
                            "name": "Identifier",
                            "src": "530:5:123"
                          }
                        ],
                        "id": 44519,
                        "name": "IndexAccess",
                        "src": "517:19:123"
                      }
                    ],
                    "id": 44520,
                    "name": "Return",
                    "src": "510:26:123"
                  }
                ],
                "id": 44521,
                "name": "Block",
                "src": "504:37:123"
              }
            ],
            "id": 44522,
            "name": "FunctionDefinition",
            "src": "413:128:123"
          },
          {
            "attributes": {
              "documentation": null,
              "implemented": true,
              "isConstructor": false,
              "kind": "function",
              "modifiers": [
                null
              ],
              "name": "addValidator",
              "scope": 44577,
              "stateMutability": "nonpayable",
              "superFunction": null,
              "visibility": "external"
            },
            "children": [
              {
                "children": [
                  {
                    "attributes": {
                      "constant": false,
                      "name": "validator",
                      "scope": 44534,
                      "stateVariable": false,
                      "storageLocation": "default",
                      "type": "address",
                      "value": null,
                      "visibility": "internal"
                    },
                    "children": [
                      {
                        "attributes": {
                          "name": "address",
                          "stateMutability": "nonpayable",
                          "type": "address"
                        },
                        "id": 44523,
                        "name": "ElementaryTypeName",
                        "src": "594:7:123"
                      }
                    ],
                    "id": 44524,
                    "name": "VariableDeclaration",
                    "src": "594:17:123"
                  }
                ],
                "id": 44525,
                "name": "ParameterList",
                "src": "593:19:123"
              },
              {
                "attributes": {
                  "parameters": [
                    null
                  ]
                },
                "children": [],
                "id": 44526,
                "name": "ParameterList",
                "src": "622:0:123"
              },
              {
                "children": [
                  {
                    "children": [
                      {
                        "attributes": {
                          "argumentTypes": null,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "isStructConstructorCall": false,
                          "lValueRequested": false,
                          "names": [
                            null
                          ],
                          "type": "uint256",
                          "type_conversion": false
                        },
                        "children": [
                          {
                            "attributes": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              ],
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "member_name": "push",
                              "referencedDeclaration": null,
                              "type": "function (address) returns (uint256)"
                            },
                            "children": [
                              {
                                "attributes": {
                                  "argumentTypes": null,
                                  "overloadedDeclarations": [
                                    null
                                  ],
                                  "referencedDeclaration": 44490,
                                  "type": "address[] storage ref",
                                  "value": "validatorSet"
                                },
                                "id": 44527,
                                "name": "Identifier",
                                "src": "628:12:123"
                              }
                            ],
                            "id": 44529,
                            "name": "MemberAccess",
                            "src": "628:17:123"
                          },
                          {
                            "attributes": {
                              "argumentTypes": null,
                              "overloadedDeclarations": [
                                null
                              ],
                              "referencedDeclaration": 44524,
                              "type": "address",
                              "value": "validator"
                            },
                            "id": 44530,
                            "name": "Identifier",
                            "src": "646:9:123"
                          }
                        ],
                        "id": 44531,
                        "name": "FunctionCall",
                        "src": "628:28:123"
                      }
                    ],
                    "id": 44532,
                    "name": "ExpressionStatement",
                    "src": "628:28:123"
                  }
                ],
                "id": 44533,
                "name": "Block",
                "src": "622:39:123"
              }
            ],
            "id": 44534,
            "name": "FunctionDefinition",
            "src": "572:89:123"
          },
          {
            "attributes": {
              "documentation": null,
              "implemented": true,
              "isConstructor": false,
              "kind": "function",
              "modifiers": [
                null
              ],
              "name": "removeVotesWhenRevokingDelegatedVotesTest",
              "scope": 44577,
              "stateMutability": "nonpayable",
              "superFunction": null,
              "visibility": "public"
            },
            "children": [
              {
                "children": [
                  {
                    "attributes": {
                      "constant": false,
                      "name": "account",
                      "scope": 44547,
                      "stateVariable": false,
                      "storageLocation": "default",
                      "type": "address",
                      "value": null,
                      "visibility": "internal"
                    },
                    "children": [
                      {
                        "attributes": {
                          "name": "address",
                          "stateMutability": "nonpayable",
                          "type": "address"
                        },
                        "id": 44535,
                        "name": "ElementaryTypeName",
                        "src": "777:7:123"
                      }
                    ],
                    "id": 44536,
                    "name": "VariableDeclaration",
                    "src": "777:15:123"
                  },
                  {
                    "attributes": {
                      "constant": false,
                      "name": "maxAmountAllowed",
                      "scope": 44547,
                      "stateVariable": false,
                      "storageLocation": "default",
                      "type": "uint256",
                      "value": null,
                      "visibility": "internal"
                    },
                    "children": [
                      {
                        "attributes": {
                          "name": "uint256",
                          "type": "uint256"
                        },
                        "id": 44537,
                        "name": "ElementaryTypeName",
                        "src": "794:7:123"
                      }
                    ],
                    "id": 44538,
                    "name": "VariableDeclaration",
                    "src": "794:24:123"
                  }
                ],
                "id": 44539,
                "name": "ParameterList",
                "src": "776:43:123"
              },
              {
                "attributes": {
                  "parameters": [
                    null
                  ]
                },
                "children": [],
                "id": 44540,
                "name": "ParameterList",
                "src": "833:0:123"
              },
              {
                "children": [
                  {
                    "children": [
                      {
                        "attributes": {
                          "argumentTypes": null,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "isStructConstructorCall": false,
                          "lValueRequested": false,
                          "names": [
                            null
                          ],
                          "type": "tuple()",
                          "type_conversion": false
                        },
                        "children": [
                          {
                            "attributes": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                },
                                {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              ],
                              "overloadedDeclarations": [
                                null
                              ],
                              "referencedDeclaration": 34202,
                              "type": "function (address,uint256)",
                              "value": "_removeVotesWhenRevokingDelegatedVotes"
                            },
                            "id": 44541,
                            "name": "Identifier",
                            "src": "839:38:123"
                          },
                          {
                            "attributes": {
                              "argumentTypes": null,
                              "overloadedDeclarations": [
                                null
                              ],
                              "referencedDeclaration": 44536,
                              "type": "address",
                              "value": "account"
                            },
                            "id": 44542,
                            "name": "Identifier",
                            "src": "878:7:123"
                          },
                          {
                            "attributes": {
                              "argumentTypes": null,
                              "overloadedDeclarations": [
                                null
                              ],
                              "referencedDeclaration": 44538,
                              "type": "uint256",
                              "value": "maxAmountAllowed"
                            },
                            "id": 44543,
                            "name": "Identifier",
                            "src": "887:16:123"
                          }
                        ],
                        "id": 44544,
                        "name": "FunctionCall",
                        "src": "839:65:123"
                      }
                    ],
                    "id": 44545,
                    "name": "ExpressionStatement",
                    "src": "839:65:123"
                  }
                ],
                "id": 44546,
                "name": "Block",
                "src": "833:76:123"
              }
            ],
            "id": 44547,
            "name": "FunctionDefinition",
            "src": "726:183:123"
          },
          {
            "attributes": {
              "documentation": null,
              "implemented": true,
              "isConstructor": false,
              "kind": "function",
              "modifiers": [
                null
              ],
              "name": "setDeprecatedWeight",
              "scope": 44577,
              "stateMutability": "nonpayable",
              "superFunction": null,
              "visibility": "external"
            },
            "children": [
              {
                "children": [
                  {
                    "attributes": {
                      "constant": false,
                      "name": "voterAddress",
                      "scope": 44576,
                      "stateVariable": false,
                      "storageLocation": "default",
                      "type": "address",
                      "value": null,
                      "visibility": "internal"
                    },
                    "children": [
                      {
                        "attributes": {
                          "name": "address",
                          "stateMutability": "nonpayable",
                          "type": "address"
                        },
                        "id": 44548,
                        "name": "ElementaryTypeName",
                        "src": "942:7:123"
                      }
                    ],
                    "id": 44549,
                    "name": "VariableDeclaration",
                    "src": "942:20:123"
                  },
                  {
                    "attributes": {
                      "constant": false,
                      "name": "proposalIndex",
                      "scope": 44576,
                      "stateVariable": false,
                      "storageLocation": "default",
                      "type": "uint256",
                      "value": null,
                      "visibility": "internal"
                    },
                    "children": [
                      {
                        "attributes": {
                          "name": "uint256",
                          "type": "uint256"
                        },
                        "id": 44550,
                        "name": "ElementaryTypeName",
                        "src": "964:7:123"
                      }
                    ],
                    "id": 44551,
                    "name": "VariableDeclaration",
                    "src": "964:21:123"
                  },
                  {
                    "attributes": {
                      "constant": false,
                      "name": "weight",
                      "scope": 44576,
                      "stateVariable": false,
                      "storageLocation": "default",
                      "type": "uint256",
                      "value": null,
                      "visibility": "internal"
                    },
                    "children": [
                      {
                        "attributes": {
                          "name": "uint256",
                          "type": "uint256"
                        },
                        "id": 44552,
                        "name": "ElementaryTypeName",
                        "src": "987:7:123"
                      }
                    ],
                    "id": 44553,
                    "name": "VariableDeclaration",
                    "src": "987:14:123"
                  }
                ],
                "id": 44554,
                "name": "ParameterList",
                "src": "941:61:123"
              },
              {
                "attributes": {
                  "parameters": [
                    null
                  ]
                },
                "children": [],
                "id": 44555,
                "name": "ParameterList",
                "src": "1018:0:123"
              },
              {
                "children": [
                  {
                    "attributes": {
                      "assignments": [
                        44557
                      ]
                    },
                    "children": [
                      {
                        "attributes": {
                          "constant": false,
                          "name": "voter",
                          "scope": 44575,
                          "stateVariable": false,
                          "storageLocation": "storage",
                          "type": "struct Governance.Voter",
                          "value": null,
                          "visibility": "internal"
                        },
                        "children": [
                          {
                            "attributes": {
                              "contractScope": null,
                              "name": "Voter",
                              "referencedDeclaration": 30465,
                              "type": "struct Governance.Voter"
                            },
                            "id": 44556,
                            "name": "UserDefinedTypeName",
                            "src": "1024:5:123"
                          }
                        ],
                        "id": 44557,
                        "name": "VariableDeclaration",
                        "src": "1024:19:123"
                      },
                      {
                        "attributes": {
                          "argumentTypes": null,
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "type": "struct Governance.Voter storage ref"
                        },
                        "children": [
                          {
                            "attributes": {
                              "argumentTypes": null,
                              "overloadedDeclarations": [
                                null
                              ],
                              "referencedDeclaration": 30524,
                              "type": "mapping(address => struct Governance.Voter storage ref)",
                              "value": "voters"
                            },
                            "id": 44558,
                            "name": "Identifier",
                            "src": "1046:6:123"
                          },
                          {
                            "attributes": {
                              "argumentTypes": null,
                              "overloadedDeclarations": [
                                null
                              ],
                              "referencedDeclaration": 44549,
                              "type": "address",
                              "value": "voterAddress"
                            },
                            "id": 44559,
                            "name": "Identifier",
                            "src": "1053:12:123"
                          }
                        ],
                        "id": 44560,
                        "name": "IndexAccess",
                        "src": "1046:20:123"
                      }
                    ],
                    "id": 44561,
                    "name": "VariableDeclarationStatement",
                    "src": "1024:42:123"
                  },
                  {
                    "attributes": {
                      "assignments": [
                        44563
                      ]
                    },
                    "children": [
                      {
                        "attributes": {
                          "constant": false,
                          "name": "voteRecord",
                          "scope": 44575,
                          "stateVariable": false,
                          "storageLocation": "storage",
                          "type": "struct Governance.VoteRecord",
                          "value": null,
                          "visibility": "internal"
                        },
                        "children": [
                          {
                            "attributes": {
                              "contractScope": null,
                              "name": "VoteRecord",
                              "referencedDeclaration": 30456,
                              "type": "struct Governance.VoteRecord"
                            },
                            "id": 44562,
                            "name": "UserDefinedTypeName",
                            "src": "1072:10:123"
                          }
                        ],
                        "id": 44563,
                        "name": "VariableDeclaration",
                        "src": "1072:29:123"
                      },
                      {
                        "attributes": {
                          "argumentTypes": null,
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "type": "struct Governance.VoteRecord storage ref"
                        },
                        "children": [
                          {
                            "attributes": {
                              "argumentTypes": null,
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "member_name": "referendumVotes",
                              "referencedDeclaration": 30464,
                              "type": "mapping(uint256 => struct Governance.VoteRecord storage ref)"
                            },
                            "children": [
                              {
                                "attributes": {
                                  "argumentTypes": null,
                                  "overloadedDeclarations": [
                                    null
                                  ],
                                  "referencedDeclaration": 44557,
                                  "type": "struct Governance.Voter storage pointer",
                                  "value": "voter"
                                },
                                "id": 44564,
                                "name": "Identifier",
                                "src": "1104:5:123"
                              }
                            ],
                            "id": 44565,
                            "name": "MemberAccess",
                            "src": "1104:21:123"
                          },
                          {
                            "attributes": {
                              "argumentTypes": null,
                              "overloadedDeclarations": [
                                null
                              ],
                              "referencedDeclaration": 44551,
                              "type": "uint256",
                              "value": "proposalIndex"
                            },
                            "id": 44566,
                            "name": "Identifier",
                            "src": "1126:13:123"
                          }
                        ],
                        "id": 44567,
                        "name": "IndexAccess",
                        "src": "1104:36:123"
                      }
                    ],
                    "id": 44568,
                    "name": "VariableDeclarationStatement",
                    "src": "1072:68:123"
                  },
                  {
                    "children": [
                      {
                        "attributes": {
                          "argumentTypes": null,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "operator": "=",
                          "type": "uint256"
                        },
                        "children": [
                          {
                            "attributes": {
                              "argumentTypes": null,
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": true,
                              "member_name": "deprecated_weight",
                              "referencedDeclaration": 30449,
                              "type": "uint256"
                            },
                            "children": [
                              {
                                "attributes": {
                                  "argumentTypes": null,
                                  "overloadedDeclarations": [
                                    null
                                  ],
                                  "referencedDeclaration": 44563,
                                  "type": "struct Governance.VoteRecord storage pointer",
                                  "value": "voteRecord"
                                },
                                "id": 44569,
                                "name": "Identifier",
                                "src": "1146:10:123"
                              }
                            ],
                            "id": 44571,
                            "name": "MemberAccess",
                            "src": "1146:28:123"
                          },
                          {
                            "attributes": {
                              "argumentTypes": null,
                              "overloadedDeclarations": [
                                null
                              ],
                              "referencedDeclaration": 44553,
                              "type": "uint256",
                              "value": "weight"
                            },
                            "id": 44572,
                            "name": "Identifier",
                            "src": "1177:6:123"
                          }
                        ],
                        "id": 44573,
                        "name": "Assignment",
                        "src": "1146:37:123"
                      }
                    ],
                    "id": 44574,
                    "name": "ExpressionStatement",
                    "src": "1146:37:123"
                  }
                ],
                "id": 44575,
                "name": "Block",
                "src": "1018:170:123"
              }
            ],
            "id": 44576,
            "name": "FunctionDefinition",
            "src": "913:275:123"
          }
        ],
        "id": 44577,
        "name": "ContractDefinition",
        "src": "55:1135:123"
      }
    ],
    "id": 44578,
    "name": "SourceUnit",
    "src": "0:1191:123"
  },
  "compiler": {
    "name": "solc",
    "version": "0.5.13+commit.5b0b510c.Emscripten.clang"
  },
  "networks": {
    "1101": {
      "events": {},
      "links": {
        "Proposals": "0x871DD7C2B4b25E1Aa18728e9D5f2Af4C4e431f5c",
        "IntegerSortedLinkedList": "0x34D402F14D58E001D8EfBe6585051BF9706AA064"
      }
    }
  },
  "schemaVersion": "3.4.13",
  "updatedAt": "2023-11-21T17:25:03.734Z",
  "networkType": "ethereum",
  "devdoc": {
    "methods": {
      "approve(uint256,uint256)": {
        "params": {
          "index": "The index of the proposal ID in `dequeued`.",
          "proposalId": "The ID of the proposal to approve."
        },
        "return": "Whether or not the approval was made successfully."
      },
      "approveHotfix(bytes32)": {
        "params": {
          "hash": "The abi encoded keccak256 hash of the hotfix transaction(s) to be approved."
        }
      },
      "checkProofOfPossession(address,bytes,bytes)": {
        "params": {
          "blsKey": "The BLS public key that the validator is using for consensus, should pass proof  of possession. 48 bytes.",
          "blsPop": "The BLS public key proof-of-possession, which consists of a signature on the  account address. 96 bytes.",
          "sender": "The address signed by the BLS key to generate the proof of possession."
        },
        "return": "True upon success."
      },
      "dequeueProposalsIfReady()": {
        "details": "If any of the top proposals have expired, they are deleted."
      },
      "execute(uint256,uint256)": {
        "details": "Does not remove the proposal if the execution fails.",
        "params": {
          "index": "The index of the proposal ID in `dequeued`.",
          "proposalId": "The ID of the proposal to vote on."
        },
        "return": "Whether or not the proposal was executed successfully."
      },
      "executeHotfix(uint256[],address[],bytes,uint256[],bytes32)": {
        "details": "Reverts if hotfix is already executed, not approved, or not prepared for current epoch.",
        "params": {
          "data": "The concatenated data to be included in the proposed transactions.",
          "dataLengths": "The lengths of each transaction's data.",
          "destinations": "The destination addresses of the proposed transactions.",
          "salt": "Arbitrary salt associated with hotfix which guarantees uniqueness of hash.",
          "values": "The values of CELO to be sent in the proposed transactions."
        }
      },
      "fractionMulExp(uint256,uint256,uint256,uint256,uint256,uint256)": {
        "params": {
          "_decimals": "precision",
          "aDenominator": "Denominator of first fraction",
          "aNumerator": "Numerator of first fraction",
          "bDenominator": "Denominator of exponentiated fraction",
          "bNumerator": "Numerator of exponentiated fraction",
          "exponent": "exponent to raise b to"
        },
        "return": "Numerator of the computed quantity (not reduced).Denominator of the computed quantity (not reduced)."
      },
      "getAmountOfGoldUsedForVoting(address)": {
        "params": {
          "account": "The address of the account."
        },
        "return": "The total number of votes cast by an account."
      },
      "getBlockNumberFromHeader(bytes)": {
        "params": {
          "header": "RLP encoded header"
        },
        "return": "Block number."
      },
      "getConstitution(address,bytes4)": {
        "params": {
          "destination": "The destination address to get the constitution for.",
          "functionId": "The function ID to get the constitution for, zero for the destination  default."
        },
        "return": "The ratio of yes:no votes needed to exceed in order to pass the proposal."
      },
      "getDequeue()": {
        "details": "Note that this includes unused indices with proposalId == 0 from deleted proposals.",
        "return": "The dequeued proposal IDs."
      },
      "getEpochNumber()": {
        "return": "Current epoch number."
      },
      "getEpochNumberOfBlock(uint256)": {
        "params": {
          "blockNumber": "Block number where epoch number is calculated."
        },
        "return": "Epoch number."
      },
      "getEpochSize()": {
        "return": "The current epoch size in blocks."
      },
      "getExecutionStageDuration()": {
        "return": "The number of seconds proposals stay in the execution stage."
      },
      "getHotfixRecord(bytes32)": {
        "params": {
          "hash": "The abi encoded keccak256 hash of the hotfix transaction."
        },
        "return": "Hotfix approved.Hotfix executed.Hotfix preparedEpoch."
      },
      "getMostRecentReferendumProposal(address)": {
        "params": {
          "account": "The address of the account."
        },
        "return": "The ID of the most recently dequeued proposal voted on by `account`.."
      },
      "getParentSealBitmap(uint256)": {
        "params": {
          "blockNumber": "Block number to retrieve. Must be within 4 epochs of the current number."
        },
        "return": "Bitmap parent seal with set bits at indices corresponding to signing validators."
      },
      "getParticipationParameters()": {
        "return": "baseline The participation baseline parameter.baselineFloor The participation baseline floor parameter.baselineUpdateFactor The participation baseline update factor parameter.baselineQuorumFactor The participation baseline quorum factor parameter."
      },
      "getProposal(uint256)": {
        "params": {
          "proposalId": "The ID of the proposal to unpack."
        },
        "return": "proposerdeposittimestamptransaction Transaction count.description Description url."
      },
      "getProposalStage(uint256)": {
        "params": {
          "proposalId": "The ID of the proposal to query."
        },
        "return": "proposal stage"
      },
      "getProposalTransaction(uint256,uint256)": {
        "params": {
          "index": "The index of the specified transaction in the proposal's transaction list.",
          "proposalId": "The ID of the proposal to query."
        },
        "return": "value Transaction value.destination Transaction destination.data Transaction data."
      },
      "getQueue()": {
        "details": "Note that this includes expired proposals that have yet to be removed from the queue.",
        "return": "proposalID The proposal ID for all queued proposals.total The upvote total for all queued proposals."
      },
      "getQueueLength()": {
        "return": "The number of proposals in the queue."
      },
      "getReferendumStageDuration()": {
        "return": "The number of seconds proposals stay in the referendum stage."
      },
      "getUpvoteRecord(address)": {
        "params": {
          "account": "The address of the account."
        },
        "return": "The ID of the proposal upvoted by `account`.The weight of that upvote."
      },
      "getUpvotes(uint256)": {
        "params": {
          "proposalId": "The ID of the proposal."
        },
        "return": "The number of upvotes a queued proposal has received."
      },
      "getVerifiedSealBitmapFromHeader(bytes)": {
        "params": {
          "header": "RLP encoded header"
        },
        "return": "Bitmap parent seal with set bits at indices correspoinding to signing validators."
      },
      "getVersionNumber()": {
        "return": "Storage version of the contract.Major version of the contract.Minor version of the contract.Patch version of the contract."
      },
      "getVoteRecord(address,uint256)": {
        "params": {
          "account": "The address of the account to get the record for.",
          "index": "The index in `dequeued`."
        },
        "return": "The corresponding proposal ID, vote value, and weight.The depreciated vote value.The deprecieated weight.The yes weight.The no weight.The abstain weight."
      },
      "getVoteTotals(uint256)": {
        "params": {
          "proposalId": "The ID of the proposal."
        },
        "return": "yes The yes vote totals.no The no vote totals.abstain The abstain vote totals."
      },
      "hashHeader(bytes)": {
        "params": {
          "header": "RLP encoded header"
        },
        "return": "Header hash."
      },
      "hotfixWhitelistValidatorTally(bytes32)": {
        "params": {
          "hash": "The abi encoded keccak256 hash of the hotfix transaction."
        },
        "return": "Whitelist tally"
      },
      "initialize(address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256)": {
        "details": "Should be called only once.",
        "params": {
          "_approver": "The address that needs to approve proposals to move to the referendum stage.",
          "_concurrentProposals": "The number of proposals to dequeue at once.",
          "_dequeueFrequency": "The number of seconds before the next batch of proposals can be  dequeued.",
          "_minDeposit": "The minimum CELO deposit needed to make a proposal.",
          "_queueExpiry": "The number of seconds a proposal can stay in the queue before expiring.",
          "baselineQuorumFactor": "The proportion of the baseline that constitutes quorum.",
          "baselineUpdateFactor": "The weight of the new participation in the baseline update rule.",
          "executionStageDuration": "The number of seconds users have to execute a passed proposal  after the referendum stage ends.",
          "participationBaseline": "The initial value of the participation baseline.",
          "participationFloor": "The participation floor.",
          "referendumStageDuration": "The number of seconds users have to vote on a dequeued proposal  after the approval stage ends.",
          "registryAddress": "The address of the registry contract."
        }
      },
      "isApproved(uint256)": {
        "params": {
          "proposalId": "The ID of the proposal."
        },
        "return": "Whether or not the proposal has been approved."
      },
      "isDequeuedProposal(uint256,uint256)": {
        "params": {
          "index": "The index of the proposal ID in `dequeued`.",
          "proposalId": "The ID of the proposal."
        },
        "return": "Whether the proposal is in `dequeued`."
      },
      "isDequeuedProposalExpired(uint256)": {
        "params": {
          "proposalId": "The ID of the proposal."
        },
        "return": "Whether or not the dequeued proposal has expired."
      },
      "isHotfixPassing(bytes32)": {
        "params": {
          "hash": "The abi encoded keccak256 hash of the hotfix transaction."
        },
        "return": "Whether validator whitelist tally >= validator byzantine quorum"
      },
      "isHotfixWhitelistedBy(bytes32,address)": {
        "params": {
          "hash": "The abi encoded keccak256 hash of the hotfix transaction(s) to be whitelisted.",
          "whitelister": "Address to check whitelist status of."
        }
      },
      "isOwner()": {
        "details": "Returns true if the caller is the current owner."
      },
      "isProposalPassing(uint256)": {
        "params": {
          "proposalId": "The ID of the proposal."
        },
        "return": "Whether or not the proposal is passing."
      },
      "isQueued(uint256)": {
        "details": "NOTE: proposal may be expired",
        "params": {
          "proposalId": "The ID of the proposal."
        },
        "return": "Whether or not the proposal is in the queue."
      },
      "isQueuedProposalExpired(uint256)": {
        "params": {
          "proposalId": "The ID of the proposal."
        },
        "return": "Whether or not the dequeued proposal has expired."
      },
      "isVoting(address)": {
        "params": {
          "account": "The address of the account."
        },
        "return": "Whether or not the account is voting on proposals."
      },
      "minQuorumSize(uint256)": {
        "details": "Computed in celo-blockchain as int(math.Ceil(float64(2*valSet.Size()) / 3))"
      },
      "minQuorumSizeInCurrentSet()": {
        "return": "Byzantine quorum of validators."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "prepareHotfix(bytes32)": {
        "params": {
          "hash": "The hash of the hotfix to be prepared."
        }
      },
      "proposalExists(uint256)": {
        "params": {
          "proposalId": "The ID of the proposal."
        },
        "return": "Whether or not the proposal exists."
      },
      "propose(uint256[],address[],bytes,uint256[],string)": {
        "details": "The minimum deposit must be included with the proposal, returned if/when the proposal is  dequeued.",
        "params": {
          "data": "The concatenated data to be included in the proposed transactions.",
          "dataLengths": "The lengths of each transaction's data.",
          "destinations": "The destination addresses of the proposed transactions.",
          "values": "The values of CELO to be sent in the proposed transactions."
        },
        "return": "The ID of the newly proposed proposal."
      },
      "removeVotesWhenRevokingDelegatedVotes(address,uint256)": {
        "params": {
          "account": "The address of the account.",
          "newVotingPower": "The adjusted voting power of delegatee."
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner.     * NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "revokeUpvote(uint256,uint256)": {
        "details": "Provide 0 for `lesser`/`greater` when the proposal will be at the tail/head of the queue.",
        "params": {
          "greater": "The ID of the proposal that will be just ahead of the previously upvoted  proposal in the queue.",
          "lesser": "The ID of the proposal that will be just behind the previously upvoted proposal  in the queue."
        },
        "return": "Whether or not the upvote was revoked successfully."
      },
      "revokeVotes()": {
        "return": "Whether or not all votes of an account were successfully revoked."
      },
      "setApprover(address)": {
        "params": {
          "_approver": "The address that has permission to approve proposals in the approval stage."
        }
      },
      "setBaselineQuorumFactor(uint256)": {
        "params": {
          "baselineQuorumFactor": "The new baseline quorum factor."
        }
      },
      "setBaselineUpdateFactor(uint256)": {
        "params": {
          "baselineUpdateFactor": "The new baseline update factor."
        }
      },
      "setConcurrentProposals(uint256)": {
        "params": {
          "_concurrentProposals": "The number of proposals to dequeue at at a time."
        }
      },
      "setConstitution(address,bytes4,uint256)": {
        "details": "If no constitution is explicitly set the default is a simple majority, i.e. 1:2.",
        "params": {
          "destination": "The destination of proposals for which this threshold should apply.",
          "functionId": "The function ID of proposals for which this threshold should apply. Zero  will set the default.",
          "threshold": "The threshold."
        }
      },
      "setDequeueFrequency(uint256)": {
        "params": {
          "_dequeueFrequency": "The number of seconds before the next batch of proposals can be  dequeued."
        }
      },
      "setExecutionStageDuration(uint256)": {
        "params": {
          "executionStageDuration": "The number of seconds proposals stay in the execution stage."
        }
      },
      "setMinDeposit(uint256)": {
        "params": {
          "_minDeposit": "The minimum CELO deposit needed to make a proposal."
        }
      },
      "setParticipationBaseline(uint256)": {
        "params": {
          "participationBaseline": "The value of the baseline."
        }
      },
      "setParticipationFloor(uint256)": {
        "params": {
          "participationFloor": "The value at which the baseline is floored."
        }
      },
      "setQueueExpiry(uint256)": {
        "params": {
          "_queueExpiry": "The number of seconds a proposal can stay in the queue before expiring."
        }
      },
      "setReferendumStageDuration(uint256)": {
        "params": {
          "referendumStageDuration": "The number of seconds proposals stay in the referendum stage."
        }
      },
      "setRegistry(address)": {
        "params": {
          "registryAddress": "The address of a registry contract for routing to other contracts."
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "upvote(uint256,uint256,uint256)": {
        "details": "Provide 0 for `lesser`/`greater` when the proposal will be at the tail/head of the queue.Reverts if the account has already upvoted a proposal in the queue.",
        "params": {
          "greater": "The ID of the proposal that will be just ahead `proposalId` in the queue.",
          "lesser": "The ID of the proposal that will be just behind `proposalId` in the queue.",
          "proposalId": "The ID of the proposal to upvote."
        },
        "return": "Whether or not the upvote was made successfully."
      },
      "validatorSignerAddressFromSet(uint256,uint256)": {
        "params": {
          "blockNumber": "Block number to retrieve the validator set from.",
          "index": "Index of requested validator in the validator set."
        },
        "return": "Address of validator at the requested index."
      },
      "vote(uint256,uint256,uint8)": {
        "params": {
          "index": "The index of the proposal ID in `dequeued`.",
          "proposalId": "The ID of the proposal to vote on.",
          "value": "Whether to vote yes, no, or abstain."
        },
        "return": "Whether or not the vote was cast successfully."
      },
      "votePartially(uint256,uint256,uint256,uint256,uint256)": {
        "params": {
          "abstainVotes": "The abstain votes weight.",
          "index": "The index of the proposal ID in `dequeued`.",
          "noVotes": "The no votes weight.",
          "proposalId": "The ID of the proposal to vote on.",
          "yesVotes": "The yes votes weight."
        },
        "return": "Whether or not the vote was cast successfully."
      },
      "whitelistHotfix(bytes32)": {
        "params": {
          "hash": "The abi encoded keccak256 hash of the hotfix transaction(s) to be whitelisted."
        }
      },
      "withdraw()": {
        "return": "Whether or not the withdraw was successful."
      }
    }
  },
  "userdoc": {
    "methods": {
      "approve(uint256,uint256)": {
        "notice": "Approves a proposal in the approval stage."
      },
      "approveHotfix(bytes32)": {
        "notice": "Approves the hash of a hotfix transaction(s)."
      },
      "checkProofOfPossession(address,bytes,bytes)": {
        "notice": "Checks a BLS proof of possession."
      },
      "dequeueProposalsIfReady()": {
        "notice": "Removes the proposals with the most upvotes from the queue, moving them to the  approval stage."
      },
      "execute(uint256,uint256)": {
        "notice": "Executes a proposal in the execution stage, removing it from `dequeued`."
      },
      "executeHotfix(uint256[],address[],bytes,uint256[],bytes32)": {
        "notice": "Executes a whitelisted proposal."
      },
      "fractionMulExp(uint256,uint256,uint256,uint256,uint256,uint256)": {
        "notice": "calculate a * b^x for fractions a, b to `decimals` precision"
      },
      "getAmountOfGoldUsedForVoting(address)": {
        "notice": "Returns max number of votes cast by an account."
      },
      "getBlockNumberFromHeader(bytes)": {
        "notice": "Parses block number out of header."
      },
      "getConstitution(address,bytes4)": {
        "notice": "Returns the constitution for a particular destination and function ID."
      },
      "getDequeue()": {
        "notice": "Returns the dequeued proposal IDs."
      },
      "getEpochNumber()": {
        "notice": "Returns the epoch number at a block."
      },
      "getEpochNumberOfBlock(uint256)": {
        "notice": "Returns the epoch number at a block."
      },
      "getEpochSize()": {
        "notice": "Returns the current epoch size in blocks."
      },
      "getExecutionStageDuration()": {
        "notice": "Returns the number of seconds proposals stay in the execution stage."
      },
      "getHotfixRecord(bytes32)": {
        "notice": "Gets information about a hotfix."
      },
      "getMostRecentReferendumProposal(address)": {
        "notice": "Returns the ID of the most recently dequeued proposal voted on by `account`."
      },
      "getParentSealBitmap(uint256)": {
        "notice": "Gets the parent seal bitmap from the header at the given block number."
      },
      "getParticipationParameters()": {
        "notice": "Returns the participation parameters."
      },
      "getProposal(uint256)": {
        "notice": "Returns an unpacked proposal struct with its transaction count."
      },
      "getProposalStage(uint256)": {
        "notice": "Returns stage of governance process given proposal is in"
      },
      "getProposalTransaction(uint256,uint256)": {
        "notice": "Returns a specified transaction in a proposal."
      },
      "getQueue()": {
        "notice": "Returns the proposal ID and upvote total for all queued proposals."
      },
      "getQueueLength()": {
        "notice": "Returns the number of proposals in the queue."
      },
      "getReferendumStageDuration()": {
        "notice": "Returns the number of seconds proposals stay in the referendum stage."
      },
      "getUpvoteRecord(address)": {
        "notice": "Returns the ID of the proposal upvoted by `account` and the weight of that upvote."
      },
      "getUpvotes(uint256)": {
        "notice": "Returns the number of upvotes the queued proposal has received."
      },
      "getVerifiedSealBitmapFromHeader(bytes)": {
        "notice": "Verifies the BLS signature on the header and returns the seal bitmap. The validator set used for verification is retrieved based on the parent hash field of the header.  If the parent hash is not in the blockchain, verification fails."
      },
      "getVersionNumber()": {
        "notice": "Returns the storage, major, minor, and patch version of the contract."
      },
      "getVoteRecord(address,uint256)": {
        "notice": "Returns an accounts vote record on a particular index in `dequeued`."
      },
      "getVoteTotals(uint256)": {
        "notice": "Returns the referendum vote totals for a proposal."
      },
      "hashHeader(bytes)": {
        "notice": "Computes hash of header."
      },
      "hotfixWhitelistValidatorTally(bytes32)": {
        "notice": "Returns number of validators from current set which have whitelisted the given hotfix."
      },
      "initialize(address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256)": {
        "notice": "Used in place of the constructor to allow the contract to be upgradable via proxy."
      },
      "isApproved(uint256)": {
        "notice": "Returns whether or not a proposal has been approved."
      },
      "isDequeuedProposal(uint256,uint256)": {
        "notice": "Returns whether a proposal is dequeued at the given index."
      },
      "isDequeuedProposalExpired(uint256)": {
        "notice": "Returns whether or not a dequeued proposal has expired."
      },
      "isHotfixPassing(bytes32)": {
        "notice": "Checks if a byzantine quorum of validators has whitelisted the given hotfix."
      },
      "isHotfixWhitelistedBy(bytes32,address)": {
        "notice": "Returns whether given hotfix hash has been whitelisted by given address."
      },
      "isProposalPassing(uint256)": {
        "notice": "Returns whether or not a particular proposal is passing according to the constitution  and the participation levels."
      },
      "isQueued(uint256)": {
        "notice": "Returns whether or not a proposal is in the queue."
      },
      "isQueuedProposalExpired(uint256)": {
        "notice": "Returns whether or not a queued proposal has expired."
      },
      "isVoting(address)": {
        "notice": "Returns whether or not a particular account is voting on proposals."
      },
      "minQuorumSize(uint256)": {
        "notice": "Returns the minimum number of required signers for a given block number."
      },
      "minQuorumSizeInCurrentSet()": {
        "notice": "Computes byzantine quorum from current validator set size"
      },
      "prepareHotfix(bytes32)": {
        "notice": "Gives hotfix a prepared epoch for execution."
      },
      "proposalExists(uint256)": {
        "notice": "Returns whether or not a proposal exists."
      },
      "propose(uint256[],address[],bytes,uint256[],string)": {
        "notice": "Creates a new proposal and adds it to end of the queue with no upvotes."
      },
      "removeVotesWhenRevokingDelegatedVotes(address,uint256)": {
        "notice": "When delegator removes votes from delegatee during the time when delegator is voting for governance proposal, this method will remove votes from voted proposal proportionally."
      },
      "revokeUpvote(uint256,uint256)": {
        "notice": "Revokes an upvote on a queued proposal."
      },
      "revokeVotes()": {
        "notice": "Revoke votes on all proposals of sender in the referendum stage."
      },
      "setApprover(address)": {
        "notice": "Updates the address that has permission to approve proposals in the approval stage."
      },
      "setBaselineQuorumFactor(uint256)": {
        "notice": "Updates the proportion of the baseline that constitutes quorum."
      },
      "setBaselineUpdateFactor(uint256)": {
        "notice": "Updates the weight of the new participation in the baseline update rule."
      },
      "setConcurrentProposals(uint256)": {
        "notice": "Updates the number of proposals to dequeue at a time."
      },
      "setConstitution(address,bytes4,uint256)": {
        "notice": "Updates the ratio of yes:yes+no votes needed for a specific class of proposals to pass."
      },
      "setDequeueFrequency(uint256)": {
        "notice": "Updates the minimum number of seconds before the next batch of proposals can be  dequeued."
      },
      "setExecutionStageDuration(uint256)": {
        "notice": "Updates the number of seconds proposals stay in the execution stage."
      },
      "setMinDeposit(uint256)": {
        "notice": "Updates the minimum deposit needed to make a proposal."
      },
      "setParticipationBaseline(uint256)": {
        "notice": "Updates the participation baseline."
      },
      "setParticipationFloor(uint256)": {
        "notice": "Updates the floor of the participation baseline."
      },
      "setQueueExpiry(uint256)": {
        "notice": "Updates the number of seconds before a queued proposal expires."
      },
      "setReferendumStageDuration(uint256)": {
        "notice": "Updates the number of seconds proposals stay in the referendum stage."
      },
      "setRegistry(address)": {
        "notice": "Updates the address pointing to a Registry contract."
      },
      "upvote(uint256,uint256,uint256)": {
        "notice": "Upvotes a queued proposal."
      },
      "validatorSignerAddressFromSet(uint256,uint256)": {
        "notice": "Gets a validator address from the validator set at the given block number."
      },
      "vote(uint256,uint256,uint8)": {
        "notice": "Votes on a proposal in the referendum stage."
      },
      "votePartially(uint256,uint256,uint256,uint256,uint256)": {
        "notice": "Votes partially on a proposal in the referendum stage."
      },
      "whitelistHotfix(bytes32)": {
        "notice": "Whitelists the hash of a hotfix transaction(s)."
      },
      "withdraw()": {
        "notice": "Withdraws refunded CELO deposits."
      }
    }
  }
}