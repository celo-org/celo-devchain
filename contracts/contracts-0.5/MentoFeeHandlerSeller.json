{
  "contractName": "MentoFeeHandlerSeller",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "test",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "minimumReports",
          "type": "uint256"
        }
      ],
      "name": "MinimumReportsSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "registryAddress",
          "type": "address"
        }
      ],
      "name": "RegistrySet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "soldTokenAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "boughtTokenAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "TokenSold",
      "type": "event"
    },
    {
      "payable": true,
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "midPriceNumerator",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "midPriceDenominator",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxSlippage",
          "type": "uint256"
        }
      ],
      "name": "calculateMinAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "_registryAddress",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "tokenAddresses",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "newMininumReports",
          "type": "uint256[]"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "initialized",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "isOwner",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "minimumReports",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "registry",
      "outputs": [
        {
          "internalType": "contract IRegistry",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "newMininumReports",
          "type": "uint256"
        }
      ],
      "name": "setMinimumReports",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "registryAddress",
          "type": "address"
        }
      ],
      "name": "setRegistry",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "getVersionNumber",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "sellTokenAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "buyTokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxSlippage",
          "type": "uint256"
        }
      ],
      "name": "sell",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "metadata": "{\"compiler\":{\"version\":\"0.5.13+commit.5b0b510c\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"test\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minimumReports\",\"type\":\"uint256\"}],\"name\":\"MinimumReportsSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"registryAddress\",\"type\":\"address\"}],\"name\":\"RegistrySet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"soldTokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"boughtTokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenSold\",\"type\":\"event\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"midPriceNumerator\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"midPriceDenominator\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxSlippage\",\"type\":\"uint256\"}],\"name\":\"calculateMinAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getVersionNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_registryAddress\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"tokenAddresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"newMininumReports\",\"type\":\"uint256[]\"}],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"initialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"minimumReports\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"registry\",\"outputs\":[{\"internalType\":\"contract IRegistry\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"sellTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"buyTokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxSlippage\",\"type\":\"uint256\"}],\"name\":\"sell\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"newMininumReports\",\"type\":\"uint256\"}],\"name\":\"setMinimumReports\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"registryAddress\",\"type\":\"address\"}],\"name\":\"setRegistry\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"methods\":{\"calculateMinAmount(uint256,uint256,uint256,uint256)\":{\"details\":\"Calculates the minimum amount of tokens that should be received for the specified  amount with the given mid-price and maximum slippage.\",\"params\":{\"amount\":\"The amount of tokens to be exchanged.\",\"maxSlippage\":\"The maximum slippage percentage as a fraction of the mid-price.\",\"midPriceDenominator\":\"The denominator of the mid-price for the token pair.\",\"midPriceNumerator\":\"The numerator of the mid-price for the token pair.\"},\"return\":\"The minimum amount of tokens that should be received as a uint256 value.\"},\"constructor\":{\"params\":{\"test\":\"Set to true to skip implementation initialisation.\"}},\"getVersionNumber()\":{\"return\":\"Storage version of the contract.Major version of the contract.Minor version of the contract.Patch version of the contract.\"},\"isOwner()\":{\"details\":\"Returns true if the caller is the current owner.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner.     * NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setMinimumReports(address,uint256)\":{\"params\":{\"newMininumReports\":\"The new update minimum number of reports required.\"}},\"setRegistry(address)\":{\"params\":{\"registryAddress\":\"The address of a registry contract for routing to other contracts.\"}},\"transfer(address,uint256,address)\":{\"params\":{\"amount\":\"The amount of tokens to transfer.\",\"to\":\"The address of the recipient to transfer the tokens to.\",\"token\":\"The address of the token to transfer.\"},\"return\":\"A boolean indicating whether the transfer was successful or not.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}}},\"userdoc\":{\"methods\":{\"constructor\":\"Sets initialized == true on implementation contracts.\",\"getVersionNumber()\":{\"notice\":\"Returns the storage, major, minor, and patch version of the contract.\"},\"setMinimumReports(address,uint256)\":{\"notice\":\"Allows owner to set the minimum number of reports required.\"},\"setRegistry(address)\":{\"notice\":\"Updates the address pointing to a Registry contract.\"},\"transfer(address,uint256,address)\":{\"notice\":\"Allows owner to transfer tokens of this contract. It's meant for governance to  trigger use cases not contemplated in this contract.\"}}}},\"settings\":{\"compilationTarget\":{\"project:/contracts/common/MentoFeeHandlerSeller.sol\":\"MentoFeeHandlerSeller\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"openzeppelin-solidity/contracts/GSN/Context.sol\":{\"content\":\"pragma solidity ^0.5.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\ncontract Context {\\n    // Empty internal constructor, to prevent people from mistakenly deploying\\n    // an instance of this contract, which should be used via inheritance.\\n    constructor () internal { }\\n    // solhint-disable-previous-line no-empty-blocks\\n\\n    function _msgSender() internal view returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x90a3995645af7562d84b9d69363ffa5ae7217714ab61e951bf7bc450f40e4061\"},\"openzeppelin-solidity/contracts/math/SafeMath.sol\":{\"content\":\"pragma solidity ^0.5.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        // Solidity only automatically asserts when dividing by 0\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0x640b6dee7a4b830bdfd52b5031a07fc2b12209f5b2e29e5d364a7d37f69d8076\"},\"openzeppelin-solidity/contracts/ownership/Ownable.sol\":{\"content\":\"pragma solidity ^0.5.0;\\n\\nimport \\\"../GSN/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\ncontract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(isOwner(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the caller is the current owner.\\n     */\\n    function isOwner() public view returns (bool) {\\n        return _msgSender() == _owner;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public onlyOwner {\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     */\\n    function _transferOwnership(address newOwner) internal {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x6fb9d7889769d7cc161225f9ef7a90e468ba9788b253816f8d8b6894d3472c24\"},\"openzeppelin-solidity/contracts/token/ERC20/IERC20.sol\":{\"content\":\"pragma solidity ^0.5.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\\n * the optional functions; to access them see {ERC20Detailed}.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xe5bb0f57cff3e299f360052ba50f1ea0fff046df2be070b6943e0e3c3fdad8a9\"},\"project:/contracts/common/FeeHandlerSeller.sol\":{\"content\":\"pragma solidity ^0.5.13;\\n\\nimport \\\"openzeppelin-solidity/contracts/math/SafeMath.sol\\\";\\nimport \\\"../common/FixidityLib.sol\\\";\\nimport \\\"openzeppelin-solidity/contracts/ownership/Ownable.sol\\\";\\nimport \\\"openzeppelin-solidity/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./UsingRegistry.sol\\\";\\nimport \\\"../common/Initializable.sol\\\";\\n\\n// Abstract class for a FeeHandlerSeller, as defined in CIP-52\\n// https://github.com/celo-org/celo-proposals/blob/master/CIPs/cip-0052.md\\ncontract FeeHandlerSeller is Ownable, Initializable, UsingRegistry {\\n  using SafeMath for uint256;\\n  using FixidityLib for FixidityLib.Fraction;\\n\\n  // Address of the token\\n  // Minimal number of reports in SortedOracles contract\\n  mapping(address => uint256) public minimumReports;\\n\\n  event MinimumReportsSet(address tokenAddress, uint256 minimumReports);\\n  event TokenSold(address soldTokenAddress, address boughtTokenAddress, uint256 amount);\\n\\n  function initialize(\\n    address _registryAddress,\\n    address[] calldata tokenAddresses,\\n    uint256[] calldata newMininumReports\\n  ) external initializer {\\n    _transferOwnership(msg.sender);\\n    setRegistry(_registryAddress);\\n\\n    for (uint256 i = 0; i < tokenAddresses.length; i++) {\\n      _setMinimumReports(tokenAddresses[i], newMininumReports[i]);\\n    }\\n  }\\n\\n  /**\\n    * @notice Allows owner to set the minimum number of reports required.\\n    * @param newMininumReports The new update minimum number of reports required.\\n    */\\n  function setMinimumReports(address tokenAddress, uint256 newMininumReports) public onlyOwner {\\n    _setMinimumReports(tokenAddress, newMininumReports);\\n  }\\n\\n  function _setMinimumReports(address tokenAddress, uint256 newMininumReports) internal {\\n    minimumReports[tokenAddress] = newMininumReports;\\n    emit MinimumReportsSet(tokenAddress, newMininumReports);\\n  }\\n\\n  /**\\n    @dev Calculates the minimum amount of tokens that should be received for the specified \\n    amount with the given mid-price and maximum slippage.\\n    @param midPriceNumerator The numerator of the mid-price for the token pair.\\n    @param midPriceDenominator The denominator of the mid-price for the token pair.\\n    @param amount The amount of tokens to be exchanged.\\n    @param maxSlippage The maximum slippage percentage as a fraction of the mid-price.\\n    @return The minimum amount of tokens that should be received as a uint256 value.\\n  */\\n  function calculateMinAmount(\\n    uint256 midPriceNumerator,\\n    uint256 midPriceDenominator,\\n    uint256 amount,\\n    uint256 maxSlippage // as fraction\\n  ) public pure returns (uint256) {\\n    FixidityLib.Fraction memory maxSlippageFraction = FixidityLib.wrap(maxSlippage);\\n\\n    FixidityLib.Fraction memory price = FixidityLib.newFixedFraction(\\n      midPriceNumerator,\\n      midPriceDenominator\\n    );\\n    FixidityLib.Fraction memory amountFraction = FixidityLib.newFixed(amount);\\n    FixidityLib.Fraction memory totalAmount = price.multiply(amountFraction);\\n\\n    return\\n      totalAmount\\n        .subtract(price.multiply(maxSlippageFraction).multiply(amountFraction))\\n        .fromFixed();\\n  }\\n\\n  /**\\n  * @notice Allows owner to transfer tokens of this contract. It's meant for governance to \\n    trigger use cases not contemplated in this contract.\\n    @param token The address of the token to transfer.\\n    @param amount The amount of tokens to transfer.\\n    @param to The address of the recipient to transfer the tokens to.\\n    @return A boolean indicating whether the transfer was successful or not.\\n  */\\n  function transfer(address token, uint256 amount, address to) external onlyOwner returns (bool) {\\n    return IERC20(token).transfer(to, amount);\\n  }\\n}\\n\",\"keccak256\":\"0x566b158033df73c864c267aabdbd163ebfc45b16b70e0e3898f153c52874956b\"},\"project:/contracts/common/FixidityLib.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.5.13 <0.9.0;\\n\\n/**\\n * @title FixidityLib\\n * @author Gadi Guy, Alberto Cuesta Canada\\n * @notice This library provides fixed point arithmetic with protection against\\n * overflow.\\n * All operations are done with uint256 and the operands must have been created\\n * with any of the newFrom* functions, which shift the comma digits() to the\\n * right and check for limits, or with wrap() which expects a number already\\n * in the internal representation of a fraction.\\n * When using this library be sure to use maxNewFixed() as the upper limit for\\n * creation of fixed point numbers.\\n * @dev All contained functions are pure and thus marked internal to be inlined\\n * on consuming contracts at compile time for gas efficiency.\\n */\\nlibrary FixidityLib {\\n  struct Fraction {\\n    uint256 value;\\n  }\\n\\n  /**\\n   * @notice Number of positions that the comma is shifted to the right.\\n   */\\n  function digits() internal pure returns (uint8) {\\n    return 24;\\n  }\\n\\n  uint256 private constant FIXED1_UINT = 1000000000000000000000000;\\n\\n  /**\\n   * @notice This is 1 in the fixed point units used in this library.\\n   * @dev Test fixed1() equals 10^digits()\\n   * Hardcoded to 24 digits.\\n   */\\n  function fixed1() internal pure returns (Fraction memory) {\\n    return Fraction(FIXED1_UINT);\\n  }\\n\\n  /**\\n   * @notice Wrap a uint256 that represents a 24-decimal fraction in a Fraction\\n   * struct.\\n   * @param x Number that already represents a 24-decimal fraction.\\n   * @return A Fraction struct with contents x.\\n   */\\n  function wrap(uint256 x) internal pure returns (Fraction memory) {\\n    return Fraction(x);\\n  }\\n\\n  /**\\n   * @notice Unwraps the uint256 inside of a Fraction struct.\\n   */\\n  function unwrap(Fraction memory x) internal pure returns (uint256) {\\n    return x.value;\\n  }\\n\\n  /**\\n   * @notice The amount of decimals lost on each multiplication operand.\\n   * @dev Test mulPrecision() equals sqrt(fixed1)\\n   */\\n  function mulPrecision() internal pure returns (uint256) {\\n    return 1000000000000;\\n  }\\n\\n  /**\\n   * @notice Maximum value that can be converted to fixed point. Optimize for deployment.\\n   * @dev\\n   * Test maxNewFixed() equals maxUint256() / fixed1()\\n   */\\n  function maxNewFixed() internal pure returns (uint256) {\\n    return 115792089237316195423570985008687907853269984665640564;\\n  }\\n\\n  /**\\n   * @notice Converts a uint256 to fixed point Fraction\\n   * @dev Test newFixed(0) returns 0\\n   * Test newFixed(1) returns fixed1()\\n   * Test newFixed(maxNewFixed()) returns maxNewFixed() * fixed1()\\n   * Test newFixed(maxNewFixed()+1) fails\\n   */\\n  function newFixed(uint256 x) internal pure returns (Fraction memory) {\\n    require(x <= maxNewFixed(), \\\"can't create fixidity number larger than maxNewFixed()\\\");\\n    return Fraction(x * FIXED1_UINT);\\n  }\\n\\n  /**\\n   * @notice Converts a uint256 in the fixed point representation of this\\n   * library to a non decimal. All decimal digits will be truncated.\\n   */\\n  function fromFixed(Fraction memory x) internal pure returns (uint256) {\\n    return x.value / FIXED1_UINT;\\n  }\\n\\n  /**\\n   * @notice Converts two uint256 representing a fraction to fixed point units,\\n   * equivalent to multiplying dividend and divisor by 10^digits().\\n   * @param numerator numerator must be <= maxNewFixed()\\n   * @param denominator denominator must be <= maxNewFixed() and denominator can't be 0\\n   * @dev\\n   * Test newFixedFraction(1,0) fails\\n   * Test newFixedFraction(0,1) returns 0\\n   * Test newFixedFraction(1,1) returns fixed1()\\n   * Test newFixedFraction(1,fixed1()) returns 1\\n   */\\n  function newFixedFraction(uint256 numerator, uint256 denominator)\\n    internal\\n    pure\\n    returns (Fraction memory)\\n  {\\n    Fraction memory convertedNumerator = newFixed(numerator);\\n    Fraction memory convertedDenominator = newFixed(denominator);\\n    return divide(convertedNumerator, convertedDenominator);\\n  }\\n\\n  /**\\n   * @notice Returns the integer part of a fixed point number.\\n   * @dev\\n   * Test integer(0) returns 0\\n   * Test integer(fixed1()) returns fixed1()\\n   * Test integer(newFixed(maxNewFixed())) returns maxNewFixed()*fixed1()\\n   */\\n  function integer(Fraction memory x) internal pure returns (Fraction memory) {\\n    return Fraction((x.value / FIXED1_UINT) * FIXED1_UINT); // Can't overflow\\n  }\\n\\n  /**\\n   * @notice Returns the fractional part of a fixed point number.\\n   * In the case of a negative number the fractional is also negative.\\n   * @dev\\n   * Test fractional(0) returns 0\\n   * Test fractional(fixed1()) returns 0\\n   * Test fractional(fixed1()-1) returns 10^24-1\\n   */\\n  function fractional(Fraction memory x) internal pure returns (Fraction memory) {\\n    return Fraction(x.value - (x.value / FIXED1_UINT) * FIXED1_UINT); // Can't overflow\\n  }\\n\\n  /**\\n   * @notice x+y.\\n   * @dev The maximum value that can be safely used as an addition operator is defined as\\n   * maxFixedAdd = maxUint256()-1 / 2, or\\n   * 57896044618658097711785492504343953926634992332820282019728792003956564819967.\\n   * Test add(maxFixedAdd,maxFixedAdd) equals maxFixedAdd + maxFixedAdd\\n   * Test add(maxFixedAdd+1,maxFixedAdd+1) throws\\n   */\\n  function add(Fraction memory x, Fraction memory y) internal pure returns (Fraction memory) {\\n    uint256 z = x.value + y.value;\\n    require(z >= x.value, \\\"add overflow detected\\\");\\n    return Fraction(z);\\n  }\\n\\n  /**\\n   * @notice x-y.\\n   * @dev\\n   * Test subtract(6, 10) fails\\n   */\\n  function subtract(Fraction memory x, Fraction memory y) internal pure returns (Fraction memory) {\\n    require(x.value >= y.value, \\\"substraction underflow detected\\\");\\n    return Fraction(x.value - y.value);\\n  }\\n\\n  /**\\n   * @notice x*y. If any of the operators is higher than the max multiplier value it\\n   * might overflow.\\n   * @dev The maximum value that can be safely used as a multiplication operator\\n   * (maxFixedMul) is calculated as sqrt(maxUint256()*fixed1()),\\n   * or 340282366920938463463374607431768211455999999999999\\n   * Test multiply(0,0) returns 0\\n   * Test multiply(maxFixedMul,0) returns 0\\n   * Test multiply(0,maxFixedMul) returns 0\\n   * Test multiply(fixed1()/mulPrecision(),fixed1()*mulPrecision()) returns fixed1()\\n   * Test multiply(maxFixedMul,maxFixedMul) is around maxUint256()\\n   * Test multiply(maxFixedMul+1,maxFixedMul+1) fails\\n   */\\n  function multiply(Fraction memory x, Fraction memory y) internal pure returns (Fraction memory) {\\n    if (x.value == 0 || y.value == 0) return Fraction(0);\\n    if (y.value == FIXED1_UINT) return x;\\n    if (x.value == FIXED1_UINT) return y;\\n\\n    // Separate into integer and fractional parts\\n    // x = x1 + x2, y = y1 + y2\\n    uint256 x1 = integer(x).value / FIXED1_UINT;\\n    uint256 x2 = fractional(x).value;\\n    uint256 y1 = integer(y).value / FIXED1_UINT;\\n    uint256 y2 = fractional(y).value;\\n\\n    // (x1 + x2) * (y1 + y2) = (x1 * y1) + (x1 * y2) + (x2 * y1) + (x2 * y2)\\n    uint256 x1y1 = x1 * y1;\\n    if (x1 != 0) require(x1y1 / x1 == y1, \\\"overflow x1y1 detected\\\");\\n\\n    // x1y1 needs to be multiplied back by fixed1\\n    // solium-disable-next-line mixedcase\\n    uint256 fixed_x1y1 = x1y1 * FIXED1_UINT;\\n    if (x1y1 != 0) require(fixed_x1y1 / x1y1 == FIXED1_UINT, \\\"overflow x1y1 * fixed1 detected\\\");\\n    x1y1 = fixed_x1y1;\\n\\n    uint256 x2y1 = x2 * y1;\\n    if (x2 != 0) require(x2y1 / x2 == y1, \\\"overflow x2y1 detected\\\");\\n\\n    uint256 x1y2 = x1 * y2;\\n    if (x1 != 0) require(x1y2 / x1 == y2, \\\"overflow x1y2 detected\\\");\\n\\n    x2 = x2 / mulPrecision();\\n    y2 = y2 / mulPrecision();\\n    uint256 x2y2 = x2 * y2;\\n    if (x2 != 0) require(x2y2 / x2 == y2, \\\"overflow x2y2 detected\\\");\\n\\n    // result = fixed1() * x1 * y1 + x1 * y2 + x2 * y1 + x2 * y2 / fixed1();\\n    Fraction memory result = Fraction(x1y1);\\n    result = add(result, Fraction(x2y1)); // Add checks for overflow\\n    result = add(result, Fraction(x1y2)); // Add checks for overflow\\n    result = add(result, Fraction(x2y2)); // Add checks for overflow\\n    return result;\\n  }\\n\\n  /**\\n   * @notice 1/x\\n   * @dev\\n   * Test reciprocal(0) fails\\n   * Test reciprocal(fixed1()) returns fixed1()\\n   * Test reciprocal(fixed1()*fixed1()) returns 1 // Testing how the fractional is truncated\\n   * Test reciprocal(1+fixed1()*fixed1()) returns 0 // Testing how the fractional is truncated\\n   * Test reciprocal(newFixedFraction(1, 1e24)) returns newFixed(1e24)\\n   */\\n  function reciprocal(Fraction memory x) internal pure returns (Fraction memory) {\\n    require(x.value != 0, \\\"can't call reciprocal(0)\\\");\\n    return Fraction((FIXED1_UINT * FIXED1_UINT) / x.value); // Can't overflow\\n  }\\n\\n  /**\\n   * @notice x/y. If the dividend is higher than the max dividend value, it\\n   * might overflow. You can use multiply(x,reciprocal(y)) instead.\\n   * @dev The maximum value that can be safely used as a dividend (maxNewFixed) is defined as\\n   * divide(maxNewFixed,newFixedFraction(1,fixed1())) is around maxUint256().\\n   * This yields the value 115792089237316195423570985008687907853269984665640564.\\n   * Test maxNewFixed equals maxUint256()/fixed1()\\n   * Test divide(maxNewFixed,1) equals maxNewFixed*(fixed1)\\n   * Test divide(maxNewFixed+1,multiply(mulPrecision(),mulPrecision())) throws\\n   * Test divide(fixed1(),0) fails\\n   * Test divide(maxNewFixed,1) = maxNewFixed*(10^digits())\\n   * Test divide(maxNewFixed+1,1) throws\\n   */\\n  function divide(Fraction memory x, Fraction memory y) internal pure returns (Fraction memory) {\\n    require(y.value != 0, \\\"can't divide by 0\\\");\\n    uint256 X = x.value * FIXED1_UINT;\\n    require(X / FIXED1_UINT == x.value, \\\"overflow at divide\\\");\\n    return Fraction(X / y.value);\\n  }\\n\\n  /**\\n   * @notice x > y\\n   */\\n  function gt(Fraction memory x, Fraction memory y) internal pure returns (bool) {\\n    return x.value > y.value;\\n  }\\n\\n  /**\\n   * @notice x >= y\\n   */\\n  function gte(Fraction memory x, Fraction memory y) internal pure returns (bool) {\\n    return x.value >= y.value;\\n  }\\n\\n  /**\\n   * @notice x < y\\n   */\\n  function lt(Fraction memory x, Fraction memory y) internal pure returns (bool) {\\n    return x.value < y.value;\\n  }\\n\\n  /**\\n   * @notice x <= y\\n   */\\n  function lte(Fraction memory x, Fraction memory y) internal pure returns (bool) {\\n    return x.value <= y.value;\\n  }\\n\\n  /**\\n   * @notice x == y\\n   */\\n  function equals(Fraction memory x, Fraction memory y) internal pure returns (bool) {\\n    return x.value == y.value;\\n  }\\n\\n  /**\\n   * @notice x <= 1\\n   */\\n  function isProperFraction(Fraction memory x) internal pure returns (bool) {\\n    return lte(x, fixed1());\\n  }\\n}\\n\",\"keccak256\":\"0xf1cebbfcf298ef05f24e940ab4351049e2da6e5ee77b272257d2c86b4cd1cc1c\"},\"project:/contracts/common/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.5.13 <0.9.0;\\n\\ncontract Initializable {\\n  bool public initialized;\\n\\n  constructor(bool testingDeployment) public {\\n    if (!testingDeployment) {\\n      initialized = true;\\n    }\\n  }\\n\\n  modifier initializer() {\\n    require(!initialized, \\\"contract already initialized\\\");\\n    initialized = true;\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0x27277d9f2c894659833be45eeca368a6d5ff060d944f0ad335e31003bf6477ed\"},\"project:/contracts/common/MentoFeeHandlerSeller.sol\":{\"content\":\"pragma solidity ^0.5.13;\\n\\nimport \\\"openzeppelin-solidity/contracts/math/SafeMath.sol\\\";\\nimport \\\"openzeppelin-solidity/contracts/ownership/Ownable.sol\\\";\\nimport \\\"openzeppelin-solidity/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport \\\"../../lib/mento-core/contracts/interfaces/IExchange.sol\\\";\\nimport \\\"./interfaces/IStableTokenMento.sol\\\";\\n\\nimport \\\"./UsingRegistry.sol\\\";\\nimport \\\"../common/interfaces/IFeeHandlerSeller.sol\\\";\\nimport \\\"../stability/interfaces/ISortedOracles.sol\\\";\\nimport \\\"../common/FixidityLib.sol\\\";\\nimport \\\"../common/Initializable.sol\\\";\\nimport \\\"./FeeHandlerSeller.sol\\\";\\n\\n// An implementation of FeeHandlerSeller supporting interfaces compatible with\\n// Mento\\n// See https://github.com/celo-org/celo-proposals/blob/master/CIPs/cip-0052.md\\ncontract MentoFeeHandlerSeller is IFeeHandlerSeller, FeeHandlerSeller {\\n  using SafeMath for uint256;\\n  using FixidityLib for FixidityLib.Fraction;\\n\\n  /**\\n   * @notice Sets initialized == true on implementation contracts.\\n   * @param test Set to true to skip implementation initialisation.\\n   */\\n  constructor(bool test) public Initializable(test) {}\\n\\n  // without this line the contract can't receive native Celo transfers\\n  function() external payable {}\\n\\n  /**\\n   * @notice Returns the storage, major, minor, and patch version of the contract.\\n   * @return Storage version of the contract.\\n   * @return Major version of the contract.\\n   * @return Minor version of the contract.\\n   * @return Patch version of the contract.\\n   */\\n  function getVersionNumber() external pure returns (uint256, uint256, uint256, uint256) {\\n    return (1, 1, 0, 0);\\n  }\\n\\n  function sell(\\n    address sellTokenAddress,\\n    address buyTokenAddress,\\n    uint256 amount,\\n    uint256 maxSlippage // as fraction,\\n  ) external returns (uint256) {\\n    require(\\n      buyTokenAddress == registry.getAddressForOrDie(GOLD_TOKEN_REGISTRY_ID),\\n      \\\"Buy token can only be gold token\\\"\\n    );\\n\\n    IStableTokenMento stableToken = IStableTokenMento(sellTokenAddress);\\n    require(amount <= stableToken.balanceOf(address(this)), \\\"Balance of token to burn not enough\\\");\\n\\n    address exchangeAddress = registry.getAddressForOrDie(stableToken.getExchangeRegistryId());\\n\\n    IExchange exchange = IExchange(exchangeAddress);\\n\\n    uint256 minAmount = 0;\\n\\n    ISortedOracles sortedOracles = getSortedOracles();\\n\\n    require(\\n      sortedOracles.numRates(sellTokenAddress) >= minimumReports[sellTokenAddress],\\n      \\\"Number of reports for token not enough\\\"\\n    );\\n\\n    (uint256 rateNumerator, uint256 rateDenominator) = sortedOracles.medianRate(sellTokenAddress);\\n    minAmount = calculateMinAmount(rateNumerator, rateDenominator, amount, maxSlippage);\\n\\n    // TODO an upgrade would be to compare using routers as well\\n    stableToken.approve(exchangeAddress, amount);\\n    exchange.sell(amount, minAmount, false);\\n\\n    IERC20 goldToken = getGoldToken();\\n    uint256 celoAmount = goldToken.balanceOf(address(this));\\n    goldToken.transfer(msg.sender, celoAmount);\\n\\n    emit TokenSold(sellTokenAddress, buyTokenAddress, amount);\\n    return celoAmount;\\n  }\\n}\\n\",\"keccak256\":\"0x0494a5a91af8021a24cad8bce4f334d5f1d7aeab3251865685bbc8d26e80c9bc\"},\"project:/contracts/common/UsingRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity ^0.5.13;\\n\\nimport \\\"openzeppelin-solidity/contracts/ownership/Ownable.sol\\\";\\nimport \\\"openzeppelin-solidity/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport \\\"./interfaces/IAccounts.sol\\\";\\nimport \\\"./interfaces/IFeeCurrencyWhitelist.sol\\\";\\nimport \\\"./interfaces/IFreezer.sol\\\";\\nimport \\\"./interfaces/IRegistry.sol\\\";\\n\\nimport \\\"../governance/interfaces/IElection.sol\\\";\\nimport \\\"../governance/interfaces/IGovernance.sol\\\";\\nimport \\\"../governance/interfaces/ILockedGold.sol\\\";\\nimport \\\"../governance/interfaces/IValidators.sol\\\";\\n\\nimport \\\"../identity/interfaces/IRandom.sol\\\";\\nimport \\\"../identity/interfaces/IAttestations.sol\\\";\\n\\nimport \\\"../../lib/mento-core/contracts/interfaces/IExchange.sol\\\";\\nimport \\\"../../lib/mento-core/contracts/interfaces/IReserve.sol\\\";\\nimport \\\"../../lib/mento-core/contracts/interfaces/IStableToken.sol\\\";\\nimport \\\"../stability/interfaces/ISortedOracles.sol\\\";\\n\\ncontract UsingRegistry is Ownable {\\n  event RegistrySet(address indexed registryAddress);\\n\\n  // solhint-disable state-visibility\\n  bytes32 constant ACCOUNTS_REGISTRY_ID = keccak256(abi.encodePacked(\\\"Accounts\\\"));\\n  bytes32 constant ATTESTATIONS_REGISTRY_ID = keccak256(abi.encodePacked(\\\"Attestations\\\"));\\n  bytes32 constant DOWNTIME_SLASHER_REGISTRY_ID = keccak256(abi.encodePacked(\\\"DowntimeSlasher\\\"));\\n  bytes32 constant DOUBLE_SIGNING_SLASHER_REGISTRY_ID = keccak256(\\n    abi.encodePacked(\\\"DoubleSigningSlasher\\\")\\n  );\\n  bytes32 constant ELECTION_REGISTRY_ID = keccak256(abi.encodePacked(\\\"Election\\\"));\\n  bytes32 constant EXCHANGE_REGISTRY_ID = keccak256(abi.encodePacked(\\\"Exchange\\\"));\\n  bytes32 constant FEE_CURRENCY_WHITELIST_REGISTRY_ID = keccak256(\\n    abi.encodePacked(\\\"FeeCurrencyWhitelist\\\")\\n  );\\n  bytes32 constant FREEZER_REGISTRY_ID = keccak256(abi.encodePacked(\\\"Freezer\\\"));\\n  bytes32 constant GOLD_TOKEN_REGISTRY_ID = keccak256(abi.encodePacked(\\\"GoldToken\\\"));\\n  bytes32 constant GOVERNANCE_REGISTRY_ID = keccak256(abi.encodePacked(\\\"Governance\\\"));\\n  bytes32 constant GOVERNANCE_SLASHER_REGISTRY_ID = keccak256(\\n    abi.encodePacked(\\\"GovernanceSlasher\\\")\\n  );\\n  bytes32 constant LOCKED_GOLD_REGISTRY_ID = keccak256(abi.encodePacked(\\\"LockedGold\\\"));\\n  bytes32 constant RESERVE_REGISTRY_ID = keccak256(abi.encodePacked(\\\"Reserve\\\"));\\n  bytes32 constant RANDOM_REGISTRY_ID = keccak256(abi.encodePacked(\\\"Random\\\"));\\n  bytes32 constant SORTED_ORACLES_REGISTRY_ID = keccak256(abi.encodePacked(\\\"SortedOracles\\\"));\\n  bytes32 constant STABLE_TOKEN_REGISTRY_ID = keccak256(abi.encodePacked(\\\"StableToken\\\"));\\n  bytes32 constant VALIDATORS_REGISTRY_ID = keccak256(abi.encodePacked(\\\"Validators\\\"));\\n  // solhint-enable state-visibility\\n\\n  IRegistry public registry;\\n\\n  modifier onlyRegisteredContract(bytes32 identifierHash) {\\n    require(registry.getAddressForOrDie(identifierHash) == msg.sender, \\\"only registered contract\\\");\\n    _;\\n  }\\n\\n  modifier onlyRegisteredContracts(bytes32[] memory identifierHashes) {\\n    require(registry.isOneOf(identifierHashes, msg.sender), \\\"only registered contracts\\\");\\n    _;\\n  }\\n\\n  /**\\n   * @notice Updates the address pointing to a Registry contract.\\n   * @param registryAddress The address of a registry contract for routing to other contracts.\\n   */\\n  function setRegistry(address registryAddress) public onlyOwner {\\n    require(registryAddress != address(0), \\\"Cannot register the null address\\\");\\n    registry = IRegistry(registryAddress);\\n    emit RegistrySet(registryAddress);\\n  }\\n\\n  function getAccounts() internal view returns (IAccounts) {\\n    return IAccounts(registry.getAddressForOrDie(ACCOUNTS_REGISTRY_ID));\\n  }\\n\\n  function getAttestations() internal view returns (IAttestations) {\\n    return IAttestations(registry.getAddressForOrDie(ATTESTATIONS_REGISTRY_ID));\\n  }\\n\\n  function getElection() internal view returns (IElection) {\\n    return IElection(registry.getAddressForOrDie(ELECTION_REGISTRY_ID));\\n  }\\n\\n  function getExchange() internal view returns (IExchange) {\\n    return IExchange(registry.getAddressForOrDie(EXCHANGE_REGISTRY_ID));\\n  }\\n\\n  function getFeeCurrencyWhitelistRegistry() internal view returns (IFeeCurrencyWhitelist) {\\n    return IFeeCurrencyWhitelist(registry.getAddressForOrDie(FEE_CURRENCY_WHITELIST_REGISTRY_ID));\\n  }\\n\\n  function getFreezer() internal view returns (IFreezer) {\\n    return IFreezer(registry.getAddressForOrDie(FREEZER_REGISTRY_ID));\\n  }\\n\\n  function getGoldToken() internal view returns (IERC20) {\\n    return IERC20(registry.getAddressForOrDie(GOLD_TOKEN_REGISTRY_ID));\\n  }\\n\\n  function getGovernance() internal view returns (IGovernance) {\\n    return IGovernance(registry.getAddressForOrDie(GOVERNANCE_REGISTRY_ID));\\n  }\\n\\n  function getLockedGold() internal view returns (ILockedGold) {\\n    return ILockedGold(registry.getAddressForOrDie(LOCKED_GOLD_REGISTRY_ID));\\n  }\\n\\n  function getRandom() internal view returns (IRandom) {\\n    return IRandom(registry.getAddressForOrDie(RANDOM_REGISTRY_ID));\\n  }\\n\\n  function getReserve() internal view returns (IReserve) {\\n    return IReserve(registry.getAddressForOrDie(RESERVE_REGISTRY_ID));\\n  }\\n\\n  function getSortedOracles() internal view returns (ISortedOracles) {\\n    return ISortedOracles(registry.getAddressForOrDie(SORTED_ORACLES_REGISTRY_ID));\\n  }\\n\\n  function getStableToken() internal view returns (IStableToken) {\\n    return IStableToken(registry.getAddressForOrDie(STABLE_TOKEN_REGISTRY_ID));\\n  }\\n\\n  function getValidators() internal view returns (IValidators) {\\n    return IValidators(registry.getAddressForOrDie(VALIDATORS_REGISTRY_ID));\\n  }\\n}\\n\",\"keccak256\":\"0x31ec0f16867a35046f9e1211ac3457198e39abc2362d2d559f4ccc4a3985a9ac\"},\"project:/contracts/common/interfaces/IAccounts.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.5.13 <0.9.0;\\n\\ninterface IAccounts {\\n  function isAccount(address) external view returns (bool);\\n  function voteSignerToAccount(address) external view returns (address);\\n  function validatorSignerToAccount(address) external view returns (address);\\n  function attestationSignerToAccount(address) external view returns (address);\\n  function signerToAccount(address) external view returns (address);\\n  function getAttestationSigner(address) external view returns (address);\\n  function getValidatorSigner(address) external view returns (address);\\n  function getVoteSigner(address) external view returns (address);\\n  function hasAuthorizedVoteSigner(address) external view returns (bool);\\n  function hasAuthorizedValidatorSigner(address) external view returns (bool);\\n  function hasAuthorizedAttestationSigner(address) external view returns (bool);\\n\\n  function setAccountDataEncryptionKey(bytes calldata) external;\\n  function setMetadataURL(string calldata) external;\\n  function setName(string calldata) external;\\n  function setWalletAddress(address, uint8, bytes32, bytes32) external;\\n  function setAccount(string calldata, bytes calldata, address, uint8, bytes32, bytes32) external;\\n\\n  function getDataEncryptionKey(address) external view returns (bytes memory);\\n  function getWalletAddress(address) external view returns (address);\\n  function getMetadataURL(address) external view returns (string memory);\\n  function batchGetMetadataURL(address[] calldata)\\n    external\\n    view\\n    returns (uint256[] memory, bytes memory);\\n  function getName(address) external view returns (string memory);\\n\\n  function authorizeVoteSigner(address, uint8, bytes32, bytes32) external;\\n  function authorizeValidatorSigner(address, uint8, bytes32, bytes32) external;\\n  function authorizeValidatorSignerWithPublicKey(address, uint8, bytes32, bytes32, bytes calldata)\\n    external;\\n  function authorizeValidatorSignerWithKeys(\\n    address,\\n    uint8,\\n    bytes32,\\n    bytes32,\\n    bytes calldata,\\n    bytes calldata,\\n    bytes calldata\\n  ) external;\\n  function authorizeAttestationSigner(address, uint8, bytes32, bytes32) external;\\n  function createAccount() external returns (bool);\\n\\n  function setPaymentDelegation(address, uint256) external;\\n  function getPaymentDelegation(address) external view returns (address, uint256);\\n  function isSigner(address, address, bytes32) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x17a0ff4b1c2da32f5de9c0fe230fcb325b2bbabcf51980cfb425cec75f678f5e\"},\"project:/contracts/common/interfaces/IFeeCurrencyWhitelist.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.5.13 <0.9.0;\\n\\ninterface IFeeCurrencyWhitelist {\\n  function addToken(address) external;\\n  function getWhitelist() external view returns (address[] memory);\\n}\\n\",\"keccak256\":\"0x4a91e634d22e8b8c36ef16113d7403029f334affb38f2453f0453f4ba06a925e\"},\"project:/contracts/common/interfaces/IFeeHandlerSeller.sol\":{\"content\":\"pragma solidity ^0.5.13;\\n\\nimport \\\"../FixidityLib.sol\\\";\\n\\ninterface IFeeHandlerSeller {\\n  function sell(\\n    address sellTokenAddress,\\n    address buyTokenAddress,\\n    uint256 amount,\\n    uint256 minAmount\\n  ) external returns (uint256);\\n  // in case some funds need to be returned or moved to another contract\\n  function transfer(address token, uint256 amount, address to) external returns (bool);\\n}\\n\",\"keccak256\":\"0xbd24e41e74129592bd51f85e97ad1776b31994040359a820a3486bac976e5372\"},\"project:/contracts/common/interfaces/IFreezer.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.5.13 <0.9.0;\\n\\ninterface IFreezer {\\n  function isFrozen(address) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x6c34df21ba7ae83d9b47153bec2ffdb74128c11c0a9f20edaca927967fda4786\"},\"project:/contracts/common/interfaces/IRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.5.13 <0.9.0;\\n\\ninterface IRegistry {\\n  function setAddressFor(string calldata, address) external;\\n  function getAddressForOrDie(bytes32) external view returns (address);\\n  function getAddressFor(bytes32) external view returns (address);\\n  function getAddressForStringOrDie(string calldata identifier) external view returns (address);\\n  function getAddressForString(string calldata identifier) external view returns (address);\\n  function isOneOf(bytes32[] calldata, address) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x7737cbda6f3519bf6a4108e07b2c991a655e8731a4c040a3681e9629cfc4b52d\"},\"project:/contracts/common/interfaces/IStableTokenMento.sol\":{\"content\":\"pragma solidity ^0.5.13;\\n\\n/**\\n * @title This interface describes the functions specific to Celo Stable Tokens, and in the\\n * absence of interface inheritance is intended as a companion to IERC20.sol and ICeloToken.sol.\\n */\\ninterface IStableTokenMento {\\n  function mint(address, uint256) external returns (bool);\\n\\n  function burn(uint256) external returns (bool);\\n\\n  function setInflationParameters(uint256, uint256) external;\\n\\n  function valueToUnits(uint256) external view returns (uint256);\\n\\n  function unitsToValue(uint256) external view returns (uint256);\\n\\n  function getInflationParameters() external view returns (uint256, uint256, uint256, uint256);\\n\\n  // NOTE: duplicated with IERC20.sol, remove once interface inheritance is supported.\\n  function balanceOf(address) external view returns (uint256);\\n\\n  function getExchangeRegistryId() external view returns (bytes32);\\n\\n  function approve(address spender, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0x5ea0f403bfba398696d1d45e49580754d3a0f0b20fa9976a75bc49ea582e71e9\"},\"project:/contracts/governance/interfaces/IElection.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.5.13 <0.9.0;\\n\\ninterface IElection {\\n  function electValidatorSigners() external view returns (address[] memory);\\n  function electNValidatorSigners(uint256, uint256) external view returns (address[] memory);\\n  function vote(address, uint256, address, address) external returns (bool);\\n  function activate(address) external returns (bool);\\n  function revokeActive(address, uint256, address, address, uint256) external returns (bool);\\n  function revokeAllActive(address, address, address, uint256) external returns (bool);\\n  function revokePending(address, uint256, address, address, uint256) external returns (bool);\\n  function markGroupIneligible(address) external;\\n  function markGroupEligible(address, address, address) external;\\n  function allowedToVoteOverMaxNumberOfGroups(address) external returns (bool);\\n  function forceDecrementVotes(\\n    address,\\n    uint256,\\n    address[] calldata,\\n    address[] calldata,\\n    uint256[] calldata\\n  ) external returns (uint256);\\n  function setAllowedToVoteOverMaxNumberOfGroups(bool flag) external;\\n\\n  // view functions\\n  function getElectableValidators() external view returns (uint256, uint256);\\n  function getElectabilityThreshold() external view returns (uint256);\\n  function getNumVotesReceivable(address) external view returns (uint256);\\n  function getTotalVotes() external view returns (uint256);\\n  function getActiveVotes() external view returns (uint256);\\n  function getTotalVotesByAccount(address) external view returns (uint256);\\n  function getPendingVotesForGroupByAccount(address, address) external view returns (uint256);\\n  function getActiveVotesForGroupByAccount(address, address) external view returns (uint256);\\n  function getTotalVotesForGroupByAccount(address, address) external view returns (uint256);\\n  function getActiveVoteUnitsForGroupByAccount(address, address) external view returns (uint256);\\n  function getTotalVotesForGroup(address) external view returns (uint256);\\n  function getActiveVotesForGroup(address) external view returns (uint256);\\n  function getPendingVotesForGroup(address) external view returns (uint256);\\n  function getGroupEligibility(address) external view returns (bool);\\n  function getGroupEpochRewards(address, uint256, uint256[] calldata)\\n    external\\n    view\\n    returns (uint256);\\n  function getGroupsVotedForByAccount(address) external view returns (address[] memory);\\n  function getEligibleValidatorGroups() external view returns (address[] memory);\\n  function getTotalVotesForEligibleValidatorGroups()\\n    external\\n    view\\n    returns (address[] memory, uint256[] memory);\\n  function getCurrentValidatorSigners() external view returns (address[] memory);\\n  function canReceiveVotes(address, uint256) external view returns (bool);\\n  function hasActivatablePendingVotes(address, address) external view returns (bool);\\n  function validatorSignerAddressFromCurrentSet(uint256 index) external view returns (address);\\n  function numberValidatorsInCurrentSet() external view returns (uint256);\\n\\n  // only owner\\n  function setElectableValidators(uint256, uint256) external returns (bool);\\n  function setMaxNumGroupsVotedFor(uint256) external returns (bool);\\n  function setElectabilityThreshold(uint256) external returns (bool);\\n\\n  // only VM\\n  function distributeEpochRewards(address, uint256, address, address) external;\\n}\\n\",\"keccak256\":\"0x2b7195aaef2f49cfd9a5b1106fd6841701e0dc92752b97d4909947b3127460c7\"},\"project:/contracts/governance/interfaces/IGovernance.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.5.13 <0.9.0;\\n\\ninterface IGovernance {\\n  function removeVotesWhenRevokingDelegatedVotes(address account, uint256 maxAmountAllowed)\\n    external;\\n  function votePartially(\\n    uint256 proposalId,\\n    uint256 index,\\n    uint256 yesVotes,\\n    uint256 noVotes,\\n    uint256 abstainVotes\\n  ) external returns (bool);\\n\\n  function isVoting(address) external view returns (bool);\\n  function getAmountOfGoldUsedForVoting(address account) external view returns (uint256);\\n\\n  function getProposal(uint256 proposalId)\\n    external\\n    view\\n    returns (address, uint256, uint256, uint256, string memory, uint256, bool);\\n\\n  function getReferendumStageDuration() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x19499ae304c70805e523ebf674c2983e8dc428f49a9da5b89e8450c2cd12997b\"},\"project:/contracts/governance/interfaces/ILockedGold.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.5.13 <0.9.0;\\n\\ninterface ILockedGold {\\n  function lock() external payable;\\n  function incrementNonvotingAccountBalance(address, uint256) external;\\n  function decrementNonvotingAccountBalance(address, uint256) external;\\n  function getAccountTotalLockedGold(address) external view returns (uint256);\\n  function getTotalLockedGold() external view returns (uint256);\\n  function getPendingWithdrawals(address)\\n    external\\n    view\\n    returns (uint256[] memory, uint256[] memory);\\n  function getPendingWithdrawal(address account, uint256 index)\\n    external\\n    view\\n    returns (uint256, uint256);\\n  function getTotalPendingWithdrawals(address) external view returns (uint256);\\n  function unlock(uint256) external;\\n  function relock(uint256, uint256) external;\\n  function withdraw(uint256) external;\\n  function slash(\\n    address account,\\n    uint256 penalty,\\n    address reporter,\\n    uint256 reward,\\n    address[] calldata lessers,\\n    address[] calldata greaters,\\n    uint256[] calldata indices\\n  ) external;\\n  function isSlasher(address) external view returns (bool);\\n\\n  function getAccountTotalDelegatedFraction(address account) external view returns (uint256);\\n\\n  function getAccountTotalGovernanceVotingPower(address account) external view returns (uint256);\\n  function unlockingPeriod() external view returns (uint256);\\n  function getAccountNonvotingLockedGold(address account) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xcb6530457f85fc492a9714baca95f52a915dc91472cbd1f987ab4347d2e2d1bc\"},\"project:/contracts/governance/interfaces/IValidators.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.5.13 <0.9.0;\\n\\ninterface IValidators {\\n  function registerValidator(bytes calldata, bytes calldata, bytes calldata)\\n    external\\n    returns (bool);\\n  function deregisterValidator(uint256) external returns (bool);\\n  function affiliate(address) external returns (bool);\\n  function deaffiliate() external returns (bool);\\n  function updateBlsPublicKey(bytes calldata, bytes calldata) external returns (bool);\\n  function registerValidatorGroup(uint256) external returns (bool);\\n  function deregisterValidatorGroup(uint256) external returns (bool);\\n  function addMember(address) external returns (bool);\\n  function addFirstMember(address, address, address) external returns (bool);\\n  function removeMember(address) external returns (bool);\\n  function reorderMember(address, address, address) external returns (bool);\\n  function updateCommission() external;\\n  function setNextCommissionUpdate(uint256) external;\\n  function resetSlashingMultiplier() external;\\n\\n  // only owner\\n  function setCommissionUpdateDelay(uint256) external;\\n  function setMaxGroupSize(uint256) external returns (bool);\\n  function setMembershipHistoryLength(uint256) external returns (bool);\\n  function setValidatorScoreParameters(uint256, uint256) external returns (bool);\\n  function setGroupLockedGoldRequirements(uint256, uint256) external returns (bool);\\n  function setValidatorLockedGoldRequirements(uint256, uint256) external returns (bool);\\n  function setSlashingMultiplierResetPeriod(uint256) external;\\n\\n  // view functions\\n  function getMaxGroupSize() external view returns (uint256);\\n  function getCommissionUpdateDelay() external view returns (uint256);\\n  function getValidatorScoreParameters() external view returns (uint256, uint256);\\n  function getMembershipHistory(address)\\n    external\\n    view\\n    returns (uint256[] memory, address[] memory, uint256, uint256);\\n  function calculateEpochScore(uint256) external view returns (uint256);\\n  function calculateGroupEpochScore(uint256[] calldata) external view returns (uint256);\\n  function getAccountLockedGoldRequirement(address) external view returns (uint256);\\n  function meetsAccountLockedGoldRequirements(address) external view returns (bool);\\n  function getValidatorBlsPublicKeyFromSigner(address) external view returns (bytes memory);\\n  function getValidator(address account)\\n    external\\n    view\\n    returns (bytes memory, bytes memory, address, uint256, address);\\n  function getValidatorGroup(address)\\n    external\\n    view\\n    returns (address[] memory, uint256, uint256, uint256, uint256[] memory, uint256, uint256);\\n  function getGroupNumMembers(address) external view returns (uint256);\\n  function getTopGroupValidators(address, uint256) external view returns (address[] memory);\\n  function getGroupsNumMembers(address[] calldata accounts)\\n    external\\n    view\\n    returns (uint256[] memory);\\n  function getNumRegisteredValidators() external view returns (uint256);\\n  function groupMembershipInEpoch(address, uint256, uint256) external view returns (address);\\n\\n  // only registered contract\\n  function updateEcdsaPublicKey(address, address, bytes calldata) external returns (bool);\\n  function updatePublicKeys(address, address, bytes calldata, bytes calldata, bytes calldata)\\n    external\\n    returns (bool);\\n  function getValidatorLockedGoldRequirements() external view returns (uint256, uint256);\\n  function getGroupLockedGoldRequirements() external view returns (uint256, uint256);\\n  function getRegisteredValidators() external view returns (address[] memory);\\n  function getRegisteredValidatorSigners() external view returns (address[] memory);\\n  function getRegisteredValidatorGroups() external view returns (address[] memory);\\n  function isValidatorGroup(address) external view returns (bool);\\n  function isValidator(address) external view returns (bool);\\n  function getValidatorGroupSlashingMultiplier(address) external view returns (uint256);\\n  function getMembershipInLastEpoch(address) external view returns (address);\\n  function getMembershipInLastEpochFromSigner(address) external view returns (address);\\n\\n  // only VM\\n  function updateValidatorScoreFromSigner(address, uint256) external;\\n  function distributeEpochPaymentsFromSigner(address, uint256) external returns (uint256);\\n\\n  // only slasher\\n  function forceDeaffiliateIfValidator(address) external;\\n  function halveSlashingMultiplier(address) external;\\n\\n}\\n\",\"keccak256\":\"0xedb1f9717f0ea77f30cb7fa40bfd3704dcfdc17252082c4bf5caaea205c83d9a\"},\"project:/contracts/identity/interfaces/IAttestations.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.5.13 <0.9.0;\\n\\ninterface IAttestations {\\n  function revoke(bytes32, uint256) external;\\n  function withdraw(address) external;\\n\\n  // view functions\\n  function getUnselectedRequest(bytes32, address) external view returns (uint32, uint32, address);\\n  function getAttestationIssuers(bytes32, address) external view returns (address[] memory);\\n  function getAttestationStats(bytes32, address) external view returns (uint32, uint32);\\n  function batchGetAttestationStats(bytes32[] calldata)\\n    external\\n    view\\n    returns (uint256[] memory, address[] memory, uint64[] memory, uint64[] memory);\\n  function getAttestationState(bytes32, address, address)\\n    external\\n    view\\n    returns (uint8, uint32, address);\\n  function getCompletableAttestations(bytes32, address)\\n    external\\n    view\\n    returns (uint32[] memory, address[] memory, uint256[] memory, bytes memory);\\n  function getAttestationRequestFee(address) external view returns (uint256);\\n  function getMaxAttestations() external view returns (uint256);\\n  function validateAttestationCode(bytes32, address, uint8, bytes32, bytes32)\\n    external\\n    view\\n    returns (address);\\n  function lookupAccountsForIdentifier(bytes32) external view returns (address[] memory);\\n  function requireNAttestationsRequested(bytes32, address, uint32) external view;\\n\\n  // only owner\\n  function setAttestationRequestFee(address, uint256) external;\\n  function setAttestationExpiryBlocks(uint256) external;\\n  function setSelectIssuersWaitBlocks(uint256) external;\\n  function setMaxAttestations(uint256) external;\\n}\\n\",\"keccak256\":\"0x18698a475dc0c9ea8a4c53ab5e42407f34a7c676d7b713c1507b43669f860e74\"},\"project:/contracts/identity/interfaces/IRandom.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.5.13 <0.9.0;\\n\\ninterface IRandom {\\n  function revealAndCommit(bytes32, bytes32, address) external;\\n  function randomnessBlockRetentionWindow() external view returns (uint256);\\n  function random() external view returns (bytes32);\\n  function getBlockRandomness(uint256) external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xdb545530be6397d23692e4465f4514cf3c87c1d4f553323964694818c375c08d\"},\"project:/contracts/stability/interfaces/ISortedOracles.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.5.13 <0.9.0;\\n\\ninterface ISortedOracles {\\n  function addOracle(address, address) external;\\n  function removeOracle(address, address, uint256) external;\\n  function report(address, uint256, address, address) external;\\n  function removeExpiredReports(address, uint256) external;\\n  function isOldestReportExpired(address token) external view returns (bool, address);\\n  function numRates(address) external view returns (uint256);\\n  function medianRate(address) external view returns (uint256, uint256);\\n  function numTimestamps(address) external view returns (uint256);\\n  function medianTimestamp(address) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xc9d69b608b060effe4a0b246e7fad096b524b848aa51d8f4eccad36c1aa0479d\"},\"project:/lib/mento-core/contracts/interfaces/IExchange.sol\":{\"content\":\"pragma solidity ^0.5.13;\\n\\ninterface IExchange {\\n    function buy(\\n        uint256,\\n        uint256,\\n        bool\\n    ) external returns (uint256);\\n\\n    function sell(\\n        uint256,\\n        uint256,\\n        bool\\n    ) external returns (uint256);\\n\\n    function exchange(\\n        uint256,\\n        uint256,\\n        bool\\n    ) external returns (uint256);\\n\\n    function setUpdateFrequency(uint256) external;\\n\\n    function getBuyTokenAmount(uint256, bool) external view returns (uint256);\\n\\n    function getSellTokenAmount(uint256, bool) external view returns (uint256);\\n\\n    function getBuyAndSellBuckets(bool) external view returns (uint256, uint256);\\n}\\n\",\"keccak256\":\"0x320488022d1066ac81797b9e7a3dc303d1c8e9a48597972d4686e00f9554ade9\"},\"project:/lib/mento-core/contracts/interfaces/IReserve.sol\":{\"content\":\"pragma solidity ^0.5.13;\\n\\ninterface IReserve {\\n    function setTobinTaxStalenessThreshold(uint256) external;\\n\\n    function addToken(address) external returns (bool);\\n\\n    function removeToken(address, uint256) external returns (bool);\\n\\n    function transferGold(address payable, uint256) external returns (bool);\\n\\n    function transferExchangeGold(address payable, uint256) external returns (bool);\\n\\n    function getReserveGoldBalance() external view returns (uint256);\\n\\n    function getUnfrozenReserveGoldBalance() external view returns (uint256);\\n\\n    function getOrComputeTobinTax() external returns (uint256, uint256);\\n\\n    function getTokens() external view returns (address[] memory);\\n\\n    function getReserveRatio() external view returns (uint256);\\n\\n    function addExchangeSpender(address) external;\\n\\n    function removeExchangeSpender(address, uint256) external;\\n\\n    function addSpender(address) external;\\n\\n    function removeSpender(address) external;\\n}\\n\",\"keccak256\":\"0x9162b458dc21fe7e6cfc5d4722b3db3001b1c54ecdcefa703ff9d902084150b7\"},\"project:/lib/mento-core/contracts/interfaces/IStableToken.sol\":{\"content\":\"pragma solidity ^0.5.13;\\n\\n/**\\n * @title This interface describes the functions specific to Celo Stable Tokens, and in the\\n * absence of interface inheritance is intended as a companion to IERC20.sol and ICeloToken.sol.\\n */\\ninterface IStableToken {\\n    function mint(address, uint256) external returns (bool);\\n\\n    function burn(uint256) external returns (bool);\\n\\n    function setInflationParameters(uint256, uint256) external;\\n\\n    function valueToUnits(uint256) external view returns (uint256);\\n\\n    function unitsToValue(uint256) external view returns (uint256);\\n\\n    function getInflationParameters()\\n        external\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256\\n        );\\n\\n    // NOTE: duplicated with IERC20.sol, remove once interface inheritance is supported.\\n    function balanceOf(address) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xcb6440c9b161b26a5b062e6c74d6fd1ed9736f292161c757406a9c39e942d20a\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b50604051620026a5380380620026a5833981810160405260208110156200003757600080fd5b81019080805190602001909291905050508060006200005b6200012360201b60201c565b9050806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a350806200011b576001600060146101000a81548160ff0219169083151502179055505b50506200012b565b600033905090565b61256a806200013b6000396000f3fe6080604052600436106100dd5760003560e01c80638da5cb5b1161007f578063dbba0f0111610059578063dbba0f01146103ec578063e4187b131461047f578063f2fde38b146104ec578063ff1d57521461053d576100dd565b80638da5cb5b146103155780638f32d59b1461036c578063a91ee0dc1461039b576100dd565b80634e008cdb116100bb5780634e008cdb1461020257806354255be014610267578063715018a6146102a75780637b103999146102be576100dd565b8063158ef93e146100df5780632f257aa01461010e57806331de7d1514610169575b005b3480156100eb57600080fd5b506100f4610638565b604051808215151515815260200191505060405180910390f35b34801561011a57600080fd5b506101676004803603604081101561013157600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061064b565b005b34801561017557600080fd5b506101ec6004803603608081101561018c57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190803590602001909291905050506106d3565b6040518082815260200191505060405180910390f35b34801561020e57600080fd5b506102516004803603602081101561022557600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611090565b6040518082815260200191505060405180910390f35b34801561027357600080fd5b5061027c6110a8565b6040518085815260200184815260200183815260200182815260200194505050505060405180910390f35b3480156102b357600080fd5b506102bc6110ce565b005b3480156102ca57600080fd5b506102d3611207565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561032157600080fd5b5061032a61122d565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561037857600080fd5b50610381611256565b604051808215151515815260200191505060405180910390f35b3480156103a757600080fd5b506103ea600480360360208110156103be57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506112b4565b005b3480156103f857600080fd5b506104656004803603606081101561040f57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611458565b604051808215151515815260200191505060405180910390f35b34801561048b57600080fd5b506104d6600480360360808110156104a257600080fd5b810190808035906020019092919080359060200190929190803590602001909291908035906020019092919050505061159f565b6040518082815260200191505060405180910390f35b3480156104f857600080fd5b5061053b6004803603602081101561050f57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611645565b005b34801561054957600080fd5b506106366004803603606081101561056057600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019064010000000081111561059d57600080fd5b8201836020820111156105af57600080fd5b803590602001918460208302840111640100000000831117156105d157600080fd5b9091929391929390803590602001906401000000008111156105f257600080fd5b82018360208201111561060457600080fd5b8035906020019184602083028401116401000000008311171561062657600080fd5b90919293919293905050506116cb565b005b600060149054906101000a900460ff1681565b610653611256565b6106c5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b6106cf82826117e5565b5050565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663dcf0aaed60405160200180807f476f6c64546f6b656e00000000000000000000000000000000000000000000008152506009019050604051602081830303815290604052805190602001206040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b15801561078e57600080fd5b505afa1580156107a2573d6000803e3d6000fd5b505050506040513d60208110156107b857600080fd5b810190808051906020019092919050505073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614610869576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f42757920746f6b656e2063616e206f6e6c7920626520676f6c6420746f6b656e81525060200191505060405180910390fd5b60008590508073ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b1580156108eb57600080fd5b505afa1580156108ff573d6000803e3d6000fd5b505050506040513d602081101561091557600080fd5b810190808051906020019092919050505084111561097e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260238152602001806125136023913960400191505060405180910390fd5b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663dcf0aaed8373ffffffffffffffffffffffffffffffffffffffff166340a12f646040518163ffffffff1660e01b815260040160206040518083038186803b158015610a0457600080fd5b505afa158015610a18573d6000803e3d6000fd5b505050506040513d6020811015610a2e57600080fd5b81019080805190602001909291905050506040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b158015610a7357600080fd5b505afa158015610a87573d6000803e3d6000fd5b505050506040513d6020811015610a9d57600080fd5b81019080805190602001909291905050509050600081905060008090506000610ac4611898565b9050600260008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548173ffffffffffffffffffffffffffffffffffffffff1663bbc66a948c6040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b158015610b8357600080fd5b505afa158015610b97573d6000803e3d6000fd5b505050506040513d6020811015610bad57600080fd5b81019080805190602001909291905050501015610c15576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260268152602001806124ed6026913960400191505060405180910390fd5b6000808273ffffffffffffffffffffffffffffffffffffffff1663ef90e1b08d6040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050604080518083038186803b158015610c9457600080fd5b505afa158015610ca8573d6000803e3d6000fd5b505050506040513d6040811015610cbe57600080fd5b81019080805190602001909291908051906020019092919050505091509150610ce982828c8c61159f565b93508673ffffffffffffffffffffffffffffffffffffffff1663095ea7b3878c6040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b158015610d7257600080fd5b505af1158015610d86573d6000803e3d6000fd5b505050506040513d6020811015610d9c57600080fd5b8101908080519060200190929190505050508473ffffffffffffffffffffffffffffffffffffffff16638ab1a5d48b8660006040518463ffffffff1660e01b815260040180848152602001838152602001821515151581526020019350505050602060405180830381600087803b158015610e1657600080fd5b505af1158015610e2a573d6000803e3d6000fd5b505050506040513d6020811015610e4057600080fd5b8101908080519060200190929190505050506000610e5c611993565b905060008173ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b158015610edd57600080fd5b505afa158015610ef1573d6000803e3d6000fd5b505050506040513d6020811015610f0757600080fd5b810190808051906020019092919050505090508173ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b158015610fa157600080fd5b505af1158015610fb5573d6000803e3d6000fd5b505050506040513d6020811015610fcb57600080fd5b8101908080519060200190929190505050507fd4cffd6979677853b45a7a17f455188a434e975ba474c5a2613c94beacea537a8e8e8e604051808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828152602001935050505060405180910390a1809950505050505050505050949350505050565b60026020528060005260406000206000915090505481565b600080600080600180600080839350829250819150809050935093509350935090919293565b6110d6611256565b611148576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a360008060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16611298611a8e565b73ffffffffffffffffffffffffffffffffffffffff1614905090565b6112bc611256565b61132e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156113d1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f43616e6e6f7420726567697374657220746865206e756c6c206164647265737381525060200191505060405180910390fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff167f27fe5f0c1c3b1ed427cc63d0f05759ffdecf9aec9e18d31ef366fc8a6cb5dc3b60405160405180910390a250565b6000611462611256565b6114d4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b8373ffffffffffffffffffffffffffffffffffffffff1663a9059cbb83856040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b15801561155b57600080fd5b505af115801561156f573d6000803e3d6000fd5b505050506040513d602081101561158557600080fd5b810190808051906020019092919050505090509392505050565b60006115a961247d565b6115b283611a96565b90506115bc61247d565b6115c68787611ab4565b90506115d061247d565b6115d986611af6565b90506115e361247d565b6115f68284611b8090919063ffffffff16565b9050611637611632611623846116158888611b8090919063ffffffff16565b611b8090919063ffffffff16565b83611fdf90919063ffffffff16565b612086565b945050505050949350505050565b61164d611256565b6116bf576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b6116c8816120a7565b50565b600060149054906101000a900460ff161561174e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601c8152602001807f636f6e747261637420616c726561647920696e697469616c697a65640000000081525060200191505060405180910390fd5b6001600060146101000a81548160ff021916908315150217905550611772336120a7565b61177b856112b4565b60008090505b848490508110156117dd576117d085858381811061179b57fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff168484848181106117c457fe5b905060200201356117e5565b8080600101915050611781565b505050505050565b80600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055507f03cc7dddcb89dd90027bd8fa62d09d1b5c49ce5d20f8c9bb6bdeaaa62ea1718b8282604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019250505060405180910390a15050565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663dcf0aaed60405160200180807f536f727465644f7261636c657300000000000000000000000000000000000000815250600d019050604051602081830303815290604052805190602001206040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b15801561195357600080fd5b505afa158015611967573d6000803e3d6000fd5b505050506040513d602081101561197d57600080fd5b8101908080519060200190929190505050905090565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663dcf0aaed60405160200180807f476f6c64546f6b656e00000000000000000000000000000000000000000000008152506009019050604051602081830303815290604052805190602001206040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b158015611a4e57600080fd5b505afa158015611a62573d6000803e3d6000fd5b505050506040513d6020811015611a7857600080fd5b8101908080519060200190929190505050905090565b600033905090565b611a9e61247d565b6040518060200160405280838152509050919050565b611abc61247d565b611ac461247d565b611acd84611af6565b9050611ad761247d565b611ae084611af6565b9050611aec82826121eb565b9250505092915050565b611afe61247d565b611b06612334565b821115611b5e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260368152602001806124b76036913960400191505060405180910390fd5b604051806020016040528069d3c21bcecceda100000084028152509050919050565b611b8861247d565b600083600001511480611b9f575060008260000151145b15611bbb57604051806020016040528060008152509050611fd9565b69d3c21bcecceda100000082600001511415611bd957829050611fd9565b69d3c21bcecceda100000083600001511415611bf757819050611fd9565b600069d3c21bcecceda1000000611c0d85612353565b6000015181611c1857fe5b0490506000611c268561238a565b600001519050600069d3c21bcecceda1000000611c4286612353565b6000015181611c4d57fe5b0490506000611c5b8661238a565b6000015190506000828502905060008514611cef5782858281611c7a57fe5b0414611cee576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260168152602001807f6f766572666c6f7720783179312064657465637465640000000000000000000081525060200191505060405180910390fd5b5b600069d3c21bcecceda10000008202905060008214611d915769d3c21bcecceda1000000828281611d1c57fe5b0414611d90576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601f8152602001807f6f766572666c6f772078317931202a206669786564312064657465637465640081525060200191505060405180910390fd5b5b8091506000848602905060008614611e225784868281611dad57fe5b0414611e21576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260168152602001807f6f766572666c6f7720783279312064657465637465640000000000000000000081525060200191505060405180910390fd5b5b6000848802905060008814611eb05784888281611e3b57fe5b0414611eaf576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260168152602001807f6f766572666c6f7720783179322064657465637465640000000000000000000081525060200191505060405180910390fd5b5b611eb86123c7565b8781611ec057fe5b049650611ecb6123c7565b8581611ed357fe5b0494506000858802905060008814611f645785888281611eef57fe5b0414611f63576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260168152602001807f6f766572666c6f7720783279322064657465637465640000000000000000000081525060200191505060405180910390fd5b5b611f6c61247d565b6040518060200160405280878152509050611f95816040518060200160405280878152506123d4565b9050611faf816040518060200160405280868152506123d4565b9050611fc9816040518060200160405280858152506123d4565b9050809a50505050505050505050505b92915050565b611fe761247d565b816000015183600001511015612065576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601f8152602001807f737562737472616374696f6e20756e646572666c6f772064657465637465640081525060200191505060405180910390fd5b60405180602001604052808360000151856000015103815250905092915050565b600069d3c21bcecceda100000082600001518161209f57fe5b049050919050565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561212d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260268152602001806124916026913960400191505060405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6121f361247d565b60008260000151141561226e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f63616e277420646976696465206279203000000000000000000000000000000081525060200191505060405180910390fd5b600069d3c21bcecceda10000008460000151029050836000015169d3c21bcecceda1000000828161229b57fe5b041461230f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260128152602001807f6f766572666c6f7720617420646976696465000000000000000000000000000081525060200191505060405180910390fd5b60405180602001604052808460000151838161232757fe5b0481525091505092915050565b60007601357c299a88ea76a58924d52ce4f26a85af186c2b9e74905090565b61235b61247d565b604051806020016040528069d3c21bcecceda10000008085600001518161237e57fe5b04028152509050919050565b61239261247d565b604051806020016040528069d3c21bcecceda1000000808560000151816123b557fe5b04028460000151038152509050919050565b600064e8d4a51000905090565b6123dc61247d565b6000826000015184600001510190508360000151811015612465576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260158152602001807f616464206f766572666c6f77206465746563746564000000000000000000000081525060200191505060405180910390fd5b60405180602001604052808281525091505092915050565b604051806020016040528060008152509056fe4f776e61626c653a206e6577206f776e657220697320746865207a65726f206164647265737363616e277420637265617465206669786964697479206e756d626572206c6172676572207468616e206d61784e6577466978656428294e756d626572206f66207265706f72747320666f7220746f6b656e206e6f7420656e6f75676842616c616e6365206f6620746f6b656e20746f206275726e206e6f7420656e6f756768a265627a7a72315820d881ce8693e026903a60bf5da088801e522d59919f2afa370925345a7fbb1a2364736f6c634300050d0032",
  "deployedBytecode": "0x6080604052600436106100dd5760003560e01c80638da5cb5b1161007f578063dbba0f0111610059578063dbba0f01146103ec578063e4187b131461047f578063f2fde38b146104ec578063ff1d57521461053d576100dd565b80638da5cb5b146103155780638f32d59b1461036c578063a91ee0dc1461039b576100dd565b80634e008cdb116100bb5780634e008cdb1461020257806354255be014610267578063715018a6146102a75780637b103999146102be576100dd565b8063158ef93e146100df5780632f257aa01461010e57806331de7d1514610169575b005b3480156100eb57600080fd5b506100f4610638565b604051808215151515815260200191505060405180910390f35b34801561011a57600080fd5b506101676004803603604081101561013157600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061064b565b005b34801561017557600080fd5b506101ec6004803603608081101561018c57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190803590602001909291905050506106d3565b6040518082815260200191505060405180910390f35b34801561020e57600080fd5b506102516004803603602081101561022557600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611090565b6040518082815260200191505060405180910390f35b34801561027357600080fd5b5061027c6110a8565b6040518085815260200184815260200183815260200182815260200194505050505060405180910390f35b3480156102b357600080fd5b506102bc6110ce565b005b3480156102ca57600080fd5b506102d3611207565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561032157600080fd5b5061032a61122d565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561037857600080fd5b50610381611256565b604051808215151515815260200191505060405180910390f35b3480156103a757600080fd5b506103ea600480360360208110156103be57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506112b4565b005b3480156103f857600080fd5b506104656004803603606081101561040f57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611458565b604051808215151515815260200191505060405180910390f35b34801561048b57600080fd5b506104d6600480360360808110156104a257600080fd5b810190808035906020019092919080359060200190929190803590602001909291908035906020019092919050505061159f565b6040518082815260200191505060405180910390f35b3480156104f857600080fd5b5061053b6004803603602081101561050f57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611645565b005b34801561054957600080fd5b506106366004803603606081101561056057600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019064010000000081111561059d57600080fd5b8201836020820111156105af57600080fd5b803590602001918460208302840111640100000000831117156105d157600080fd5b9091929391929390803590602001906401000000008111156105f257600080fd5b82018360208201111561060457600080fd5b8035906020019184602083028401116401000000008311171561062657600080fd5b90919293919293905050506116cb565b005b600060149054906101000a900460ff1681565b610653611256565b6106c5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b6106cf82826117e5565b5050565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663dcf0aaed60405160200180807f476f6c64546f6b656e00000000000000000000000000000000000000000000008152506009019050604051602081830303815290604052805190602001206040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b15801561078e57600080fd5b505afa1580156107a2573d6000803e3d6000fd5b505050506040513d60208110156107b857600080fd5b810190808051906020019092919050505073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614610869576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f42757920746f6b656e2063616e206f6e6c7920626520676f6c6420746f6b656e81525060200191505060405180910390fd5b60008590508073ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b1580156108eb57600080fd5b505afa1580156108ff573d6000803e3d6000fd5b505050506040513d602081101561091557600080fd5b810190808051906020019092919050505084111561097e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260238152602001806125136023913960400191505060405180910390fd5b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663dcf0aaed8373ffffffffffffffffffffffffffffffffffffffff166340a12f646040518163ffffffff1660e01b815260040160206040518083038186803b158015610a0457600080fd5b505afa158015610a18573d6000803e3d6000fd5b505050506040513d6020811015610a2e57600080fd5b81019080805190602001909291905050506040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b158015610a7357600080fd5b505afa158015610a87573d6000803e3d6000fd5b505050506040513d6020811015610a9d57600080fd5b81019080805190602001909291905050509050600081905060008090506000610ac4611898565b9050600260008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548173ffffffffffffffffffffffffffffffffffffffff1663bbc66a948c6040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b158015610b8357600080fd5b505afa158015610b97573d6000803e3d6000fd5b505050506040513d6020811015610bad57600080fd5b81019080805190602001909291905050501015610c15576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260268152602001806124ed6026913960400191505060405180910390fd5b6000808273ffffffffffffffffffffffffffffffffffffffff1663ef90e1b08d6040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050604080518083038186803b158015610c9457600080fd5b505afa158015610ca8573d6000803e3d6000fd5b505050506040513d6040811015610cbe57600080fd5b81019080805190602001909291908051906020019092919050505091509150610ce982828c8c61159f565b93508673ffffffffffffffffffffffffffffffffffffffff1663095ea7b3878c6040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b158015610d7257600080fd5b505af1158015610d86573d6000803e3d6000fd5b505050506040513d6020811015610d9c57600080fd5b8101908080519060200190929190505050508473ffffffffffffffffffffffffffffffffffffffff16638ab1a5d48b8660006040518463ffffffff1660e01b815260040180848152602001838152602001821515151581526020019350505050602060405180830381600087803b158015610e1657600080fd5b505af1158015610e2a573d6000803e3d6000fd5b505050506040513d6020811015610e4057600080fd5b8101908080519060200190929190505050506000610e5c611993565b905060008173ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b158015610edd57600080fd5b505afa158015610ef1573d6000803e3d6000fd5b505050506040513d6020811015610f0757600080fd5b810190808051906020019092919050505090508173ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b158015610fa157600080fd5b505af1158015610fb5573d6000803e3d6000fd5b505050506040513d6020811015610fcb57600080fd5b8101908080519060200190929190505050507fd4cffd6979677853b45a7a17f455188a434e975ba474c5a2613c94beacea537a8e8e8e604051808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828152602001935050505060405180910390a1809950505050505050505050949350505050565b60026020528060005260406000206000915090505481565b600080600080600180600080839350829250819150809050935093509350935090919293565b6110d6611256565b611148576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a360008060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16611298611a8e565b73ffffffffffffffffffffffffffffffffffffffff1614905090565b6112bc611256565b61132e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156113d1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f43616e6e6f7420726567697374657220746865206e756c6c206164647265737381525060200191505060405180910390fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff167f27fe5f0c1c3b1ed427cc63d0f05759ffdecf9aec9e18d31ef366fc8a6cb5dc3b60405160405180910390a250565b6000611462611256565b6114d4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b8373ffffffffffffffffffffffffffffffffffffffff1663a9059cbb83856040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b15801561155b57600080fd5b505af115801561156f573d6000803e3d6000fd5b505050506040513d602081101561158557600080fd5b810190808051906020019092919050505090509392505050565b60006115a961247d565b6115b283611a96565b90506115bc61247d565b6115c68787611ab4565b90506115d061247d565b6115d986611af6565b90506115e361247d565b6115f68284611b8090919063ffffffff16565b9050611637611632611623846116158888611b8090919063ffffffff16565b611b8090919063ffffffff16565b83611fdf90919063ffffffff16565b612086565b945050505050949350505050565b61164d611256565b6116bf576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b6116c8816120a7565b50565b600060149054906101000a900460ff161561174e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601c8152602001807f636f6e747261637420616c726561647920696e697469616c697a65640000000081525060200191505060405180910390fd5b6001600060146101000a81548160ff021916908315150217905550611772336120a7565b61177b856112b4565b60008090505b848490508110156117dd576117d085858381811061179b57fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff168484848181106117c457fe5b905060200201356117e5565b8080600101915050611781565b505050505050565b80600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055507f03cc7dddcb89dd90027bd8fa62d09d1b5c49ce5d20f8c9bb6bdeaaa62ea1718b8282604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019250505060405180910390a15050565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663dcf0aaed60405160200180807f536f727465644f7261636c657300000000000000000000000000000000000000815250600d019050604051602081830303815290604052805190602001206040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b15801561195357600080fd5b505afa158015611967573d6000803e3d6000fd5b505050506040513d602081101561197d57600080fd5b8101908080519060200190929190505050905090565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663dcf0aaed60405160200180807f476f6c64546f6b656e00000000000000000000000000000000000000000000008152506009019050604051602081830303815290604052805190602001206040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b158015611a4e57600080fd5b505afa158015611a62573d6000803e3d6000fd5b505050506040513d6020811015611a7857600080fd5b8101908080519060200190929190505050905090565b600033905090565b611a9e61247d565b6040518060200160405280838152509050919050565b611abc61247d565b611ac461247d565b611acd84611af6565b9050611ad761247d565b611ae084611af6565b9050611aec82826121eb565b9250505092915050565b611afe61247d565b611b06612334565b821115611b5e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260368152602001806124b76036913960400191505060405180910390fd5b604051806020016040528069d3c21bcecceda100000084028152509050919050565b611b8861247d565b600083600001511480611b9f575060008260000151145b15611bbb57604051806020016040528060008152509050611fd9565b69d3c21bcecceda100000082600001511415611bd957829050611fd9565b69d3c21bcecceda100000083600001511415611bf757819050611fd9565b600069d3c21bcecceda1000000611c0d85612353565b6000015181611c1857fe5b0490506000611c268561238a565b600001519050600069d3c21bcecceda1000000611c4286612353565b6000015181611c4d57fe5b0490506000611c5b8661238a565b6000015190506000828502905060008514611cef5782858281611c7a57fe5b0414611cee576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260168152602001807f6f766572666c6f7720783179312064657465637465640000000000000000000081525060200191505060405180910390fd5b5b600069d3c21bcecceda10000008202905060008214611d915769d3c21bcecceda1000000828281611d1c57fe5b0414611d90576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601f8152602001807f6f766572666c6f772078317931202a206669786564312064657465637465640081525060200191505060405180910390fd5b5b8091506000848602905060008614611e225784868281611dad57fe5b0414611e21576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260168152602001807f6f766572666c6f7720783279312064657465637465640000000000000000000081525060200191505060405180910390fd5b5b6000848802905060008814611eb05784888281611e3b57fe5b0414611eaf576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260168152602001807f6f766572666c6f7720783179322064657465637465640000000000000000000081525060200191505060405180910390fd5b5b611eb86123c7565b8781611ec057fe5b049650611ecb6123c7565b8581611ed357fe5b0494506000858802905060008814611f645785888281611eef57fe5b0414611f63576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260168152602001807f6f766572666c6f7720783279322064657465637465640000000000000000000081525060200191505060405180910390fd5b5b611f6c61247d565b6040518060200160405280878152509050611f95816040518060200160405280878152506123d4565b9050611faf816040518060200160405280868152506123d4565b9050611fc9816040518060200160405280858152506123d4565b9050809a50505050505050505050505b92915050565b611fe761247d565b816000015183600001511015612065576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601f8152602001807f737562737472616374696f6e20756e646572666c6f772064657465637465640081525060200191505060405180910390fd5b60405180602001604052808360000151856000015103815250905092915050565b600069d3c21bcecceda100000082600001518161209f57fe5b049050919050565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561212d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260268152602001806124916026913960400191505060405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6121f361247d565b60008260000151141561226e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f63616e277420646976696465206279203000000000000000000000000000000081525060200191505060405180910390fd5b600069d3c21bcecceda10000008460000151029050836000015169d3c21bcecceda1000000828161229b57fe5b041461230f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260128152602001807f6f766572666c6f7720617420646976696465000000000000000000000000000081525060200191505060405180910390fd5b60405180602001604052808460000151838161232757fe5b0481525091505092915050565b60007601357c299a88ea76a58924d52ce4f26a85af186c2b9e74905090565b61235b61247d565b604051806020016040528069d3c21bcecceda10000008085600001518161237e57fe5b04028152509050919050565b61239261247d565b604051806020016040528069d3c21bcecceda1000000808560000151816123b557fe5b04028460000151038152509050919050565b600064e8d4a51000905090565b6123dc61247d565b6000826000015184600001510190508360000151811015612465576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260158152602001807f616464206f766572666c6f77206465746563746564000000000000000000000081525060200191505060405180910390fd5b60405180602001604052808281525091505092915050565b604051806020016040528060008152509056fe4f776e61626c653a206e6577206f776e657220697320746865207a65726f206164647265737363616e277420637265617465206669786964697479206e756d626572206c6172676572207468616e206d61784e6577466978656428294e756d626572206f66207265706f72747320666f7220746f6b656e206e6f7420656e6f75676842616c616e6365206f6620746f6b656e20746f206275726e206e6f7420656e6f756768a265627a7a72315820d881ce8693e026903a60bf5da088801e522d59919f2afa370925345a7fbb1a2364736f6c634300050d0032",
  "sourceMap": "739:2312:26:-;;;1037:52;8:9:-1;5:2;;;30:1;27;20:12;5:2;1037:52:26;;;;;;;;;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;1037:52:26;;;;;;;;;;;;;;;;1081:4;698:17:4;718:12;:10;;;:12;;:::i;:::-;698:32;;749:9;740:6;;:18;;;;;;;;;;;;;;;;;;806:9;773:43;;802:1;773:43;;;;;;;;;;;;664:159;185:17:24;180:57;;226:4;212:11;;:18;;;;;;;;;;;;;;;;;;180:57;131:110;1037:52:26;739:2312;;788:96:0;833:15;867:10;860:17;;788:96;:::o;739:2312:26:-;;;;;;;",
  "deployedSourceMap": "739:2312:26:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;103:23:24;;8:9:-1;5:2;;;30:1;27;20:12;5:2;103:23:24;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;1443:155:19;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1443:155:19;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;1443:155:19;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;1593:1456:26;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1593:1456:26;;;;;;13:3:-1;8;5:12;2:2;;;30:1;27;20:12;2:2;1593:1456:26;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;689:49:19;;8:9:-1;5:2;;;30:1;27;20:12;5:2;689:49:19;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;689:49:19;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;1472:117:26;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1472:117:26;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1684:137:4;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1684:137:4;;;:::i;:::-;;2636:25:36;;8:9:-1;5:2;;;30:1;27;20:12;5:2;2636:25:36;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;899:77:4;;8:9:-1;5:2;;;30:1;27;20:12;5:2;899:77:4;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;1250:92;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1250:92:4;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;3185:230:36;;8:9:-1;5:2;;;30:1;27;20:12;5:2;3185:230:36;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;3185:230:36;;;;;;;;;;;;;;;;;;;:::i;:::-;;3477:147:19;;8:9:-1;5:2;;;30:1;27;20:12;5:2;3477:147:19;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;3477:147:19;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;2365:694;;8:9:-1;5:2;;;30:1;27;20:12;5:2;2365:694:19;;;;;;13:3:-1;8;5:12;2:2;;;30:1;27;20:12;2:2;2365:694:19;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;1970:107:4;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1970:107:4;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;1970:107:4;;;;;;;;;;;;;;;;;;;:::i;:::-;;906:364:19;;8:9:-1;5:2;;;30:1;27;20:12;5:2;906:364:19;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;906:364:19;;;;;;;;;;;;;;;;;;;;;21:11:-1;8;5:28;2:2;;;46:1;43;36:12;2:2;906:364:19;;35:9:-1;28:4;12:14;8:25;5:40;2:2;;;58:1;55;48:12;2:2;906:364:19;;;;;;101:9:-1;95:2;81:12;77:21;67:8;63:36;60:51;39:11;25:12;22:29;11:108;8:2;;;132:1;129;122:12;8:2;906:364:19;;;;;;;;;;;;;;21:11:-1;8;5:28;2:2;;;46:1;43;36:12;2:2;906:364:19;;35:9:-1;28:4;12:14;8:25;5:40;2:2;;;58:1;55;48:12;2:2;906:364:19;;;;;;101:9:-1;95:2;81:12;77:21;67:8;63:36;60:51;39:11;25:12;22:29;11:108;8:2;;;132:1;129;122:12;8:2;906:364:19;;;;;;;;;;;;:::i;:::-;;103:23:24;;;;;;;;;;;;;:::o;1443:155:19:-;1103:9:4;:7;:9::i;:::-;1095:54;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1542:51:19;1561:12;1575:17;1542:18;:51::i;:::-;1443:155;;:::o;1593:1456:26:-;1749:7;1798:8;;;;;;;;;;;:27;;;1848:29:36;;;;;;;;;;;;;;;;49:4:-1;39:7;30;26:21;22:32;13:7;6:49;1848:29:36;;;1838:40;;;;;;1798:51:26;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1798:51:26;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;1798:51:26;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;1798:51:26;;;;;;;;;;;;;;;;1779:70;;:15;:70;;;1764:133;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1904:29;1954:16;1904:67;;1995:11;:21;;;2025:4;1995:36;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1995:36:26;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;1995:36:26;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;1995:36:26;;;;;;;;;;;;;;;;1985:6;:46;;1977:94;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2078:23;2104:8;;;;;;;;;;;:27;;;2132:11;:33;;;:35;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;2132:35:26;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;2132:35:26;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;2132:35:26;;;;;;;;;;;;;;;;2104:64;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;2104:64:26;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;2104:64:26;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;2104:64:26;;;;;;;;;;;;;;;;2078:90;;2175:18;2206:15;2175:47;;2229:17;2249:1;2229:21;;2257:28;2288:18;:16;:18::i;:::-;2257:49;;2372:14;:32;2387:16;2372:32;;;;;;;;;;;;;;;;2328:13;:22;;;2351:16;2328:40;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;2328:40:26;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;2328:40:26;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;2328:40:26;;;;;;;;;;;;;;;;:76;;2313:145;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2466:21;2489:23;2516:13;:24;;;2541:16;2516:42;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;2516:42:26;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;2516:42:26;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;2516:42:26;;;;;;;;;;;;;;;;;;;;;;;;;2465:93;;;;2576:71;2595:13;2610:15;2627:6;2635:11;2576:18;:71::i;:::-;2564:83;;2719:11;:19;;;2739:15;2756:6;2719:44;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;2719:44:26;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;2719:44:26;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;2719:44:26;;;;;;;;;;;;;;;;;2769:8;:13;;;2783:6;2791:9;2802:5;2769:39;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;2769:39:26;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;2769:39:26;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;2769:39:26;;;;;;;;;;;;;;;;;2815:16;2834:14;:12;:14::i;:::-;2815:33;;2854:18;2875:9;:19;;;2903:4;2875:34;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;2875:34:26;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;2875:34:26;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;2875:34:26;;;;;;;;;;;;;;;;2854:55;;2915:9;:18;;;2934:10;2946;2915:42;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;2915:42:26;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;2915:42:26;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;2915:42:26;;;;;;;;;;;;;;;;;2969:52;2979:16;2997:15;3014:6;2969:52;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3034:10;3027:17;;;;;;;;;;;1593:1456;;;;;;:::o;689:49:19:-;;;;;;;;;;;;;;;;;:::o;1472:117:26:-;1523:7;1532;1541;1550;1573:1;1576;1579;1582;1565:19;;;;;;;;;;;;;;;;;;;;1472:117;;;;:::o;1684:137:4:-;1103:9;:7;:9::i;:::-;1095:54;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1782:1;1745:40;;1766:6;;;;;;;;;;;1745:40;;;;;;;;;;;;1812:1;1795:6;;:19;;;;;;;;;;;;;;;;;;1684:137::o;2636:25:36:-;;;;;;;;;;;;;:::o;899:77:4:-;937:7;963:6;;;;;;;;;;;956:13;;899:77;:::o;1250:92::-;1290:4;1329:6;;;;;;;;;;;1313:22;;:12;:10;:12::i;:::-;:22;;;1306:29;;1250:92;:::o;3185:230:36:-;1103:9:4;:7;:9::i;:::-;1095:54;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3289:1:36;3262:29;;:15;:29;;;;3254:74;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3355:15;3334:8;;:37;;;;;;;;;;;;;;;;;;3394:15;3382:28;;;;;;;;;;;;3185:230;:::o;3477:147:19:-;3566:4;1103:9:4;:7;:9::i;:::-;1095:54;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3592:5:19;3585:22;;;3608:2;3612:6;3585:34;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;3585:34:19;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;3585:34:19;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;3585:34:19;;;;;;;;;;;;;;;;3578:41;;3477:147;;;;;:::o;2365:694::-;2542:7;2557:47;;:::i;:::-;2607:29;2624:11;2607:16;:29::i;:::-;2557:79;;2643:33;;:::i;:::-;2679:86;2715:17;2740:19;2679:28;:86::i;:::-;2643:122;;2771:42;;:::i;:::-;2816:28;2837:6;2816:20;:28::i;:::-;2771:73;;2850:39;;:::i;:::-;2892:30;2907:14;2892:5;:14;;:30;;;;:::i;:::-;2850:72;;2942:112;:91;2972:60;3017:14;2972:35;2987:19;2972:5;:14;;:35;;;;:::i;:::-;:44;;:60;;;;:::i;:::-;2942:11;:29;;:91;;;;:::i;:::-;:110;:112::i;:::-;2929:125;;;;;;2365:694;;;;;;:::o;1970:107:4:-;1103:9;:7;:9::i;:::-;1095:54;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2042:28;2061:8;2042:18;:28::i;:::-;1970:107;:::o;906:364:19:-;283:11:24;;;;;;;;;;;282:12;274:53;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;347:4;333:11;;:18;;;;;;;;;;;;;;;;;;1068:30:19;1087:10;1068:18;:30::i;:::-;1104:29;1116:16;1104:11;:29::i;:::-;1145:9;1157:1;1145:13;;1140:126;1164:14;;:21;;1160:1;:25;1140:126;;;1200:59;1219:14;;1234:1;1219:17;;;;;;;;;;;;;;;1238;;1256:1;1238:20;;;;;;;;;;;;;1200:18;:59::i;:::-;1187:3;;;;;;;1140:126;;;;906:364;;;;;:::o;1602:206::-;1725:17;1694:14;:28;1709:12;1694:28;;;;;;;;;;;;;;;:48;;;;1753:50;1771:12;1785:17;1753:50;;;;;;;;;;;;;;;;;;;;;;;;;;;;1602:206;;:::o;5020:156:36:-;5071:14;5115:8;;;;;;;;;;;:27;;;2383:33;;;;;;;;;;;;;;;;49:4:-1;39:7;30;26:21;22:32;13:7;6:49;2383:33:36;;;2373:44;;;;;;5115:55;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;5115:55:36;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;5115:55:36;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;5115:55:36;;;;;;;;;;;;;;;;5093:78;;5020:156;:::o;4323:132::-;4370:6;4398:8;;;;;;;;;;;:27;;;1848:29;;;;;;;;;;;;;;;;49:4:-1;39:7;30;26:21;22:32;13:7;6:49;1848:29:36;;;1838:40;;;;;;4398:51;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;4398:51:36;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;4398:51:36;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;4398:51:36;;;;;;;;;;;;;;;;4384:66;;4323:132;:::o;788:96:0:-;833:15;867:10;860:17;;788:96;:::o;1552:94:20:-;1600:15;;:::i;:::-;1630:11;;;;;;;;1639:1;1630:11;;;1623:18;;1552:94;;;:::o;3565:314::-;3666:15;;:::i;:::-;3691:34;;:::i;:::-;3728:19;3737:9;3728:8;:19::i;:::-;3691:56;;3753:36;;:::i;:::-;3792:21;3801:11;3792:8;:21::i;:::-;3753:60;;3826:48;3833:18;3853:20;3826:6;:48::i;:::-;3819:55;;;;3565:314;;;;:::o;2597:203::-;2649:15;;:::i;:::-;2685:13;:11;:13::i;:::-;2680:1;:18;;2672:85;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2770:25;;;;;;;;1046;2779:1;:15;2770:25;;;2763:32;;2597:203;;;:::o;6256:1636::-;6335:15;;:::i;:::-;6373:1;6362;:7;;;:12;:28;;;;6389:1;6378;:7;;;:12;6362:28;6358:52;;;6399:11;;;;;;;;6408:1;6399:11;;;6392:18;;;;6358:52;1046:25;6420:1;:7;;;:22;6416:36;;;6451:1;6444:8;;;;6416:36;1046:25;6462:1;:7;;;:22;6458:36;;;6493:1;6486:8;;;;6458:36;6583:10;1046:25;6596:10;6604:1;6596:7;:10::i;:::-;:16;;;:30;;;;;;6583:43;;6632:10;6645:13;6656:1;6645:10;:13::i;:::-;:19;;;6632:32;;6670:10;1046:25;6683:10;6691:1;6683:7;:10::i;:::-;:16;;;:30;;;;;;6670:43;;6719:10;6732:13;6743:1;6732:10;:13::i;:::-;:19;;;6719:32;;6835:12;6855:2;6850;:7;6835:22;;6873:1;6867:2;:7;6863:63;;6897:2;6891;6884:4;:9;;;;;;:15;6876:50;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6863:63;7025:18;1046:25;7046:4;:18;7025:39;;7082:1;7074:4;:9;7070:91;;1046:25;7106:4;7093:10;:17;;;;;;:32;7085:76;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;7070:91;7174:10;7167:17;;7191:12;7211:2;7206;:7;7191:22;;7229:1;7223:2;:7;7219:63;;7253:2;7247;7240:4;:9;;;;;;:15;7232:50;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;7219:63;7289:12;7309:2;7304;:7;7289:22;;7327:1;7321:2;:7;7317:63;;7351:2;7345;7338:4;:9;;;;;;:15;7330:50;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;7317:63;7397:14;:12;:14::i;:::-;7392:2;:19;;;;;;7387:24;;7427:14;:12;:14::i;:::-;7422:2;:19;;;;;;7417:24;;7447:12;7467:2;7462;:7;7447:22;;7485:1;7479:2;:7;7475:63;;7509:2;7503;7496:4;:9;;;;;;:15;7488:50;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;7475:63;7622:22;;:::i;:::-;7647:14;;;;;;;;7656:4;7647:14;;;7622:39;;7676:27;7680:6;7688:14;;;;;;;;7697:4;7688:14;;;7676:3;:27::i;:::-;7667:36;;7745:27;7749:6;7757:14;;;;;;;;7766:4;7757:14;;;7745:3;:27::i;:::-;7736:36;;7814:27;7818:6;7826:14;;;;;;;;7835:4;7826:14;;;7814:3;:27::i;:::-;7805:36;;7881:6;7874:13;;;;;;;;;;;;6256:1636;;;;;:::o;5391:209::-;5470:15;;:::i;:::-;5512:1;:7;;;5501:1;:7;;;:18;;5493:62;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5568:27;;;;;;;;5587:1;:7;;;5577:1;:7;;;:17;5568:27;;;5561:34;;5391:209;;;;:::o;2959:109::-;3020:7;1046:25;3042:1;:7;;;:21;;;;;;3035:28;;2959:109;;;:::o;2178:225:4:-;2271:1;2251:22;;:8;:22;;;;2243:73;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2360:8;2331:38;;2352:6;;;;;;;;;;;2331:38;;;;;;;;;;;;2388:8;2379:6;;:17;;;;;;;;;;;;;;;;;;2178:225;:::o;9230:283:20:-;9307:15;;:::i;:::-;9349:1;9338;:7;;;:12;;9330:42;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;9378:9;1046:25;9390:1;:7;;;:21;9378:33;;9444:1;:7;;;1046:25;9425:1;:15;;;;;;:26;9417:57;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;9487:21;;;;;;;;9500:1;:7;;;9496:1;:11;;;;;;9487:21;;;9480:28;;;9230:283;;;;:::o;2213:127::-;2259:7;2281:54;2274:61;;2213:127;:::o;4118:159::-;4177:15;;:::i;:::-;4207:47;;;;;;;;1046:25;;4217:1;:7;;;:21;;;;;;4216:37;4207:47;;;4200:54;;4118:159;;;:::o;4564:172::-;4626:15;;:::i;:::-;4656:57;;;;;;;;1046:25;;4676:1;:7;;;:21;;;;;;4675:37;4665:1;:7;;;:47;4656:57;;;4649:64;;4564:172;;;:::o;1955:87::-;2002:7;2024:13;2017:20;;1955:87;:::o;5108:207::-;5182:15;;:::i;:::-;5205:9;5227:1;:7;;;5217:1;:7;;;:17;5205:29;;5253:1;:7;;;5248:1;:12;;5240:46;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5299:11;;;;;;;;5308:1;5299:11;;;5292:18;;;5108:207;;;;:::o;739:2312:26:-;;;;;;;;;;;;;;:::o",
  "source": "pragma solidity ^0.5.13;\n\nimport \"openzeppelin-solidity/contracts/math/SafeMath.sol\";\nimport \"openzeppelin-solidity/contracts/ownership/Ownable.sol\";\nimport \"openzeppelin-solidity/contracts/token/ERC20/IERC20.sol\";\n\nimport \"../../lib/mento-core/contracts/interfaces/IExchange.sol\";\nimport \"./interfaces/IStableTokenMento.sol\";\n\nimport \"./UsingRegistry.sol\";\nimport \"../common/interfaces/IFeeHandlerSeller.sol\";\nimport \"../stability/interfaces/ISortedOracles.sol\";\nimport \"../common/FixidityLib.sol\";\nimport \"../common/Initializable.sol\";\nimport \"./FeeHandlerSeller.sol\";\n\n// An implementation of FeeHandlerSeller supporting interfaces compatible with\n// Mento\n// See https://github.com/celo-org/celo-proposals/blob/master/CIPs/cip-0052.md\ncontract MentoFeeHandlerSeller is IFeeHandlerSeller, FeeHandlerSeller {\n  using SafeMath for uint256;\n  using FixidityLib for FixidityLib.Fraction;\n\n  /**\n   * @notice Sets initialized == true on implementation contracts.\n   * @param test Set to true to skip implementation initialisation.\n   */\n  constructor(bool test) public Initializable(test) {}\n\n  // without this line the contract can't receive native Celo transfers\n  function() external payable {}\n\n  /**\n   * @notice Returns the storage, major, minor, and patch version of the contract.\n   * @return Storage version of the contract.\n   * @return Major version of the contract.\n   * @return Minor version of the contract.\n   * @return Patch version of the contract.\n   */\n  function getVersionNumber() external pure returns (uint256, uint256, uint256, uint256) {\n    return (1, 1, 0, 0);\n  }\n\n  function sell(\n    address sellTokenAddress,\n    address buyTokenAddress,\n    uint256 amount,\n    uint256 maxSlippage // as fraction,\n  ) external returns (uint256) {\n    require(\n      buyTokenAddress == registry.getAddressForOrDie(GOLD_TOKEN_REGISTRY_ID),\n      \"Buy token can only be gold token\"\n    );\n\n    IStableTokenMento stableToken = IStableTokenMento(sellTokenAddress);\n    require(amount <= stableToken.balanceOf(address(this)), \"Balance of token to burn not enough\");\n\n    address exchangeAddress = registry.getAddressForOrDie(stableToken.getExchangeRegistryId());\n\n    IExchange exchange = IExchange(exchangeAddress);\n\n    uint256 minAmount = 0;\n\n    ISortedOracles sortedOracles = getSortedOracles();\n\n    require(\n      sortedOracles.numRates(sellTokenAddress) >= minimumReports[sellTokenAddress],\n      \"Number of reports for token not enough\"\n    );\n\n    (uint256 rateNumerator, uint256 rateDenominator) = sortedOracles.medianRate(sellTokenAddress);\n    minAmount = calculateMinAmount(rateNumerator, rateDenominator, amount, maxSlippage);\n\n    // TODO an upgrade would be to compare using routers as well\n    stableToken.approve(exchangeAddress, amount);\n    exchange.sell(amount, minAmount, false);\n\n    IERC20 goldToken = getGoldToken();\n    uint256 celoAmount = goldToken.balanceOf(address(this));\n    goldToken.transfer(msg.sender, celoAmount);\n\n    emit TokenSold(sellTokenAddress, buyTokenAddress, amount);\n    return celoAmount;\n  }\n}\n",
  "ast": {
    "absolutePath": "project:/contracts/common/MentoFeeHandlerSeller.sol",
    "exportedSymbols": {
      "MentoFeeHandlerSeller": [
        7830
      ]
    },
    "id": 7831,
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 7636,
        "literals": [
          "solidity",
          "^",
          "0.5",
          ".13"
        ],
        "nodeType": "PragmaDirective",
        "src": "0:24:26"
      },
      {
        "absolutePath": "openzeppelin-solidity/contracts/math/SafeMath.sol",
        "file": "openzeppelin-solidity/contracts/math/SafeMath.sol",
        "id": 7637,
        "nodeType": "ImportDirective",
        "scope": 7831,
        "sourceUnit": 364,
        "src": "26:59:26",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "openzeppelin-solidity/contracts/ownership/Ownable.sol",
        "file": "openzeppelin-solidity/contracts/ownership/Ownable.sol",
        "id": 7638,
        "nodeType": "ImportDirective",
        "scope": 7831,
        "sourceUnit": 482,
        "src": "86:63:26",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "openzeppelin-solidity/contracts/token/ERC20/IERC20.sol",
        "file": "openzeppelin-solidity/contracts/token/ERC20/IERC20.sol",
        "id": 7639,
        "nodeType": "ImportDirective",
        "scope": 7831,
        "sourceUnit": 956,
        "src": "150:64:26",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "project:/lib/mento-core/contracts/interfaces/IExchange.sol",
        "file": "../../lib/mento-core/contracts/interfaces/IExchange.sol",
        "id": 7640,
        "nodeType": "ImportDirective",
        "scope": 7831,
        "sourceUnit": 58806,
        "src": "216:65:26",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "project:/contracts/common/interfaces/IStableTokenMento.sol",
        "file": "./interfaces/IStableTokenMento.sol",
        "id": 7641,
        "nodeType": "ImportDirective",
        "scope": 7831,
        "sourceUnit": 13031,
        "src": "282:44:26",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "project:/contracts/common/UsingRegistry.sol",
        "file": "./UsingRegistry.sol",
        "id": 7642,
        "nodeType": "ImportDirective",
        "scope": 7831,
        "sourceUnit": 11868,
        "src": "328:29:26",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "project:/contracts/common/interfaces/IFeeHandlerSeller.sol",
        "file": "../common/interfaces/IFeeHandlerSeller.sol",
        "id": 7643,
        "nodeType": "ImportDirective",
        "scope": 7831,
        "sourceUnit": 12799,
        "src": "358:52:26",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "project:/contracts/stability/interfaces/ISortedOracles.sol",
        "file": "../stability/interfaces/ISortedOracles.sol",
        "id": 7644,
        "nodeType": "ImportDirective",
        "scope": 7831,
        "sourceUnit": 52849,
        "src": "411:52:26",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "project:/contracts/common/FixidityLib.sol",
        "file": "../common/FixidityLib.sol",
        "id": 7645,
        "nodeType": "ImportDirective",
        "scope": 7831,
        "sourceUnit": 6815,
        "src": "464:35:26",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "project:/contracts/common/Initializable.sol",
        "file": "../common/Initializable.sol",
        "id": 7646,
        "nodeType": "ImportDirective",
        "scope": 7831,
        "sourceUnit": 7599,
        "src": "500:37:26",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "project:/contracts/common/FeeHandlerSeller.sol",
        "file": "./FeeHandlerSeller.sol",
        "id": 7647,
        "nodeType": "ImportDirective",
        "scope": 7831,
        "sourceUnit": 6211,
        "src": "538:32:26",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "baseContracts": [
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 7648,
              "name": "IFeeHandlerSeller",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 12798,
              "src": "773:17:26",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_IFeeHandlerSeller_$12798",
                "typeString": "contract IFeeHandlerSeller"
              }
            },
            "id": 7649,
            "nodeType": "InheritanceSpecifier",
            "src": "773:17:26"
          },
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 7650,
              "name": "FeeHandlerSeller",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 6210,
              "src": "792:16:26",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_FeeHandlerSeller_$6210",
                "typeString": "contract FeeHandlerSeller"
              }
            },
            "id": 7651,
            "nodeType": "InheritanceSpecifier",
            "src": "792:16:26"
          }
        ],
        "contractDependencies": [
          26,
          481,
          6210,
          7598,
          11867,
          12798
        ],
        "contractKind": "contract",
        "documentation": null,
        "fullyImplemented": true,
        "id": 7830,
        "linearizedBaseContracts": [
          7830,
          6210,
          11867,
          7598,
          481,
          26,
          12798
        ],
        "name": "MentoFeeHandlerSeller",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "id": 7654,
            "libraryName": {
              "contractScope": null,
              "id": 7652,
              "name": "SafeMath",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 363,
              "src": "819:8:26",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_SafeMath_$363",
                "typeString": "library SafeMath"
              }
            },
            "nodeType": "UsingForDirective",
            "src": "813:27:26",
            "typeName": {
              "id": 7653,
              "name": "uint256",
              "nodeType": "ElementaryTypeName",
              "src": "832:7:26",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            }
          },
          {
            "id": 7657,
            "libraryName": {
              "contractScope": null,
              "id": 7655,
              "name": "FixidityLib",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 6814,
              "src": "849:11:26",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_FixidityLib_$6814",
                "typeString": "library FixidityLib"
              }
            },
            "nodeType": "UsingForDirective",
            "src": "843:43:26",
            "typeName": {
              "contractScope": null,
              "id": 7656,
              "name": "FixidityLib.Fraction",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 6215,
              "src": "865:20:26",
              "typeDescriptions": {
                "typeIdentifier": "t_struct$_Fraction_$6215_storage_ptr",
                "typeString": "struct FixidityLib.Fraction"
              }
            }
          },
          {
            "body": {
              "id": 7665,
              "nodeType": "Block",
              "src": "1087:2:26",
              "statements": []
            },
            "documentation": "@notice Sets initialized == true on implementation contracts.\n@param test Set to true to skip implementation initialisation.",
            "id": 7666,
            "implemented": true,
            "kind": "constructor",
            "modifiers": [
              {
                "arguments": [
                  {
                    "argumentTypes": null,
                    "id": 7662,
                    "name": "test",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 7659,
                    "src": "1081:4:26",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  }
                ],
                "id": 7663,
                "modifierName": {
                  "argumentTypes": null,
                  "id": 7661,
                  "name": "Initializable",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 7598,
                  "src": "1067:13:26",
                  "typeDescriptions": {
                    "typeIdentifier": "t_type$_t_contract$_Initializable_$7598_$",
                    "typeString": "type(contract Initializable)"
                  }
                },
                "nodeType": "ModifierInvocation",
                "src": "1067:19:26"
              }
            ],
            "name": "",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 7660,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 7659,
                  "name": "test",
                  "nodeType": "VariableDeclaration",
                  "scope": 7666,
                  "src": "1049:9:26",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 7658,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "1049:4:26",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "1048:11:26"
            },
            "returnParameters": {
              "id": 7664,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1087:0:26"
            },
            "scope": 7830,
            "src": "1037:52:26",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": {
              "id": 7669,
              "nodeType": "Block",
              "src": "1193:2:26",
              "statements": []
            },
            "documentation": null,
            "id": 7670,
            "implemented": true,
            "kind": "fallback",
            "modifiers": [],
            "name": "",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 7667,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1173:2:26"
            },
            "returnParameters": {
              "id": 7668,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1193:0:26"
            },
            "scope": 7830,
            "src": "1165:30:26",
            "stateMutability": "payable",
            "superFunction": null,
            "visibility": "external"
          },
          {
            "body": {
              "id": 7687,
              "nodeType": "Block",
              "src": "1559:30:26",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "components": [
                      {
                        "argumentTypes": null,
                        "hexValue": "31",
                        "id": 7681,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "1573:1:26",
                        "subdenomination": null,
                        "typeDescriptions": {
                          "typeIdentifier": "t_rational_1_by_1",
                          "typeString": "int_const 1"
                        },
                        "value": "1"
                      },
                      {
                        "argumentTypes": null,
                        "hexValue": "31",
                        "id": 7682,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "1576:1:26",
                        "subdenomination": null,
                        "typeDescriptions": {
                          "typeIdentifier": "t_rational_1_by_1",
                          "typeString": "int_const 1"
                        },
                        "value": "1"
                      },
                      {
                        "argumentTypes": null,
                        "hexValue": "30",
                        "id": 7683,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "1579:1:26",
                        "subdenomination": null,
                        "typeDescriptions": {
                          "typeIdentifier": "t_rational_0_by_1",
                          "typeString": "int_const 0"
                        },
                        "value": "0"
                      },
                      {
                        "argumentTypes": null,
                        "hexValue": "30",
                        "id": 7684,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "1582:1:26",
                        "subdenomination": null,
                        "typeDescriptions": {
                          "typeIdentifier": "t_rational_0_by_1",
                          "typeString": "int_const 0"
                        },
                        "value": "0"
                      }
                    ],
                    "id": 7685,
                    "isConstant": false,
                    "isInlineArray": false,
                    "isLValue": false,
                    "isPure": true,
                    "lValueRequested": false,
                    "nodeType": "TupleExpression",
                    "src": "1572:12:26",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$_t_rational_1_by_1_$_t_rational_1_by_1_$_t_rational_0_by_1_$_t_rational_0_by_1_$",
                      "typeString": "tuple(int_const 1,int_const 1,int_const 0,int_const 0)"
                    }
                  },
                  "functionReturnParameters": 7680,
                  "id": 7686,
                  "nodeType": "Return",
                  "src": "1565:19:26"
                }
              ]
            },
            "documentation": "@notice Returns the storage, major, minor, and patch version of the contract.\n@return Storage version of the contract.\n@return Major version of the contract.\n@return Minor version of the contract.\n@return Patch version of the contract.",
            "id": 7688,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "getVersionNumber",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 7671,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1497:2:26"
            },
            "returnParameters": {
              "id": 7680,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 7673,
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 7688,
                  "src": "1523:7:26",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 7672,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "1523:7:26",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 7675,
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 7688,
                  "src": "1532:7:26",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 7674,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "1532:7:26",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 7677,
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 7688,
                  "src": "1541:7:26",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 7676,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "1541:7:26",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 7679,
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 7688,
                  "src": "1550:7:26",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 7678,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "1550:7:26",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "1522:36:26"
            },
            "scope": 7830,
            "src": "1472:117:26",
            "stateMutability": "pure",
            "superFunction": null,
            "visibility": "external"
          },
          {
            "body": {
              "id": 7828,
              "nodeType": "Block",
              "src": "1758:1291:26",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "commonType": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "id": 7707,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "argumentTypes": null,
                          "id": 7702,
                          "name": "buyTokenAddress",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 7692,
                          "src": "1779:15:26",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "==",
                        "rightExpression": {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "id": 7705,
                              "name": "GOLD_TOKEN_REGISTRY_ID",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 11557,
                              "src": "1826:22:26",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes32",
                                "typeString": "bytes32"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bytes32",
                                "typeString": "bytes32"
                              }
                            ],
                            "expression": {
                              "argumentTypes": null,
                              "id": 7703,
                              "name": "registry",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 11623,
                              "src": "1798:8:26",
                              "typeDescriptions": {
                                "typeIdentifier": "t_contract$_IRegistry_$12958",
                                "typeString": "contract IRegistry"
                              }
                            },
                            "id": 7704,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "getAddressForOrDie",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 12926,
                            "src": "1798:27:26",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_external_view$_t_bytes32_$returns$_t_address_$",
                              "typeString": "function (bytes32) view external returns (address)"
                            }
                          },
                          "id": 7706,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "1798:51:26",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "src": "1779:70:26",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "hexValue": "42757920746f6b656e2063616e206f6e6c7920626520676f6c6420746f6b656e",
                        "id": 7708,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "1857:34:26",
                        "subdenomination": null,
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_e67027ddace3b13a3c1798b88643976b0c365b6eabe047620c9ccbbe70a5cd62",
                          "typeString": "literal_string \"Buy token can only be gold token\""
                        },
                        "value": "Buy token can only be gold token"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_e67027ddace3b13a3c1798b88643976b0c365b6eabe047620c9ccbbe70a5cd62",
                          "typeString": "literal_string \"Buy token can only be gold token\""
                        }
                      ],
                      "id": 7701,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        59219,
                        59220
                      ],
                      "referencedDeclaration": 59220,
                      "src": "1764:7:26",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 7709,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1764:133:26",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 7710,
                  "nodeType": "ExpressionStatement",
                  "src": "1764:133:26"
                },
                {
                  "assignments": [
                    7712
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 7712,
                      "name": "stableToken",
                      "nodeType": "VariableDeclaration",
                      "scope": 7828,
                      "src": "1904:29:26",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_IStableTokenMento_$13030",
                        "typeString": "contract IStableTokenMento"
                      },
                      "typeName": {
                        "contractScope": null,
                        "id": 7711,
                        "name": "IStableTokenMento",
                        "nodeType": "UserDefinedTypeName",
                        "referencedDeclaration": 13030,
                        "src": "1904:17:26",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_IStableTokenMento_$13030",
                          "typeString": "contract IStableTokenMento"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "id": 7716,
                  "initialValue": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "id": 7714,
                        "name": "sellTokenAddress",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 7690,
                        "src": "1954:16:26",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "id": 7713,
                      "name": "IStableTokenMento",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 13030,
                      "src": "1936:17:26",
                      "typeDescriptions": {
                        "typeIdentifier": "t_type$_t_contract$_IStableTokenMento_$13030_$",
                        "typeString": "type(contract IStableTokenMento)"
                      }
                    },
                    "id": 7715,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "typeConversion",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1936:35:26",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_IStableTokenMento_$13030",
                      "typeString": "contract IStableTokenMento"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "1904:67:26"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 7725,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "argumentTypes": null,
                          "id": 7718,
                          "name": "amount",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 7694,
                          "src": "1985:6:26",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "<=",
                        "rightExpression": {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "arguments": [
                                {
                                  "argumentTypes": null,
                                  "id": 7722,
                                  "name": "this",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 59328,
                                  "src": "2025:4:26",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_contract$_MentoFeeHandlerSeller_$7830",
                                    "typeString": "contract MentoFeeHandlerSeller"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_contract$_MentoFeeHandlerSeller_$7830",
                                    "typeString": "contract MentoFeeHandlerSeller"
                                  }
                                ],
                                "id": 7721,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "lValueRequested": false,
                                "nodeType": "ElementaryTypeNameExpression",
                                "src": "2017:7:26",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_type$_t_address_$",
                                  "typeString": "type(address)"
                                },
                                "typeName": "address"
                              },
                              "id": 7723,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "typeConversion",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "2017:13:26",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address_payable",
                                "typeString": "address payable"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address_payable",
                                "typeString": "address payable"
                              }
                            ],
                            "expression": {
                              "argumentTypes": null,
                              "id": 7719,
                              "name": "stableToken",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 7712,
                              "src": "1995:11:26",
                              "typeDescriptions": {
                                "typeIdentifier": "t_contract$_IStableTokenMento_$13030",
                                "typeString": "contract IStableTokenMento"
                              }
                            },
                            "id": 7720,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "balanceOf",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 13015,
                            "src": "1995:21:26",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_external_view$_t_address_$returns$_t_uint256_$",
                              "typeString": "function (address) view external returns (uint256)"
                            }
                          },
                          "id": 7724,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "1995:36:26",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "src": "1985:46:26",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "hexValue": "42616c616e6365206f6620746f6b656e20746f206275726e206e6f7420656e6f756768",
                        "id": 7726,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "2033:37:26",
                        "subdenomination": null,
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_a30b13322d76e96c93f53ae7fe40337eefb1d9c8c5e3a790bab69fe509006a5b",
                          "typeString": "literal_string \"Balance of token to burn not enough\""
                        },
                        "value": "Balance of token to burn not enough"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_a30b13322d76e96c93f53ae7fe40337eefb1d9c8c5e3a790bab69fe509006a5b",
                          "typeString": "literal_string \"Balance of token to burn not enough\""
                        }
                      ],
                      "id": 7717,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        59219,
                        59220
                      ],
                      "referencedDeclaration": 59220,
                      "src": "1977:7:26",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 7727,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1977:94:26",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 7728,
                  "nodeType": "ExpressionStatement",
                  "src": "1977:94:26"
                },
                {
                  "assignments": [
                    7730
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 7730,
                      "name": "exchangeAddress",
                      "nodeType": "VariableDeclaration",
                      "scope": 7828,
                      "src": "2078:23:26",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 7729,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "2078:7:26",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "id": 7737,
                  "initialValue": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "arguments": [],
                        "expression": {
                          "argumentTypes": [],
                          "expression": {
                            "argumentTypes": null,
                            "id": 7733,
                            "name": "stableToken",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 7712,
                            "src": "2132:11:26",
                            "typeDescriptions": {
                              "typeIdentifier": "t_contract$_IStableTokenMento_$13030",
                              "typeString": "contract IStableTokenMento"
                            }
                          },
                          "id": 7734,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "getExchangeRegistryId",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 13020,
                          "src": "2132:33:26",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_external_view$__$returns$_t_bytes32_$",
                            "typeString": "function () view external returns (bytes32)"
                          }
                        },
                        "id": 7735,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "2132:35:26",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      ],
                      "expression": {
                        "argumentTypes": null,
                        "id": 7731,
                        "name": "registry",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 11623,
                        "src": "2104:8:26",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_IRegistry_$12958",
                          "typeString": "contract IRegistry"
                        }
                      },
                      "id": 7732,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "getAddressForOrDie",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 12926,
                      "src": "2104:27:26",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_external_view$_t_bytes32_$returns$_t_address_$",
                        "typeString": "function (bytes32) view external returns (address)"
                      }
                    },
                    "id": 7736,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "2104:64:26",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "2078:90:26"
                },
                {
                  "assignments": [
                    7739
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 7739,
                      "name": "exchange",
                      "nodeType": "VariableDeclaration",
                      "scope": 7828,
                      "src": "2175:18:26",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_IExchange_$58805",
                        "typeString": "contract IExchange"
                      },
                      "typeName": {
                        "contractScope": null,
                        "id": 7738,
                        "name": "IExchange",
                        "nodeType": "UserDefinedTypeName",
                        "referencedDeclaration": 58805,
                        "src": "2175:9:26",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_IExchange_$58805",
                          "typeString": "contract IExchange"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "id": 7743,
                  "initialValue": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "id": 7741,
                        "name": "exchangeAddress",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 7730,
                        "src": "2206:15:26",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "id": 7740,
                      "name": "IExchange",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 58805,
                      "src": "2196:9:26",
                      "typeDescriptions": {
                        "typeIdentifier": "t_type$_t_contract$_IExchange_$58805_$",
                        "typeString": "type(contract IExchange)"
                      }
                    },
                    "id": 7742,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "typeConversion",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "2196:26:26",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_IExchange_$58805",
                      "typeString": "contract IExchange"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "2175:47:26"
                },
                {
                  "assignments": [
                    7745
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 7745,
                      "name": "minAmount",
                      "nodeType": "VariableDeclaration",
                      "scope": 7828,
                      "src": "2229:17:26",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 7744,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "2229:7:26",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "id": 7747,
                  "initialValue": {
                    "argumentTypes": null,
                    "hexValue": "30",
                    "id": 7746,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "number",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "2249:1:26",
                    "subdenomination": null,
                    "typeDescriptions": {
                      "typeIdentifier": "t_rational_0_by_1",
                      "typeString": "int_const 0"
                    },
                    "value": "0"
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "2229:21:26"
                },
                {
                  "assignments": [
                    7749
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 7749,
                      "name": "sortedOracles",
                      "nodeType": "VariableDeclaration",
                      "scope": 7828,
                      "src": "2257:28:26",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_ISortedOracles_$52848",
                        "typeString": "contract ISortedOracles"
                      },
                      "typeName": {
                        "contractScope": null,
                        "id": 7748,
                        "name": "ISortedOracles",
                        "nodeType": "UserDefinedTypeName",
                        "referencedDeclaration": 52848,
                        "src": "2257:14:26",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_ISortedOracles_$52848",
                          "typeString": "contract ISortedOracles"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "id": 7752,
                  "initialValue": {
                    "argumentTypes": null,
                    "arguments": [],
                    "expression": {
                      "argumentTypes": [],
                      "id": 7750,
                      "name": "getSortedOracles",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 11840,
                      "src": "2288:16:26",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_view$__$returns$_t_contract$_ISortedOracles_$52848_$",
                        "typeString": "function () view returns (contract ISortedOracles)"
                      }
                    },
                    "id": 7751,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "2288:18:26",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_ISortedOracles_$52848",
                      "typeString": "contract ISortedOracles"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "2257:49:26"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 7761,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "id": 7756,
                              "name": "sellTokenAddress",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 7690,
                              "src": "2351:16:26",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            ],
                            "expression": {
                              "argumentTypes": null,
                              "id": 7754,
                              "name": "sortedOracles",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 7749,
                              "src": "2328:13:26",
                              "typeDescriptions": {
                                "typeIdentifier": "t_contract$_ISortedOracles_$52848",
                                "typeString": "contract ISortedOracles"
                              }
                            },
                            "id": 7755,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "numRates",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 52824,
                            "src": "2328:22:26",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_external_view$_t_address_$returns$_t_uint256_$",
                              "typeString": "function (address) view external returns (uint256)"
                            }
                          },
                          "id": 7757,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "2328:40:26",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": ">=",
                        "rightExpression": {
                          "argumentTypes": null,
                          "baseExpression": {
                            "argumentTypes": null,
                            "id": 7758,
                            "name": "minimumReports",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 6030,
                            "src": "2372:14:26",
                            "typeDescriptions": {
                              "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                              "typeString": "mapping(address => uint256)"
                            }
                          },
                          "id": 7760,
                          "indexExpression": {
                            "argumentTypes": null,
                            "id": 7759,
                            "name": "sellTokenAddress",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 7690,
                            "src": "2387:16:26",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "IndexAccess",
                          "src": "2372:32:26",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "src": "2328:76:26",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "hexValue": "4e756d626572206f66207265706f72747320666f7220746f6b656e206e6f7420656e6f756768",
                        "id": 7762,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "2412:40:26",
                        "subdenomination": null,
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_95b70a67b6f90bd4b4b99001501d6b791eaef597a8ec562443faa4204f719fe0",
                          "typeString": "literal_string \"Number of reports for token not enough\""
                        },
                        "value": "Number of reports for token not enough"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_95b70a67b6f90bd4b4b99001501d6b791eaef597a8ec562443faa4204f719fe0",
                          "typeString": "literal_string \"Number of reports for token not enough\""
                        }
                      ],
                      "id": 7753,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        59219,
                        59220
                      ],
                      "referencedDeclaration": 59220,
                      "src": "2313:7:26",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 7763,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "2313:145:26",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 7764,
                  "nodeType": "ExpressionStatement",
                  "src": "2313:145:26"
                },
                {
                  "assignments": [
                    7766,
                    7768
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 7766,
                      "name": "rateNumerator",
                      "nodeType": "VariableDeclaration",
                      "scope": 7828,
                      "src": "2466:21:26",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 7765,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "2466:7:26",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 7768,
                      "name": "rateDenominator",
                      "nodeType": "VariableDeclaration",
                      "scope": 7828,
                      "src": "2489:23:26",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 7767,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "2489:7:26",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "id": 7773,
                  "initialValue": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "id": 7771,
                        "name": "sellTokenAddress",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 7690,
                        "src": "2541:16:26",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "expression": {
                        "argumentTypes": null,
                        "id": 7769,
                        "name": "sortedOracles",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 7749,
                        "src": "2516:13:26",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_ISortedOracles_$52848",
                          "typeString": "contract ISortedOracles"
                        }
                      },
                      "id": 7770,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "medianRate",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 52833,
                      "src": "2516:24:26",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_external_view$_t_address_$returns$_t_uint256_$_t_uint256_$",
                        "typeString": "function (address) view external returns (uint256,uint256)"
                      }
                    },
                    "id": 7772,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "2516:42:26",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$_t_uint256_$_t_uint256_$",
                      "typeString": "tuple(uint256,uint256)"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "2465:93:26"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 7781,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "argumentTypes": null,
                      "id": 7774,
                      "name": "minAmount",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 7745,
                      "src": "2564:9:26",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "argumentTypes": null,
                      "arguments": [
                        {
                          "argumentTypes": null,
                          "id": 7776,
                          "name": "rateNumerator",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 7766,
                          "src": "2595:13:26",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        {
                          "argumentTypes": null,
                          "id": 7777,
                          "name": "rateDenominator",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 7768,
                          "src": "2610:15:26",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        {
                          "argumentTypes": null,
                          "id": 7778,
                          "name": "amount",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 7694,
                          "src": "2627:6:26",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        {
                          "argumentTypes": null,
                          "id": 7779,
                          "name": "maxSlippage",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 7696,
                          "src": "2635:11:26",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        ],
                        "id": 7775,
                        "name": "calculateMinAmount",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 6187,
                        "src": "2576:18:26",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$",
                          "typeString": "function (uint256,uint256,uint256,uint256) pure returns (uint256)"
                        }
                      },
                      "id": 7780,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "2576:71:26",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "2564:83:26",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 7782,
                  "nodeType": "ExpressionStatement",
                  "src": "2564:83:26"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "id": 7786,
                        "name": "exchangeAddress",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 7730,
                        "src": "2739:15:26",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "id": 7787,
                        "name": "amount",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 7694,
                        "src": "2756:6:26",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "expression": {
                        "argumentTypes": null,
                        "id": 7783,
                        "name": "stableToken",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 7712,
                        "src": "2719:11:26",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_IStableTokenMento_$13030",
                          "typeString": "contract IStableTokenMento"
                        }
                      },
                      "id": 7785,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "approve",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 13029,
                      "src": "2719:19:26",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
                        "typeString": "function (address,uint256) external returns (bool)"
                      }
                    },
                    "id": 7788,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "2719:44:26",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 7789,
                  "nodeType": "ExpressionStatement",
                  "src": "2719:44:26"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "id": 7793,
                        "name": "amount",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 7694,
                        "src": "2783:6:26",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "id": 7794,
                        "name": "minAmount",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 7745,
                        "src": "2791:9:26",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "hexValue": "66616c7365",
                        "id": 7795,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "bool",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "2802:5:26",
                        "subdenomination": null,
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "value": "false"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      ],
                      "expression": {
                        "argumentTypes": null,
                        "id": 7790,
                        "name": "exchange",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 7739,
                        "src": "2769:8:26",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_IExchange_$58805",
                          "typeString": "contract IExchange"
                        }
                      },
                      "id": 7792,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "sell",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 58761,
                      "src": "2769:13:26",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_external_nonpayable$_t_uint256_$_t_uint256_$_t_bool_$returns$_t_uint256_$",
                        "typeString": "function (uint256,uint256,bool) external returns (uint256)"
                      }
                    },
                    "id": 7796,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "2769:39:26",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 7797,
                  "nodeType": "ExpressionStatement",
                  "src": "2769:39:26"
                },
                {
                  "assignments": [
                    7799
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 7799,
                      "name": "goldToken",
                      "nodeType": "VariableDeclaration",
                      "scope": 7828,
                      "src": "2815:16:26",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_IERC20_$955",
                        "typeString": "contract IERC20"
                      },
                      "typeName": {
                        "contractScope": null,
                        "id": 7798,
                        "name": "IERC20",
                        "nodeType": "UserDefinedTypeName",
                        "referencedDeclaration": 955,
                        "src": "2815:6:26",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_IERC20_$955",
                          "typeString": "contract IERC20"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "id": 7802,
                  "initialValue": {
                    "argumentTypes": null,
                    "arguments": [],
                    "expression": {
                      "argumentTypes": [],
                      "id": 7800,
                      "name": "getGoldToken",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 11775,
                      "src": "2834:12:26",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_view$__$returns$_t_contract$_IERC20_$955_$",
                        "typeString": "function () view returns (contract IERC20)"
                      }
                    },
                    "id": 7801,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "2834:14:26",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_IERC20_$955",
                      "typeString": "contract IERC20"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "2815:33:26"
                },
                {
                  "assignments": [
                    7804
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 7804,
                      "name": "celoAmount",
                      "nodeType": "VariableDeclaration",
                      "scope": 7828,
                      "src": "2854:18:26",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 7803,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "2854:7:26",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "id": 7811,
                  "initialValue": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "id": 7808,
                            "name": "this",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 59328,
                            "src": "2903:4:26",
                            "typeDescriptions": {
                              "typeIdentifier": "t_contract$_MentoFeeHandlerSeller_$7830",
                              "typeString": "contract MentoFeeHandlerSeller"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_contract$_MentoFeeHandlerSeller_$7830",
                              "typeString": "contract MentoFeeHandlerSeller"
                            }
                          ],
                          "id": 7807,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "nodeType": "ElementaryTypeNameExpression",
                          "src": "2895:7:26",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_address_$",
                            "typeString": "type(address)"
                          },
                          "typeName": "address"
                        },
                        "id": 7809,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "typeConversion",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "2895:13:26",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address_payable",
                          "typeString": "address payable"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address_payable",
                          "typeString": "address payable"
                        }
                      ],
                      "expression": {
                        "argumentTypes": null,
                        "id": 7805,
                        "name": "goldToken",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 7799,
                        "src": "2875:9:26",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_IERC20_$955",
                          "typeString": "contract IERC20"
                        }
                      },
                      "id": 7806,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "balanceOf",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 900,
                      "src": "2875:19:26",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_external_view$_t_address_$returns$_t_uint256_$",
                        "typeString": "function (address) view external returns (uint256)"
                      }
                    },
                    "id": 7810,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "2875:34:26",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "2854:55:26"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "expression": {
                          "argumentTypes": null,
                          "id": 7815,
                          "name": "msg",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 59216,
                          "src": "2934:3:26",
                          "typeDescriptions": {
                            "typeIdentifier": "t_magic_message",
                            "typeString": "msg"
                          }
                        },
                        "id": 7816,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "sender",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": null,
                        "src": "2934:10:26",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address_payable",
                          "typeString": "address payable"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "id": 7817,
                        "name": "celoAmount",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 7804,
                        "src": "2946:10:26",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address_payable",
                          "typeString": "address payable"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "expression": {
                        "argumentTypes": null,
                        "id": 7812,
                        "name": "goldToken",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 7799,
                        "src": "2915:9:26",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_IERC20_$955",
                          "typeString": "contract IERC20"
                        }
                      },
                      "id": 7814,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "transfer",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 909,
                      "src": "2915:18:26",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
                        "typeString": "function (address,uint256) external returns (bool)"
                      }
                    },
                    "id": 7818,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "2915:42:26",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 7819,
                  "nodeType": "ExpressionStatement",
                  "src": "2915:42:26"
                },
                {
                  "eventCall": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "id": 7821,
                        "name": "sellTokenAddress",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 7690,
                        "src": "2979:16:26",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "id": 7822,
                        "name": "buyTokenAddress",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 7692,
                        "src": "2997:15:26",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "id": 7823,
                        "name": "amount",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 7694,
                        "src": "3014:6:26",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 7820,
                      "name": "TokenSold",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 6044,
                      "src": "2969:9:26",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
                        "typeString": "function (address,address,uint256)"
                      }
                    },
                    "id": 7824,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "2969:52:26",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 7825,
                  "nodeType": "EmitStatement",
                  "src": "2964:57:26"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 7826,
                    "name": "celoAmount",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 7804,
                    "src": "3034:10:26",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "functionReturnParameters": 7700,
                  "id": 7827,
                  "nodeType": "Return",
                  "src": "3027:17:26"
                }
              ]
            },
            "documentation": null,
            "id": 7829,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "sell",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 7697,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 7690,
                  "name": "sellTokenAddress",
                  "nodeType": "VariableDeclaration",
                  "scope": 7829,
                  "src": "1612:24:26",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 7689,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1612:7:26",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 7692,
                  "name": "buyTokenAddress",
                  "nodeType": "VariableDeclaration",
                  "scope": 7829,
                  "src": "1642:23:26",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 7691,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1642:7:26",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 7694,
                  "name": "amount",
                  "nodeType": "VariableDeclaration",
                  "scope": 7829,
                  "src": "1671:14:26",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 7693,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "1671:7:26",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 7696,
                  "name": "maxSlippage",
                  "nodeType": "VariableDeclaration",
                  "scope": 7829,
                  "src": "1691:19:26",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 7695,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "1691:7:26",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "1606:124:26"
            },
            "returnParameters": {
              "id": 7700,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 7699,
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 7829,
                  "src": "1749:7:26",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 7698,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "1749:7:26",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "1748:9:26"
            },
            "scope": 7830,
            "src": "1593:1456:26",
            "stateMutability": "nonpayable",
            "superFunction": 12786,
            "visibility": "external"
          }
        ],
        "scope": 7831,
        "src": "739:2312:26"
      }
    ],
    "src": "0:3052:26"
  },
  "legacyAST": {
    "attributes": {
      "absolutePath": "project:/contracts/common/MentoFeeHandlerSeller.sol",
      "exportedSymbols": {
        "MentoFeeHandlerSeller": [
          7830
        ]
      }
    },
    "children": [
      {
        "attributes": {
          "literals": [
            "solidity",
            "^",
            "0.5",
            ".13"
          ]
        },
        "id": 7636,
        "name": "PragmaDirective",
        "src": "0:24:26"
      },
      {
        "attributes": {
          "SourceUnit": 364,
          "absolutePath": "openzeppelin-solidity/contracts/math/SafeMath.sol",
          "file": "openzeppelin-solidity/contracts/math/SafeMath.sol",
          "scope": 7831,
          "symbolAliases": [
            null
          ],
          "unitAlias": ""
        },
        "id": 7637,
        "name": "ImportDirective",
        "src": "26:59:26"
      },
      {
        "attributes": {
          "SourceUnit": 482,
          "absolutePath": "openzeppelin-solidity/contracts/ownership/Ownable.sol",
          "file": "openzeppelin-solidity/contracts/ownership/Ownable.sol",
          "scope": 7831,
          "symbolAliases": [
            null
          ],
          "unitAlias": ""
        },
        "id": 7638,
        "name": "ImportDirective",
        "src": "86:63:26"
      },
      {
        "attributes": {
          "SourceUnit": 956,
          "absolutePath": "openzeppelin-solidity/contracts/token/ERC20/IERC20.sol",
          "file": "openzeppelin-solidity/contracts/token/ERC20/IERC20.sol",
          "scope": 7831,
          "symbolAliases": [
            null
          ],
          "unitAlias": ""
        },
        "id": 7639,
        "name": "ImportDirective",
        "src": "150:64:26"
      },
      {
        "attributes": {
          "SourceUnit": 58806,
          "absolutePath": "project:/lib/mento-core/contracts/interfaces/IExchange.sol",
          "file": "../../lib/mento-core/contracts/interfaces/IExchange.sol",
          "scope": 7831,
          "symbolAliases": [
            null
          ],
          "unitAlias": ""
        },
        "id": 7640,
        "name": "ImportDirective",
        "src": "216:65:26"
      },
      {
        "attributes": {
          "SourceUnit": 13031,
          "absolutePath": "project:/contracts/common/interfaces/IStableTokenMento.sol",
          "file": "./interfaces/IStableTokenMento.sol",
          "scope": 7831,
          "symbolAliases": [
            null
          ],
          "unitAlias": ""
        },
        "id": 7641,
        "name": "ImportDirective",
        "src": "282:44:26"
      },
      {
        "attributes": {
          "SourceUnit": 11868,
          "absolutePath": "project:/contracts/common/UsingRegistry.sol",
          "file": "./UsingRegistry.sol",
          "scope": 7831,
          "symbolAliases": [
            null
          ],
          "unitAlias": ""
        },
        "id": 7642,
        "name": "ImportDirective",
        "src": "328:29:26"
      },
      {
        "attributes": {
          "SourceUnit": 12799,
          "absolutePath": "project:/contracts/common/interfaces/IFeeHandlerSeller.sol",
          "file": "../common/interfaces/IFeeHandlerSeller.sol",
          "scope": 7831,
          "symbolAliases": [
            null
          ],
          "unitAlias": ""
        },
        "id": 7643,
        "name": "ImportDirective",
        "src": "358:52:26"
      },
      {
        "attributes": {
          "SourceUnit": 52849,
          "absolutePath": "project:/contracts/stability/interfaces/ISortedOracles.sol",
          "file": "../stability/interfaces/ISortedOracles.sol",
          "scope": 7831,
          "symbolAliases": [
            null
          ],
          "unitAlias": ""
        },
        "id": 7644,
        "name": "ImportDirective",
        "src": "411:52:26"
      },
      {
        "attributes": {
          "SourceUnit": 6815,
          "absolutePath": "project:/contracts/common/FixidityLib.sol",
          "file": "../common/FixidityLib.sol",
          "scope": 7831,
          "symbolAliases": [
            null
          ],
          "unitAlias": ""
        },
        "id": 7645,
        "name": "ImportDirective",
        "src": "464:35:26"
      },
      {
        "attributes": {
          "SourceUnit": 7599,
          "absolutePath": "project:/contracts/common/Initializable.sol",
          "file": "../common/Initializable.sol",
          "scope": 7831,
          "symbolAliases": [
            null
          ],
          "unitAlias": ""
        },
        "id": 7646,
        "name": "ImportDirective",
        "src": "500:37:26"
      },
      {
        "attributes": {
          "SourceUnit": 6211,
          "absolutePath": "project:/contracts/common/FeeHandlerSeller.sol",
          "file": "./FeeHandlerSeller.sol",
          "scope": 7831,
          "symbolAliases": [
            null
          ],
          "unitAlias": ""
        },
        "id": 7647,
        "name": "ImportDirective",
        "src": "538:32:26"
      },
      {
        "attributes": {
          "contractDependencies": [
            26,
            481,
            6210,
            7598,
            11867,
            12798
          ],
          "contractKind": "contract",
          "documentation": null,
          "fullyImplemented": true,
          "linearizedBaseContracts": [
            7830,
            6210,
            11867,
            7598,
            481,
            26,
            12798
          ],
          "name": "MentoFeeHandlerSeller",
          "scope": 7831
        },
        "children": [
          {
            "attributes": {
              "arguments": null
            },
            "children": [
              {
                "attributes": {
                  "contractScope": null,
                  "name": "IFeeHandlerSeller",
                  "referencedDeclaration": 12798,
                  "type": "contract IFeeHandlerSeller"
                },
                "id": 7648,
                "name": "UserDefinedTypeName",
                "src": "773:17:26"
              }
            ],
            "id": 7649,
            "name": "InheritanceSpecifier",
            "src": "773:17:26"
          },
          {
            "attributes": {
              "arguments": null
            },
            "children": [
              {
                "attributes": {
                  "contractScope": null,
                  "name": "FeeHandlerSeller",
                  "referencedDeclaration": 6210,
                  "type": "contract FeeHandlerSeller"
                },
                "id": 7650,
                "name": "UserDefinedTypeName",
                "src": "792:16:26"
              }
            ],
            "id": 7651,
            "name": "InheritanceSpecifier",
            "src": "792:16:26"
          },
          {
            "children": [
              {
                "attributes": {
                  "contractScope": null,
                  "name": "SafeMath",
                  "referencedDeclaration": 363,
                  "type": "library SafeMath"
                },
                "id": 7652,
                "name": "UserDefinedTypeName",
                "src": "819:8:26"
              },
              {
                "attributes": {
                  "name": "uint256",
                  "type": "uint256"
                },
                "id": 7653,
                "name": "ElementaryTypeName",
                "src": "832:7:26"
              }
            ],
            "id": 7654,
            "name": "UsingForDirective",
            "src": "813:27:26"
          },
          {
            "children": [
              {
                "attributes": {
                  "contractScope": null,
                  "name": "FixidityLib",
                  "referencedDeclaration": 6814,
                  "type": "library FixidityLib"
                },
                "id": 7655,
                "name": "UserDefinedTypeName",
                "src": "849:11:26"
              },
              {
                "attributes": {
                  "contractScope": null,
                  "name": "FixidityLib.Fraction",
                  "referencedDeclaration": 6215,
                  "type": "struct FixidityLib.Fraction"
                },
                "id": 7656,
                "name": "UserDefinedTypeName",
                "src": "865:20:26"
              }
            ],
            "id": 7657,
            "name": "UsingForDirective",
            "src": "843:43:26"
          },
          {
            "attributes": {
              "documentation": "@notice Sets initialized == true on implementation contracts.\n@param test Set to true to skip implementation initialisation.",
              "implemented": true,
              "isConstructor": true,
              "kind": "constructor",
              "name": "",
              "scope": 7830,
              "stateMutability": "nonpayable",
              "superFunction": null,
              "visibility": "public"
            },
            "children": [
              {
                "children": [
                  {
                    "attributes": {
                      "constant": false,
                      "name": "test",
                      "scope": 7666,
                      "stateVariable": false,
                      "storageLocation": "default",
                      "type": "bool",
                      "value": null,
                      "visibility": "internal"
                    },
                    "children": [
                      {
                        "attributes": {
                          "name": "bool",
                          "type": "bool"
                        },
                        "id": 7658,
                        "name": "ElementaryTypeName",
                        "src": "1049:4:26"
                      }
                    ],
                    "id": 7659,
                    "name": "VariableDeclaration",
                    "src": "1049:9:26"
                  }
                ],
                "id": 7660,
                "name": "ParameterList",
                "src": "1048:11:26"
              },
              {
                "attributes": {
                  "parameters": [
                    null
                  ]
                },
                "children": [],
                "id": 7664,
                "name": "ParameterList",
                "src": "1087:0:26"
              },
              {
                "children": [
                  {
                    "attributes": {
                      "argumentTypes": null,
                      "overloadedDeclarations": [
                        null
                      ],
                      "referencedDeclaration": 7598,
                      "type": "type(contract Initializable)",
                      "value": "Initializable"
                    },
                    "id": 7661,
                    "name": "Identifier",
                    "src": "1067:13:26"
                  },
                  {
                    "attributes": {
                      "argumentTypes": null,
                      "overloadedDeclarations": [
                        null
                      ],
                      "referencedDeclaration": 7659,
                      "type": "bool",
                      "value": "test"
                    },
                    "id": 7662,
                    "name": "Identifier",
                    "src": "1081:4:26"
                  }
                ],
                "id": 7663,
                "name": "ModifierInvocation",
                "src": "1067:19:26"
              },
              {
                "attributes": {
                  "statements": [
                    null
                  ]
                },
                "children": [],
                "id": 7665,
                "name": "Block",
                "src": "1087:2:26"
              }
            ],
            "id": 7666,
            "name": "FunctionDefinition",
            "src": "1037:52:26"
          },
          {
            "attributes": {
              "documentation": null,
              "implemented": true,
              "isConstructor": false,
              "kind": "fallback",
              "modifiers": [
                null
              ],
              "name": "",
              "scope": 7830,
              "stateMutability": "payable",
              "superFunction": null,
              "visibility": "external"
            },
            "children": [
              {
                "attributes": {
                  "parameters": [
                    null
                  ]
                },
                "children": [],
                "id": 7667,
                "name": "ParameterList",
                "src": "1173:2:26"
              },
              {
                "attributes": {
                  "parameters": [
                    null
                  ]
                },
                "children": [],
                "id": 7668,
                "name": "ParameterList",
                "src": "1193:0:26"
              },
              {
                "attributes": {
                  "statements": [
                    null
                  ]
                },
                "children": [],
                "id": 7669,
                "name": "Block",
                "src": "1193:2:26"
              }
            ],
            "id": 7670,
            "name": "FunctionDefinition",
            "src": "1165:30:26"
          },
          {
            "attributes": {
              "documentation": "@notice Returns the storage, major, minor, and patch version of the contract.\n@return Storage version of the contract.\n@return Major version of the contract.\n@return Minor version of the contract.\n@return Patch version of the contract.",
              "implemented": true,
              "isConstructor": false,
              "kind": "function",
              "modifiers": [
                null
              ],
              "name": "getVersionNumber",
              "scope": 7830,
              "stateMutability": "pure",
              "superFunction": null,
              "visibility": "external"
            },
            "children": [
              {
                "attributes": {
                  "parameters": [
                    null
                  ]
                },
                "children": [],
                "id": 7671,
                "name": "ParameterList",
                "src": "1497:2:26"
              },
              {
                "children": [
                  {
                    "attributes": {
                      "constant": false,
                      "name": "",
                      "scope": 7688,
                      "stateVariable": false,
                      "storageLocation": "default",
                      "type": "uint256",
                      "value": null,
                      "visibility": "internal"
                    },
                    "children": [
                      {
                        "attributes": {
                          "name": "uint256",
                          "type": "uint256"
                        },
                        "id": 7672,
                        "name": "ElementaryTypeName",
                        "src": "1523:7:26"
                      }
                    ],
                    "id": 7673,
                    "name": "VariableDeclaration",
                    "src": "1523:7:26"
                  },
                  {
                    "attributes": {
                      "constant": false,
                      "name": "",
                      "scope": 7688,
                      "stateVariable": false,
                      "storageLocation": "default",
                      "type": "uint256",
                      "value": null,
                      "visibility": "internal"
                    },
                    "children": [
                      {
                        "attributes": {
                          "name": "uint256",
                          "type": "uint256"
                        },
                        "id": 7674,
                        "name": "ElementaryTypeName",
                        "src": "1532:7:26"
                      }
                    ],
                    "id": 7675,
                    "name": "VariableDeclaration",
                    "src": "1532:7:26"
                  },
                  {
                    "attributes": {
                      "constant": false,
                      "name": "",
                      "scope": 7688,
                      "stateVariable": false,
                      "storageLocation": "default",
                      "type": "uint256",
                      "value": null,
                      "visibility": "internal"
                    },
                    "children": [
                      {
                        "attributes": {
                          "name": "uint256",
                          "type": "uint256"
                        },
                        "id": 7676,
                        "name": "ElementaryTypeName",
                        "src": "1541:7:26"
                      }
                    ],
                    "id": 7677,
                    "name": "VariableDeclaration",
                    "src": "1541:7:26"
                  },
                  {
                    "attributes": {
                      "constant": false,
                      "name": "",
                      "scope": 7688,
                      "stateVariable": false,
                      "storageLocation": "default",
                      "type": "uint256",
                      "value": null,
                      "visibility": "internal"
                    },
                    "children": [
                      {
                        "attributes": {
                          "name": "uint256",
                          "type": "uint256"
                        },
                        "id": 7678,
                        "name": "ElementaryTypeName",
                        "src": "1550:7:26"
                      }
                    ],
                    "id": 7679,
                    "name": "VariableDeclaration",
                    "src": "1550:7:26"
                  }
                ],
                "id": 7680,
                "name": "ParameterList",
                "src": "1522:36:26"
              },
              {
                "children": [
                  {
                    "attributes": {
                      "functionReturnParameters": 7680
                    },
                    "children": [
                      {
                        "attributes": {
                          "argumentTypes": null,
                          "isConstant": false,
                          "isInlineArray": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "type": "tuple(int_const 1,int_const 1,int_const 0,int_const 0)"
                        },
                        "children": [
                          {
                            "attributes": {
                              "argumentTypes": null,
                              "hexvalue": "31",
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "subdenomination": null,
                              "token": "number",
                              "type": "int_const 1",
                              "value": "1"
                            },
                            "id": 7681,
                            "name": "Literal",
                            "src": "1573:1:26"
                          },
                          {
                            "attributes": {
                              "argumentTypes": null,
                              "hexvalue": "31",
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "subdenomination": null,
                              "token": "number",
                              "type": "int_const 1",
                              "value": "1"
                            },
                            "id": 7682,
                            "name": "Literal",
                            "src": "1576:1:26"
                          },
                          {
                            "attributes": {
                              "argumentTypes": null,
                              "hexvalue": "30",
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "subdenomination": null,
                              "token": "number",
                              "type": "int_const 0",
                              "value": "0"
                            },
                            "id": 7683,
                            "name": "Literal",
                            "src": "1579:1:26"
                          },
                          {
                            "attributes": {
                              "argumentTypes": null,
                              "hexvalue": "30",
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "subdenomination": null,
                              "token": "number",
                              "type": "int_const 0",
                              "value": "0"
                            },
                            "id": 7684,
                            "name": "Literal",
                            "src": "1582:1:26"
                          }
                        ],
                        "id": 7685,
                        "name": "TupleExpression",
                        "src": "1572:12:26"
                      }
                    ],
                    "id": 7686,
                    "name": "Return",
                    "src": "1565:19:26"
                  }
                ],
                "id": 7687,
                "name": "Block",
                "src": "1559:30:26"
              }
            ],
            "id": 7688,
            "name": "FunctionDefinition",
            "src": "1472:117:26"
          },
          {
            "attributes": {
              "documentation": null,
              "implemented": true,
              "isConstructor": false,
              "kind": "function",
              "modifiers": [
                null
              ],
              "name": "sell",
              "scope": 7830,
              "stateMutability": "nonpayable",
              "superFunction": 12786,
              "visibility": "external"
            },
            "children": [
              {
                "children": [
                  {
                    "attributes": {
                      "constant": false,
                      "name": "sellTokenAddress",
                      "scope": 7829,
                      "stateVariable": false,
                      "storageLocation": "default",
                      "type": "address",
                      "value": null,
                      "visibility": "internal"
                    },
                    "children": [
                      {
                        "attributes": {
                          "name": "address",
                          "stateMutability": "nonpayable",
                          "type": "address"
                        },
                        "id": 7689,
                        "name": "ElementaryTypeName",
                        "src": "1612:7:26"
                      }
                    ],
                    "id": 7690,
                    "name": "VariableDeclaration",
                    "src": "1612:24:26"
                  },
                  {
                    "attributes": {
                      "constant": false,
                      "name": "buyTokenAddress",
                      "scope": 7829,
                      "stateVariable": false,
                      "storageLocation": "default",
                      "type": "address",
                      "value": null,
                      "visibility": "internal"
                    },
                    "children": [
                      {
                        "attributes": {
                          "name": "address",
                          "stateMutability": "nonpayable",
                          "type": "address"
                        },
                        "id": 7691,
                        "name": "ElementaryTypeName",
                        "src": "1642:7:26"
                      }
                    ],
                    "id": 7692,
                    "name": "VariableDeclaration",
                    "src": "1642:23:26"
                  },
                  {
                    "attributes": {
                      "constant": false,
                      "name": "amount",
                      "scope": 7829,
                      "stateVariable": false,
                      "storageLocation": "default",
                      "type": "uint256",
                      "value": null,
                      "visibility": "internal"
                    },
                    "children": [
                      {
                        "attributes": {
                          "name": "uint256",
                          "type": "uint256"
                        },
                        "id": 7693,
                        "name": "ElementaryTypeName",
                        "src": "1671:7:26"
                      }
                    ],
                    "id": 7694,
                    "name": "VariableDeclaration",
                    "src": "1671:14:26"
                  },
                  {
                    "attributes": {
                      "constant": false,
                      "name": "maxSlippage",
                      "scope": 7829,
                      "stateVariable": false,
                      "storageLocation": "default",
                      "type": "uint256",
                      "value": null,
                      "visibility": "internal"
                    },
                    "children": [
                      {
                        "attributes": {
                          "name": "uint256",
                          "type": "uint256"
                        },
                        "id": 7695,
                        "name": "ElementaryTypeName",
                        "src": "1691:7:26"
                      }
                    ],
                    "id": 7696,
                    "name": "VariableDeclaration",
                    "src": "1691:19:26"
                  }
                ],
                "id": 7697,
                "name": "ParameterList",
                "src": "1606:124:26"
              },
              {
                "children": [
                  {
                    "attributes": {
                      "constant": false,
                      "name": "",
                      "scope": 7829,
                      "stateVariable": false,
                      "storageLocation": "default",
                      "type": "uint256",
                      "value": null,
                      "visibility": "internal"
                    },
                    "children": [
                      {
                        "attributes": {
                          "name": "uint256",
                          "type": "uint256"
                        },
                        "id": 7698,
                        "name": "ElementaryTypeName",
                        "src": "1749:7:26"
                      }
                    ],
                    "id": 7699,
                    "name": "VariableDeclaration",
                    "src": "1749:7:26"
                  }
                ],
                "id": 7700,
                "name": "ParameterList",
                "src": "1748:9:26"
              },
              {
                "children": [
                  {
                    "children": [
                      {
                        "attributes": {
                          "argumentTypes": null,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "isStructConstructorCall": false,
                          "lValueRequested": false,
                          "names": [
                            null
                          ],
                          "type": "tuple()",
                          "type_conversion": false
                        },
                        "children": [
                          {
                            "attributes": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_bool",
                                  "typeString": "bool"
                                },
                                {
                                  "typeIdentifier": "t_stringliteral_e67027ddace3b13a3c1798b88643976b0c365b6eabe047620c9ccbbe70a5cd62",
                                  "typeString": "literal_string \"Buy token can only be gold token\""
                                }
                              ],
                              "overloadedDeclarations": [
                                59219,
                                59220
                              ],
                              "referencedDeclaration": 59220,
                              "type": "function (bool,string memory) pure",
                              "value": "require"
                            },
                            "id": 7701,
                            "name": "Identifier",
                            "src": "1764:7:26"
                          },
                          {
                            "attributes": {
                              "argumentTypes": null,
                              "commonType": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "operator": "==",
                              "type": "bool"
                            },
                            "children": [
                              {
                                "attributes": {
                                  "argumentTypes": null,
                                  "overloadedDeclarations": [
                                    null
                                  ],
                                  "referencedDeclaration": 7692,
                                  "type": "address",
                                  "value": "buyTokenAddress"
                                },
                                "id": 7702,
                                "name": "Identifier",
                                "src": "1779:15:26"
                              },
                              {
                                "attributes": {
                                  "argumentTypes": null,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "isStructConstructorCall": false,
                                  "lValueRequested": false,
                                  "names": [
                                    null
                                  ],
                                  "type": "address",
                                  "type_conversion": false
                                },
                                "children": [
                                  {
                                    "attributes": {
                                      "argumentTypes": [
                                        {
                                          "typeIdentifier": "t_bytes32",
                                          "typeString": "bytes32"
                                        }
                                      ],
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "member_name": "getAddressForOrDie",
                                      "referencedDeclaration": 12926,
                                      "type": "function (bytes32) view external returns (address)"
                                    },
                                    "children": [
                                      {
                                        "attributes": {
                                          "argumentTypes": null,
                                          "overloadedDeclarations": [
                                            null
                                          ],
                                          "referencedDeclaration": 11623,
                                          "type": "contract IRegistry",
                                          "value": "registry"
                                        },
                                        "id": 7703,
                                        "name": "Identifier",
                                        "src": "1798:8:26"
                                      }
                                    ],
                                    "id": 7704,
                                    "name": "MemberAccess",
                                    "src": "1798:27:26"
                                  },
                                  {
                                    "attributes": {
                                      "argumentTypes": null,
                                      "overloadedDeclarations": [
                                        null
                                      ],
                                      "referencedDeclaration": 11557,
                                      "type": "bytes32",
                                      "value": "GOLD_TOKEN_REGISTRY_ID"
                                    },
                                    "id": 7705,
                                    "name": "Identifier",
                                    "src": "1826:22:26"
                                  }
                                ],
                                "id": 7706,
                                "name": "FunctionCall",
                                "src": "1798:51:26"
                              }
                            ],
                            "id": 7707,
                            "name": "BinaryOperation",
                            "src": "1779:70:26"
                          },
                          {
                            "attributes": {
                              "argumentTypes": null,
                              "hexvalue": "42757920746f6b656e2063616e206f6e6c7920626520676f6c6420746f6b656e",
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "subdenomination": null,
                              "token": "string",
                              "type": "literal_string \"Buy token can only be gold token\"",
                              "value": "Buy token can only be gold token"
                            },
                            "id": 7708,
                            "name": "Literal",
                            "src": "1857:34:26"
                          }
                        ],
                        "id": 7709,
                        "name": "FunctionCall",
                        "src": "1764:133:26"
                      }
                    ],
                    "id": 7710,
                    "name": "ExpressionStatement",
                    "src": "1764:133:26"
                  },
                  {
                    "attributes": {
                      "assignments": [
                        7712
                      ]
                    },
                    "children": [
                      {
                        "attributes": {
                          "constant": false,
                          "name": "stableToken",
                          "scope": 7828,
                          "stateVariable": false,
                          "storageLocation": "default",
                          "type": "contract IStableTokenMento",
                          "value": null,
                          "visibility": "internal"
                        },
                        "children": [
                          {
                            "attributes": {
                              "contractScope": null,
                              "name": "IStableTokenMento",
                              "referencedDeclaration": 13030,
                              "type": "contract IStableTokenMento"
                            },
                            "id": 7711,
                            "name": "UserDefinedTypeName",
                            "src": "1904:17:26"
                          }
                        ],
                        "id": 7712,
                        "name": "VariableDeclaration",
                        "src": "1904:29:26"
                      },
                      {
                        "attributes": {
                          "argumentTypes": null,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "isStructConstructorCall": false,
                          "lValueRequested": false,
                          "names": [
                            null
                          ],
                          "type": "contract IStableTokenMento",
                          "type_conversion": true
                        },
                        "children": [
                          {
                            "attributes": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              ],
                              "overloadedDeclarations": [
                                null
                              ],
                              "referencedDeclaration": 13030,
                              "type": "type(contract IStableTokenMento)",
                              "value": "IStableTokenMento"
                            },
                            "id": 7713,
                            "name": "Identifier",
                            "src": "1936:17:26"
                          },
                          {
                            "attributes": {
                              "argumentTypes": null,
                              "overloadedDeclarations": [
                                null
                              ],
                              "referencedDeclaration": 7690,
                              "type": "address",
                              "value": "sellTokenAddress"
                            },
                            "id": 7714,
                            "name": "Identifier",
                            "src": "1954:16:26"
                          }
                        ],
                        "id": 7715,
                        "name": "FunctionCall",
                        "src": "1936:35:26"
                      }
                    ],
                    "id": 7716,
                    "name": "VariableDeclarationStatement",
                    "src": "1904:67:26"
                  },
                  {
                    "children": [
                      {
                        "attributes": {
                          "argumentTypes": null,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "isStructConstructorCall": false,
                          "lValueRequested": false,
                          "names": [
                            null
                          ],
                          "type": "tuple()",
                          "type_conversion": false
                        },
                        "children": [
                          {
                            "attributes": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_bool",
                                  "typeString": "bool"
                                },
                                {
                                  "typeIdentifier": "t_stringliteral_a30b13322d76e96c93f53ae7fe40337eefb1d9c8c5e3a790bab69fe509006a5b",
                                  "typeString": "literal_string \"Balance of token to burn not enough\""
                                }
                              ],
                              "overloadedDeclarations": [
                                59219,
                                59220
                              ],
                              "referencedDeclaration": 59220,
                              "type": "function (bool,string memory) pure",
                              "value": "require"
                            },
                            "id": 7717,
                            "name": "Identifier",
                            "src": "1977:7:26"
                          },
                          {
                            "attributes": {
                              "argumentTypes": null,
                              "commonType": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "operator": "<=",
                              "type": "bool"
                            },
                            "children": [
                              {
                                "attributes": {
                                  "argumentTypes": null,
                                  "overloadedDeclarations": [
                                    null
                                  ],
                                  "referencedDeclaration": 7694,
                                  "type": "uint256",
                                  "value": "amount"
                                },
                                "id": 7718,
                                "name": "Identifier",
                                "src": "1985:6:26"
                              },
                              {
                                "attributes": {
                                  "argumentTypes": null,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "isStructConstructorCall": false,
                                  "lValueRequested": false,
                                  "names": [
                                    null
                                  ],
                                  "type": "uint256",
                                  "type_conversion": false
                                },
                                "children": [
                                  {
                                    "attributes": {
                                      "argumentTypes": [
                                        {
                                          "typeIdentifier": "t_address_payable",
                                          "typeString": "address payable"
                                        }
                                      ],
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "member_name": "balanceOf",
                                      "referencedDeclaration": 13015,
                                      "type": "function (address) view external returns (uint256)"
                                    },
                                    "children": [
                                      {
                                        "attributes": {
                                          "argumentTypes": null,
                                          "overloadedDeclarations": [
                                            null
                                          ],
                                          "referencedDeclaration": 7712,
                                          "type": "contract IStableTokenMento",
                                          "value": "stableToken"
                                        },
                                        "id": 7719,
                                        "name": "Identifier",
                                        "src": "1995:11:26"
                                      }
                                    ],
                                    "id": 7720,
                                    "name": "MemberAccess",
                                    "src": "1995:21:26"
                                  },
                                  {
                                    "attributes": {
                                      "argumentTypes": null,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "isStructConstructorCall": false,
                                      "lValueRequested": false,
                                      "names": [
                                        null
                                      ],
                                      "type": "address payable",
                                      "type_conversion": true
                                    },
                                    "children": [
                                      {
                                        "attributes": {
                                          "argumentTypes": [
                                            {
                                              "typeIdentifier": "t_contract$_MentoFeeHandlerSeller_$7830",
                                              "typeString": "contract MentoFeeHandlerSeller"
                                            }
                                          ],
                                          "isConstant": false,
                                          "isLValue": false,
                                          "isPure": true,
                                          "lValueRequested": false,
                                          "type": "type(address)",
                                          "value": "address"
                                        },
                                        "id": 7721,
                                        "name": "ElementaryTypeNameExpression",
                                        "src": "2017:7:26"
                                      },
                                      {
                                        "attributes": {
                                          "argumentTypes": null,
                                          "overloadedDeclarations": [
                                            null
                                          ],
                                          "referencedDeclaration": 59328,
                                          "type": "contract MentoFeeHandlerSeller",
                                          "value": "this"
                                        },
                                        "id": 7722,
                                        "name": "Identifier",
                                        "src": "2025:4:26"
                                      }
                                    ],
                                    "id": 7723,
                                    "name": "FunctionCall",
                                    "src": "2017:13:26"
                                  }
                                ],
                                "id": 7724,
                                "name": "FunctionCall",
                                "src": "1995:36:26"
                              }
                            ],
                            "id": 7725,
                            "name": "BinaryOperation",
                            "src": "1985:46:26"
                          },
                          {
                            "attributes": {
                              "argumentTypes": null,
                              "hexvalue": "42616c616e6365206f6620746f6b656e20746f206275726e206e6f7420656e6f756768",
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "subdenomination": null,
                              "token": "string",
                              "type": "literal_string \"Balance of token to burn not enough\"",
                              "value": "Balance of token to burn not enough"
                            },
                            "id": 7726,
                            "name": "Literal",
                            "src": "2033:37:26"
                          }
                        ],
                        "id": 7727,
                        "name": "FunctionCall",
                        "src": "1977:94:26"
                      }
                    ],
                    "id": 7728,
                    "name": "ExpressionStatement",
                    "src": "1977:94:26"
                  },
                  {
                    "attributes": {
                      "assignments": [
                        7730
                      ]
                    },
                    "children": [
                      {
                        "attributes": {
                          "constant": false,
                          "name": "exchangeAddress",
                          "scope": 7828,
                          "stateVariable": false,
                          "storageLocation": "default",
                          "type": "address",
                          "value": null,
                          "visibility": "internal"
                        },
                        "children": [
                          {
                            "attributes": {
                              "name": "address",
                              "stateMutability": "nonpayable",
                              "type": "address"
                            },
                            "id": 7729,
                            "name": "ElementaryTypeName",
                            "src": "2078:7:26"
                          }
                        ],
                        "id": 7730,
                        "name": "VariableDeclaration",
                        "src": "2078:23:26"
                      },
                      {
                        "attributes": {
                          "argumentTypes": null,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "isStructConstructorCall": false,
                          "lValueRequested": false,
                          "names": [
                            null
                          ],
                          "type": "address",
                          "type_conversion": false
                        },
                        "children": [
                          {
                            "attributes": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_bytes32",
                                  "typeString": "bytes32"
                                }
                              ],
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "member_name": "getAddressForOrDie",
                              "referencedDeclaration": 12926,
                              "type": "function (bytes32) view external returns (address)"
                            },
                            "children": [
                              {
                                "attributes": {
                                  "argumentTypes": null,
                                  "overloadedDeclarations": [
                                    null
                                  ],
                                  "referencedDeclaration": 11623,
                                  "type": "contract IRegistry",
                                  "value": "registry"
                                },
                                "id": 7731,
                                "name": "Identifier",
                                "src": "2104:8:26"
                              }
                            ],
                            "id": 7732,
                            "name": "MemberAccess",
                            "src": "2104:27:26"
                          },
                          {
                            "attributes": {
                              "argumentTypes": null,
                              "arguments": [
                                null
                              ],
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "isStructConstructorCall": false,
                              "lValueRequested": false,
                              "names": [
                                null
                              ],
                              "type": "bytes32",
                              "type_conversion": false
                            },
                            "children": [
                              {
                                "attributes": {
                                  "argumentTypes": [
                                    null
                                  ],
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "member_name": "getExchangeRegistryId",
                                  "referencedDeclaration": 13020,
                                  "type": "function () view external returns (bytes32)"
                                },
                                "children": [
                                  {
                                    "attributes": {
                                      "argumentTypes": null,
                                      "overloadedDeclarations": [
                                        null
                                      ],
                                      "referencedDeclaration": 7712,
                                      "type": "contract IStableTokenMento",
                                      "value": "stableToken"
                                    },
                                    "id": 7733,
                                    "name": "Identifier",
                                    "src": "2132:11:26"
                                  }
                                ],
                                "id": 7734,
                                "name": "MemberAccess",
                                "src": "2132:33:26"
                              }
                            ],
                            "id": 7735,
                            "name": "FunctionCall",
                            "src": "2132:35:26"
                          }
                        ],
                        "id": 7736,
                        "name": "FunctionCall",
                        "src": "2104:64:26"
                      }
                    ],
                    "id": 7737,
                    "name": "VariableDeclarationStatement",
                    "src": "2078:90:26"
                  },
                  {
                    "attributes": {
                      "assignments": [
                        7739
                      ]
                    },
                    "children": [
                      {
                        "attributes": {
                          "constant": false,
                          "name": "exchange",
                          "scope": 7828,
                          "stateVariable": false,
                          "storageLocation": "default",
                          "type": "contract IExchange",
                          "value": null,
                          "visibility": "internal"
                        },
                        "children": [
                          {
                            "attributes": {
                              "contractScope": null,
                              "name": "IExchange",
                              "referencedDeclaration": 58805,
                              "type": "contract IExchange"
                            },
                            "id": 7738,
                            "name": "UserDefinedTypeName",
                            "src": "2175:9:26"
                          }
                        ],
                        "id": 7739,
                        "name": "VariableDeclaration",
                        "src": "2175:18:26"
                      },
                      {
                        "attributes": {
                          "argumentTypes": null,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "isStructConstructorCall": false,
                          "lValueRequested": false,
                          "names": [
                            null
                          ],
                          "type": "contract IExchange",
                          "type_conversion": true
                        },
                        "children": [
                          {
                            "attributes": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              ],
                              "overloadedDeclarations": [
                                null
                              ],
                              "referencedDeclaration": 58805,
                              "type": "type(contract IExchange)",
                              "value": "IExchange"
                            },
                            "id": 7740,
                            "name": "Identifier",
                            "src": "2196:9:26"
                          },
                          {
                            "attributes": {
                              "argumentTypes": null,
                              "overloadedDeclarations": [
                                null
                              ],
                              "referencedDeclaration": 7730,
                              "type": "address",
                              "value": "exchangeAddress"
                            },
                            "id": 7741,
                            "name": "Identifier",
                            "src": "2206:15:26"
                          }
                        ],
                        "id": 7742,
                        "name": "FunctionCall",
                        "src": "2196:26:26"
                      }
                    ],
                    "id": 7743,
                    "name": "VariableDeclarationStatement",
                    "src": "2175:47:26"
                  },
                  {
                    "attributes": {
                      "assignments": [
                        7745
                      ]
                    },
                    "children": [
                      {
                        "attributes": {
                          "constant": false,
                          "name": "minAmount",
                          "scope": 7828,
                          "stateVariable": false,
                          "storageLocation": "default",
                          "type": "uint256",
                          "value": null,
                          "visibility": "internal"
                        },
                        "children": [
                          {
                            "attributes": {
                              "name": "uint256",
                              "type": "uint256"
                            },
                            "id": 7744,
                            "name": "ElementaryTypeName",
                            "src": "2229:7:26"
                          }
                        ],
                        "id": 7745,
                        "name": "VariableDeclaration",
                        "src": "2229:17:26"
                      },
                      {
                        "attributes": {
                          "argumentTypes": null,
                          "hexvalue": "30",
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "subdenomination": null,
                          "token": "number",
                          "type": "int_const 0",
                          "value": "0"
                        },
                        "id": 7746,
                        "name": "Literal",
                        "src": "2249:1:26"
                      }
                    ],
                    "id": 7747,
                    "name": "VariableDeclarationStatement",
                    "src": "2229:21:26"
                  },
                  {
                    "attributes": {
                      "assignments": [
                        7749
                      ]
                    },
                    "children": [
                      {
                        "attributes": {
                          "constant": false,
                          "name": "sortedOracles",
                          "scope": 7828,
                          "stateVariable": false,
                          "storageLocation": "default",
                          "type": "contract ISortedOracles",
                          "value": null,
                          "visibility": "internal"
                        },
                        "children": [
                          {
                            "attributes": {
                              "contractScope": null,
                              "name": "ISortedOracles",
                              "referencedDeclaration": 52848,
                              "type": "contract ISortedOracles"
                            },
                            "id": 7748,
                            "name": "UserDefinedTypeName",
                            "src": "2257:14:26"
                          }
                        ],
                        "id": 7749,
                        "name": "VariableDeclaration",
                        "src": "2257:28:26"
                      },
                      {
                        "attributes": {
                          "argumentTypes": null,
                          "arguments": [
                            null
                          ],
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "isStructConstructorCall": false,
                          "lValueRequested": false,
                          "names": [
                            null
                          ],
                          "type": "contract ISortedOracles",
                          "type_conversion": false
                        },
                        "children": [
                          {
                            "attributes": {
                              "argumentTypes": [
                                null
                              ],
                              "overloadedDeclarations": [
                                null
                              ],
                              "referencedDeclaration": 11840,
                              "type": "function () view returns (contract ISortedOracles)",
                              "value": "getSortedOracles"
                            },
                            "id": 7750,
                            "name": "Identifier",
                            "src": "2288:16:26"
                          }
                        ],
                        "id": 7751,
                        "name": "FunctionCall",
                        "src": "2288:18:26"
                      }
                    ],
                    "id": 7752,
                    "name": "VariableDeclarationStatement",
                    "src": "2257:49:26"
                  },
                  {
                    "children": [
                      {
                        "attributes": {
                          "argumentTypes": null,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "isStructConstructorCall": false,
                          "lValueRequested": false,
                          "names": [
                            null
                          ],
                          "type": "tuple()",
                          "type_conversion": false
                        },
                        "children": [
                          {
                            "attributes": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_bool",
                                  "typeString": "bool"
                                },
                                {
                                  "typeIdentifier": "t_stringliteral_95b70a67b6f90bd4b4b99001501d6b791eaef597a8ec562443faa4204f719fe0",
                                  "typeString": "literal_string \"Number of reports for token not enough\""
                                }
                              ],
                              "overloadedDeclarations": [
                                59219,
                                59220
                              ],
                              "referencedDeclaration": 59220,
                              "type": "function (bool,string memory) pure",
                              "value": "require"
                            },
                            "id": 7753,
                            "name": "Identifier",
                            "src": "2313:7:26"
                          },
                          {
                            "attributes": {
                              "argumentTypes": null,
                              "commonType": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "operator": ">=",
                              "type": "bool"
                            },
                            "children": [
                              {
                                "attributes": {
                                  "argumentTypes": null,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "isStructConstructorCall": false,
                                  "lValueRequested": false,
                                  "names": [
                                    null
                                  ],
                                  "type": "uint256",
                                  "type_conversion": false
                                },
                                "children": [
                                  {
                                    "attributes": {
                                      "argumentTypes": [
                                        {
                                          "typeIdentifier": "t_address",
                                          "typeString": "address"
                                        }
                                      ],
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "member_name": "numRates",
                                      "referencedDeclaration": 52824,
                                      "type": "function (address) view external returns (uint256)"
                                    },
                                    "children": [
                                      {
                                        "attributes": {
                                          "argumentTypes": null,
                                          "overloadedDeclarations": [
                                            null
                                          ],
                                          "referencedDeclaration": 7749,
                                          "type": "contract ISortedOracles",
                                          "value": "sortedOracles"
                                        },
                                        "id": 7754,
                                        "name": "Identifier",
                                        "src": "2328:13:26"
                                      }
                                    ],
                                    "id": 7755,
                                    "name": "MemberAccess",
                                    "src": "2328:22:26"
                                  },
                                  {
                                    "attributes": {
                                      "argumentTypes": null,
                                      "overloadedDeclarations": [
                                        null
                                      ],
                                      "referencedDeclaration": 7690,
                                      "type": "address",
                                      "value": "sellTokenAddress"
                                    },
                                    "id": 7756,
                                    "name": "Identifier",
                                    "src": "2351:16:26"
                                  }
                                ],
                                "id": 7757,
                                "name": "FunctionCall",
                                "src": "2328:40:26"
                              },
                              {
                                "attributes": {
                                  "argumentTypes": null,
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "type": "uint256"
                                },
                                "children": [
                                  {
                                    "attributes": {
                                      "argumentTypes": null,
                                      "overloadedDeclarations": [
                                        null
                                      ],
                                      "referencedDeclaration": 6030,
                                      "type": "mapping(address => uint256)",
                                      "value": "minimumReports"
                                    },
                                    "id": 7758,
                                    "name": "Identifier",
                                    "src": "2372:14:26"
                                  },
                                  {
                                    "attributes": {
                                      "argumentTypes": null,
                                      "overloadedDeclarations": [
                                        null
                                      ],
                                      "referencedDeclaration": 7690,
                                      "type": "address",
                                      "value": "sellTokenAddress"
                                    },
                                    "id": 7759,
                                    "name": "Identifier",
                                    "src": "2387:16:26"
                                  }
                                ],
                                "id": 7760,
                                "name": "IndexAccess",
                                "src": "2372:32:26"
                              }
                            ],
                            "id": 7761,
                            "name": "BinaryOperation",
                            "src": "2328:76:26"
                          },
                          {
                            "attributes": {
                              "argumentTypes": null,
                              "hexvalue": "4e756d626572206f66207265706f72747320666f7220746f6b656e206e6f7420656e6f756768",
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "subdenomination": null,
                              "token": "string",
                              "type": "literal_string \"Number of reports for token not enough\"",
                              "value": "Number of reports for token not enough"
                            },
                            "id": 7762,
                            "name": "Literal",
                            "src": "2412:40:26"
                          }
                        ],
                        "id": 7763,
                        "name": "FunctionCall",
                        "src": "2313:145:26"
                      }
                    ],
                    "id": 7764,
                    "name": "ExpressionStatement",
                    "src": "2313:145:26"
                  },
                  {
                    "attributes": {
                      "assignments": [
                        7766,
                        7768
                      ]
                    },
                    "children": [
                      {
                        "attributes": {
                          "constant": false,
                          "name": "rateNumerator",
                          "scope": 7828,
                          "stateVariable": false,
                          "storageLocation": "default",
                          "type": "uint256",
                          "value": null,
                          "visibility": "internal"
                        },
                        "children": [
                          {
                            "attributes": {
                              "name": "uint256",
                              "type": "uint256"
                            },
                            "id": 7765,
                            "name": "ElementaryTypeName",
                            "src": "2466:7:26"
                          }
                        ],
                        "id": 7766,
                        "name": "VariableDeclaration",
                        "src": "2466:21:26"
                      },
                      {
                        "attributes": {
                          "constant": false,
                          "name": "rateDenominator",
                          "scope": 7828,
                          "stateVariable": false,
                          "storageLocation": "default",
                          "type": "uint256",
                          "value": null,
                          "visibility": "internal"
                        },
                        "children": [
                          {
                            "attributes": {
                              "name": "uint256",
                              "type": "uint256"
                            },
                            "id": 7767,
                            "name": "ElementaryTypeName",
                            "src": "2489:7:26"
                          }
                        ],
                        "id": 7768,
                        "name": "VariableDeclaration",
                        "src": "2489:23:26"
                      },
                      {
                        "attributes": {
                          "argumentTypes": null,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "isStructConstructorCall": false,
                          "lValueRequested": false,
                          "names": [
                            null
                          ],
                          "type": "tuple(uint256,uint256)",
                          "type_conversion": false
                        },
                        "children": [
                          {
                            "attributes": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              ],
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "member_name": "medianRate",
                              "referencedDeclaration": 52833,
                              "type": "function (address) view external returns (uint256,uint256)"
                            },
                            "children": [
                              {
                                "attributes": {
                                  "argumentTypes": null,
                                  "overloadedDeclarations": [
                                    null
                                  ],
                                  "referencedDeclaration": 7749,
                                  "type": "contract ISortedOracles",
                                  "value": "sortedOracles"
                                },
                                "id": 7769,
                                "name": "Identifier",
                                "src": "2516:13:26"
                              }
                            ],
                            "id": 7770,
                            "name": "MemberAccess",
                            "src": "2516:24:26"
                          },
                          {
                            "attributes": {
                              "argumentTypes": null,
                              "overloadedDeclarations": [
                                null
                              ],
                              "referencedDeclaration": 7690,
                              "type": "address",
                              "value": "sellTokenAddress"
                            },
                            "id": 7771,
                            "name": "Identifier",
                            "src": "2541:16:26"
                          }
                        ],
                        "id": 7772,
                        "name": "FunctionCall",
                        "src": "2516:42:26"
                      }
                    ],
                    "id": 7773,
                    "name": "VariableDeclarationStatement",
                    "src": "2465:93:26"
                  },
                  {
                    "children": [
                      {
                        "attributes": {
                          "argumentTypes": null,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "operator": "=",
                          "type": "uint256"
                        },
                        "children": [
                          {
                            "attributes": {
                              "argumentTypes": null,
                              "overloadedDeclarations": [
                                null
                              ],
                              "referencedDeclaration": 7745,
                              "type": "uint256",
                              "value": "minAmount"
                            },
                            "id": 7774,
                            "name": "Identifier",
                            "src": "2564:9:26"
                          },
                          {
                            "attributes": {
                              "argumentTypes": null,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "isStructConstructorCall": false,
                              "lValueRequested": false,
                              "names": [
                                null
                              ],
                              "type": "uint256",
                              "type_conversion": false
                            },
                            "children": [
                              {
                                "attributes": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    },
                                    {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    },
                                    {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    },
                                    {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  ],
                                  "overloadedDeclarations": [
                                    null
                                  ],
                                  "referencedDeclaration": 6187,
                                  "type": "function (uint256,uint256,uint256,uint256) pure returns (uint256)",
                                  "value": "calculateMinAmount"
                                },
                                "id": 7775,
                                "name": "Identifier",
                                "src": "2576:18:26"
                              },
                              {
                                "attributes": {
                                  "argumentTypes": null,
                                  "overloadedDeclarations": [
                                    null
                                  ],
                                  "referencedDeclaration": 7766,
                                  "type": "uint256",
                                  "value": "rateNumerator"
                                },
                                "id": 7776,
                                "name": "Identifier",
                                "src": "2595:13:26"
                              },
                              {
                                "attributes": {
                                  "argumentTypes": null,
                                  "overloadedDeclarations": [
                                    null
                                  ],
                                  "referencedDeclaration": 7768,
                                  "type": "uint256",
                                  "value": "rateDenominator"
                                },
                                "id": 7777,
                                "name": "Identifier",
                                "src": "2610:15:26"
                              },
                              {
                                "attributes": {
                                  "argumentTypes": null,
                                  "overloadedDeclarations": [
                                    null
                                  ],
                                  "referencedDeclaration": 7694,
                                  "type": "uint256",
                                  "value": "amount"
                                },
                                "id": 7778,
                                "name": "Identifier",
                                "src": "2627:6:26"
                              },
                              {
                                "attributes": {
                                  "argumentTypes": null,
                                  "overloadedDeclarations": [
                                    null
                                  ],
                                  "referencedDeclaration": 7696,
                                  "type": "uint256",
                                  "value": "maxSlippage"
                                },
                                "id": 7779,
                                "name": "Identifier",
                                "src": "2635:11:26"
                              }
                            ],
                            "id": 7780,
                            "name": "FunctionCall",
                            "src": "2576:71:26"
                          }
                        ],
                        "id": 7781,
                        "name": "Assignment",
                        "src": "2564:83:26"
                      }
                    ],
                    "id": 7782,
                    "name": "ExpressionStatement",
                    "src": "2564:83:26"
                  },
                  {
                    "children": [
                      {
                        "attributes": {
                          "argumentTypes": null,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "isStructConstructorCall": false,
                          "lValueRequested": false,
                          "names": [
                            null
                          ],
                          "type": "bool",
                          "type_conversion": false
                        },
                        "children": [
                          {
                            "attributes": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                },
                                {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              ],
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "member_name": "approve",
                              "referencedDeclaration": 13029,
                              "type": "function (address,uint256) external returns (bool)"
                            },
                            "children": [
                              {
                                "attributes": {
                                  "argumentTypes": null,
                                  "overloadedDeclarations": [
                                    null
                                  ],
                                  "referencedDeclaration": 7712,
                                  "type": "contract IStableTokenMento",
                                  "value": "stableToken"
                                },
                                "id": 7783,
                                "name": "Identifier",
                                "src": "2719:11:26"
                              }
                            ],
                            "id": 7785,
                            "name": "MemberAccess",
                            "src": "2719:19:26"
                          },
                          {
                            "attributes": {
                              "argumentTypes": null,
                              "overloadedDeclarations": [
                                null
                              ],
                              "referencedDeclaration": 7730,
                              "type": "address",
                              "value": "exchangeAddress"
                            },
                            "id": 7786,
                            "name": "Identifier",
                            "src": "2739:15:26"
                          },
                          {
                            "attributes": {
                              "argumentTypes": null,
                              "overloadedDeclarations": [
                                null
                              ],
                              "referencedDeclaration": 7694,
                              "type": "uint256",
                              "value": "amount"
                            },
                            "id": 7787,
                            "name": "Identifier",
                            "src": "2756:6:26"
                          }
                        ],
                        "id": 7788,
                        "name": "FunctionCall",
                        "src": "2719:44:26"
                      }
                    ],
                    "id": 7789,
                    "name": "ExpressionStatement",
                    "src": "2719:44:26"
                  },
                  {
                    "children": [
                      {
                        "attributes": {
                          "argumentTypes": null,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "isStructConstructorCall": false,
                          "lValueRequested": false,
                          "names": [
                            null
                          ],
                          "type": "uint256",
                          "type_conversion": false
                        },
                        "children": [
                          {
                            "attributes": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                },
                                {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                },
                                {
                                  "typeIdentifier": "t_bool",
                                  "typeString": "bool"
                                }
                              ],
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "member_name": "sell",
                              "referencedDeclaration": 58761,
                              "type": "function (uint256,uint256,bool) external returns (uint256)"
                            },
                            "children": [
                              {
                                "attributes": {
                                  "argumentTypes": null,
                                  "overloadedDeclarations": [
                                    null
                                  ],
                                  "referencedDeclaration": 7739,
                                  "type": "contract IExchange",
                                  "value": "exchange"
                                },
                                "id": 7790,
                                "name": "Identifier",
                                "src": "2769:8:26"
                              }
                            ],
                            "id": 7792,
                            "name": "MemberAccess",
                            "src": "2769:13:26"
                          },
                          {
                            "attributes": {
                              "argumentTypes": null,
                              "overloadedDeclarations": [
                                null
                              ],
                              "referencedDeclaration": 7694,
                              "type": "uint256",
                              "value": "amount"
                            },
                            "id": 7793,
                            "name": "Identifier",
                            "src": "2783:6:26"
                          },
                          {
                            "attributes": {
                              "argumentTypes": null,
                              "overloadedDeclarations": [
                                null
                              ],
                              "referencedDeclaration": 7745,
                              "type": "uint256",
                              "value": "minAmount"
                            },
                            "id": 7794,
                            "name": "Identifier",
                            "src": "2791:9:26"
                          },
                          {
                            "attributes": {
                              "argumentTypes": null,
                              "hexvalue": "66616c7365",
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "subdenomination": null,
                              "token": "bool",
                              "type": "bool",
                              "value": "false"
                            },
                            "id": 7795,
                            "name": "Literal",
                            "src": "2802:5:26"
                          }
                        ],
                        "id": 7796,
                        "name": "FunctionCall",
                        "src": "2769:39:26"
                      }
                    ],
                    "id": 7797,
                    "name": "ExpressionStatement",
                    "src": "2769:39:26"
                  },
                  {
                    "attributes": {
                      "assignments": [
                        7799
                      ]
                    },
                    "children": [
                      {
                        "attributes": {
                          "constant": false,
                          "name": "goldToken",
                          "scope": 7828,
                          "stateVariable": false,
                          "storageLocation": "default",
                          "type": "contract IERC20",
                          "value": null,
                          "visibility": "internal"
                        },
                        "children": [
                          {
                            "attributes": {
                              "contractScope": null,
                              "name": "IERC20",
                              "referencedDeclaration": 955,
                              "type": "contract IERC20"
                            },
                            "id": 7798,
                            "name": "UserDefinedTypeName",
                            "src": "2815:6:26"
                          }
                        ],
                        "id": 7799,
                        "name": "VariableDeclaration",
                        "src": "2815:16:26"
                      },
                      {
                        "attributes": {
                          "argumentTypes": null,
                          "arguments": [
                            null
                          ],
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "isStructConstructorCall": false,
                          "lValueRequested": false,
                          "names": [
                            null
                          ],
                          "type": "contract IERC20",
                          "type_conversion": false
                        },
                        "children": [
                          {
                            "attributes": {
                              "argumentTypes": [
                                null
                              ],
                              "overloadedDeclarations": [
                                null
                              ],
                              "referencedDeclaration": 11775,
                              "type": "function () view returns (contract IERC20)",
                              "value": "getGoldToken"
                            },
                            "id": 7800,
                            "name": "Identifier",
                            "src": "2834:12:26"
                          }
                        ],
                        "id": 7801,
                        "name": "FunctionCall",
                        "src": "2834:14:26"
                      }
                    ],
                    "id": 7802,
                    "name": "VariableDeclarationStatement",
                    "src": "2815:33:26"
                  },
                  {
                    "attributes": {
                      "assignments": [
                        7804
                      ]
                    },
                    "children": [
                      {
                        "attributes": {
                          "constant": false,
                          "name": "celoAmount",
                          "scope": 7828,
                          "stateVariable": false,
                          "storageLocation": "default",
                          "type": "uint256",
                          "value": null,
                          "visibility": "internal"
                        },
                        "children": [
                          {
                            "attributes": {
                              "name": "uint256",
                              "type": "uint256"
                            },
                            "id": 7803,
                            "name": "ElementaryTypeName",
                            "src": "2854:7:26"
                          }
                        ],
                        "id": 7804,
                        "name": "VariableDeclaration",
                        "src": "2854:18:26"
                      },
                      {
                        "attributes": {
                          "argumentTypes": null,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "isStructConstructorCall": false,
                          "lValueRequested": false,
                          "names": [
                            null
                          ],
                          "type": "uint256",
                          "type_conversion": false
                        },
                        "children": [
                          {
                            "attributes": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_address_payable",
                                  "typeString": "address payable"
                                }
                              ],
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "member_name": "balanceOf",
                              "referencedDeclaration": 900,
                              "type": "function (address) view external returns (uint256)"
                            },
                            "children": [
                              {
                                "attributes": {
                                  "argumentTypes": null,
                                  "overloadedDeclarations": [
                                    null
                                  ],
                                  "referencedDeclaration": 7799,
                                  "type": "contract IERC20",
                                  "value": "goldToken"
                                },
                                "id": 7805,
                                "name": "Identifier",
                                "src": "2875:9:26"
                              }
                            ],
                            "id": 7806,
                            "name": "MemberAccess",
                            "src": "2875:19:26"
                          },
                          {
                            "attributes": {
                              "argumentTypes": null,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "isStructConstructorCall": false,
                              "lValueRequested": false,
                              "names": [
                                null
                              ],
                              "type": "address payable",
                              "type_conversion": true
                            },
                            "children": [
                              {
                                "attributes": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_contract$_MentoFeeHandlerSeller_$7830",
                                      "typeString": "contract MentoFeeHandlerSeller"
                                    }
                                  ],
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "lValueRequested": false,
                                  "type": "type(address)",
                                  "value": "address"
                                },
                                "id": 7807,
                                "name": "ElementaryTypeNameExpression",
                                "src": "2895:7:26"
                              },
                              {
                                "attributes": {
                                  "argumentTypes": null,
                                  "overloadedDeclarations": [
                                    null
                                  ],
                                  "referencedDeclaration": 59328,
                                  "type": "contract MentoFeeHandlerSeller",
                                  "value": "this"
                                },
                                "id": 7808,
                                "name": "Identifier",
                                "src": "2903:4:26"
                              }
                            ],
                            "id": 7809,
                            "name": "FunctionCall",
                            "src": "2895:13:26"
                          }
                        ],
                        "id": 7810,
                        "name": "FunctionCall",
                        "src": "2875:34:26"
                      }
                    ],
                    "id": 7811,
                    "name": "VariableDeclarationStatement",
                    "src": "2854:55:26"
                  },
                  {
                    "children": [
                      {
                        "attributes": {
                          "argumentTypes": null,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "isStructConstructorCall": false,
                          "lValueRequested": false,
                          "names": [
                            null
                          ],
                          "type": "bool",
                          "type_conversion": false
                        },
                        "children": [
                          {
                            "attributes": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_address_payable",
                                  "typeString": "address payable"
                                },
                                {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              ],
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "member_name": "transfer",
                              "referencedDeclaration": 909,
                              "type": "function (address,uint256) external returns (bool)"
                            },
                            "children": [
                              {
                                "attributes": {
                                  "argumentTypes": null,
                                  "overloadedDeclarations": [
                                    null
                                  ],
                                  "referencedDeclaration": 7799,
                                  "type": "contract IERC20",
                                  "value": "goldToken"
                                },
                                "id": 7812,
                                "name": "Identifier",
                                "src": "2915:9:26"
                              }
                            ],
                            "id": 7814,
                            "name": "MemberAccess",
                            "src": "2915:18:26"
                          },
                          {
                            "attributes": {
                              "argumentTypes": null,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "member_name": "sender",
                              "referencedDeclaration": null,
                              "type": "address payable"
                            },
                            "children": [
                              {
                                "attributes": {
                                  "argumentTypes": null,
                                  "overloadedDeclarations": [
                                    null
                                  ],
                                  "referencedDeclaration": 59216,
                                  "type": "msg",
                                  "value": "msg"
                                },
                                "id": 7815,
                                "name": "Identifier",
                                "src": "2934:3:26"
                              }
                            ],
                            "id": 7816,
                            "name": "MemberAccess",
                            "src": "2934:10:26"
                          },
                          {
                            "attributes": {
                              "argumentTypes": null,
                              "overloadedDeclarations": [
                                null
                              ],
                              "referencedDeclaration": 7804,
                              "type": "uint256",
                              "value": "celoAmount"
                            },
                            "id": 7817,
                            "name": "Identifier",
                            "src": "2946:10:26"
                          }
                        ],
                        "id": 7818,
                        "name": "FunctionCall",
                        "src": "2915:42:26"
                      }
                    ],
                    "id": 7819,
                    "name": "ExpressionStatement",
                    "src": "2915:42:26"
                  },
                  {
                    "children": [
                      {
                        "attributes": {
                          "argumentTypes": null,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "isStructConstructorCall": false,
                          "lValueRequested": false,
                          "names": [
                            null
                          ],
                          "type": "tuple()",
                          "type_conversion": false
                        },
                        "children": [
                          {
                            "attributes": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                },
                                {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                },
                                {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              ],
                              "overloadedDeclarations": [
                                null
                              ],
                              "referencedDeclaration": 6044,
                              "type": "function (address,address,uint256)",
                              "value": "TokenSold"
                            },
                            "id": 7820,
                            "name": "Identifier",
                            "src": "2969:9:26"
                          },
                          {
                            "attributes": {
                              "argumentTypes": null,
                              "overloadedDeclarations": [
                                null
                              ],
                              "referencedDeclaration": 7690,
                              "type": "address",
                              "value": "sellTokenAddress"
                            },
                            "id": 7821,
                            "name": "Identifier",
                            "src": "2979:16:26"
                          },
                          {
                            "attributes": {
                              "argumentTypes": null,
                              "overloadedDeclarations": [
                                null
                              ],
                              "referencedDeclaration": 7692,
                              "type": "address",
                              "value": "buyTokenAddress"
                            },
                            "id": 7822,
                            "name": "Identifier",
                            "src": "2997:15:26"
                          },
                          {
                            "attributes": {
                              "argumentTypes": null,
                              "overloadedDeclarations": [
                                null
                              ],
                              "referencedDeclaration": 7694,
                              "type": "uint256",
                              "value": "amount"
                            },
                            "id": 7823,
                            "name": "Identifier",
                            "src": "3014:6:26"
                          }
                        ],
                        "id": 7824,
                        "name": "FunctionCall",
                        "src": "2969:52:26"
                      }
                    ],
                    "id": 7825,
                    "name": "EmitStatement",
                    "src": "2964:57:26"
                  },
                  {
                    "attributes": {
                      "functionReturnParameters": 7700
                    },
                    "children": [
                      {
                        "attributes": {
                          "argumentTypes": null,
                          "overloadedDeclarations": [
                            null
                          ],
                          "referencedDeclaration": 7804,
                          "type": "uint256",
                          "value": "celoAmount"
                        },
                        "id": 7826,
                        "name": "Identifier",
                        "src": "3034:10:26"
                      }
                    ],
                    "id": 7827,
                    "name": "Return",
                    "src": "3027:17:26"
                  }
                ],
                "id": 7828,
                "name": "Block",
                "src": "1758:1291:26"
              }
            ],
            "id": 7829,
            "name": "FunctionDefinition",
            "src": "1593:1456:26"
          }
        ],
        "id": 7830,
        "name": "ContractDefinition",
        "src": "739:2312:26"
      }
    ],
    "id": 7831,
    "name": "SourceUnit",
    "src": "0:3052:26"
  },
  "compiler": {
    "name": "solc",
    "version": "0.5.13+commit.5b0b510c.Emscripten.clang"
  },
  "networks": {
    "1101": {
      "events": {},
      "links": {},
      "address": "0x8501835ac2B234147F766bB6e6423D6Ef50A9247",
      "transactionHash": "0x1f75158698285cca835cb3cd8289a1f00b1ad81c4519e9e41093bcf70ab0a1cd"
    }
  },
  "schemaVersion": "3.4.13",
  "updatedAt": "2023-11-21T17:25:47.895Z",
  "networkType": "ethereum",
  "devdoc": {
    "methods": {
      "calculateMinAmount(uint256,uint256,uint256,uint256)": {
        "details": "Calculates the minimum amount of tokens that should be received for the specified  amount with the given mid-price and maximum slippage.",
        "params": {
          "amount": "The amount of tokens to be exchanged.",
          "maxSlippage": "The maximum slippage percentage as a fraction of the mid-price.",
          "midPriceDenominator": "The denominator of the mid-price for the token pair.",
          "midPriceNumerator": "The numerator of the mid-price for the token pair."
        },
        "return": "The minimum amount of tokens that should be received as a uint256 value."
      },
      "constructor": {
        "params": {
          "test": "Set to true to skip implementation initialisation."
        }
      },
      "getVersionNumber()": {
        "return": "Storage version of the contract.Major version of the contract.Minor version of the contract.Patch version of the contract."
      },
      "isOwner()": {
        "details": "Returns true if the caller is the current owner."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner.     * NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "setMinimumReports(address,uint256)": {
        "params": {
          "newMininumReports": "The new update minimum number of reports required."
        }
      },
      "setRegistry(address)": {
        "params": {
          "registryAddress": "The address of a registry contract for routing to other contracts."
        }
      },
      "transfer(address,uint256,address)": {
        "params": {
          "amount": "The amount of tokens to transfer.",
          "to": "The address of the recipient to transfer the tokens to.",
          "token": "The address of the token to transfer."
        },
        "return": "A boolean indicating whether the transfer was successful or not."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    }
  },
  "userdoc": {
    "methods": {
      "constructor": "Sets initialized == true on implementation contracts.",
      "getVersionNumber()": {
        "notice": "Returns the storage, major, minor, and patch version of the contract."
      },
      "setMinimumReports(address,uint256)": {
        "notice": "Allows owner to set the minimum number of reports required."
      },
      "setRegistry(address)": {
        "notice": "Updates the address pointing to a Registry contract."
      },
      "transfer(address,uint256,address)": {
        "notice": "Allows owner to transfer tokens of this contract. It's meant for governance to  trigger use cases not contemplated in this contract."
      }
    }
  }
}