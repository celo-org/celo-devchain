{
  "contractName": "DowntimeSlasherTest",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "startBlock",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "endBlock",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "bitmap",
          "type": "bytes32"
        }
      ],
      "name": "BitmapSetForInterval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "validator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "startBlock",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "endBlock",
          "type": "uint256"
        }
      ],
      "name": "DowntimeSlashPerformed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "registryAddress",
          "type": "address"
        }
      ],
      "name": "RegistrySet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "interval",
          "type": "uint256"
        }
      ],
      "name": "SlashableDowntimeSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "penalty",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "reward",
          "type": "uint256"
        }
      ],
      "name": "SlashingIncentivesSet",
      "type": "event"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "bitmaps",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "blsKey",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "blsPop",
          "type": "bytes"
        }
      ],
      "name": "checkProofOfPossession",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "aNumerator",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "aDenominator",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "bNumerator",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "bDenominator",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "exponent",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_decimals",
          "type": "uint256"
        }
      ],
      "name": "fractionMulExp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "startBlock",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "endBlock",
          "type": "uint256"
        }
      ],
      "name": "getBitmapForInterval",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "bytes",
          "name": "header",
          "type": "bytes"
        }
      ],
      "name": "getBlockNumberFromHeader",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "getEpochNumber",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "blockNumber",
          "type": "uint256"
        }
      ],
      "name": "getEpochNumberOfBlock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "getEpochSize",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "blockNumber",
          "type": "uint256"
        }
      ],
      "name": "getParentSealBitmap",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "bytes",
          "name": "header",
          "type": "bytes"
        }
      ],
      "name": "getVerifiedSealBitmapFromHeader",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "getVersionNumber",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "validator",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "blockNumber",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "groupMembershipHistoryIndex",
          "type": "uint256"
        }
      ],
      "name": "groupMembershipAtBlock",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "bytes",
          "name": "header",
          "type": "bytes"
        }
      ],
      "name": "hashHeader",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "registryAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_penalty",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_reward",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_slashableDowntime",
          "type": "uint256"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "initialized",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "startBlock",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "endBlock",
          "type": "uint256"
        }
      ],
      "name": "isBitmapSetForInterval",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "isOwner",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "lastSlashedBlock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "blockNumber",
          "type": "uint256"
        }
      ],
      "name": "minQuorumSize",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "minQuorumSizeInCurrentSet",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "numberValidatorsInCurrentSet",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "numberValidatorsInSet",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "registry",
      "outputs": [
        {
          "internalType": "contract IRegistry",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "startBlock",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "endBlock",
          "type": "uint256"
        }
      ],
      "name": "setBitmapForInterval",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "bytes",
          "name": "header",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "number",
          "type": "uint256"
        }
      ],
      "name": "setBlockNumber",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "epoch",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "signer",
          "type": "address"
        }
      ],
      "name": "setEpochSigner",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "num",
          "type": "uint256"
        }
      ],
      "name": "setNumberValidators",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "blockNumber",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "bitmap",
          "type": "bytes32"
        }
      ],
      "name": "setParentSealBitmap",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "registryAddress",
          "type": "address"
        }
      ],
      "name": "setRegistry",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "interval",
          "type": "uint256"
        }
      ],
      "name": "setSlashableDowntime",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "penalty",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "reward",
          "type": "uint256"
        }
      ],
      "name": "setSlashingIncentives",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "bytes",
          "name": "header",
          "type": "bytes"
        },
        {
          "internalType": "bytes32",
          "name": "bitmap",
          "type": "bytes32"
        }
      ],
      "name": "setVerifiedSealBitmap",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "startBlocks",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "endBlocks",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "signerIndices",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256",
          "name": "groupMembershipHistoryIndex",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "validatorElectionLessers",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "validatorElectionGreaters",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "validatorElectionIndices",
          "type": "uint256[]"
        },
        {
          "internalType": "address[]",
          "name": "groupElectionLessers",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "groupElectionGreaters",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "groupElectionIndices",
          "type": "uint256[]"
        }
      ],
      "name": "slash",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "slashableDowntime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "slashingIncentives",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "penalty",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "reward",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "validatorSignerAddressFromCurrentSet",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "blockNumber",
          "type": "uint256"
        }
      ],
      "name": "validatorSignerAddressFromSet",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "startBlock",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "endBlock",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "signerIndex",
          "type": "uint256"
        }
      ],
      "name": "wasDownForInterval",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "startBlocks",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "endBlocks",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "signerIndices",
          "type": "uint256[]"
        }
      ],
      "name": "wasDownForIntervals",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "metadata": "{\"compiler\":{\"version\":\"0.5.13+commit.5b0b510c\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"startBlock\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"endBlock\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"bitmap\",\"type\":\"bytes32\"}],\"name\":\"BitmapSetForInterval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"startBlock\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"endBlock\",\"type\":\"uint256\"}],\"name\":\"DowntimeSlashPerformed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"registryAddress\",\"type\":\"address\"}],\"name\":\"RegistrySet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"interval\",\"type\":\"uint256\"}],\"name\":\"SlashableDowntimeSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"penalty\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"SlashingIncentivesSet\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"bitmaps\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"blsKey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"blsPop\",\"type\":\"bytes\"}],\"name\":\"checkProofOfPossession\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"aNumerator\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"aDenominator\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bNumerator\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bDenominator\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"exponent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_decimals\",\"type\":\"uint256\"}],\"name\":\"fractionMulExp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"startBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endBlock\",\"type\":\"uint256\"}],\"name\":\"getBitmapForInterval\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"header\",\"type\":\"bytes\"}],\"name\":\"getBlockNumberFromHeader\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getEpochNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"getEpochNumberOfBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getEpochSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"getParentSealBitmap\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"header\",\"type\":\"bytes\"}],\"name\":\"getVerifiedSealBitmapFromHeader\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getVersionNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"groupMembershipHistoryIndex\",\"type\":\"uint256\"}],\"name\":\"groupMembershipAtBlock\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"header\",\"type\":\"bytes\"}],\"name\":\"hashHeader\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"registryAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_penalty\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_reward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_slashableDowntime\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"initialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"startBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endBlock\",\"type\":\"uint256\"}],\"name\":\"isBitmapSetForInterval\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastSlashedBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"minQuorumSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minQuorumSizeInCurrentSet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"numberValidatorsInCurrentSet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"numberValidatorsInSet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"registry\",\"outputs\":[{\"internalType\":\"contract IRegistry\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"startBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endBlock\",\"type\":\"uint256\"}],\"name\":\"setBitmapForInterval\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"header\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"number\",\"type\":\"uint256\"}],\"name\":\"setBlockNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"}],\"name\":\"setEpochSigner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"num\",\"type\":\"uint256\"}],\"name\":\"setNumberValidators\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"bitmap\",\"type\":\"bytes32\"}],\"name\":\"setParentSealBitmap\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"registryAddress\",\"type\":\"address\"}],\"name\":\"setRegistry\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"interval\",\"type\":\"uint256\"}],\"name\":\"setSlashableDowntime\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"penalty\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"setSlashingIncentives\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"header\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"bitmap\",\"type\":\"bytes32\"}],\"name\":\"setVerifiedSealBitmap\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"startBlocks\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"endBlocks\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"signerIndices\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"groupMembershipHistoryIndex\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"validatorElectionLessers\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"validatorElectionGreaters\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"validatorElectionIndices\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"groupElectionLessers\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"groupElectionGreaters\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"groupElectionIndices\",\"type\":\"uint256[]\"}],\"name\":\"slash\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"slashableDowntime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"slashingIncentives\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"penalty\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"validatorSignerAddressFromCurrentSet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"validatorSignerAddressFromSet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"startBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"signerIndex\",\"type\":\"uint256\"}],\"name\":\"wasDownForInterval\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"startBlocks\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"endBlocks\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"signerIndices\",\"type\":\"uint256[]\"}],\"name\":\"wasDownForIntervals\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"methods\":{\"checkProofOfPossession(address,bytes,bytes)\":{\"params\":{\"blsKey\":\"The BLS public key that the validator is using for consensus, should pass proof  of possession. 48 bytes.\",\"blsPop\":\"The BLS public key proof-of-possession, which consists of a signature on the  account address. 96 bytes.\",\"sender\":\"The address signed by the BLS key to generate the proof of possession.\"},\"return\":\"True upon success.\"},\"fractionMulExp(uint256,uint256,uint256,uint256,uint256,uint256)\":{\"params\":{\"_decimals\":\"precision\",\"aDenominator\":\"Denominator of first fraction\",\"aNumerator\":\"Numerator of first fraction\",\"bDenominator\":\"Denominator of exponentiated fraction\",\"bNumerator\":\"Numerator of exponentiated fraction\",\"exponent\":\"exponent to raise b to\"},\"return\":\"Numerator of the computed quantity (not reduced).Denominator of the computed quantity (not reduced).\"},\"getBitmapForInterval(uint256,uint256)\":{\"details\":\"startBlock and endBlock must be in the same epoch.The getParentSealBitmap precompile requires that startBlock must be within 4 epochs of  the current block.\",\"params\":{\"endBlock\":\"Last block of the interval.\",\"startBlock\":\"First block of the interval.\"},\"return\":\"The signature uptime bitmap for the specified interval.\"},\"getEpochNumber()\":{\"return\":\"Current epoch number.\"},\"getEpochNumberOfBlock(uint256)\":{\"params\":{\"blockNumber\":\"Block number where epoch number is calculated.\"},\"return\":\"Epoch number.\"},\"getEpochSize()\":{\"return\":\"The current epoch size in blocks.\"},\"getVersionNumber()\":{\"return\":\"Storage version of the contract.Major version of the contract.Minor version of the contract.Patch version of the contract.\"},\"groupMembershipAtBlock(address,uint256,uint256)\":{\"params\":{\"blockNumber\":\"Block number associated with slashing.\",\"groupMembershipHistoryIndex\":\"Index used for history lookup.\",\"validator\":\"Validator that was slashed.\"},\"return\":\"Group to be slashed.\"},\"initialize(address,uint256,uint256,uint256)\":{\"params\":{\"_penalty\":\"Penalty for the slashed validator.\",\"_reward\":\"Reward that the observer gets.\",\"_slashableDowntime\":\"Slashable downtime in blocks.\",\"registryAddress\":\"The address of the registry core smart contract.\"}},\"isBitmapSetForInterval(uint256,uint256)\":{\"params\":{\"endBlock\":\"Last block of the interval.\",\"startBlock\":\"First block of the interval.\"},\"return\":\"True if the bitmap has been set for the specified interval.\"},\"isOwner()\":{\"details\":\"Returns true if the caller is the current owner.\"},\"minQuorumSize(uint256)\":{\"details\":\"Computed in celo-blockchain as int(math.Ceil(float64(2*valSet.Size()) / 3))\"},\"minQuorumSizeInCurrentSet()\":{\"return\":\"Byzantine quorum of validators.\"},\"numberValidatorsInCurrentSet()\":{\"return\":\"Size of the current elected validator set.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner.     * NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setBitmapForInterval(uint256,uint256)\":{\"details\":\"startBlock and endBlock must be in the same epoch.\",\"params\":{\"endBlock\":\"Last block of the interval.\",\"startBlock\":\"First block of the interval.\"},\"return\":\"The signature bitmap for the specified interval.\"},\"setRegistry(address)\":{\"params\":{\"registryAddress\":\"The address of a registry contract for routing to other contracts.\"}},\"setSlashableDowntime(uint256)\":{\"params\":{\"interval\":\"Slashable downtime in blocks.\"}},\"setSlashingIncentives(uint256,uint256)\":{\"params\":{\"penalty\":\"Penalty for the slashed signer.\",\"reward\":\"Reward that the observer gets.\"}},\"slash(uint256[],uint256[],uint256[],uint256,address[],address[],uint256[],address[],address[],uint256[])\":{\"details\":\"startBlocks[0] will be use as the startBlock of the slashableDowntime.\",\"params\":{\"endBlocks\":\"A list of interval end blocks for which signature bitmaps have already been set.\",\"groupElectionGreaters\":\"Greater pointers for group slashing.\",\"groupElectionIndices\":\"Vote indices for group slashing.\",\"groupElectionLessers\":\"Lesser pointers for group slashing.\",\"groupMembershipHistoryIndex\":\"Group membership index from where the group should be found (For start block).\",\"signerIndices\":\"The index of the provided validator for each epoch over which the provided intervals span.\",\"startBlocks\":\"A list of interval start blocks for which signature bitmaps have already been set.\",\"validatorElectionGreaters\":\"Greater pointers for validator slashing.\",\"validatorElectionIndices\":\"Vote indices for validator slashing.\",\"validatorElectionLessers\":\"Lesser pointers for validator slashing.\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"validatorSignerAddressFromCurrentSet(uint256)\":{\"params\":{\"index\":\"Index of requested validator in the validator set.\"},\"return\":\"Address of validator at the requested index.\"},\"wasDownForInterval(uint256,uint256,uint256)\":{\"details\":\"Both startBlock and endBlock should be part of the same epoch.\",\"params\":{\"endBlock\":\"Last block of the interval.\",\"signerIndex\":\"Index of the signer within the validator set.\",\"startBlock\":\"First block of the interval.\"},\"return\":\"True if the validator did not sign any blocks in the specified interval.\"},\"wasDownForIntervals(uint256[],uint256[],uint256[])\":{\"params\":{\"endBlocks\":\"A list of interval end blocks for which signature bitmaps have already been set.\",\"signerIndices\":\"Indices of the signer within the validator set for every epoch change.\",\"startBlocks\":\"A list of interval start blocks for which signature bitmaps have already been set.\"},\"return\":\"True if the validator signature does not appear in any block within the window.\"}}},\"userdoc\":{\"methods\":{\"checkProofOfPossession(address,bytes,bytes)\":{\"notice\":\"Checks a BLS proof of possession.\"},\"fractionMulExp(uint256,uint256,uint256,uint256,uint256,uint256)\":{\"notice\":\"calculate a * b^x for fractions a, b to `decimals` precision\"},\"getBitmapForInterval(uint256,uint256)\":{\"notice\":\"Calculates and returns the signature bitmap for the specified interval. This bitmap will contain a one for any validator that signed at least one block in that interval, and zero otherwise.\"},\"getEpochNumber()\":{\"notice\":\"Returns the epoch number at a block.\"},\"getEpochNumberOfBlock(uint256)\":{\"notice\":\"Returns the epoch number at a block.\"},\"getEpochSize()\":{\"notice\":\"Returns the current epoch size in blocks.\"},\"getVersionNumber()\":{\"notice\":\"Returns the storage, major, minor, and patch version of the contract.\"},\"groupMembershipAtBlock(address,uint256,uint256)\":{\"notice\":\"Returns the group to be slashed.\"},\"initialize(address,uint256,uint256,uint256)\":{\"notice\":\"Used in place of the constructor to allow the contract to be upgradable via proxy.\"},\"isBitmapSetForInterval(uint256,uint256)\":{\"notice\":\"Returns true if the bitmap has been set for the specified interval.\"},\"minQuorumSize(uint256)\":{\"notice\":\"Returns the minimum number of required signers for a given block number.\"},\"minQuorumSizeInCurrentSet()\":{\"notice\":\"Computes byzantine quorum from current validator set size\"},\"numberValidatorsInCurrentSet()\":{\"notice\":\"Gets the size of the current elected validator set.\"},\"setBitmapForInterval(uint256,uint256)\":{\"notice\":\"Calculates and sets the signature bitmap for the specified interval.\"},\"setRegistry(address)\":{\"notice\":\"Updates the address pointing to a Registry contract.\"},\"setSlashableDowntime(uint256)\":{\"notice\":\"Sets the slashable downtime.\"},\"setSlashingIncentives(uint256,uint256)\":{\"notice\":\"Sets slashing incentives.\"},\"slash(uint256[],uint256[],uint256[],uint256,address[],address[],uint256[],address[],address[],uint256[])\":{\"notice\":\"Slashes a validator that did not sign any blocks for at least `slashableDowntime`.\"},\"validatorSignerAddressFromCurrentSet(uint256)\":{\"notice\":\"Gets a validator address from the current validator set.\"},\"wasDownForInterval(uint256,uint256,uint256)\":{\"notice\":\"Returns true if the validator did not sign any blocks in the specified interval.\"},\"wasDownForIntervals(uint256[],uint256[],uint256[])\":{\"notice\":\"Returns true if a validator has been down for the specified overlapping or adjacent intervals.\"}}}},\"settings\":{\"compilationTarget\":{\"project:/contracts/governance/test/DowntimeSlasherTest.sol\":\"DowntimeSlasherTest\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"openzeppelin-solidity/contracts/GSN/Context.sol\":{\"content\":\"pragma solidity ^0.5.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\ncontract Context {\\n    // Empty internal constructor, to prevent people from mistakenly deploying\\n    // an instance of this contract, which should be used via inheritance.\\n    constructor () internal { }\\n    // solhint-disable-previous-line no-empty-blocks\\n\\n    function _msgSender() internal view returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x90a3995645af7562d84b9d69363ffa5ae7217714ab61e951bf7bc450f40e4061\"},\"openzeppelin-solidity/contracts/math/SafeMath.sol\":{\"content\":\"pragma solidity ^0.5.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        // Solidity only automatically asserts when dividing by 0\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0x640b6dee7a4b830bdfd52b5031a07fc2b12209f5b2e29e5d364a7d37f69d8076\"},\"openzeppelin-solidity/contracts/ownership/Ownable.sol\":{\"content\":\"pragma solidity ^0.5.0;\\n\\nimport \\\"../GSN/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\ncontract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(isOwner(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the caller is the current owner.\\n     */\\n    function isOwner() public view returns (bool) {\\n        return _msgSender() == _owner;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public onlyOwner {\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     */\\n    function _transferOwnership(address newOwner) internal {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x6fb9d7889769d7cc161225f9ef7a90e468ba9788b253816f8d8b6894d3472c24\"},\"openzeppelin-solidity/contracts/token/ERC20/IERC20.sol\":{\"content\":\"pragma solidity ^0.5.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\\n * the optional functions; to access them see {ERC20Detailed}.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xe5bb0f57cff3e299f360052ba50f1ea0fff046df2be070b6943e0e3c3fdad8a9\"},\"project:/contracts/common/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.5.13 <0.9.0;\\n\\ncontract Initializable {\\n  bool public initialized;\\n\\n  constructor(bool testingDeployment) public {\\n    if (!testingDeployment) {\\n      initialized = true;\\n    }\\n  }\\n\\n  modifier initializer() {\\n    require(!initialized, \\\"contract already initialized\\\");\\n    initialized = true;\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0x27277d9f2c894659833be45eeca368a6d5ff060d944f0ad335e31003bf6477ed\"},\"project:/contracts/common/UsingPrecompiles.sol\":{\"content\":\"pragma solidity ^0.5.13;\\n\\nimport \\\"openzeppelin-solidity/contracts/math/SafeMath.sol\\\";\\nimport \\\"../common/interfaces/ICeloVersionedContract.sol\\\";\\n\\ncontract UsingPrecompiles {\\n  using SafeMath for uint256;\\n\\n  address constant TRANSFER = address(0xff - 2);\\n  address constant FRACTION_MUL = address(0xff - 3);\\n  address constant PROOF_OF_POSSESSION = address(0xff - 4);\\n  address constant GET_VALIDATOR = address(0xff - 5);\\n  address constant NUMBER_VALIDATORS = address(0xff - 6);\\n  address constant EPOCH_SIZE = address(0xff - 7);\\n  address constant BLOCK_NUMBER_FROM_HEADER = address(0xff - 8);\\n  address constant HASH_HEADER = address(0xff - 9);\\n  address constant GET_PARENT_SEAL_BITMAP = address(0xff - 10);\\n  address constant GET_VERIFIED_SEAL_BITMAP = address(0xff - 11);\\n\\n  /**\\n   * @notice calculate a * b^x for fractions a, b to `decimals` precision\\n   * @param aNumerator Numerator of first fraction\\n   * @param aDenominator Denominator of first fraction\\n   * @param bNumerator Numerator of exponentiated fraction\\n   * @param bDenominator Denominator of exponentiated fraction\\n   * @param exponent exponent to raise b to\\n   * @param _decimals precision\\n   * @return Numerator of the computed quantity (not reduced).\\n   * @return Denominator of the computed quantity (not reduced).\\n   */\\n  function fractionMulExp(\\n    uint256 aNumerator,\\n    uint256 aDenominator,\\n    uint256 bNumerator,\\n    uint256 bDenominator,\\n    uint256 exponent,\\n    uint256 _decimals\\n  ) public view returns (uint256, uint256) {\\n    require(aDenominator != 0 && bDenominator != 0, \\\"a denominator is zero\\\");\\n    uint256 returnNumerator;\\n    uint256 returnDenominator;\\n    bool success;\\n    bytes memory out;\\n    (success, out) = FRACTION_MUL.staticcall(\\n      abi.encodePacked(aNumerator, aDenominator, bNumerator, bDenominator, exponent, _decimals)\\n    );\\n    require(success, \\\"error calling fractionMulExp precompile\\\");\\n    returnNumerator = getUint256FromBytes(out, 0);\\n    returnDenominator = getUint256FromBytes(out, 32);\\n    return (returnNumerator, returnDenominator);\\n  }\\n\\n  /**\\n   * @notice Returns the current epoch size in blocks.\\n   * @return The current epoch size in blocks.\\n   */\\n  function getEpochSize() public view returns (uint256) {\\n    bytes memory out;\\n    bool success;\\n    (success, out) = EPOCH_SIZE.staticcall(abi.encodePacked());\\n    require(success, \\\"error calling getEpochSize precompile\\\");\\n    return getUint256FromBytes(out, 0);\\n  }\\n\\n  /**\\n   * @notice Returns the epoch number at a block.\\n   * @param blockNumber Block number where epoch number is calculated.\\n   * @return Epoch number.\\n   */\\n  function getEpochNumberOfBlock(uint256 blockNumber) public view returns (uint256) {\\n    return epochNumberOfBlock(blockNumber, getEpochSize());\\n  }\\n\\n  /**\\n   * @notice Returns the epoch number at a block.\\n   * @return Current epoch number.\\n   */\\n  function getEpochNumber() public view returns (uint256) {\\n    return getEpochNumberOfBlock(block.number);\\n  }\\n\\n  /**\\n   * @notice Returns the epoch number at a block.\\n   * @param blockNumber Block number where epoch number is calculated.\\n   * @param epochSize The epoch size in blocks.\\n   * @return Epoch number.\\n   */\\n  function epochNumberOfBlock(uint256 blockNumber, uint256 epochSize)\\n    internal\\n    pure\\n    returns (uint256)\\n  {\\n    // Follows GetEpochNumber from celo-blockchain/blob/master/consensus/istanbul/utils.go\\n    uint256 epochNumber = blockNumber / epochSize;\\n    if (blockNumber % epochSize == 0) {\\n      return epochNumber;\\n    } else {\\n      return epochNumber.add(1);\\n    }\\n  }\\n\\n  /**\\n   * @notice Gets a validator address from the current validator set.\\n   * @param index Index of requested validator in the validator set.\\n   * @return Address of validator at the requested index.\\n   */\\n  function validatorSignerAddressFromCurrentSet(uint256 index) public view returns (address) {\\n    bytes memory out;\\n    bool success;\\n    (success, out) = GET_VALIDATOR.staticcall(abi.encodePacked(index, uint256(block.number)));\\n    require(success, \\\"error calling validatorSignerAddressFromCurrentSet precompile\\\");\\n    return address(getUint256FromBytes(out, 0));\\n  }\\n\\n  /**\\n   * @notice Gets a validator address from the validator set at the given block number.\\n   * @param index Index of requested validator in the validator set.\\n   * @param blockNumber Block number to retrieve the validator set from.\\n   * @return Address of validator at the requested index.\\n   */\\n  function validatorSignerAddressFromSet(uint256 index, uint256 blockNumber)\\n    public\\n    view\\n    returns (address)\\n  {\\n    bytes memory out;\\n    bool success;\\n    (success, out) = GET_VALIDATOR.staticcall(abi.encodePacked(index, blockNumber));\\n    require(success, \\\"error calling validatorSignerAddressFromSet precompile\\\");\\n    return address(getUint256FromBytes(out, 0));\\n  }\\n\\n  /**\\n   * @notice Gets the size of the current elected validator set.\\n   * @return Size of the current elected validator set.\\n   */\\n  function numberValidatorsInCurrentSet() public view returns (uint256) {\\n    bytes memory out;\\n    bool success;\\n    (success, out) = NUMBER_VALIDATORS.staticcall(abi.encodePacked(uint256(block.number)));\\n    require(success, \\\"error calling numberValidatorsInCurrentSet precompile\\\");\\n    return getUint256FromBytes(out, 0);\\n  }\\n\\n  /**\\n   * @notice Gets the size of the validator set that must sign the given block number.\\n   * @param blockNumber Block number to retrieve the validator set from.\\n   * @return Size of the validator set.\\n   */\\n  function numberValidatorsInSet(uint256 blockNumber) public view returns (uint256) {\\n    bytes memory out;\\n    bool success;\\n    (success, out) = NUMBER_VALIDATORS.staticcall(abi.encodePacked(blockNumber));\\n    require(success, \\\"error calling numberValidatorsInSet precompile\\\");\\n    return getUint256FromBytes(out, 0);\\n  }\\n\\n  /**\\n   * @notice Checks a BLS proof of possession.\\n   * @param sender The address signed by the BLS key to generate the proof of possession.\\n   * @param blsKey The BLS public key that the validator is using for consensus, should pass proof\\n   *   of possession. 48 bytes.\\n   * @param blsPop The BLS public key proof-of-possession, which consists of a signature on the\\n   *   account address. 96 bytes.\\n   * @return True upon success.\\n   */\\n  function checkProofOfPossession(address sender, bytes memory blsKey, bytes memory blsPop)\\n    public\\n    view\\n    returns (bool)\\n  {\\n    bool success;\\n    (success, ) = PROOF_OF_POSSESSION.staticcall(abi.encodePacked(sender, blsKey, blsPop));\\n    return success;\\n  }\\n\\n  /**\\n   * @notice Parses block number out of header.\\n   * @param header RLP encoded header\\n   * @return Block number.\\n   */\\n  function getBlockNumberFromHeader(bytes memory header) public view returns (uint256) {\\n    bytes memory out;\\n    bool success;\\n    (success, out) = BLOCK_NUMBER_FROM_HEADER.staticcall(abi.encodePacked(header));\\n    require(success, \\\"error calling getBlockNumberFromHeader precompile\\\");\\n    return getUint256FromBytes(out, 0);\\n  }\\n\\n  /**\\n   * @notice Computes hash of header.\\n   * @param header RLP encoded header\\n   * @return Header hash.\\n   */\\n  function hashHeader(bytes memory header) public view returns (bytes32) {\\n    bytes memory out;\\n    bool success;\\n    (success, out) = HASH_HEADER.staticcall(abi.encodePacked(header));\\n    require(success, \\\"error calling hashHeader precompile\\\");\\n    return getBytes32FromBytes(out, 0);\\n  }\\n\\n  /**\\n   * @notice Gets the parent seal bitmap from the header at the given block number.\\n   * @param blockNumber Block number to retrieve. Must be within 4 epochs of the current number.\\n   * @return Bitmap parent seal with set bits at indices corresponding to signing validators.\\n   */\\n  function getParentSealBitmap(uint256 blockNumber) public view returns (bytes32) {\\n    bytes memory out;\\n    bool success;\\n    (success, out) = GET_PARENT_SEAL_BITMAP.staticcall(abi.encodePacked(blockNumber));\\n    require(success, \\\"error calling getParentSealBitmap precompile\\\");\\n    return getBytes32FromBytes(out, 0);\\n  }\\n\\n  /**\\n   * @notice Verifies the BLS signature on the header and returns the seal bitmap.\\n   * The validator set used for verification is retrieved based on the parent hash field of the\\n   * header.  If the parent hash is not in the blockchain, verification fails.\\n   * @param header RLP encoded header\\n   * @return Bitmap parent seal with set bits at indices correspoinding to signing validators.\\n   */\\n  function getVerifiedSealBitmapFromHeader(bytes memory header) public view returns (bytes32) {\\n    bytes memory out;\\n    bool success;\\n    (success, out) = GET_VERIFIED_SEAL_BITMAP.staticcall(abi.encodePacked(header));\\n    require(success, \\\"error calling getVerifiedSealBitmapFromHeader precompile\\\");\\n    return getBytes32FromBytes(out, 0);\\n  }\\n\\n  /**\\n   * @notice Converts bytes to uint256.\\n   * @param bs byte[] data\\n   * @param start offset into byte data to convert\\n   * @return uint256 data\\n   */\\n  function getUint256FromBytes(bytes memory bs, uint256 start) internal pure returns (uint256) {\\n    return uint256(getBytes32FromBytes(bs, start));\\n  }\\n\\n  /**\\n   * @notice Converts bytes to bytes32.\\n   * @param bs byte[] data\\n   * @param start offset into byte data to convert\\n   * @return bytes32 data\\n   */\\n  function getBytes32FromBytes(bytes memory bs, uint256 start) internal pure returns (bytes32) {\\n    require(bs.length >= start.add(32), \\\"slicing out of range\\\");\\n    bytes32 x;\\n    assembly {\\n      x := mload(add(bs, add(start, 32)))\\n    }\\n    return x;\\n  }\\n\\n  /**\\n   * @notice Returns the minimum number of required signers for a given block number.\\n   * @dev Computed in celo-blockchain as int(math.Ceil(float64(2*valSet.Size()) / 3))\\n   */\\n  function minQuorumSize(uint256 blockNumber) public view returns (uint256) {\\n    return numberValidatorsInSet(blockNumber).mul(2).add(2).div(3);\\n  }\\n\\n  /**\\n   * @notice Computes byzantine quorum from current validator set size\\n   * @return Byzantine quorum of validators.\\n   */\\n  function minQuorumSizeInCurrentSet() public view returns (uint256) {\\n    return minQuorumSize(block.number);\\n  }\\n}\\n\",\"keccak256\":\"0x6a99add1a40e2bcd3b49e265a4d38ec9bc131f348f4b0c4141c4db42c1884ec6\"},\"project:/contracts/common/UsingRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity ^0.5.13;\\n\\nimport \\\"openzeppelin-solidity/contracts/ownership/Ownable.sol\\\";\\nimport \\\"openzeppelin-solidity/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport \\\"./interfaces/IAccounts.sol\\\";\\nimport \\\"./interfaces/IFeeCurrencyWhitelist.sol\\\";\\nimport \\\"./interfaces/IFreezer.sol\\\";\\nimport \\\"./interfaces/IRegistry.sol\\\";\\n\\nimport \\\"../governance/interfaces/IElection.sol\\\";\\nimport \\\"../governance/interfaces/IGovernance.sol\\\";\\nimport \\\"../governance/interfaces/ILockedGold.sol\\\";\\nimport \\\"../governance/interfaces/IValidators.sol\\\";\\n\\nimport \\\"../identity/interfaces/IRandom.sol\\\";\\nimport \\\"../identity/interfaces/IAttestations.sol\\\";\\n\\nimport \\\"../../lib/mento-core/contracts/interfaces/IExchange.sol\\\";\\nimport \\\"../../lib/mento-core/contracts/interfaces/IReserve.sol\\\";\\nimport \\\"../../lib/mento-core/contracts/interfaces/IStableToken.sol\\\";\\nimport \\\"../stability/interfaces/ISortedOracles.sol\\\";\\n\\ncontract UsingRegistry is Ownable {\\n  event RegistrySet(address indexed registryAddress);\\n\\n  // solhint-disable state-visibility\\n  bytes32 constant ACCOUNTS_REGISTRY_ID = keccak256(abi.encodePacked(\\\"Accounts\\\"));\\n  bytes32 constant ATTESTATIONS_REGISTRY_ID = keccak256(abi.encodePacked(\\\"Attestations\\\"));\\n  bytes32 constant DOWNTIME_SLASHER_REGISTRY_ID = keccak256(abi.encodePacked(\\\"DowntimeSlasher\\\"));\\n  bytes32 constant DOUBLE_SIGNING_SLASHER_REGISTRY_ID = keccak256(\\n    abi.encodePacked(\\\"DoubleSigningSlasher\\\")\\n  );\\n  bytes32 constant ELECTION_REGISTRY_ID = keccak256(abi.encodePacked(\\\"Election\\\"));\\n  bytes32 constant EXCHANGE_REGISTRY_ID = keccak256(abi.encodePacked(\\\"Exchange\\\"));\\n  bytes32 constant FEE_CURRENCY_WHITELIST_REGISTRY_ID = keccak256(\\n    abi.encodePacked(\\\"FeeCurrencyWhitelist\\\")\\n  );\\n  bytes32 constant FREEZER_REGISTRY_ID = keccak256(abi.encodePacked(\\\"Freezer\\\"));\\n  bytes32 constant GOLD_TOKEN_REGISTRY_ID = keccak256(abi.encodePacked(\\\"GoldToken\\\"));\\n  bytes32 constant GOVERNANCE_REGISTRY_ID = keccak256(abi.encodePacked(\\\"Governance\\\"));\\n  bytes32 constant GOVERNANCE_SLASHER_REGISTRY_ID = keccak256(\\n    abi.encodePacked(\\\"GovernanceSlasher\\\")\\n  );\\n  bytes32 constant LOCKED_GOLD_REGISTRY_ID = keccak256(abi.encodePacked(\\\"LockedGold\\\"));\\n  bytes32 constant RESERVE_REGISTRY_ID = keccak256(abi.encodePacked(\\\"Reserve\\\"));\\n  bytes32 constant RANDOM_REGISTRY_ID = keccak256(abi.encodePacked(\\\"Random\\\"));\\n  bytes32 constant SORTED_ORACLES_REGISTRY_ID = keccak256(abi.encodePacked(\\\"SortedOracles\\\"));\\n  bytes32 constant STABLE_TOKEN_REGISTRY_ID = keccak256(abi.encodePacked(\\\"StableToken\\\"));\\n  bytes32 constant VALIDATORS_REGISTRY_ID = keccak256(abi.encodePacked(\\\"Validators\\\"));\\n  // solhint-enable state-visibility\\n\\n  IRegistry public registry;\\n\\n  modifier onlyRegisteredContract(bytes32 identifierHash) {\\n    require(registry.getAddressForOrDie(identifierHash) == msg.sender, \\\"only registered contract\\\");\\n    _;\\n  }\\n\\n  modifier onlyRegisteredContracts(bytes32[] memory identifierHashes) {\\n    require(registry.isOneOf(identifierHashes, msg.sender), \\\"only registered contracts\\\");\\n    _;\\n  }\\n\\n  /**\\n   * @notice Updates the address pointing to a Registry contract.\\n   * @param registryAddress The address of a registry contract for routing to other contracts.\\n   */\\n  function setRegistry(address registryAddress) public onlyOwner {\\n    require(registryAddress != address(0), \\\"Cannot register the null address\\\");\\n    registry = IRegistry(registryAddress);\\n    emit RegistrySet(registryAddress);\\n  }\\n\\n  function getAccounts() internal view returns (IAccounts) {\\n    return IAccounts(registry.getAddressForOrDie(ACCOUNTS_REGISTRY_ID));\\n  }\\n\\n  function getAttestations() internal view returns (IAttestations) {\\n    return IAttestations(registry.getAddressForOrDie(ATTESTATIONS_REGISTRY_ID));\\n  }\\n\\n  function getElection() internal view returns (IElection) {\\n    return IElection(registry.getAddressForOrDie(ELECTION_REGISTRY_ID));\\n  }\\n\\n  function getExchange() internal view returns (IExchange) {\\n    return IExchange(registry.getAddressForOrDie(EXCHANGE_REGISTRY_ID));\\n  }\\n\\n  function getFeeCurrencyWhitelistRegistry() internal view returns (IFeeCurrencyWhitelist) {\\n    return IFeeCurrencyWhitelist(registry.getAddressForOrDie(FEE_CURRENCY_WHITELIST_REGISTRY_ID));\\n  }\\n\\n  function getFreezer() internal view returns (IFreezer) {\\n    return IFreezer(registry.getAddressForOrDie(FREEZER_REGISTRY_ID));\\n  }\\n\\n  function getGoldToken() internal view returns (IERC20) {\\n    return IERC20(registry.getAddressForOrDie(GOLD_TOKEN_REGISTRY_ID));\\n  }\\n\\n  function getGovernance() internal view returns (IGovernance) {\\n    return IGovernance(registry.getAddressForOrDie(GOVERNANCE_REGISTRY_ID));\\n  }\\n\\n  function getLockedGold() internal view returns (ILockedGold) {\\n    return ILockedGold(registry.getAddressForOrDie(LOCKED_GOLD_REGISTRY_ID));\\n  }\\n\\n  function getRandom() internal view returns (IRandom) {\\n    return IRandom(registry.getAddressForOrDie(RANDOM_REGISTRY_ID));\\n  }\\n\\n  function getReserve() internal view returns (IReserve) {\\n    return IReserve(registry.getAddressForOrDie(RESERVE_REGISTRY_ID));\\n  }\\n\\n  function getSortedOracles() internal view returns (ISortedOracles) {\\n    return ISortedOracles(registry.getAddressForOrDie(SORTED_ORACLES_REGISTRY_ID));\\n  }\\n\\n  function getStableToken() internal view returns (IStableToken) {\\n    return IStableToken(registry.getAddressForOrDie(STABLE_TOKEN_REGISTRY_ID));\\n  }\\n\\n  function getValidators() internal view returns (IValidators) {\\n    return IValidators(registry.getAddressForOrDie(VALIDATORS_REGISTRY_ID));\\n  }\\n}\\n\",\"keccak256\":\"0x31ec0f16867a35046f9e1211ac3457198e39abc2362d2d559f4ccc4a3985a9ac\"},\"project:/contracts/common/interfaces/IAccounts.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.5.13 <0.9.0;\\n\\ninterface IAccounts {\\n  function isAccount(address) external view returns (bool);\\n  function voteSignerToAccount(address) external view returns (address);\\n  function validatorSignerToAccount(address) external view returns (address);\\n  function attestationSignerToAccount(address) external view returns (address);\\n  function signerToAccount(address) external view returns (address);\\n  function getAttestationSigner(address) external view returns (address);\\n  function getValidatorSigner(address) external view returns (address);\\n  function getVoteSigner(address) external view returns (address);\\n  function hasAuthorizedVoteSigner(address) external view returns (bool);\\n  function hasAuthorizedValidatorSigner(address) external view returns (bool);\\n  function hasAuthorizedAttestationSigner(address) external view returns (bool);\\n\\n  function setAccountDataEncryptionKey(bytes calldata) external;\\n  function setMetadataURL(string calldata) external;\\n  function setName(string calldata) external;\\n  function setWalletAddress(address, uint8, bytes32, bytes32) external;\\n  function setAccount(string calldata, bytes calldata, address, uint8, bytes32, bytes32) external;\\n\\n  function getDataEncryptionKey(address) external view returns (bytes memory);\\n  function getWalletAddress(address) external view returns (address);\\n  function getMetadataURL(address) external view returns (string memory);\\n  function batchGetMetadataURL(address[] calldata)\\n    external\\n    view\\n    returns (uint256[] memory, bytes memory);\\n  function getName(address) external view returns (string memory);\\n\\n  function authorizeVoteSigner(address, uint8, bytes32, bytes32) external;\\n  function authorizeValidatorSigner(address, uint8, bytes32, bytes32) external;\\n  function authorizeValidatorSignerWithPublicKey(address, uint8, bytes32, bytes32, bytes calldata)\\n    external;\\n  function authorizeValidatorSignerWithKeys(\\n    address,\\n    uint8,\\n    bytes32,\\n    bytes32,\\n    bytes calldata,\\n    bytes calldata,\\n    bytes calldata\\n  ) external;\\n  function authorizeAttestationSigner(address, uint8, bytes32, bytes32) external;\\n  function createAccount() external returns (bool);\\n\\n  function setPaymentDelegation(address, uint256) external;\\n  function getPaymentDelegation(address) external view returns (address, uint256);\\n  function isSigner(address, address, bytes32) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x17a0ff4b1c2da32f5de9c0fe230fcb325b2bbabcf51980cfb425cec75f678f5e\"},\"project:/contracts/common/interfaces/ICeloVersionedContract.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.5.13 <0.9.0;\\n\\ninterface ICeloVersionedContract {\\n  /**\\n   * @notice Returns the storage, major, minor, and patch version of the contract.\\n    * @return Storage version of the contract.\\n    * @return Major version of the contract.\\n    * @return Minor version of the contract.\\n    * @return Patch version of the contract.\\n   */\\n  function getVersionNumber() external pure returns (uint256, uint256, uint256, uint256);\\n}\\n\",\"keccak256\":\"0x27f0b14472db998eb8e4b529bbfd6a5879cbd842f8db8aa6c06ed7d2e0b17ac1\"},\"project:/contracts/common/interfaces/IFeeCurrencyWhitelist.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.5.13 <0.9.0;\\n\\ninterface IFeeCurrencyWhitelist {\\n  function addToken(address) external;\\n  function getWhitelist() external view returns (address[] memory);\\n}\\n\",\"keccak256\":\"0x4a91e634d22e8b8c36ef16113d7403029f334affb38f2453f0453f4ba06a925e\"},\"project:/contracts/common/interfaces/IFreezer.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.5.13 <0.9.0;\\n\\ninterface IFreezer {\\n  function isFrozen(address) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x6c34df21ba7ae83d9b47153bec2ffdb74128c11c0a9f20edaca927967fda4786\"},\"project:/contracts/common/interfaces/IRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.5.13 <0.9.0;\\n\\ninterface IRegistry {\\n  function setAddressFor(string calldata, address) external;\\n  function getAddressForOrDie(bytes32) external view returns (address);\\n  function getAddressFor(bytes32) external view returns (address);\\n  function getAddressForStringOrDie(string calldata identifier) external view returns (address);\\n  function getAddressForString(string calldata identifier) external view returns (address);\\n  function isOneOf(bytes32[] calldata, address) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x7737cbda6f3519bf6a4108e07b2c991a655e8731a4c040a3681e9629cfc4b52d\"},\"project:/contracts/governance/DoubleSigningSlasher.sol\":{\"content\":\"pragma solidity ^0.5.13;\\n\\nimport \\\"openzeppelin-solidity/contracts/math/SafeMath.sol\\\";\\nimport \\\"../common/interfaces/ICeloVersionedContract.sol\\\";\\n\\nimport \\\"./SlasherUtil.sol\\\";\\n\\ncontract DoubleSigningSlasher is ICeloVersionedContract, SlasherUtil {\\n  using SafeMath for uint256;\\n\\n  // For each signer address, check if a block header has already been slashed\\n  mapping(address => mapping(bytes32 => bool)) isSlashed;\\n\\n  event SlashingIncentivesSet(uint256 penalty, uint256 reward);\\n  event DoubleSigningSlashPerformed(address indexed validator, uint256 indexed blockNumber);\\n\\n  /**\\n  * @notice Returns the storage, major, minor, and patch version of the contract.\\n   * @return Storage version of the contract.\\n   * @return Major version of the contract.\\n   * @return Minor version of the contract.\\n   * @return Patch version of the contract.\\n  */\\n  function getVersionNumber() external pure returns (uint256, uint256, uint256, uint256) {\\n    return (1, 1, 1, 0);\\n  }\\n\\n  /**\\n   * @notice Sets initialized == true on implementation contracts\\n   * @param test Set to true to skip implementation initialization\\n   */\\n  constructor(bool test) public SlasherUtil(test) {}\\n\\n  /**\\n   * @notice Used in place of the constructor to allow the contract to be upgradable via proxy.\\n   * @param registryAddress The address of the registry core smart contract.\\n   * @param _penalty Penalty for the slashed signer.\\n   * @param _reward Reward that the observer gets.\\n   */\\n  function initialize(address registryAddress, uint256 _penalty, uint256 _reward)\\n    external\\n    initializer\\n  {\\n    _transferOwnership(msg.sender);\\n    setRegistry(registryAddress);\\n    setSlashingIncentives(_penalty, _reward);\\n  }\\n\\n  /**\\n   * @notice Counts the number of set bits (Hamming weight).\\n   * @param v Bitmap.\\n   * @return Number of set bits.\\n   */\\n  function countSetBits(uint256 v) internal pure returns (uint256) {\\n    uint256 res = 0;\\n    uint256 acc = v;\\n    for (uint256 i = 0; i < 256; i = i.add(1)) {\\n      if (acc & 1 == 1) res = res.add(1);\\n      acc = acc >> 1;\\n    }\\n    return res;\\n  }\\n\\n  /**\\n   * @notice Given two RLP encoded blocks, calls into precompiles to require that\\n   * the two block hashes are different, have the same height, have a\\n   * quorum of signatures, and that `signer` was part of the quorum.\\n   * @param signer The signer to be slashed.\\n   * @param index Validator index at the block.\\n   * @param headerA First double signed block header.\\n   * @param headerB Second double signed block header.\\n   * @return Block number where double signing occured. Throws if no double signing is detected.\\n   */\\n  function checkForDoubleSigning(\\n    address signer,\\n    uint256 index,\\n    bytes memory headerA,\\n    bytes memory headerB\\n  ) public view returns (uint256) {\\n    require(hashHeader(headerA) != hashHeader(headerB), \\\"Block hashes have to be different\\\");\\n    uint256 blockNumber = getBlockNumberFromHeader(headerA);\\n    require(\\n      blockNumber == getBlockNumberFromHeader(headerB),\\n      \\\"Block headers are from different height\\\"\\n    );\\n    require(index < numberValidatorsInSet(blockNumber), \\\"Bad validator index\\\");\\n    require(\\n      signer == validatorSignerAddressFromSet(index, blockNumber),\\n      \\\"Wasn't a signer with given index\\\"\\n    );\\n    uint256 mapA = uint256(getVerifiedSealBitmapFromHeader(headerA));\\n    uint256 mapB = uint256(getVerifiedSealBitmapFromHeader(headerB));\\n    require(mapA & (1 << index) != 0, \\\"Didn't sign first block\\\");\\n    require(mapB & (1 << index) != 0, \\\"Didn't sign second block\\\");\\n    require(\\n      countSetBits(mapA) >= minQuorumSize(blockNumber),\\n      \\\"Not enough signers in the first block\\\"\\n    );\\n    require(\\n      countSetBits(mapB) >= minQuorumSize(blockNumber),\\n      \\\"Not enough signers in the second block\\\"\\n    );\\n    return blockNumber;\\n  }\\n\\n  function checkIfAlreadySlashed(address signer, bytes memory header) internal {\\n    bytes32 bhash = hashHeader(header);\\n    require(!isSlashed[signer][bhash], \\\"Already slashed\\\");\\n    isSlashed[signer][bhash] = true;\\n  }\\n\\n  /**\\n   * @notice Requires that `eval` returns true and that this evidence has not\\n   * already been used to slash `signer`.\\n   * If so, fetches the `account` associated with `signer` and the group that\\n   * `signer` was a member of during the corresponding epoch.\\n   * Then, calls `LockedGold.slash` on both the validator and group accounts.\\n   * Calls `Validators.removeSlashedMember` to remove the validator from its\\n   * current group if it is a member of one.\\n   * Finally, stores that hash(signer, blockNumber) has been slashed.\\n   * @param signer The signer to be slashed.\\n   * @param index Validator index at the block.\\n   * @param headerA First double signed block header.\\n   * @param headerB Second double signed block header.\\n   * @param groupMembershipHistoryIndex Group membership index from where the group should be found.\\n   * @param validatorElectionLessers Lesser pointers for validator slashing.\\n   * @param validatorElectionGreaters Greater pointers for validator slashing.\\n   * @param validatorElectionIndices Vote indices for validator slashing.\\n   * @param groupElectionLessers Lesser pointers for group slashing.\\n   * @param groupElectionGreaters Greater pointers for group slashing.\\n   * @param groupElectionIndices Vote indices for group slashing.\\n   */\\n  function slash(\\n    address signer,\\n    uint256 index,\\n    bytes memory headerA,\\n    bytes memory headerB,\\n    uint256 groupMembershipHistoryIndex,\\n    address[] memory validatorElectionLessers,\\n    address[] memory validatorElectionGreaters,\\n    uint256[] memory validatorElectionIndices,\\n    address[] memory groupElectionLessers,\\n    address[] memory groupElectionGreaters,\\n    uint256[] memory groupElectionIndices\\n  ) public {\\n    checkIfAlreadySlashed(signer, headerA);\\n    checkIfAlreadySlashed(signer, headerB);\\n    uint256 blockNumber = checkForDoubleSigning(signer, index, headerA, headerB);\\n    address validator = getAccounts().signerToAccount(signer);\\n    performSlashing(\\n      validator,\\n      msg.sender,\\n      blockNumber,\\n      groupMembershipHistoryIndex,\\n      validatorElectionLessers,\\n      validatorElectionGreaters,\\n      validatorElectionIndices,\\n      groupElectionLessers,\\n      groupElectionGreaters,\\n      groupElectionIndices\\n    );\\n    emit DoubleSigningSlashPerformed(validator, blockNumber);\\n  }\\n}\\n\",\"keccak256\":\"0xddef0de471be0a75b10f23f0e72c7b60cbf0cc31fac4c9b6fd4f3ba52e1dbec3\"},\"project:/contracts/governance/DowntimeSlasher.sol\":{\"content\":\"pragma solidity ^0.5.13;\\n\\nimport \\\"openzeppelin-solidity/contracts/ownership/Ownable.sol\\\";\\nimport \\\"openzeppelin-solidity/contracts/math/SafeMath.sol\\\";\\n\\nimport \\\"./SlasherUtil.sol\\\";\\nimport \\\"../common/interfaces/ICeloVersionedContract.sol\\\";\\n\\ncontract DowntimeSlasher is ICeloVersionedContract, SlasherUtil {\\n  using SafeMath for uint256;\\n\\n  // Maps validator address -> end block of the latest interval for which it has been slashed.\\n  mapping(address => uint256) public lastSlashedBlock;\\n\\n  // Maps user address -> startBlock -> endBlock -> signature bitmap for that interval.\\n  // Note that startBlock and endBlock must always be in the same epoch.\\n  mapping(address => mapping(uint256 => mapping(uint256 => bytes32))) public bitmaps;\\n\\n  uint256 public slashableDowntime;\\n\\n  event SlashableDowntimeSet(uint256 interval);\\n  event DowntimeSlashPerformed(\\n    address indexed validator,\\n    uint256 indexed startBlock,\\n    uint256 indexed endBlock\\n  );\\n  event BitmapSetForInterval(\\n    address indexed sender,\\n    uint256 indexed startBlock,\\n    uint256 indexed endBlock,\\n    bytes32 bitmap\\n  );\\n\\n  /**\\n   * @notice Returns the storage, major, minor, and patch version of the contract.\\n   * @return Storage version of the contract.\\n   * @return Major version of the contract.\\n   * @return Minor version of the contract.\\n   * @return Patch version of the contract.\\n   */\\n  function getVersionNumber() external pure returns (uint256, uint256, uint256, uint256) {\\n    return (2, 0, 0, 0);\\n  }\\n\\n  /**\\n   * @notice Sets initialized == true on implementation contracts\\n   * @param test Set to true to skip implementation initialization\\n   */\\n  constructor(bool test) public SlasherUtil(test) {}\\n\\n  /**\\n   * @notice Used in place of the constructor to allow the contract to be upgradable via proxy.\\n   * @param registryAddress The address of the registry core smart contract.\\n   * @param _penalty Penalty for the slashed validator.\\n   * @param _reward Reward that the observer gets.\\n   * @param _slashableDowntime Slashable downtime in blocks.\\n   */\\n  function initialize(\\n    address registryAddress,\\n    uint256 _penalty,\\n    uint256 _reward,\\n    uint256 _slashableDowntime\\n  ) external initializer {\\n    _transferOwnership(msg.sender);\\n    setRegistry(registryAddress);\\n    setSlashingIncentives(_penalty, _reward);\\n    setSlashableDowntime(_slashableDowntime);\\n  }\\n\\n  /**\\n   * @notice Sets the slashable downtime.\\n   * @param interval Slashable downtime in blocks.\\n   */\\n  function setSlashableDowntime(uint256 interval) public onlyOwner {\\n    require(interval != 0, \\\"slashable downtime cannot be zero\\\");\\n    slashableDowntime = interval;\\n    emit SlashableDowntimeSet(interval);\\n  }\\n\\n  /**\\n   * @notice Calculates and returns the signature bitmap for the specified interval.\\n   * This bitmap will contain a one for any validator that signed at least one block in that\\n   * interval, and zero otherwise.\\n   * @param startBlock First block of the interval.\\n   * @param endBlock Last block of the interval.\\n   * @return The signature uptime bitmap for the specified interval.\\n   * @dev startBlock and endBlock must be in the same epoch.\\n   * @dev The getParentSealBitmap precompile requires that startBlock must be within 4 epochs of \\n   * the current block.\\n   */\\n  function getBitmapForInterval(uint256 startBlock, uint256 endBlock)\\n    public\\n    view\\n    returns (bytes32)\\n  {\\n    require(endBlock >= startBlock, \\\"endBlock must be greater or equal than startBlock\\\");\\n    // The signature bitmap for block N is stored in block N+1.\\n    // The latest block is `block.number - 1`, which stores the signature bitmap for\\n    // `block.number - 2`.\\n    uint256 lastBlockWithSignatureBitmap = block.number.sub(2);\\n    require(\\n      endBlock <= lastBlockWithSignatureBitmap,\\n      \\\"the signature bitmap for endBlock is not yet available\\\"\\n    );\\n    uint256 epochSize = getEpochSize();\\n    require(\\n      block.number.sub(startBlock) < epochSize.mul(4),\\n      \\\"startBlock must be within 4 epochs of the current head\\\"\\n    );\\n    require(\\n      epochNumberOfBlock(startBlock, epochSize) == epochNumberOfBlock(endBlock, epochSize),\\n      \\\"startBlock and endBlock must be in the same epoch\\\"\\n    );\\n\\n    bytes32 bitmap;\\n    for (\\n      uint256 blockNumber = startBlock;\\n      blockNumber <= endBlock;\\n      blockNumber = blockNumber.add(1)\\n    ) {\\n      // The canonical signatures for block N are stored in the parent seal bitmap for block N+1.\\n      bitmap |= getParentSealBitmap(blockNumber.add(1));\\n    }\\n\\n    return bitmap;\\n  }\\n\\n  /**\\n   * @notice Calculates and sets the signature bitmap for the specified interval.\\n   * @param startBlock First block of the interval.\\n   * @param endBlock Last block of the interval.\\n   * @return The signature bitmap for the specified interval.\\n   * @dev startBlock and endBlock must be in the same epoch.\\n   */\\n  function setBitmapForInterval(uint256 startBlock, uint256 endBlock) public returns (bytes32) {\\n    require(!isBitmapSetForInterval(startBlock, endBlock), \\\"bitmap already set\\\");\\n\\n    bytes32 bitmap = getBitmapForInterval(startBlock, endBlock);\\n    bitmaps[msg.sender][startBlock][endBlock] = bitmap;\\n\\n    emit BitmapSetForInterval(msg.sender, startBlock, endBlock, bitmap);\\n\\n    return bitmap;\\n  }\\n\\n  /**\\n   * @notice Returns true if the validator did not sign any blocks in the specified interval.\\n   * @param startBlock First block of the interval.\\n   * @param endBlock Last block of the interval.\\n   * @param signerIndex Index of the signer within the validator set.\\n   * @return True if the validator did not sign any blocks in the specified interval.\\n   * @dev Both startBlock and endBlock should be part of the same epoch.\\n   */\\n  function wasDownForInterval(uint256 startBlock, uint256 endBlock, uint256 signerIndex)\\n    public\\n    view\\n    returns (bool)\\n  {\\n    require(signerIndex < numberValidatorsInSet(startBlock), \\\"bad validator index at start block\\\");\\n    require(\\n      isBitmapSetForInterval(startBlock, endBlock),\\n      \\\"bitmap for specified interval not yet set\\\"\\n    );\\n\\n    return (bitmaps[msg.sender][startBlock][endBlock] & bytes32(1 << signerIndex)) == 0;\\n  }\\n\\n  /**\\n   * @notice Returns true if the bitmap has been set for the specified interval.\\n   * @param startBlock First block of the interval.\\n   * @param endBlock Last block of the interval.\\n   * @return True if the bitmap has been set for the specified interval.\\n   */\\n  function isBitmapSetForInterval(uint256 startBlock, uint256 endBlock) public view returns (bool) {\\n    // It's impossible to have all the validators down in an interval.\\n    return bitmaps[msg.sender][startBlock][endBlock] != 0;\\n  }\\n\\n  /**\\n   * @notice Returns true if a validator has been down for the specified overlapping or adjacent\\n   * intervals.\\n   * @param startBlocks A list of interval start blocks for which signature bitmaps have already\\n   * been set.\\n   * @param endBlocks A list of interval end blocks for which signature bitmaps have already\\n   * been set.\\n   * @param signerIndices Indices of the signer within the validator set for every epoch change.\\n   * @return True if the validator signature does not appear in any block within the window.\\n   */\\n  function wasDownForIntervals(\\n    uint256[] memory startBlocks,\\n    uint256[] memory endBlocks,\\n    uint256[] memory signerIndices\\n  ) public view returns (bool) {\\n    require(startBlocks.length > 0, \\\"requires at least one interval\\\");\\n    require(\\n      startBlocks.length == endBlocks.length,\\n      \\\"startBlocks and endBlocks must have the same length\\\"\\n    );\\n    require(signerIndices.length > 0, \\\"requires at least one signerIndex\\\");\\n\\n    uint256 epochSize = getEpochSize();\\n    uint256 signerIndicesIndex = 0;\\n    for (uint256 i = 0; i < startBlocks.length; i = i.add(1)) {\\n      if (i > 0) {\\n        require(\\n          startBlocks[i.sub(1)] < startBlocks[i],\\n          \\\"each interval must start after the start of the previous interval\\\"\\n        );\\n        require(\\n          startBlocks[i] <= endBlocks[i.sub(1)].add(1),\\n          \\\"each interval must start at most one block after the end of the previous interval\\\"\\n        );\\n        require(\\n          endBlocks[i.sub(1)] < endBlocks[i],\\n          \\\"each interval must end after the end of the previous interval\\\"\\n        );\\n        // The signer index of a particular validator may change from epoch to epoch.\\n        // Because the intervals for which bitmaps are calculated in this contract do not span\\n        // epochs, and because intervals processed by this function are guaranteed to be\\n        // overlapping or contiguous, whenever we cross epoch boundaries we are guaranteed to\\n        // process an interval that starts with the first block of that epoch.\\n        if (startBlocks[i].mod(epochSize) == 1) {\\n          require(\\n            getValidatorAccountFromSignerIndex(\\n              signerIndices[signerIndicesIndex],\\n              startBlocks[i].sub(1)\\n            ) ==\\n              getValidatorAccountFromSignerIndex(\\n                signerIndices[signerIndicesIndex.add(1)],\\n                startBlocks[i]\\n              ),\\n            \\\"indices do not point to the same validator\\\"\\n          );\\n          signerIndicesIndex = signerIndicesIndex.add(1);\\n        }\\n      }\\n      if (!wasDownForInterval(startBlocks[i], endBlocks[i], signerIndices[signerIndicesIndex])) {\\n        return false;\\n      }\\n    }\\n\\n    return true;\\n  }\\n\\n  /**\\n   * @notice Slashes a validator that did not sign any blocks for at least `slashableDowntime`.\\n   * @param startBlocks A list of interval start blocks for which signature bitmaps have already\\n   * been set.\\n   * @param endBlocks A list of interval end blocks for which signature bitmaps have already\\n   * been set.\\n   * @param signerIndices The index of the provided validator for each epoch over which the\\n   * provided intervals span.\\n   * @param groupMembershipHistoryIndex Group membership index from where\\n   * the group should be found (For start block).\\n   * @param validatorElectionLessers Lesser pointers for validator slashing.\\n   * @param validatorElectionGreaters Greater pointers for validator slashing.\\n   * @param validatorElectionIndices Vote indices for validator slashing.\\n   * @param groupElectionLessers Lesser pointers for group slashing.\\n   * @param groupElectionGreaters Greater pointers for group slashing.\\n   * @param groupElectionIndices Vote indices for group slashing.\\n   * @dev startBlocks[0] will be use as the startBlock of the slashableDowntime.\\n   */\\n  function slash(\\n    uint256[] memory startBlocks,\\n    uint256[] memory endBlocks,\\n    uint256[] memory signerIndices,\\n    uint256 groupMembershipHistoryIndex,\\n    address[] memory validatorElectionLessers,\\n    address[] memory validatorElectionGreaters,\\n    uint256[] memory validatorElectionIndices,\\n    address[] memory groupElectionLessers,\\n    address[] memory groupElectionGreaters,\\n    uint256[] memory groupElectionIndices\\n  ) public {\\n    uint256 startBlock = startBlocks[0];\\n    uint256 endBlock = endBlocks[endBlocks.length.sub(1)];\\n    require(\\n      endBlock.sub(startBlock).add(1) >= slashableDowntime,\\n      \\\"the provided intervals must span slashableDowntime blocks\\\"\\n    );\\n    address validator = getValidatorAccountFromSignerIndex(signerIndices[0], startBlock);\\n    require(\\n      startBlock > lastSlashedBlock[validator],\\n      \\\"cannot slash validator for downtime for which they may already have been slashed\\\"\\n    );\\n    require(wasDownForIntervals(startBlocks, endBlocks, signerIndices), \\\"not down\\\");\\n    lastSlashedBlock[validator] = endBlock;\\n    performSlashing(\\n      validator,\\n      msg.sender,\\n      startBlock,\\n      groupMembershipHistoryIndex,\\n      validatorElectionLessers,\\n      validatorElectionGreaters,\\n      validatorElectionIndices,\\n      groupElectionLessers,\\n      groupElectionGreaters,\\n      groupElectionIndices\\n    );\\n    emit DowntimeSlashPerformed(validator, startBlock, endBlock);\\n  }\\n\\n  /**\\n   * @notice Returns the validator's address of the signer for a specific block number.\\n   * @param signerIndex Index of the signer within the validator set for a specific epoch.\\n   * @param blockNumber Block number where the validator was elected.\\n   * @return Validator's address.\\n   */\\n  function getValidatorAccountFromSignerIndex(uint256 signerIndex, uint256 blockNumber)\\n    internal\\n    view\\n    returns (address)\\n  {\\n    return getAccounts().signerToAccount(validatorSignerAddressFromSet(signerIndex, blockNumber));\\n  }\\n}\\n\",\"keccak256\":\"0x67865bebb227a9c93e54840dad06db70a90e09bf6f113ec79314ede13b0af860\"},\"project:/contracts/governance/SlasherUtil.sol\":{\"content\":\"pragma solidity ^0.5.13;\\n\\nimport \\\"openzeppelin-solidity/contracts/math/SafeMath.sol\\\";\\nimport \\\"openzeppelin-solidity/contracts/ownership/Ownable.sol\\\";\\n\\nimport \\\"../common/Initializable.sol\\\";\\nimport \\\"../common/UsingRegistry.sol\\\";\\nimport \\\"../common/UsingPrecompiles.sol\\\";\\nimport \\\"../common/interfaces/ICeloVersionedContract.sol\\\";\\n\\ncontract SlasherUtil is Ownable, Initializable, UsingRegistry, UsingPrecompiles {\\n  using SafeMath for uint256;\\n\\n  struct SlashingIncentives {\\n    // Value of LockedGold to slash from the account.\\n    uint256 penalty;\\n    // Value of LockedGold to send to the observer.\\n    uint256 reward;\\n  }\\n\\n  SlashingIncentives public slashingIncentives;\\n\\n  event SlashingIncentivesSet(uint256 penalty, uint256 reward);\\n\\n  /**\\n   * @notice Sets initialized == true on implementation contracts\\n   * @param test Set to true to skip implementation initialization\\n   */\\n  constructor(bool test) public Initializable(test) {}\\n\\n  /**\\n   * @notice Sets slashing incentives.\\n   * @param penalty Penalty for the slashed signer.\\n   * @param reward Reward that the observer gets.\\n   */\\n  function setSlashingIncentives(uint256 penalty, uint256 reward) public onlyOwner {\\n    require(penalty > reward, \\\"Penalty has to be larger than reward\\\");\\n    slashingIncentives.penalty = penalty;\\n    slashingIncentives.reward = reward;\\n    emit SlashingIncentivesSet(penalty, reward);\\n  }\\n\\n  /**\\n   * @notice Returns the group to be slashed.\\n   * @param validator Validator that was slashed.\\n   * @param blockNumber Block number associated with slashing.\\n   * @param groupMembershipHistoryIndex Index used for history lookup.\\n   * @return Group to be slashed.\\n   */\\n  function groupMembershipAtBlock(\\n    address validator,\\n    uint256 blockNumber,\\n    uint256 groupMembershipHistoryIndex\\n  ) public view returns (address) {\\n    uint256 epoch = getEpochNumberOfBlock(blockNumber);\\n    require(epoch != 0, \\\"Cannot slash on epoch 0\\\");\\n    // Use `epoch-1` because the elections were on that epoch\\n    return\\n      getValidators().groupMembershipInEpoch(validator, epoch.sub(1), groupMembershipHistoryIndex);\\n  }\\n\\n  function performSlashing(\\n    address validator,\\n    address recipient,\\n    uint256 startBlock,\\n    uint256 groupMembershipHistoryIndex,\\n    address[] memory validatorElectionLessers,\\n    address[] memory validatorElectionGreaters,\\n    uint256[] memory validatorElectionIndices,\\n    address[] memory groupElectionLessers,\\n    address[] memory groupElectionGreaters,\\n    uint256[] memory groupElectionIndices\\n  ) internal {\\n    ILockedGold lockedGold = getLockedGold();\\n    lockedGold.slash(\\n      validator,\\n      slashingIncentives.penalty,\\n      recipient,\\n      slashingIncentives.reward,\\n      validatorElectionLessers,\\n      validatorElectionGreaters,\\n      validatorElectionIndices\\n    );\\n    address group = groupMembershipAtBlock(validator, startBlock, groupMembershipHistoryIndex);\\n    assert(group != address(0));\\n    lockedGold.slash(\\n      group,\\n      slashingIncentives.penalty,\\n      recipient,\\n      slashingIncentives.reward,\\n      groupElectionLessers,\\n      groupElectionGreaters,\\n      groupElectionIndices\\n    );\\n    IValidators validators = getValidators();\\n    validators.forceDeaffiliateIfValidator(validator);\\n    validators.halveSlashingMultiplier(group);\\n  }\\n\\n}\\n\",\"keccak256\":\"0x54c3fc6d294743655e1de44df5c08403eae5adb5ea55f80c76a1c07a7f505b11\"},\"project:/contracts/governance/interfaces/IElection.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.5.13 <0.9.0;\\n\\ninterface IElection {\\n  function electValidatorSigners() external view returns (address[] memory);\\n  function electNValidatorSigners(uint256, uint256) external view returns (address[] memory);\\n  function vote(address, uint256, address, address) external returns (bool);\\n  function activate(address) external returns (bool);\\n  function revokeActive(address, uint256, address, address, uint256) external returns (bool);\\n  function revokeAllActive(address, address, address, uint256) external returns (bool);\\n  function revokePending(address, uint256, address, address, uint256) external returns (bool);\\n  function markGroupIneligible(address) external;\\n  function markGroupEligible(address, address, address) external;\\n  function allowedToVoteOverMaxNumberOfGroups(address) external returns (bool);\\n  function forceDecrementVotes(\\n    address,\\n    uint256,\\n    address[] calldata,\\n    address[] calldata,\\n    uint256[] calldata\\n  ) external returns (uint256);\\n  function setAllowedToVoteOverMaxNumberOfGroups(bool flag) external;\\n\\n  // view functions\\n  function getElectableValidators() external view returns (uint256, uint256);\\n  function getElectabilityThreshold() external view returns (uint256);\\n  function getNumVotesReceivable(address) external view returns (uint256);\\n  function getTotalVotes() external view returns (uint256);\\n  function getActiveVotes() external view returns (uint256);\\n  function getTotalVotesByAccount(address) external view returns (uint256);\\n  function getPendingVotesForGroupByAccount(address, address) external view returns (uint256);\\n  function getActiveVotesForGroupByAccount(address, address) external view returns (uint256);\\n  function getTotalVotesForGroupByAccount(address, address) external view returns (uint256);\\n  function getActiveVoteUnitsForGroupByAccount(address, address) external view returns (uint256);\\n  function getTotalVotesForGroup(address) external view returns (uint256);\\n  function getActiveVotesForGroup(address) external view returns (uint256);\\n  function getPendingVotesForGroup(address) external view returns (uint256);\\n  function getGroupEligibility(address) external view returns (bool);\\n  function getGroupEpochRewards(address, uint256, uint256[] calldata)\\n    external\\n    view\\n    returns (uint256);\\n  function getGroupsVotedForByAccount(address) external view returns (address[] memory);\\n  function getEligibleValidatorGroups() external view returns (address[] memory);\\n  function getTotalVotesForEligibleValidatorGroups()\\n    external\\n    view\\n    returns (address[] memory, uint256[] memory);\\n  function getCurrentValidatorSigners() external view returns (address[] memory);\\n  function canReceiveVotes(address, uint256) external view returns (bool);\\n  function hasActivatablePendingVotes(address, address) external view returns (bool);\\n  function validatorSignerAddressFromCurrentSet(uint256 index) external view returns (address);\\n  function numberValidatorsInCurrentSet() external view returns (uint256);\\n\\n  // only owner\\n  function setElectableValidators(uint256, uint256) external returns (bool);\\n  function setMaxNumGroupsVotedFor(uint256) external returns (bool);\\n  function setElectabilityThreshold(uint256) external returns (bool);\\n\\n  // only VM\\n  function distributeEpochRewards(address, uint256, address, address) external;\\n}\\n\",\"keccak256\":\"0x2b7195aaef2f49cfd9a5b1106fd6841701e0dc92752b97d4909947b3127460c7\"},\"project:/contracts/governance/interfaces/IGovernance.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.5.13 <0.9.0;\\n\\ninterface IGovernance {\\n  function removeVotesWhenRevokingDelegatedVotes(address account, uint256 maxAmountAllowed)\\n    external;\\n  function votePartially(\\n    uint256 proposalId,\\n    uint256 index,\\n    uint256 yesVotes,\\n    uint256 noVotes,\\n    uint256 abstainVotes\\n  ) external returns (bool);\\n\\n  function isVoting(address) external view returns (bool);\\n  function getAmountOfGoldUsedForVoting(address account) external view returns (uint256);\\n\\n  function getProposal(uint256 proposalId)\\n    external\\n    view\\n    returns (address, uint256, uint256, uint256, string memory, uint256, bool);\\n\\n  function getReferendumStageDuration() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x19499ae304c70805e523ebf674c2983e8dc428f49a9da5b89e8450c2cd12997b\"},\"project:/contracts/governance/interfaces/ILockedGold.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.5.13 <0.9.0;\\n\\ninterface ILockedGold {\\n  function lock() external payable;\\n  function incrementNonvotingAccountBalance(address, uint256) external;\\n  function decrementNonvotingAccountBalance(address, uint256) external;\\n  function getAccountTotalLockedGold(address) external view returns (uint256);\\n  function getTotalLockedGold() external view returns (uint256);\\n  function getPendingWithdrawals(address)\\n    external\\n    view\\n    returns (uint256[] memory, uint256[] memory);\\n  function getPendingWithdrawal(address account, uint256 index)\\n    external\\n    view\\n    returns (uint256, uint256);\\n  function getTotalPendingWithdrawals(address) external view returns (uint256);\\n  function unlock(uint256) external;\\n  function relock(uint256, uint256) external;\\n  function withdraw(uint256) external;\\n  function slash(\\n    address account,\\n    uint256 penalty,\\n    address reporter,\\n    uint256 reward,\\n    address[] calldata lessers,\\n    address[] calldata greaters,\\n    uint256[] calldata indices\\n  ) external;\\n  function isSlasher(address) external view returns (bool);\\n\\n  function getAccountTotalDelegatedFraction(address account) external view returns (uint256);\\n\\n  function getAccountTotalGovernanceVotingPower(address account) external view returns (uint256);\\n  function unlockingPeriod() external view returns (uint256);\\n  function getAccountNonvotingLockedGold(address account) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xcb6530457f85fc492a9714baca95f52a915dc91472cbd1f987ab4347d2e2d1bc\"},\"project:/contracts/governance/interfaces/IValidators.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.5.13 <0.9.0;\\n\\ninterface IValidators {\\n  function registerValidator(bytes calldata, bytes calldata, bytes calldata)\\n    external\\n    returns (bool);\\n  function deregisterValidator(uint256) external returns (bool);\\n  function affiliate(address) external returns (bool);\\n  function deaffiliate() external returns (bool);\\n  function updateBlsPublicKey(bytes calldata, bytes calldata) external returns (bool);\\n  function registerValidatorGroup(uint256) external returns (bool);\\n  function deregisterValidatorGroup(uint256) external returns (bool);\\n  function addMember(address) external returns (bool);\\n  function addFirstMember(address, address, address) external returns (bool);\\n  function removeMember(address) external returns (bool);\\n  function reorderMember(address, address, address) external returns (bool);\\n  function updateCommission() external;\\n  function setNextCommissionUpdate(uint256) external;\\n  function resetSlashingMultiplier() external;\\n\\n  // only owner\\n  function setCommissionUpdateDelay(uint256) external;\\n  function setMaxGroupSize(uint256) external returns (bool);\\n  function setMembershipHistoryLength(uint256) external returns (bool);\\n  function setValidatorScoreParameters(uint256, uint256) external returns (bool);\\n  function setGroupLockedGoldRequirements(uint256, uint256) external returns (bool);\\n  function setValidatorLockedGoldRequirements(uint256, uint256) external returns (bool);\\n  function setSlashingMultiplierResetPeriod(uint256) external;\\n\\n  // view functions\\n  function getMaxGroupSize() external view returns (uint256);\\n  function getCommissionUpdateDelay() external view returns (uint256);\\n  function getValidatorScoreParameters() external view returns (uint256, uint256);\\n  function getMembershipHistory(address)\\n    external\\n    view\\n    returns (uint256[] memory, address[] memory, uint256, uint256);\\n  function calculateEpochScore(uint256) external view returns (uint256);\\n  function calculateGroupEpochScore(uint256[] calldata) external view returns (uint256);\\n  function getAccountLockedGoldRequirement(address) external view returns (uint256);\\n  function meetsAccountLockedGoldRequirements(address) external view returns (bool);\\n  function getValidatorBlsPublicKeyFromSigner(address) external view returns (bytes memory);\\n  function getValidator(address account)\\n    external\\n    view\\n    returns (bytes memory, bytes memory, address, uint256, address);\\n  function getValidatorGroup(address)\\n    external\\n    view\\n    returns (address[] memory, uint256, uint256, uint256, uint256[] memory, uint256, uint256);\\n  function getGroupNumMembers(address) external view returns (uint256);\\n  function getTopGroupValidators(address, uint256) external view returns (address[] memory);\\n  function getGroupsNumMembers(address[] calldata accounts)\\n    external\\n    view\\n    returns (uint256[] memory);\\n  function getNumRegisteredValidators() external view returns (uint256);\\n  function groupMembershipInEpoch(address, uint256, uint256) external view returns (address);\\n\\n  // only registered contract\\n  function updateEcdsaPublicKey(address, address, bytes calldata) external returns (bool);\\n  function updatePublicKeys(address, address, bytes calldata, bytes calldata, bytes calldata)\\n    external\\n    returns (bool);\\n  function getValidatorLockedGoldRequirements() external view returns (uint256, uint256);\\n  function getGroupLockedGoldRequirements() external view returns (uint256, uint256);\\n  function getRegisteredValidators() external view returns (address[] memory);\\n  function getRegisteredValidatorSigners() external view returns (address[] memory);\\n  function getRegisteredValidatorGroups() external view returns (address[] memory);\\n  function isValidatorGroup(address) external view returns (bool);\\n  function isValidator(address) external view returns (bool);\\n  function getValidatorGroupSlashingMultiplier(address) external view returns (uint256);\\n  function getMembershipInLastEpoch(address) external view returns (address);\\n  function getMembershipInLastEpochFromSigner(address) external view returns (address);\\n\\n  // only VM\\n  function updateValidatorScoreFromSigner(address, uint256) external;\\n  function distributeEpochPaymentsFromSigner(address, uint256) external returns (uint256);\\n\\n  // only slasher\\n  function forceDeaffiliateIfValidator(address) external;\\n  function halveSlashingMultiplier(address) external;\\n\\n}\\n\",\"keccak256\":\"0xedb1f9717f0ea77f30cb7fa40bfd3704dcfdc17252082c4bf5caaea205c83d9a\"},\"project:/contracts/governance/test/DowntimeSlasherTest.sol\":{\"content\":\"pragma solidity ^0.5.13;\\n\\nimport \\\"../DowntimeSlasher.sol\\\";\\nimport \\\"./MockUsingPrecompiles.sol\\\";\\n\\ncontract DowntimeSlasherTest is DowntimeSlasher(true), MockUsingPrecompiles {}\\n\",\"keccak256\":\"0x8443da7add3300a34bfdef66bd84b7a613ad2f9b5d868d338eb7c1d68ede4dd6\"},\"project:/contracts/governance/test/MockUsingPrecompiles.sol\":{\"content\":\"pragma solidity ^0.5.13;\\n\\nimport \\\"../DoubleSigningSlasher.sol\\\";\\n\\ncontract MockUsingPrecompiles {\\n  mapping(bytes32 => bytes32) verifiedSealBitmap;\\n  mapping(uint256 => bytes32) parentSealBitmap;\\n  mapping(bytes32 => address) epochSigner;\\n\\n  uint256 numValidators;\\n\\n  function setVerifiedSealBitmap(bytes memory header, bytes32 bitmap) public {\\n    verifiedSealBitmap[keccak256(abi.encodePacked(header))] = bitmap;\\n  }\\n\\n  function getVerifiedSealBitmapFromHeader(bytes memory header) public view returns (bytes32) {\\n    return verifiedSealBitmap[keccak256(abi.encodePacked(header))];\\n  }\\n\\n  function getParentSealBitmap(uint256 blockNumber) public view returns (bytes32) {\\n    return parentSealBitmap[blockNumber];\\n  }\\n\\n  function setParentSealBitmap(uint256 blockNumber, bytes32 bitmap) public {\\n    parentSealBitmap[blockNumber] = bitmap;\\n  }\\n\\n  function calcEpoch(uint256 blockNumber) internal pure returns (uint256) {\\n    uint256 epochSize = 100;\\n    // Follows GetEpochNumber from celo-blockchain/blob/master/consensus/istanbul/utils.go\\n    uint256 epochNumber = blockNumber / epochSize;\\n    if (blockNumber % epochSize == 0) {\\n      return epochNumber;\\n    } else {\\n      return epochNumber + 1;\\n    }\\n  }\\n\\n  function validatorSignerAddressFromSet(uint256 index, uint256 blockNumber)\\n    public\\n    view\\n    returns (address)\\n  {\\n    return epochSigner[keccak256(abi.encodePacked(calcEpoch(blockNumber), index))];\\n  }\\n\\n  function setEpochSigner(uint256 epoch, uint256 index, address signer) public {\\n    epochSigner[keccak256(abi.encodePacked(epoch, index))] = signer;\\n  }\\n\\n  function setNumberValidators(uint256 num) public {\\n    numValidators = num;\\n  }\\n\\n  function numberValidatorsInSet(uint256) public view returns (uint256) {\\n    return numValidators;\\n  }\\n\\n  mapping(bytes32 => uint256) blockNumbers;\\n\\n  function getBlockNumberFromHeader(bytes memory header) public view returns (uint256) {\\n    return blockNumbers[keccak256(abi.encodePacked(header))];\\n  }\\n\\n  function setBlockNumber(bytes memory header, uint256 number) public returns (uint256) {\\n    blockNumbers[keccak256(abi.encodePacked(header))] = number;\\n  }\\n\\n  function hashHeader(bytes memory header) public view returns (bytes32) {\\n    return keccak256(header);\\n  }\\n}\\n\",\"keccak256\":\"0x905b909244747a872ecc4a969faea195c7a65c4d53a980d6a7e5e6a447670cd5\"},\"project:/contracts/identity/interfaces/IAttestations.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.5.13 <0.9.0;\\n\\ninterface IAttestations {\\n  function revoke(bytes32, uint256) external;\\n  function withdraw(address) external;\\n\\n  // view functions\\n  function getUnselectedRequest(bytes32, address) external view returns (uint32, uint32, address);\\n  function getAttestationIssuers(bytes32, address) external view returns (address[] memory);\\n  function getAttestationStats(bytes32, address) external view returns (uint32, uint32);\\n  function batchGetAttestationStats(bytes32[] calldata)\\n    external\\n    view\\n    returns (uint256[] memory, address[] memory, uint64[] memory, uint64[] memory);\\n  function getAttestationState(bytes32, address, address)\\n    external\\n    view\\n    returns (uint8, uint32, address);\\n  function getCompletableAttestations(bytes32, address)\\n    external\\n    view\\n    returns (uint32[] memory, address[] memory, uint256[] memory, bytes memory);\\n  function getAttestationRequestFee(address) external view returns (uint256);\\n  function getMaxAttestations() external view returns (uint256);\\n  function validateAttestationCode(bytes32, address, uint8, bytes32, bytes32)\\n    external\\n    view\\n    returns (address);\\n  function lookupAccountsForIdentifier(bytes32) external view returns (address[] memory);\\n  function requireNAttestationsRequested(bytes32, address, uint32) external view;\\n\\n  // only owner\\n  function setAttestationRequestFee(address, uint256) external;\\n  function setAttestationExpiryBlocks(uint256) external;\\n  function setSelectIssuersWaitBlocks(uint256) external;\\n  function setMaxAttestations(uint256) external;\\n}\\n\",\"keccak256\":\"0x18698a475dc0c9ea8a4c53ab5e42407f34a7c676d7b713c1507b43669f860e74\"},\"project:/contracts/identity/interfaces/IRandom.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.5.13 <0.9.0;\\n\\ninterface IRandom {\\n  function revealAndCommit(bytes32, bytes32, address) external;\\n  function randomnessBlockRetentionWindow() external view returns (uint256);\\n  function random() external view returns (bytes32);\\n  function getBlockRandomness(uint256) external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xdb545530be6397d23692e4465f4514cf3c87c1d4f553323964694818c375c08d\"},\"project:/contracts/stability/interfaces/ISortedOracles.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.5.13 <0.9.0;\\n\\ninterface ISortedOracles {\\n  function addOracle(address, address) external;\\n  function removeOracle(address, address, uint256) external;\\n  function report(address, uint256, address, address) external;\\n  function removeExpiredReports(address, uint256) external;\\n  function isOldestReportExpired(address token) external view returns (bool, address);\\n  function numRates(address) external view returns (uint256);\\n  function medianRate(address) external view returns (uint256, uint256);\\n  function numTimestamps(address) external view returns (uint256);\\n  function medianTimestamp(address) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xc9d69b608b060effe4a0b246e7fad096b524b848aa51d8f4eccad36c1aa0479d\"},\"project:/lib/mento-core/contracts/interfaces/IExchange.sol\":{\"content\":\"pragma solidity ^0.5.13;\\n\\ninterface IExchange {\\n    function buy(\\n        uint256,\\n        uint256,\\n        bool\\n    ) external returns (uint256);\\n\\n    function sell(\\n        uint256,\\n        uint256,\\n        bool\\n    ) external returns (uint256);\\n\\n    function exchange(\\n        uint256,\\n        uint256,\\n        bool\\n    ) external returns (uint256);\\n\\n    function setUpdateFrequency(uint256) external;\\n\\n    function getBuyTokenAmount(uint256, bool) external view returns (uint256);\\n\\n    function getSellTokenAmount(uint256, bool) external view returns (uint256);\\n\\n    function getBuyAndSellBuckets(bool) external view returns (uint256, uint256);\\n}\\n\",\"keccak256\":\"0x320488022d1066ac81797b9e7a3dc303d1c8e9a48597972d4686e00f9554ade9\"},\"project:/lib/mento-core/contracts/interfaces/IReserve.sol\":{\"content\":\"pragma solidity ^0.5.13;\\n\\ninterface IReserve {\\n    function setTobinTaxStalenessThreshold(uint256) external;\\n\\n    function addToken(address) external returns (bool);\\n\\n    function removeToken(address, uint256) external returns (bool);\\n\\n    function transferGold(address payable, uint256) external returns (bool);\\n\\n    function transferExchangeGold(address payable, uint256) external returns (bool);\\n\\n    function getReserveGoldBalance() external view returns (uint256);\\n\\n    function getUnfrozenReserveGoldBalance() external view returns (uint256);\\n\\n    function getOrComputeTobinTax() external returns (uint256, uint256);\\n\\n    function getTokens() external view returns (address[] memory);\\n\\n    function getReserveRatio() external view returns (uint256);\\n\\n    function addExchangeSpender(address) external;\\n\\n    function removeExchangeSpender(address, uint256) external;\\n\\n    function addSpender(address) external;\\n\\n    function removeSpender(address) external;\\n}\\n\",\"keccak256\":\"0x9162b458dc21fe7e6cfc5d4722b3db3001b1c54ecdcefa703ff9d902084150b7\"},\"project:/lib/mento-core/contracts/interfaces/IStableToken.sol\":{\"content\":\"pragma solidity ^0.5.13;\\n\\n/**\\n * @title This interface describes the functions specific to Celo Stable Tokens, and in the\\n * absence of interface inheritance is intended as a companion to IERC20.sol and ICeloToken.sol.\\n */\\ninterface IStableToken {\\n    function mint(address, uint256) external returns (bool);\\n\\n    function burn(uint256) external returns (bool);\\n\\n    function setInflationParameters(uint256, uint256) external;\\n\\n    function valueToUnits(uint256) external view returns (uint256);\\n\\n    function unitsToValue(uint256) external view returns (uint256);\\n\\n    function getInflationParameters()\\n        external\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256\\n        );\\n\\n    // NOTE: duplicated with IERC20.sol, remove once interface inheritance is supported.\\n    function balanceOf(address) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xcb6440c9b161b26a5b062e6c74d6fd1ed9736f292161c757406a9c39e942d20a\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "",
  "sourceMap": "97:78:114:-;;;145:4;1676::83;927::93;698:17:4;718:12;:10;;;:12;;:::i;:::-;698:32;;749:9;740:6;;:18;;;;;;;;;;;;;;;;;;806:9;773:43;;802:1;773:43;;;;;;;;;;;;664:159;185:17:24;180:57;;226:4;212:11;;:18;;;;;;;;;;;;;;;;;;180:57;131:110;883:52:93;1634:50:83;97:78:114;;788:96:0;833:15;867:10;860:17;;788:96;:::o;97:78:114:-;;;;;;;",
  "deployedSourceMap": "97:78:114:-;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;97:78:114;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;624:44:93;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;3769:367:33;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;3769:367:33;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;103:23:24;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;10452:1431:83;;;;;;13:3:-1;8;5:12;2:2;;;30:1;27;20:12;2:2;10452:1431:83;;;;;;;;;;21:11:-1;8;5:28;2:2;;;46:1;43;36:12;2:2;10452:1431:83;;35:9:-1;28:4;12:14;8:25;5:40;2:2;;;58:1;55;48:12;2:2;10452:1431:83;;;;;;101:9:-1;95:2;81:12;77:21;67:8;63:36;60:51;39:11;25:12;22:29;11:108;8:2;;;132:1;129;122:12;8:2;10452:1431:83;;;;;;;;;;;;;;;;;;;;;;;;;;;;;30:3:-1;22:6;14;1:33;99:1;93:3;85:6;81:16;74:27;137:4;133:9;126:4;121:3;117:14;113:30;106:37;;169:3;161:6;157:16;147:26;;10452:1431:83;;;;;;;;;;;;;;;;;21:11:-1;8;5:28;2:2;;;46:1;43;36:12;2:2;10452:1431:83;;35:9:-1;28:4;12:14;8:25;5:40;2:2;;;58:1;55;48:12;2:2;10452:1431:83;;;;;;101:9:-1;95:2;81:12;77:21;67:8;63:36;60:51;39:11;25:12;22:29;11:108;8:2;;;132:1;129;122:12;8:2;10452:1431:83;;;;;;;;;;;;;;;;;;;;;;;;;;;;;30:3:-1;22:6;14;1:33;99:1;93:3;85:6;81:16;74:27;137:4;133:9;126:4;121:3;117:14;113:30;106:37;;169:3;161:6;157:16;147:26;;10452:1431:83;;;;;;;;;;;;;;;;;21:11:-1;8;5:28;2:2;;;46:1;43;36:12;2:2;10452:1431:83;;35:9:-1;28:4;12:14;8:25;5:40;2:2;;;58:1;55;48:12;2:2;10452:1431:83;;;;;;101:9:-1;95:2;81:12;77:21;67:8;63:36;60:51;39:11;25:12;22:29;11:108;8:2;;;132:1;129;122:12;8:2;10452:1431:83;;;;;;;;;;;;;;;;;;;;;;;;;;;;;30:3:-1;22:6;14;1:33;99:1;93:3;85:6;81:16;74:27;137:4;133:9;126:4;121:3;117:14;113:30;106:37;;169:3;161:6;157:16;147:26;;10452:1431:83;;;;;;;;;;;;;;;;;;;;;;;;;;21:11:-1;8;5:28;2:2;;;46:1;43;36:12;2:2;10452:1431:83;;35:9:-1;28:4;12:14;8:25;5:40;2:2;;;58:1;55;48:12;2:2;10452:1431:83;;;;;;101:9:-1;95:2;81:12;77:21;67:8;63:36;60:51;39:11;25:12;22:29;11:108;8:2;;;132:1;129;122:12;8:2;10452:1431:83;;;;;;;;;;;;;;;;;;;;;;;;;;;;;30:3:-1;22:6;14;1:33;99:1;93:3;85:6;81:16;74:27;137:4;133:9;126:4;121:3;117:14;113:30;106:37;;169:3;161:6;157:16;147:26;;10452:1431:83;;;;;;;;;;;;;;;;;21:11:-1;8;5:28;2:2;;;46:1;43;36:12;2:2;10452:1431:83;;35:9:-1;28:4;12:14;8:25;5:40;2:2;;;58:1;55;48:12;2:2;10452:1431:83;;;;;;101:9:-1;95:2;81:12;77:21;67:8;63:36;60:51;39:11;25:12;22:29;11:108;8:2;;;132:1;129;122:12;8:2;10452:1431:83;;;;;;;;;;;;;;;;;;;;;;;;;;;;;30:3:-1;22:6;14;1:33;99:1;93:3;85:6;81:16;74:27;137:4;133:9;126:4;121:3;117:14;113:30;106:37;;169:3;161:6;157:16;147:26;;10452:1431:83;;;;;;;;;;;;;;;;;21:11:-1;8;5:28;2:2;;;46:1;43;36:12;2:2;10452:1431:83;;35:9:-1;28:4;12:14;8:25;5:40;2:2;;;58:1;55;48:12;2:2;10452:1431:83;;;;;;101:9:-1;95:2;81:12;77:21;67:8;63:36;60:51;39:11;25:12;22:29;11:108;8:2;;;132:1;129;122:12;8:2;10452:1431:83;;;;;;;;;;;;;;;;;;;;;;;;;;;;;30:3:-1;22:6;14;1:33;99:1;93:3;85:6;81:16;74:27;137:4;133:9;126:4;121:3;117:14;113:30;106:37;;169:3;161:6;157:16;147:26;;10452:1431:83;;;;;;;;;;;;;;;;;21:11:-1;8;5:28;2:2;;;46:1;43;36:12;2:2;10452:1431:83;;35:9:-1;28:4;12:14;8:25;5:40;2:2;;;58:1;55;48:12;2:2;10452:1431:83;;;;;;101:9:-1;95:2;81:12;77:21;67:8;63:36;60:51;39:11;25:12;22:29;11:108;8:2;;;132:1;129;122:12;8:2;10452:1431:83;;;;;;;;;;;;;;;;;;;;;;;;;;;;;30:3:-1;22:6;14;1:33;99:1;93:3;85:6;81:16;74:27;137:4;133:9;126:4;121:3;117:14;113:30;106:37;;169:3;161:6;157:16;147:26;;10452:1431:83;;;;;;;;;;;;;;;;;21:11:-1;8;5:28;2:2;;;46:1;43;36:12;2:2;10452:1431:83;;35:9:-1;28:4;12:14;8:25;5:40;2:2;;;58:1;55;48:12;2:2;10452:1431:83;;;;;;101:9:-1;95:2;81:12;77:21;67:8;63:36;60:51;39:11;25:12;22:29;11:108;8:2;;;132:1;129;122:12;8:2;10452:1431:83;;;;;;;;;;;;;;;;;;;;;;;;;;;;;30:3:-1;22:6;14;1:33;99:1;93:3;85:6;81:16;74:27;137:4;133:9;126:4;121:3;117:14;113:30;106:37;;169:3;161:6;157:16;147:26;;10452:1431:83;;;;;;;;;;;;;;;;;21:11:-1;8;5:28;2:2;;;46:1;43;36:12;2:2;10452:1431:83;;35:9:-1;28:4;12:14;8:25;5:40;2:2;;;58:1;55;48:12;2:2;10452:1431:83;;;;;;101:9:-1;95:2;81:12;77:21;67:8;63:36;60:51;39:11;25:12;22:29;11:108;8:2;;;132:1;129;122:12;8:2;10452:1431:83;;;;;;;;;;;;;;;;;;;;;;;;;;;;;30:3:-1;22:6;14;1:33;99:1;93:3;85:6;81:16;74:27;137:4;133:9;126:4;121:3;117:14;113:30;106:37;;169:3;161:6;157:16;147:26;;10452:1431:83;;;;;;;;;;;;;;;:::i;:::-;;6388:232;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;6388:232:83;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;432:51;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;432:51:83;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;6264:266:33;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;6264:266:33;;;;;;;;;;;;;;;;;;;;;21:11:-1;8;5:28;2:2;;;46:1;43;36:12;2:2;6264:266:33;;35:9:-1;28:4;12:14;8:25;5:40;2:2;;;58:1;55;48:12;2:2;6264:266:33;;;;;;100:9:-1;95:1;81:12;77:20;67:8;63:35;60:50;39:11;25:12;22:29;11:107;8:2;;;131:1;128;121:12;8:2;6264:266:33;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;30:3:-1;22:6;14;1:33;99:1;93:3;85:6;81:16;74:27;137:4;133:9;126:4;121:3;117:14;113:30;106:37;;169:3;161:6;157:16;147:26;;6264:266:33;;;;;;;;;;;;;;;;;21:11:-1;8;5:28;2:2;;;46:1;43;36:12;2:2;6264:266:33;;35:9:-1;28:4;12:14;8:25;5:40;2:2;;;58:1;55;48:12;2:2;6264:266:33;;;;;;100:9:-1;95:1;81:12;77:20;67:8;63:35;60:50;39:11;25:12;22:29;11:107;8:2;;;131:1;128;121:12;8:2;6264:266:33;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;30:3:-1;22:6;14;1:33;99:1;93:3;85:6;81:16;74:27;137:4;133:9;126:4;121:3;117:14;113:30;106:37;;169:3;161:6;157:16;147:26;;6264:266:33;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;1581:79:120;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;1581:79:120;;;;;;;;;;;;;;;;;:::i;:::-;;2608:147:33;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;2608:147:33;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;736:32:83;;;:::i;:::-;;;;;;;;;;;;;;;;;;;267:150:120;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;267:150:120;;;;;;;;;;21:11:-1;8;5:28;2:2;;;46:1;43;36:12;2:2;267:150:120;;35:9:-1;28:4;12:14;8:25;5:40;2:2;;;58:1;55;48:12;2:2;267:150:120;;;;;;100:9:-1;95:1;81:12;77:20;67:8;63:35;60:50;39:11;25:12;22:29;11:107;8:2;;;131:1;128;121:12;8:2;267:150:120;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;30:3:-1;22:6;14;1:33;99:1;93:3;85:6;81:16;74:27;137:4;133:9;126:4;121:3;117:14;113:30;106:37;;169:3;161:6;157:16;147:26;;267:150:120;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;421:165;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;421:165:120;;;;;;;;;;21:11:-1;8;5:28;2:2;;;46:1;43;36:12;2:2;421:165:120;;35:9:-1;28:4;12:14;8:25;5:40;2:2;;;58:1;55;48:12;2:2;421:165:120;;;;;;100:9:-1;95:1;81:12;77:20;67:8;63:35;60:50;39:11;25:12;22:29;11:107;8:2;;;131:1;128;121:12;8:2;421:165:120;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;30:3:-1;22:6;14;1:33;99:1;93:3;85:6;81:16;74:27;137:4;133:9;126:4;121:3;117:14;113:30;106:37;;169:3;161:6;157:16;147:26;;421:165:120;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;2466:210:83;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;2466:210:83;;;;;;;;;;;;;;;;;:::i;:::-;;2041:316;;;;;;13:3:-1;8;5:12;2:2;;;30:1;27;20:12;2:2;2041:316:83;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;1368:117;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1214:208:120;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;1214:208:120;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;2129:106;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;2129:106:120;;;;;;;;;;21:11:-1;8;5:28;2:2;;;46:1;43;36:12;2:2;2129:106:120;;35:9:-1;28:4;12:14;8:25;5:40;2:2;;;58:1;55;48:12;2:2;2129:106:120;;;;;;100:9:-1;95:1;81:12;77:20;67:8;63:35;60:50;39:11;25:12;22:29;11:107;8:2;;;131:1;128;121:12;8:2;2129:106:120;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;30:3:-1;22:6;14;1:33;99:1;93:3;85:6;81:16;74:27;137:4;133:9;126:4;121:3;117:14;113:30;106:37;;169:3;161:6;157:16;147:26;;2129:106:120;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;721:122;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;721:122:120;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;1684:137:4;;;:::i;:::-;;9949:112:33;;;:::i;:::-;;;;;;;;;;;;;;;;;;;1970:155:120;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;1970:155:120;;;;;;;;;;21:11:-1;8;5:28;2:2;;;46:1;43;36:12;2:2;1970:155:120;;35:9:-1;28:4;12:14;8:25;5:40;2:2;;;58:1;55;48:12;2:2;1970:155:120;;;;;;100:9:-1;95:1;81:12;77:20;67:8;63:35;60:50;39:11;25:12;22:29;11:107;8:2;;;131:1;128;121:12;8:2;1970:155:120;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;30:3:-1;22:6;14;1:33;99:1;93:3;85:6;81:16;74:27;137:4;133:9;126:4;121:3;117:14;113:30;106:37;;169:3;161:6;157:16;147:26;;1970:155:120;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;2636:25:34;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;4955:326:33;;;:::i;:::-;;;;;;;;;;;;;;;;;;;1660:441:93;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;1660:441:93;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;1814:152:120;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;1814:152:120;;;;;;;;;;21:11:-1;8;5:28;2:2;;;46:1;43;36:12;2:2;1814:152:120;;35:9:-1;28:4;12:14;8:25;5:40;2:2;;;58:1;55;48:12;2:2;1814:152:120;;;;;;100:9:-1;95:1;81:12;77:20;67:8;63:35;60:50;39:11;25:12;22:29;11:107;8:2;;;131:1;128;121:12;8:2;1814:152:120;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;30:3:-1;22:6;14;1:33;99:1;93:3;85:6;81:16;74:27;137:4;133:9;126:4;121:3;117:14;113:30;106:37;;169:3;161:6;157:16;147:26;;1814:152:120;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;899:77:4;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;1250:92;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;649:82:83;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;649:82:83;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;2856:109:33;;;:::i;:::-;;;;;;;;;;;;;;;;;;;1664:101:120;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;1664:101:120;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;3258:1256:83;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;3258:1256:83;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;3185:230:34;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;3185:230:34;;;;;;;;;;;;;;;;;;;:::i;:::-;;1092:288:93;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;1092:288:93;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;1426:151:120;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;1426:151:120;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;2178:266:33;;;:::i;:::-;;;;;;;;;;;;;;;;;;;7159:2198:83;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;7159:2198:83;;;;;;;;;;21:11:-1;8;5:28;2:2;;;46:1;43;36:12;2:2;7159:2198:83;;35:9:-1;28:4;12:14;8:25;5:40;2:2;;;58:1;55;48:12;2:2;7159:2198:83;;;;;;101:9:-1;95:2;81:12;77:21;67:8;63:36;60:51;39:11;25:12;22:29;11:108;8:2;;;132:1;129;122:12;8:2;7159:2198:83;;;;;;;;;;;;;;;;;;;;;;;;;;;;;30:3:-1;22:6;14;1:33;99:1;93:3;85:6;81:16;74:27;137:4;133:9;126:4;121:3;117:14;113:30;106:37;;169:3;161:6;157:16;147:26;;7159:2198:83;;;;;;;;;;;;;;;;;21:11:-1;8;5:28;2:2;;;46:1;43;36:12;2:2;7159:2198:83;;35:9:-1;28:4;12:14;8:25;5:40;2:2;;;58:1;55;48:12;2:2;7159:2198:83;;;;;;101:9:-1;95:2;81:12;77:21;67:8;63:36;60:51;39:11;25:12;22:29;11:108;8:2;;;132:1;129;122:12;8:2;7159:2198:83;;;;;;;;;;;;;;;;;;;;;;;;;;;;;30:3:-1;22:6;14;1:33;99:1;93:3;85:6;81:16;74:27;137:4;133:9;126:4;121:3;117:14;113:30;106:37;;169:3;161:6;157:16;147:26;;7159:2198:83;;;;;;;;;;;;;;;;;21:11:-1;8;5:28;2:2;;;46:1;43;36:12;2:2;7159:2198:83;;35:9:-1;28:4;12:14;8:25;5:40;2:2;;;58:1;55;48:12;2:2;7159:2198:83;;;;;;101:9:-1;95:2;81:12;77:21;67:8;63:36;60:51;39:11;25:12;22:29;11:108;8:2;;;132:1;129;122:12;8:2;7159:2198:83;;;;;;;;;;;;;;;;;;;;;;;;;;;;;30:3:-1;22:6;14;1:33;99:1;93:3;85:6;81:16;74:27;137:4;133:9;126:4;121:3;117:14;113:30;106:37;;169:3;161:6;157:16;147:26;;7159:2198:83;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;9670:147:33;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;9670:147:33;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;5672:445:83;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;5672:445:83;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;1297:763:33;;;;;;13:3:-1;8;5:12;2:2;;;30:1;27;20:12;2:2;1297:763:33;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;1970:107:4;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;1970:107:4;;;;;;;;;;;;;;;;;;;:::i;:::-;;590:127:120;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;590:127:120;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;4836:396:83;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;4836:396:83;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;624:44:93;;;;;;;;;;;;;;:::o;3769:367:33:-;3851:7;3866:16;3888:12;409:8;3923:24;;3965:5;3980:12;3948:46;;;;;;;;;;;;;;;;;;;;;49:4:-1;39:7;30;26:21;22:32;13:7;6:49;3948:46:33;;;3923:72;;;;;;;;;;;;;36:153:-1;66:2;61:3;58:11;36:153;;182:3;176:10;171:3;164:23;98:2;93:3;89:12;82:19;;123:2;118:3;114:12;107:19;;148:2;143:3;139:12;132:19;;36:153;;;274:1;267:3;263:2;259:12;254:3;250:22;246:30;315:4;311:9;305:3;299:10;295:26;356:4;350:3;344:10;340:21;389:7;380;377:20;372:3;365:33;3:399;;;3923:72:33;;;;;;;;;;;;;;;;;;;;;;;14:1:-1;21;16:31;;;;75:4;69:11;64:16;;144:4;140:9;133:4;115:16;111:27;107:43;104:1;100:51;94:4;87:65;169:16;166:1;159:27;225:16;222:1;215:4;212:1;208:12;193:49;7:242;;16:31;36:4;31:9;;7:242;;3906:89:33;;;;;;;;4009:7;4001:81;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4103:27;4123:3;4128:1;4103:19;:27::i;:::-;4088:43;;;;3769:367;;;:::o;103:23:24:-;;;;;;;;;;;;;:::o;10452:1431:83:-;10899:18;10920:11;10932:1;10920:14;;;;;;;;;;;;;;10899:35;;10940:16;10959:9;10969:23;10990:1;10969:9;:16;:20;;:23;;;;:::i;:::-;10959:34;;;;;;;;;;;;;;10940:53;;11049:17;;11014:31;11043:1;11014:24;11027:10;11014:8;:12;;:24;;;;:::i;:::-;:28;;:31;;;;:::i;:::-;:52;;10999:140;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;11145:17;11165:64;11200:13;11214:1;11200:16;;;;;;;;;;;;;;11218:10;11165:34;:64::i;:::-;11145:84;;11263:16;:27;11280:9;11263:27;;;;;;;;;;;;;;;;11250:10;:40;11235:151;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;11400:58;11420:11;11433:9;11444:13;11400:19;:58::i;:::-;11392:79;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;11507:8;11477:16;:27;11494:9;11477:27;;;;;;;;;;;;;;;:38;;;;11521:291;11544:9;11561:10;11579;11597:27;11632:24;11664:25;11697:24;11729:20;11757:21;11786:20;11521:15;:291::i;:::-;11869:8;11857:10;11846:9;11823:55;;;;;;;;;;;;10452:1431;;;;;;;;;;;;;:::o;6388:232::-;6479:4;6614:1;6569:46;;:7;:19;6577:10;6569:19;;;;;;;;;;;;;;;:31;6589:10;6569:31;;;;;;;;;;;:41;6601:8;6569:41;;;;;;;;;;;;:46;;6562:53;;6388:232;;;;:::o;432:51::-;;;;;;;;;;;;;;;;;:::o;6264:266:33:-;6387:4;6401:12;355:8;6433:30;;6481:6;6489;6497;6464:40;;;;;;;;;;;;;;;;;;;;;;;;;;36:153:-1;66:2;61:3;58:11;36:153;;182:3;176:10;171:3;164:23;98:2;93:3;89:12;82:19;;123:2;118:3;114:12;107:19;;148:2;143:3;139:12;132:19;;36:153;;;274:1;267:3;263:2;259:12;254:3;250:22;246:30;315:4;311:9;305:3;299:10;295:26;356:4;350:3;344:10;340:21;389:7;380;377:20;372:3;365:33;3:399;;;6464:40:33;;;;;;;;;;;;;;;;36:153:-1;66:2;61:3;58:11;36:153;;182:3;176:10;171:3;164:23;98:2;93:3;89:12;82:19;;123:2;118:3;114:12;107:19;;148:2;143:3;139:12;132:19;;36:153;;;274:1;267:3;263:2;259:12;254:3;250:22;246:30;315:4;311:9;305:3;299:10;295:26;356:4;350:3;344:10;340:21;389:7;380;377:20;372:3;365:33;3:399;;;6464:40:33;;;;;;;;;;;;;49:4:-1;39:7;30;26:21;22:32;13:7;6:49;6464:40:33;;;6433:72;;;;;;;;;;;;;36:153:-1;66:2;61:3;58:11;36:153;;182:3;176:10;171:3;164:23;98:2;93:3;89:12;82:19;;123:2;118:3;114:12;107:19;;148:2;143:3;139:12;132:19;;36:153;;;274:1;267:3;263:2;259:12;254:3;250:22;246:30;315:4;311:9;305:3;299:10;295:26;356:4;350:3;344:10;340:21;389:7;380;377:20;372:3;365:33;3:399;;;6433:72:33;;;;;;;;;;;;;;;;;;;;;;;14:1:-1;21;16:31;;;;75:4;69:11;64:16;;144:4;140:9;133:4;115:16;111:27;107:43;104:1;100:51;94:4;87:65;169:16;166:1;159:27;225:16;222:1;215:4;212:1;208:12;193:49;7:242;;16:31;36:4;31:9;;7:242;;6419:86:33;;;;;6518:7;6511:14;;;6264:266;;;;;:::o;1581:79:120:-;1652:3;1636:13;:19;;;;1581:79;:::o;2608:147:33:-;2681:7;2703:47;2722:11;2735:14;:12;:14::i;:::-;2703:18;:47::i;:::-;2696:54;;2608:147;;;:::o;736:32:83:-;;;;:::o;267:150:120:-;406:6;348:18;:55;394:6;377:24;;;;;;;;;;;;;;;36:153:-1;66:2;61:3;58:11;36:153;;182:3;176:10;171:3;164:23;98:2;93:3;89:12;82:19;;123:2;118:3;114:12;107:19;;148:2;143:3;139:12;132:19;;36:153;;;274:1;267:3;263:2;259:12;254:3;250:22;246:30;315:4;311:9;305:3;299:10;295:26;356:4;350:3;344:10;340:21;389:7;380;377:20;372:3;365:33;3:399;;;377:24:120;;;;;;;;;;;49:4:-1;39:7;30;26:21;22:32;13:7;6:49;377:24:120;;;367:35;;;;;;348:55;;;;;;;;;;;:64;;;;267:150;;:::o;421:165::-;504:7;526:18;:55;572:6;555:24;;;;;;;;;;;;;;;36:153:-1;66:2;61:3;58:11;36:153;;182:3;176:10;171:3;164:23;98:2;93:3;89:12;82:19;;123:2;118:3;114:12;107:19;;148:2;143:3;139:12;132:19;;36:153;;;274:1;267:3;263:2;259:12;254:3;250:22;246:30;315:4;311:9;305:3;299:10;295:26;356:4;350:3;344:10;340:21;389:7;380;377:20;372:3;365:33;3:399;;;555:24:120;;;;;;;;;;;49:4:-1;39:7;30;26:21;22:32;13:7;6:49;555:24:120;;;545:35;;;;;;526:55;;;;;;;;;;;;519:62;;421:165;;;:::o;2466:210:83:-;1103:9:4;:7;:9::i;:::-;1095:54;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2557:1:83;2545:8;:13;;2537:59;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2622:8;2602:17;:28;;;;2641:30;2662:8;2641:30;;;;;;;;;;;;;;;;;;2466:210;:::o;2041:316::-;283:11:24;;;;;;;;;;;282:12;274:53;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;347:4;333:11;;:18;;;;;;;;;;;;;;;;;;2196:30:83;2215:10;2196:18;:30::i;:::-;2232:28;2244:15;2232:11;:28::i;:::-;2266:40;2288:8;2298:7;2266:21;:40::i;:::-;2312;2333:18;2312:20;:40::i;:::-;2041:316;;;;:::o;1368:117::-;1419:7;1428;1437;1446;1469:1;1472;1475;1478;1461:19;;;;;;;;;;;;;;;;;;;;1368:117;;;;:::o;1214:208:120:-;1322:7;1346:11;:71;1385:22;1395:11;1385:9;:22::i;:::-;1409:5;1368:47;;;;;;;;;;;;;;;;;;;;;49:4:-1;39:7;30;26:21;22:32;13:7;6:49;1368:47:120;;;1358:58;;;;;;1346:71;;;;;;;;;;;;;;;;;;;;;1339:78;;1214:208;;;;:::o;2129:106::-;2191:7;2223:6;2213:17;;;;;;2206:24;;2129:106;;;:::o;721:122::-;832:6;800:16;:29;817:11;800:29;;;;;;;;;;;:38;;;;721:122;;:::o;1684:137:4:-;1103:9;:7;:9::i;:::-;1095:54;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1782:1;1745:40;;1766:6;;;;;;;;;;;1745:40;;;;;;;;;;;;1812:1;1795:6;;:19;;;;;;;;;;;;;;;;;;1684:137::o;9949:112:33:-;10007:7;10029:27;10043:12;10029:13;:27::i;:::-;10022:34;;9949:112;:::o;1970:155:120:-;2047:7;2114:6;2062:12;:49;2102:6;2085:24;;;;;;;;;;;;;;;36:153:-1;66:2;61:3;58:11;36:153;;182:3;176:10;171:3;164:23;98:2;93:3;89:12;82:19;;123:2;118:3;114:12;107:19;;148:2;143:3;139:12;132:19;;36:153;;;274:1;267:3;263:2;259:12;254:3;250:22;246:30;315:4;311:9;305:3;299:10;295:26;356:4;350:3;344:10;340:21;389:7;380;377:20;372:3;365:33;3:399;;;2085:24:120;;;;;;;;;;;49:4:-1;39:7;30;26:21;22:32;13:7;6:49;2085:24:120;;;2075:35;;;;;;2062:49;;;;;;;;;;;:58;;;;1970:155;;;;:::o;2636:25:34:-;;;;;;;;;;;;;:::o;4955:326:33:-;5016:7;5031:16;5053:12;467:8;5088:28;;5142:12;5117:39;;;;;;;;;;;;;;;49:4:-1;39:7;30;26:21;22:32;13:7;6:49;5117:39:33;;;5088:69;;;;;;;;;;;;;36:153:-1;66:2;61:3;58:11;36:153;;182:3;176:10;171:3;164:23;98:2;93:3;89:12;82:19;;123:2;118:3;114:12;107:19;;148:2;143:3;139:12;132:19;;36:153;;;274:1;267:3;263:2;259:12;254:3;250:22;246:30;315:4;311:9;305:3;299:10;295:26;356:4;350:3;344:10;340:21;389:7;380;377:20;372:3;365:33;3:399;;;5088:69:33;;;;;;;;;;;;;;;;;;;;;;;14:1:-1;21;16:31;;;;75:4;69:11;64:16;;144:4;140:9;133:4;115:16;111:27;107:43;104:1;100:51;94:4;87:65;169:16;166:1;159:27;225:16;222:1;215:4;212:1;208:12;193:49;7:242;;16:31;36:4;31:9;;7:242;;5071:86:33;;;;;;;;5171:7;5163:73;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5249:27;5269:3;5274:1;5249:19;:27::i;:::-;5242:34;;;;4955:326;:::o;1660:441:93:-;1806:7;1821:13;1837:34;1859:11;1837:21;:34::i;:::-;1821:50;;1894:1;1885:5;:10;;1877:46;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2004:15;:13;:15::i;:::-;:38;;;2043:9;2054:12;2064:1;2054:5;:9;;:12;;;;:::i;:::-;2068:27;2004:92;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;2004:92:93;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;2004:92:93;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;2004:92:93;;;;;;;;;;;;;;;;1991:105;;;1660:441;;;;;:::o;1814:152:120:-;1890:7;1912:12;:49;1952:6;1935:24;;;;;;;;;;;;;;;36:153:-1;66:2;61:3;58:11;36:153;;182:3;176:10;171:3;164:23;98:2;93:3;89:12;82:19;;123:2;118:3;114:12;107:19;;148:2;143:3;139:12;132:19;;36:153;;;274:1;267:3;263:2;259:12;254:3;250:22;246:30;315:4;311:9;305:3;299:10;295:26;356:4;350:3;344:10;340:21;389:7;380;377:20;372:3;365:33;3:399;;;1935:24:120;;;;;;;;;;;49:4:-1;39:7;30;26:21;22:32;13:7;6:49;1935:24:120;;;1925:35;;;;;;1912:49;;;;;;;;;;;;1905:56;;1814:152;;;:::o;899:77:4:-;937:7;963:6;;;;;;;;;;;956:13;;899:77;:::o;1250:92::-;1290:4;1329:6;;;;;;;;;;;1313:22;;:12;:10;:12::i;:::-;:22;;;1306:29;;1250:92;:::o;649:82:83:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;2856:109:33:-;2903:7;2925:35;2947:12;2925:21;:35::i;:::-;2918:42;;2856:109;:::o;1664:101:120:-;1725:7;1747:13;;1740:20;;1664:101;;;:::o;3258:1256:83:-;3359:7;3396:10;3384:8;:22;;3376:84;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3642:36;3681:19;3698:1;3681:12;:16;;:19;;;;:::i;:::-;3642:58;;3733:28;3721:8;:40;;3706:125;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3837:17;3857:14;:12;:14::i;:::-;3837:34;;3923:16;3937:1;3923:9;:13;;:16;;;;:::i;:::-;3892:28;3909:10;3892:12;:16;;:28;;;;:::i;:::-;:47;3877:132;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4075:39;4094:8;4104:9;4075:18;:39::i;:::-;4030:41;4049:10;4061:9;4030:18;:41::i;:::-;:84;4015:164;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4186:14;4218:19;4240:10;4218:32;;4206:284;4273:8;4258:11;:23;4206:284;;4444:39;4464:18;4480:1;4464:11;:15;;:18;;;;:::i;:::-;4444:19;:39::i;:::-;4434:49;;;;4303:18;4319:1;4303:11;:15;;:18;;;;:::i;:::-;4289:32;;4206:284;;;;4503:6;4496:13;;;;;3258:1256;;;;:::o;3185:230:34:-;1103:9:4;:7;:9::i;:::-;1095:54;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3289:1:34;3262:29;;:15;:29;;;;3254:74;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3355:15;3334:8;;:37;;;;;;;;;;;;;;;;;;3394:15;3382:28;;;;;;;;;;;;3185:230;:::o;1092:288:93:-;1103:9:4;:7;:9::i;:::-;1095:54;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1197:6:93;1187:7;:16;1179:65;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1279:7;1250:18;:26;;:36;;;;1320:6;1292:18;:25;;:34;;;;1337:38;1359:7;1368:6;1337:38;;;;;;;;;;;;;;;;;;;;;;;;1092:288;;:::o;1426:151:120:-;1566:6;1509:11;:54;1548:5;1555;1531:30;;;;;;;;;;;;;;;;;;;;;49:4:-1;39:7;30;26:21;22:32;13:7;6:49;1531:30:120;;;1521:41;;;;;;1509:54;;;;;;;;;;;;:63;;;;;;;;;;;;;;;;;;1426:151;;;:::o;2178:266:33:-;2223:7;2238:16;2260:12;518:8;2295:21;;2317:18;;;;;;49:4:-1;39:7;30;26:21;22:32;13:7;6:49;2317:18:33;;;2295:41;;;;;;;;;;;;;36:153:-1;66:2;61:3;58:11;36:153;;182:3;176:10;171:3;164:23;98:2;93:3;89:12;82:19;;123:2;118:3;114:12;107:19;;148:2;143:3;139:12;132:19;;36:153;;;274:1;267:3;263:2;259:12;254:3;250:22;246:30;315:4;311:9;305:3;299:10;295:26;356:4;350:3;344:10;340:21;389:7;380;377:20;372:3;365:33;3:399;;;2295:41:33;;;;;;;;;;;;;;;;;;;;;;;14:1:-1;21;16:31;;;;75:4;69:11;64:16;;144:4;140:9;133:4;115:16;111:27;107:43;104:1;100:51;94:4;87:65;169:16;166:1;159:27;225:16;222:1;215:4;212:1;208:12;193:49;7:242;;16:31;36:4;31:9;;7:242;;2278:58:33;;;;;;;;2350:7;2342:57;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2412:27;2432:3;2437:1;2412:19;:27::i;:::-;2405:34;;;;2178:266;:::o;7159:2198:83:-;7315:4;7356:1;7335:11;:18;:22;7327:65;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;7435:9;:16;7413:11;:18;:38;7398:120;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;7555:1;7532:13;:20;:24;7524:70;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;7601:17;7621:14;:12;:14::i;:::-;7601:34;;7641:26;7670:1;7641:30;;7682:9;7694:1;7682:13;;7677:1658;7701:11;:18;7697:1;:22;7677:1658;;;7751:1;7747;:5;7743:1458;;;7807:11;7819:1;7807:14;;;;;;;;;;;;;;7783:11;7795:8;7801:1;7795;:5;;:8;;;;:::i;:::-;7783:21;;;;;;;;;;;;;;:38;7764:146;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;7957:26;7981:1;7957:9;7967:8;7973:1;7967;:5;;:8;;;;:::i;:::-;7957:19;;;;;;;;;;;;;;:23;;:26;;;;:::i;:::-;7939:11;7951:1;7939:14;;;;;;;;;;;;;;:44;;7920:168;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8139:9;8149:1;8139:12;;;;;;;;;;;;;;8117:9;8127:8;8133:1;8127;:5;;:8;;;;:::i;:::-;8117:19;;;;;;;;;;;;;;:34;8098:138;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8726:1;8693:29;8712:9;8693:11;8705:1;8693:14;;;;;;;;;;;;;;:18;;:29;;;;:::i;:::-;:34;8689:504;;;8914:140;8966:13;8980:25;9003:1;8980:18;:22;;:25;;;;:::i;:::-;8966:40;;;;;;;;;;;;;;9024:11;9036:1;9024:14;;;;;;;;;;;;;;8914:34;:140::i;:::-;8762:292;;:134;8812:13;8826:18;8812:33;;;;;;;;;;;;;;8861:21;8880:1;8861:11;8873:1;8861:14;;;;;;;;;;;;;;:18;;:21;;;;:::i;:::-;8762:34;:134::i;:::-;:292;;;8741:383;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;9157:25;9180:1;9157:18;:22;;:25;;;;:::i;:::-;9136:46;;8689:504;7743:1458;9213:83;9232:11;9244:1;9232:14;;;;;;;;;;;;;;9248:9;9258:1;9248:12;;;;;;;;;;;;;;9262:13;9276:18;9262:33;;;;;;;;;;;;;;9213:18;:83::i;:::-;9208:121;;9315:5;9308:12;;;;;;;9208:121;7725:8;7731:1;7725;:5;;:8;;;;:::i;:::-;7721:12;;7677:1658;;;;9348:4;9341:11;;;;7159:2198;;;;;;:::o;9670:147:33:-;9735:7;9757:55;9810:1;9757:48;9803:1;9757:41;9796:1;9757:34;9779:11;9757:21;:34::i;:::-;:38;;:41;;;;:::i;:::-;:45;;:48;;;;:::i;:::-;:52;;:55;;;;:::i;:::-;9750:62;;9670:147;;;:::o;5672:445:83:-;5792:4;5828:33;5850:10;5828:21;:33::i;:::-;5814:11;:47;5806:94;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5921:44;5944:10;5956:8;5921:22;:44::i;:::-;5906:116;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6111:1;6036:76;;6094:11;6089:1;:16;;6081:25;;6037:7;:19;6045:10;6037:19;;;;;;;;;;;;;;;:31;6057:10;6037:31;;;;;;;;;;;:41;6069:8;6037:41;;;;;;;;;;;;:69;6036:76;6029:83;;5672:445;;;;;:::o;1297:763:33:-;1491:7;1500;1539:1;1523:12;:17;;:38;;;;;1560:1;1544:12;:17;;1523:38;1515:72;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1593:23;1622:25;1653:12;1671:16;295:8;1710:23;;1758:10;1770:12;1784:10;1796:12;1810:8;1820:9;1741:89;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;49:4:-1;39:7;30;26:21;22:32;13:7;6:49;1741:89:33;;;1710:126;;;;;;;;;;;;;36:153:-1;66:2;61:3;58:11;36:153;;182:3;176:10;171:3;164:23;98:2;93:3;89:12;82:19;;123:2;118:3;114:12;107:19;;148:2;143:3;139:12;132:19;;36:153;;;274:1;267:3;263:2;259:12;254:3;250:22;246:30;315:4;311:9;305:3;299:10;295:26;356:4;350:3;344:10;340:21;389:7;380;377:20;372:3;365:33;3:399;;;1710:126:33;;;;;;;;;;;;;;;;;;;;;;;14:1:-1;21;16:31;;;;75:4;69:11;64:16;;144:4;140:9;133:4;115:16;111:27;107:43;104:1;100:51;94:4;87:65;169:16;166:1;159:27;225:16;222:1;215:4;212:1;208:12;193:49;7:242;;16:31;36:4;31:9;;7:242;;1693:143:33;;;;;;;;1850:7;1842:59;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1925:27;1945:3;1950:1;1925:19;:27::i;:::-;1907:45;;1978:28;1998:3;2003:2;1978:19;:28::i;:::-;1958:48;;2020:15;2037:17;2012:43;;;;;;;;1297:763;;;;;;;;;:::o;1970:107:4:-;1103:9;:7;:9::i;:::-;1095:54;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2042:28;2061:8;2042:18;:28::i;:::-;1970:107;:::o;590:127:120:-;661:7;683:16;:29;700:11;683:29;;;;;;;;;;;;676:36;;590:127;;;:::o;4836:396:83:-;4920:7;4944:44;4967:10;4979:8;4944:22;:44::i;:::-;4943:45;4935:76;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5018:14;5035:42;5056:10;5068:8;5035:20;:42::i;:::-;5018:59;;5127:6;5083:7;:19;5091:10;5083:19;;;;;;;;;;;;;;;:31;5103:10;5083:31;;;;;;;;;;;:41;5115:8;5083:41;;;;;;;;;;;:50;;;;5190:8;5178:10;5166;5145:62;;;5200:6;5145:62;;;;;;;;;;;;;;;;;;5221:6;5214:13;;;4836:396;;;;:::o;8917:150:33:-;9001:7;9031:30;9051:2;9055:5;9031:19;:30::i;:::-;9023:39;;9016:46;;8917:150;;;;:::o;1274:134:3:-;1332:7;1358:43;1362:1;1365;1358:43;;;;;;;;;;;;;;;;;:3;:43::i;:::-;1351:50;;1274:134;;;;:::o;834:176::-;892:7;911:9;927:1;923;:5;911:17;;951:1;946;:6;;938:46;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1002:1;995:8;;;834:176;;;;:::o;12182:236:83:-;12303:7;12327:13;:11;:13::i;:::-;:29;;;12357:55;12387:11;12400;12357:29;:55::i;:::-;12327:86;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;12327:86:83;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;12327:86:83;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;12327:86:83;;;;;;;;;;;;;;;;12320:93;;12182:236;;;;:::o;2105:1185:93:-;2532:22;2557:15;:13;:15::i;:::-;2532:40;;2578:10;:16;;;2602:9;2619:18;:26;;;2653:9;2670:18;:25;;;2703:24;2735:25;2768:24;2578:220;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;80:1;75:3;71:11;64:39;52:2;49:1;45:10;40:15;;8:100;;;12:14;2578:220:93;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;80:1;75:3;71:11;64:39;52:2;49:1;45:10;40:15;;8:100;;;12:14;2578:220:93;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;80:1;75:3;71:11;64:39;52:2;49:1;45:10;40:15;;8:100;;;12:14;2578:220:93;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;2578:220:93;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;2578:220:93;;;;2804:13;2820:74;2843:9;2854:10;2866:27;2820:22;:74::i;:::-;2804:90;;2924:1;2907:19;;:5;:19;;;;2900:27;;;;2933:10;:16;;;2957:5;2970:18;:26;;;3004:9;3021:18;:25;;;3054:20;3082:21;3111:20;2933:204;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;80:1;75:3;71:11;64:39;52:2;49:1;45:10;40:15;;8:100;;;12:14;2933:204:93;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;80:1;75:3;71:11;64:39;52:2;49:1;45:10;40:15;;8:100;;;12:14;2933:204:93;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;80:1;75:3;71:11;64:39;52:2;49:1;45:10;40:15;;8:100;;;12:14;2933:204:93;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;2933:204:93;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;2933:204:93;;;;3143:22;3168:15;:13;:15::i;:::-;3143:40;;3189:10;:38;;;3228:9;3189:49;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;3189:49:93;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;3189:49:93;;;;3244:10;:34;;;3279:5;3244:41;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;3244:41:93;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;3244:41:93;;;;2105:1185;;;;;;;;;;;;;:::o;3177:379:33:-;3280:7;3388:19;3424:9;3410:11;:23;;;;;;3388:45;;3470:1;3457:9;3443:11;:23;;;;;;:28;3439:113;;;3488:11;3481:18;;;;;3439:113;3527:18;3543:1;3527:11;:15;;:18;;;;:::i;:::-;3520:25;;;3177:379;;;;;:::o;2178:225:4:-;2271:1;2251:22;;:8;:22;;;;2243:73;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2360:8;2331:38;;2352:6;;;;;;;;;;;2331:38;;;;;;;;;;;;2388:8;2379:6;;:17;;;;;;;;;;;;;;;;;;2178:225;:::o;847:363:120:-;910:7;925:17;945:3;925:23;;1045:19;1081:9;1067:11;:23;;;;;;1045:45;;1127:1;1114:9;1100:11;:23;;;;;;:28;1096:110;;;1145:11;1138:18;;;;;;1096:110;1198:1;1184:11;:15;1177:22;;;;847:363;;;;:::o;5332:143:34:-;5380:11;5418:8;;;;;;;;;;;:27;;;2563:30;;;;;;;;;;;;;;;;49:4:-1;39:7;30;26:21;22:32;13:7;6:49;2563:30:34;;;2553:41;;;;;;5418:51;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;5418:51:34;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;5418:51:34;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;5418:51:34;;;;;;;;;;;;;;;;5399:71;;5332:143;:::o;788:96:0:-;833:15;867:10;860:17;;788:96;:::o;2159:459:3:-;2217:7;2463:1;2458;:6;2454:45;;;2487:1;2480:8;;;;2454:45;2509:9;2525:1;2521;:5;2509:17;;2553:1;2548;2544;:5;;;;;;:10;2536:56;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2610:1;2603:8;;;2159:459;;;;;:::o;4500:128::-;4558:7;4584:37;4588:1;4591;4584:37;;;;;;;;;;;;;;;;;:3;:37::i;:::-;4577:44;;4500:128;;;;:::o;3073:130::-;3131:7;3157:39;3161:1;3164;3157:39;;;;;;;;;;;;;;;;;:3;:39::i;:::-;3150:46;;3073:130;;;;:::o;9227:255:33:-;9311:7;9347:13;9357:2;9347:5;:9;;:13;;;;:::i;:::-;9334:2;:9;:26;;9326:59;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;9391:9;9453:2;9446:5;9442:14;9438:2;9434:23;9428:30;9423:35;;9476:1;9469:8;;;9227:255;;;;:::o;1732:187:3:-;1818:7;1850:1;1845;:6;;1853:12;1837:29;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;80:1;75:3;71:11;64:39;52:2;49:1;45:10;40:15;;8:100;;;12:14;1837:29:3;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1876:9;1892:1;1888;:5;1876:17;;1911:1;1904:8;;;1732:187;;;;;:::o;3419:135:34:-;3465:9;3499:8;;;;;;;;;;;:27;;;1093:28;;;;;;;;;;;;;;;;49:4:-1;39:7;30;26:21;22:32;13:7;6:49;1093:28:34;;;1083:39;;;;;;3499:49;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;3499:49:34;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;3499:49:34;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;3499:49:34;;;;;;;;;;;;;;;;3482:67;;3419:135;:::o;4606:144::-;4654:11;4692:8;;;;;;;;;;;:27;;;2132:30;;;;;;;;;;;;;;;;49:4:-1;39:7;30;26:21;22:32;13:7;6:49;2132:30:34;;;2122:41;;;;;;4692:52;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;4692:52:34;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;4692:52:34;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;4692:52:34;;;;;;;;;;;;;;;;4673:72;;4606:144;:::o;5132:163:3:-;5218:7;5250:1;5245;:6;;5253:12;5237:29;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;80:1;75:3;71:11;64:39;52:2;49:1;45:10;40:15;;8:100;;;12:14;5237:29:3;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5287:1;5283;:5;;;;;;5276:12;;5132:163;;;;;:::o;3718:338::-;3804:7;3901:1;3897;:5;3904:12;3889:28;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;80:1;75:3;71:11;64:39;52:2;49:1;45:10;40:15;;8:100;;;12:14;3889:28:3;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3927:9;3943:1;3939;:5;;;;;;3927:17;;4048:1;4041:8;;;3718:338;;;;;:::o",
  "source": "pragma solidity ^0.5.13;\n\nimport \"../DowntimeSlasher.sol\";\nimport \"./MockUsingPrecompiles.sol\";\n\ncontract DowntimeSlasherTest is DowntimeSlasher(true), MockUsingPrecompiles {}\n",
  "sourcePath": "/Users/beaver/Development/celo/celo-monorepo/packages/protocol/contracts/governance/test/DowntimeSlasherTest.sol",
  "ast": {
    "absolutePath": "project:/contracts/governance/test/DowntimeSlasherTest.sol",
    "exportedSymbols": {
      "DowntimeSlasherTest": [
        43483
      ]
    },
    "id": 43484,
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 43475,
        "literals": [
          "solidity",
          "^",
          "0.5",
          ".13"
        ],
        "nodeType": "PragmaDirective",
        "src": "0:24:114"
      },
      {
        "absolutePath": "project:/contracts/governance/DowntimeSlasher.sol",
        "file": "../DowntimeSlasher.sol",
        "id": 43476,
        "nodeType": "ImportDirective",
        "scope": 43484,
        "sourceUnit": 25171,
        "src": "26:32:114",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "project:/contracts/governance/test/MockUsingPrecompiles.sol",
        "file": "./MockUsingPrecompiles.sol",
        "id": 43477,
        "nodeType": "ImportDirective",
        "scope": 43484,
        "sourceUnit": 44520,
        "src": "59:36:114",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "baseContracts": [
          {
            "arguments": [
              {
                "argumentTypes": null,
                "hexValue": "74727565",
                "id": 43479,
                "isConstant": false,
                "isLValue": false,
                "isPure": true,
                "kind": "bool",
                "lValueRequested": false,
                "nodeType": "Literal",
                "src": "145:4:114",
                "subdenomination": null,
                "typeDescriptions": {
                  "typeIdentifier": "t_bool",
                  "typeString": "bool"
                },
                "value": "true"
              }
            ],
            "baseName": {
              "contractScope": null,
              "id": 43478,
              "name": "DowntimeSlasher",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 25170,
              "src": "129:15:114",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_DowntimeSlasher_$25170",
                "typeString": "contract DowntimeSlasher"
              }
            },
            "id": 43480,
            "nodeType": "InheritanceSpecifier",
            "src": "129:21:114"
          },
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 43481,
              "name": "MockUsingPrecompiles",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 44519,
              "src": "152:20:114",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_MockUsingPrecompiles_$44519",
                "typeString": "contract MockUsingPrecompiles"
              }
            },
            "id": 43482,
            "nodeType": "InheritanceSpecifier",
            "src": "152:20:114"
          }
        ],
        "contractDependencies": [
          26,
          481,
          7598,
          10771,
          11177,
          11993,
          25170,
          38428,
          44519
        ],
        "contractKind": "contract",
        "documentation": null,
        "fullyImplemented": true,
        "id": 43483,
        "linearizedBaseContracts": [
          43483,
          44519,
          25170,
          38428,
          10771,
          11177,
          7598,
          481,
          26,
          11993
        ],
        "name": "DowntimeSlasherTest",
        "nodeType": "ContractDefinition",
        "nodes": [],
        "scope": 43484,
        "src": "97:78:114"
      }
    ],
    "src": "0:176:114"
  },
  "legacyAST": {
    "attributes": {
      "absolutePath": "project:/contracts/governance/test/DowntimeSlasherTest.sol",
      "exportedSymbols": {
        "DowntimeSlasherTest": [
          43483
        ]
      }
    },
    "children": [
      {
        "attributes": {
          "literals": [
            "solidity",
            "^",
            "0.5",
            ".13"
          ]
        },
        "id": 43475,
        "name": "PragmaDirective",
        "src": "0:24:114"
      },
      {
        "attributes": {
          "SourceUnit": 25171,
          "absolutePath": "project:/contracts/governance/DowntimeSlasher.sol",
          "file": "../DowntimeSlasher.sol",
          "scope": 43484,
          "symbolAliases": [
            null
          ],
          "unitAlias": ""
        },
        "id": 43476,
        "name": "ImportDirective",
        "src": "26:32:114"
      },
      {
        "attributes": {
          "SourceUnit": 44520,
          "absolutePath": "project:/contracts/governance/test/MockUsingPrecompiles.sol",
          "file": "./MockUsingPrecompiles.sol",
          "scope": 43484,
          "symbolAliases": [
            null
          ],
          "unitAlias": ""
        },
        "id": 43477,
        "name": "ImportDirective",
        "src": "59:36:114"
      },
      {
        "attributes": {
          "contractDependencies": [
            26,
            481,
            7598,
            10771,
            11177,
            11993,
            25170,
            38428,
            44519
          ],
          "contractKind": "contract",
          "documentation": null,
          "fullyImplemented": true,
          "linearizedBaseContracts": [
            43483,
            44519,
            25170,
            38428,
            10771,
            11177,
            7598,
            481,
            26,
            11993
          ],
          "name": "DowntimeSlasherTest",
          "nodes": [
            null
          ],
          "scope": 43484
        },
        "children": [
          {
            "children": [
              {
                "attributes": {
                  "contractScope": null,
                  "name": "DowntimeSlasher",
                  "referencedDeclaration": 25170,
                  "type": "contract DowntimeSlasher"
                },
                "id": 43478,
                "name": "UserDefinedTypeName",
                "src": "129:15:114"
              },
              {
                "attributes": {
                  "argumentTypes": null,
                  "hexvalue": "74727565",
                  "isConstant": false,
                  "isLValue": false,
                  "isPure": true,
                  "lValueRequested": false,
                  "subdenomination": null,
                  "token": "bool",
                  "type": "bool",
                  "value": "true"
                },
                "id": 43479,
                "name": "Literal",
                "src": "145:4:114"
              }
            ],
            "id": 43480,
            "name": "InheritanceSpecifier",
            "src": "129:21:114"
          },
          {
            "attributes": {
              "arguments": null
            },
            "children": [
              {
                "attributes": {
                  "contractScope": null,
                  "name": "MockUsingPrecompiles",
                  "referencedDeclaration": 44519,
                  "type": "contract MockUsingPrecompiles"
                },
                "id": 43481,
                "name": "UserDefinedTypeName",
                "src": "152:20:114"
              }
            ],
            "id": 43482,
            "name": "InheritanceSpecifier",
            "src": "152:20:114"
          }
        ],
        "id": 43483,
        "name": "ContractDefinition",
        "src": "97:78:114"
      }
    ],
    "id": 43484,
    "name": "SourceUnit",
    "src": "0:176:114"
  },
  "compiler": {
    "name": "solc",
    "version": "0.5.13+commit.5b0b510c.Emscripten.clang"
  },
  "networks": {},
  "schemaVersion": "3.4.13",
  "updatedAt": "2024-03-05T15:18:24.376Z",
  "devdoc": {
    "methods": {
      "checkProofOfPossession(address,bytes,bytes)": {
        "params": {
          "blsKey": "The BLS public key that the validator is using for consensus, should pass proof  of possession. 48 bytes.",
          "blsPop": "The BLS public key proof-of-possession, which consists of a signature on the  account address. 96 bytes.",
          "sender": "The address signed by the BLS key to generate the proof of possession."
        },
        "return": "True upon success."
      },
      "fractionMulExp(uint256,uint256,uint256,uint256,uint256,uint256)": {
        "params": {
          "_decimals": "precision",
          "aDenominator": "Denominator of first fraction",
          "aNumerator": "Numerator of first fraction",
          "bDenominator": "Denominator of exponentiated fraction",
          "bNumerator": "Numerator of exponentiated fraction",
          "exponent": "exponent to raise b to"
        },
        "return": "Numerator of the computed quantity (not reduced).Denominator of the computed quantity (not reduced)."
      },
      "getBitmapForInterval(uint256,uint256)": {
        "details": "startBlock and endBlock must be in the same epoch.The getParentSealBitmap precompile requires that startBlock must be within 4 epochs of  the current block.",
        "params": {
          "endBlock": "Last block of the interval.",
          "startBlock": "First block of the interval."
        },
        "return": "The signature uptime bitmap for the specified interval."
      },
      "getEpochNumber()": {
        "return": "Current epoch number."
      },
      "getEpochNumberOfBlock(uint256)": {
        "params": {
          "blockNumber": "Block number where epoch number is calculated."
        },
        "return": "Epoch number."
      },
      "getEpochSize()": {
        "return": "The current epoch size in blocks."
      },
      "getVersionNumber()": {
        "return": "Storage version of the contract.Major version of the contract.Minor version of the contract.Patch version of the contract."
      },
      "groupMembershipAtBlock(address,uint256,uint256)": {
        "params": {
          "blockNumber": "Block number associated with slashing.",
          "groupMembershipHistoryIndex": "Index used for history lookup.",
          "validator": "Validator that was slashed."
        },
        "return": "Group to be slashed."
      },
      "initialize(address,uint256,uint256,uint256)": {
        "params": {
          "_penalty": "Penalty for the slashed validator.",
          "_reward": "Reward that the observer gets.",
          "_slashableDowntime": "Slashable downtime in blocks.",
          "registryAddress": "The address of the registry core smart contract."
        }
      },
      "isBitmapSetForInterval(uint256,uint256)": {
        "params": {
          "endBlock": "Last block of the interval.",
          "startBlock": "First block of the interval."
        },
        "return": "True if the bitmap has been set for the specified interval."
      },
      "isOwner()": {
        "details": "Returns true if the caller is the current owner."
      },
      "minQuorumSize(uint256)": {
        "details": "Computed in celo-blockchain as int(math.Ceil(float64(2*valSet.Size()) / 3))"
      },
      "minQuorumSizeInCurrentSet()": {
        "return": "Byzantine quorum of validators."
      },
      "numberValidatorsInCurrentSet()": {
        "return": "Size of the current elected validator set."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner.     * NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "setBitmapForInterval(uint256,uint256)": {
        "details": "startBlock and endBlock must be in the same epoch.",
        "params": {
          "endBlock": "Last block of the interval.",
          "startBlock": "First block of the interval."
        },
        "return": "The signature bitmap for the specified interval."
      },
      "setRegistry(address)": {
        "params": {
          "registryAddress": "The address of a registry contract for routing to other contracts."
        }
      },
      "setSlashableDowntime(uint256)": {
        "params": {
          "interval": "Slashable downtime in blocks."
        }
      },
      "setSlashingIncentives(uint256,uint256)": {
        "params": {
          "penalty": "Penalty for the slashed signer.",
          "reward": "Reward that the observer gets."
        }
      },
      "slash(uint256[],uint256[],uint256[],uint256,address[],address[],uint256[],address[],address[],uint256[])": {
        "details": "startBlocks[0] will be use as the startBlock of the slashableDowntime.",
        "params": {
          "endBlocks": "A list of interval end blocks for which signature bitmaps have already been set.",
          "groupElectionGreaters": "Greater pointers for group slashing.",
          "groupElectionIndices": "Vote indices for group slashing.",
          "groupElectionLessers": "Lesser pointers for group slashing.",
          "groupMembershipHistoryIndex": "Group membership index from where the group should be found (For start block).",
          "signerIndices": "The index of the provided validator for each epoch over which the provided intervals span.",
          "startBlocks": "A list of interval start blocks for which signature bitmaps have already been set.",
          "validatorElectionGreaters": "Greater pointers for validator slashing.",
          "validatorElectionIndices": "Vote indices for validator slashing.",
          "validatorElectionLessers": "Lesser pointers for validator slashing."
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "validatorSignerAddressFromCurrentSet(uint256)": {
        "params": {
          "index": "Index of requested validator in the validator set."
        },
        "return": "Address of validator at the requested index."
      },
      "wasDownForInterval(uint256,uint256,uint256)": {
        "details": "Both startBlock and endBlock should be part of the same epoch.",
        "params": {
          "endBlock": "Last block of the interval.",
          "signerIndex": "Index of the signer within the validator set.",
          "startBlock": "First block of the interval."
        },
        "return": "True if the validator did not sign any blocks in the specified interval."
      },
      "wasDownForIntervals(uint256[],uint256[],uint256[])": {
        "params": {
          "endBlocks": "A list of interval end blocks for which signature bitmaps have already been set.",
          "signerIndices": "Indices of the signer within the validator set for every epoch change.",
          "startBlocks": "A list of interval start blocks for which signature bitmaps have already been set."
        },
        "return": "True if the validator signature does not appear in any block within the window."
      }
    }
  },
  "userdoc": {
    "methods": {
      "checkProofOfPossession(address,bytes,bytes)": {
        "notice": "Checks a BLS proof of possession."
      },
      "fractionMulExp(uint256,uint256,uint256,uint256,uint256,uint256)": {
        "notice": "calculate a * b^x for fractions a, b to `decimals` precision"
      },
      "getBitmapForInterval(uint256,uint256)": {
        "notice": "Calculates and returns the signature bitmap for the specified interval. This bitmap will contain a one for any validator that signed at least one block in that interval, and zero otherwise."
      },
      "getEpochNumber()": {
        "notice": "Returns the epoch number at a block."
      },
      "getEpochNumberOfBlock(uint256)": {
        "notice": "Returns the epoch number at a block."
      },
      "getEpochSize()": {
        "notice": "Returns the current epoch size in blocks."
      },
      "getVersionNumber()": {
        "notice": "Returns the storage, major, minor, and patch version of the contract."
      },
      "groupMembershipAtBlock(address,uint256,uint256)": {
        "notice": "Returns the group to be slashed."
      },
      "initialize(address,uint256,uint256,uint256)": {
        "notice": "Used in place of the constructor to allow the contract to be upgradable via proxy."
      },
      "isBitmapSetForInterval(uint256,uint256)": {
        "notice": "Returns true if the bitmap has been set for the specified interval."
      },
      "minQuorumSize(uint256)": {
        "notice": "Returns the minimum number of required signers for a given block number."
      },
      "minQuorumSizeInCurrentSet()": {
        "notice": "Computes byzantine quorum from current validator set size"
      },
      "numberValidatorsInCurrentSet()": {
        "notice": "Gets the size of the current elected validator set."
      },
      "setBitmapForInterval(uint256,uint256)": {
        "notice": "Calculates and sets the signature bitmap for the specified interval."
      },
      "setRegistry(address)": {
        "notice": "Updates the address pointing to a Registry contract."
      },
      "setSlashableDowntime(uint256)": {
        "notice": "Sets the slashable downtime."
      },
      "setSlashingIncentives(uint256,uint256)": {
        "notice": "Sets slashing incentives."
      },
      "slash(uint256[],uint256[],uint256[],uint256,address[],address[],uint256[],address[],address[],uint256[])": {
        "notice": "Slashes a validator that did not sign any blocks for at least `slashableDowntime`."
      },
      "validatorSignerAddressFromCurrentSet(uint256)": {
        "notice": "Gets a validator address from the current validator set."
      },
      "wasDownForInterval(uint256,uint256,uint256)": {
        "notice": "Returns true if the validator did not sign any blocks in the specified interval."
      },
      "wasDownForIntervals(uint256[],uint256[],uint256[])": {
        "notice": "Returns true if a validator has been down for the specified overlapping or adjacent intervals."
      }
    }
  }
}